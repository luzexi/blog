<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>技术人生</title>
 <link href="http://www.luzexi.com/atom.xml" rel="self"/>
 <link href="http://www.luzexi.com/"/>
 <updated>2020-04-12T00:11:43+08:00</updated>
 <id>http://www.luzexi.com</id>
 <author>
   <name>Jesse Lu</name>
   <email></email>
 </author>

 
 <entry>
   <title>思路探讨(四十二) 速学者的天堂</title>
   <link href="http://www.luzexi.com/2020/04/06/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A842.html"/>
   <updated>2020-04-06T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/04/06/思路探讨42</id>
   <content type="html">&lt;p&gt;此文为《微精通》中部分内容的总结和概括，它是一本教大家如何速学，如何高效率学习，如何快速掌握技巧的书，作者提倡博识、速学，抛开‘一万小时学习‘的旧观念，想尽办法用最快最高效最有效的策略去学习。&lt;/p&gt;

&lt;p&gt;这章中作者指出，人类是学习型动物，我们一生不可避免地遇到各种变化，因此我们必须活到老学到老，以保持大脑的基本功能正常运转。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;其实大脑神经系统的生长和改善是贯穿人的一生的，它并不只是某个时期的运作方式，这也是为什么人们常说，现在行动并不晚的原因。&lt;/p&gt;

&lt;p&gt;用大脑可塑性一流学者，迈克尔.莫山尼奇博士话说：&lt;/p&gt;

&lt;h6&gt;大脑塑造是一个物理过程。灰质实际上能变厚也能缩小，神经连接可得到锻炼并加强，也可被削弱或切断。&lt;/h6&gt;

&lt;h6&gt;大脑上这些物理上的改变会体现在能力上的改变，如果我们学会了一个新舞步，就是在大脑上形成一个新的“连接”神经通路。而忘了某人的名字，则说明负责这部分的记忆连接退化或者断开了。因此‘用进废退’这个词语描述我们的大脑非常准确。&lt;/h6&gt;

&lt;p&gt;不过在现在发达的科技下，智能系统越来越多的环境下，我们甚至什么都不需要做，光靠电脑屏幕就能实现媒体的生活方式，这使我们在很多维度都无法得到锻炼，特别是多维度的感官，这使得我们开始经历一场小小的灾难，即无法更容易的受到各维度上的感知训练。&lt;/p&gt;

&lt;p&gt;因此作者认为我们需要更多采用祖先狩猎采集式的自由博识的生活方式来增强我们自己的多维度感知力。&lt;/p&gt;

&lt;p&gt;他举证神经学专家赫布律(Hebb&amp;#39;s law)在一项基础研究的发现：&lt;/p&gt;

&lt;h6&gt;某件事经历的越丰富，花样越多，对感官的刺激越大，这件事情在大脑中留下的印象就越深刻，大脑里形成的连通性就越强。这其实就是增强记忆的比较好的方法，也是提高学习效率的好方法，更是抗衰老的有效手段。&lt;/h6&gt;

&lt;p&gt;如果有一天我们总是依靠人工智能的自动驾驶活着，就容易丧失定位，辨识方位的能力。相反如果我们用自由博识的方式，靠人脑的定位、辨识去旅行，即使使用导航也能让大脑得到锻炼，这样大脑就会充满活力。&lt;/p&gt;

&lt;p&gt;下面的内容作者开始讲述提高学习效率的方式。&lt;/p&gt;

&lt;h6&gt;1.锻炼记忆。&lt;/h6&gt;

&lt;p&gt;记忆方法有很多，作者推荐了记笔记的方式：持续做内容精确的笔记，并附上照片或图片，回忆起来就会容易得多，因为大部分需要回忆的内容都已呈现在眼前。&lt;/p&gt;

&lt;h6&gt;2.书本靠后，感官向前。&lt;/h6&gt;

&lt;p&gt;人们认为以文字为基础、书本为中心、再加评论的学习模式比其他方法的效率要更高，所以忽略了探寻和观察的作用。这是有巨大问题的，这是导致学习效率下降的重要原因，也是很多人最后自我怀疑的原因，即‘为什么，我这么努力而他却能轻轻松松超过我。’&lt;/p&gt;

&lt;p&gt;作者举例如果在我们吃培根前听到它在锅里发出‘滋滋’声，那会使得我们觉得嚼起来更加美味。同样的，如果我们听到不同节奏的音乐，就会联想到各种各样的色彩，这叫色听联觉。因为我们人类大脑能够同时记录声觉、触觉、嗅觉、甚至痛觉，这些感官互相沟通、交融、激发，这些多维度的感官刺激能建立起更加牢固的大脑神经连接，从而让我们对某件事印象更加深刻，记忆更加牢固。&lt;/p&gt;

&lt;h3&gt;还有更快更好的学习方法&lt;/h3&gt;

&lt;p&gt;作者又举证迈克尔.莫山尼奇博士（就是最前面说大脑连接结构的那个）的话：&lt;/p&gt;

&lt;h6&gt;如果事物足够新奇，或者我们足够投入，学起来就会更快。&lt;/h6&gt;

&lt;h6&gt;在这种状态下，刺激神经生长出来的脑源性神经营养因子，会变得更加活跃，并建立更强、更深、更好的神经连接。&lt;/h6&gt;

&lt;p&gt;这里必须跳过一些内容与作者在后面的文章中提到的‘心流’联系在一起来说。&lt;/p&gt;

&lt;p&gt;‘心流’概念由匈牙利心理学家 米哈里.契克森米哈赖提出的，他为此写了本书《心流》正闲置在我的书柜上，其中心思想是:&lt;/p&gt;

&lt;h6&gt;在完全沉浸于活动中时，我们会进入一种意识不到时间的精神状态。我们专注力增强，感觉充满活力。&lt;/h6&gt;

&lt;p&gt;处于心流状态时，我们的思维批判闸门关闭了，因而学得更快。&lt;/p&gt;

&lt;p&gt;作者举例自己在不断尝试用钢笔或毛笔画出完美书法圆圈时，自己能轻松进入半冥想、全身关注的心流状态。在其他技能练习，或语言学习时经过10-15分钟的时间也同样可以轻松达到‘心流’状态。&lt;/p&gt;

&lt;p&gt;为了促进心流状态的实现，作者对心流状态练习了很多次，提出了练习心流几个状态的心得：&lt;/p&gt;

&lt;h6&gt;他用数字标识心流状态，0-无聊，1-放松，2-可控，3-心流，4-兴奋，5-焦虑。用挑战的方式去练习心流体验，首先选出一个有能力攻克的挑战项目，如果这个项目超出了你的能力范围一点点，你会发现自己变得很兴奋，如果超出了你能力范围很多，则会变得很焦虑。反之如果挑战完全处于掌控中，则会觉得感到无聊。&lt;/h6&gt;

&lt;h6&gt;我们为了达到‘3-心流状态’，在练习时，如果觉得这个目标稀松平常，那就加大难度，如果觉得紧张不安，那就降低难度，放慢脚步逐步提高技能熟练度。如果到达并实现了‘3-心流’，那就太棒了，它能让人欣喜若狂，时间仿佛停止在那里，不知不觉4、5个小时就过去了，学习效率就在这段时间里处于比较高的水平。&lt;/h6&gt;

&lt;h3&gt;学习策略的偏见&lt;/h3&gt;

&lt;p&gt;这里谈到了偏见，他说，大脑的可塑性是可以延伸到我们的学习方式上的，换句话说，我们可以学会如何更好的学习。&lt;/p&gt;

&lt;p&gt;其实我们在成长的过程中，我们面对的表扬与责备、鼓励与打击的模式会形成一种不好的偏见，即好像某种学习策略会好于另一种。但事实上这种默认的标准未必对你有效。&lt;/p&gt;

&lt;p&gt;作者举例自己曾经也是偏见学习者中的一位，曾自认为自己是‘实践学习者’，所以买了台新相机后把一本厚1英尺的使用手册丢在一边，看都不看一眼就去摆弄相机。几个月后自己意识到他依然只了解到相机功能的一点点皮毛，于是只好坐下来仔细查看使用手册，并测试相应功能，以后的日子里每次按下按钮或试过新功能后，都会回查使用手册，在手册中努力学习每个相机的功能。&lt;/p&gt;

&lt;h6&gt;读者能否感知到，其实多种学习策略的储备会增强思维流畅性，使得我们能自由转换不同的想法，不同的视角，从而看到问题和事物的不同方面，即便它们是相互对立的，这不仅丰富了我们的眼界也加快了学习的速度也加深了知识的深度。&lt;/h6&gt;

&lt;h3&gt;最后我想提一下作者对增强自信心的看法。&lt;/h3&gt;

&lt;p&gt;他认为‘微精通’(即博识与速学)能帮助你一步步树立信心，不仅让你拥有丰富的技能，更能储备多种学习策略，使得学习效率更高。其中自信心在学习中起着非常重要的作用。&lt;/p&gt;

&lt;p&gt;引用科幻作者 A.E.van Vogt 的话说，“自信是一种简单的能力，是被问到时候能清晰响亮地说出自己名字的能力，是向人温暖致意的能力，是及时向他人表示热烈祝贺的能力。”&lt;/p&gt;

&lt;h6&gt;换句话说，意思是，忘掉内心的感觉，专心表现就行。&lt;/h6&gt;

&lt;p&gt;其实自信就是看你愿不愿意确立目标，并把更多的精力投入到目标需要做的事情上。如果我们缺乏自信，我们可能会认为自己不具备足够的能力，这时我们需要做就是回顾下自己的目标，并且行动起来，投入更多的努力。&lt;/p&gt;

&lt;p&gt;作者说大多数人都没有滔滔不绝自信满满交流或演说的能力，但经过努力克服内心的胆怯后也能达到这种程度。一些极端的例子比如口吃者经过不断投入更多的努力最终成为天才演说家，常在我们生活中发生。&lt;/p&gt;

&lt;p&gt;因此缺乏自信往往意味着我们只是不去尝试，不去尝试的投入更多的努力，最后导致失败的原因往往是根本没有尝试过，出师未捷身先死。&lt;/p&gt;

&lt;h6&gt;书本的内容太多，暂时写到这里。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(四十一) 向内看自己</title>
   <link href="http://www.luzexi.com/2020/03/28/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A841.html"/>
   <updated>2020-03-28T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/03/28/思路探讨41</id>
   <content type="html">&lt;p&gt;我们时常关注太多外界的反应，包括别人的意见和看法，工作的上的任务，领导的要求，妻子的埋冤，周围朋友的相互比较，社会的动态，国家的新闻等等。很少向内看看自己，好好仔细静下心来，看看这个内在残破不堪，年久失修的自己。看看自己在内心上究竟有哪些缺陷，它们是如何产生的，自己恐惧的究竟是什么。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    著有《被讨厌的勇气》《自卑与超越》等经典心理书籍的著名精神病学家阿德勒曾说：“幸福的人用童年治愈一生，不幸的人用童年治愈一生。”
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;向内看，我们更多的看到的是自己内心最深处自卑，它们大多数都是由童年的创伤引起的。但这并不是父母的错，因为没有人是绝对幸福和绝对不幸的，所有人都或多或少的在童年时受到创伤，这是父母无法控制的，他们不知道什么时候会不经意间的伤害到孩子，他们自己都不知道，有时他们无法控制住自己，甚至有时候外界的因素对孩子的影响会比较大。&lt;/p&gt;

&lt;p&gt;因此在《自卑与超越》中阿德勒说：“所有人在童年时都多多少少会受到心灵的创伤，这使得他们在成长过程中都会一直携带着某种特质。”，实际上童年的心灵创伤要比我们想象中的大，即使只是一件在成年人眼中看来很小的事，在孩子心里可能会引起巨大的波澜，甚至会因此受到巨大的创伤。&lt;/p&gt;

&lt;h6&gt;起初这些体会我并不能理解，直到我为人父时后的第3年才开始慢慢的一点点理解。我开始小心翼翼地与孩子们相处，尽管看了各种孩子教育的文章和相关的心理学书籍，但在实际中仍然无法做到妥当，比如我想教孩子们有自律的习惯，但要保持这种习惯总会伴随很多艰难的挑战，于是会在与她们一起“挣扎”与“未来会更好”的之间徘徊，又比如我不得不去外省工作而且至少3-6个月才能与孩子们有1次见面，这或许已经在孩子们心中留下了创伤，因为当她们同班同学说起“我爸爸”时心中会认为爸爸能及时出现在身边，而我的孩子她却不行，她自然会因为这件事而受到伤害。&lt;/h6&gt;

&lt;p&gt;我看着孩子们遇到困难时的样子，看着她们挣扎的样子，时常回想起我童年时的情景，当时我也遇到跟她们一样的情景，我那时受伤的心情到现在我都依然能依稀记起来一些来。相对于那时的父母，现在的我能否做的更好些，发现我也一样存在各种各样的无奈，做不到孩子心中想要的那样，但我唯一能做到的就是与孩子相处时，把她们当成我身边那些成年朋友那样对待。这些事情导致我更发自内心的想了解我的童年创伤究竟给我带来了什么，既然无法避免，我应该如何对待它们。&lt;/p&gt;

&lt;h6&gt;孩童时代的问题导致我最大的问题就是自卑，这么多年我看过也聊过很多人他们触及内心世界的话题，其中也不乏在外人眼里看起来非常优秀的人，他们大都跟我一样时常会因为很多事情而自卑。虽然这些我们所在意的事其实很小，在外人眼里根本不算什么，甚至有时我们自己也知道这不算什么，但就是过不去这道坎，不肯放过自己。&lt;/h6&gt;

&lt;p&gt;孩童时代的创伤更重要的是改变了我看待世界的方式，这种方式没有对错，或许就因为这种创伤导致你看待的世界的方式，在某段时间或某些方面让你赢得了世界。因为事情总是在不断发展的，在某段时间看起来是对的方式，在另一段时间里看起来却是错的，当事情有所转变时我们大部分人很难及时改变，进而导致自我怀疑和自我否定。&lt;/p&gt;

&lt;p&gt;于我而言也是一样，我像大多数刚毕业的人那样一直在不断成长，即使是一个35岁的人，对世界的理解仍然在不断更新，我也认为自己一直落后于世界，因此奋力的追赶着，因为内心总有句话告知我：现在行动还不算晚。&lt;/p&gt;

&lt;h6&gt;人们常说35岁后的人是最脆弱的时候，上有老，下有小，有车贷，有房贷，前有领导，后有小年轻，怕裁员，怕动荡，怕改变。没有人会关心我们的问题，因为我们已经成了社会的顶梁柱，应该是个成熟的独立的综合性个体，不应该去制造问题，相反要主动看到问题并着手去解决它们，而大多数人却不知道我们内心仍然是那个受到创伤的孩子。&lt;/h6&gt;

&lt;p&gt;所以我向内看自己，希望有一天能正确看待自己的自卑，放过自己，与孩童时代的自己和解，真正能于世界一起走上正轨。&lt;/p&gt;

&lt;p&gt;以往我不喜欢小时候那个自卑、敏感、固执己见、自私的自己，想把过去的我和现在的我剥离，但反而那些特质却一直跟在我身上甩不掉。事情在自从我关注我自己孩子的成长后开始转变，我渐渐理解自己是普通人这句话，我应该放过自己，人本身就是不完美的，就因为不完美才美丽。于是我开始拥抱自己的过去，让自己与过去和解，过去的种种不再是我的负担，但仍然有许多我不能释怀的童年往事，弱小的人格暴露无遗。&lt;/p&gt;

&lt;h6&gt;我开始明白存在即合理，包括暴富的朋友，读博士的同学，不断升迁的同事，出国定居的亲戚，甚至包括报复我的敌人，打击我的同事，陷害我的陌生人，都是正常且合理的。我开始认为这些都是我们的世界里合理存在的，我应该放下执念，放过他们，也放过自己，继续走我觉得自己应该走的路，只是在路上我应该把这些意外的因素考虑的周全些，把事办好，把周围的人安置妥当，把人和事考虑周到点，然后默默的走自己的路。&lt;/h6&gt;

&lt;p&gt;我时常观察自己是怎样看待世界的，是否理解错了。我总是这样挑战性的问自己，有没有完全相反的观点。我希望看到更多的视角下的答案，这样才能看到更多可能。&lt;/p&gt;

&lt;p&gt;向内看我看到了我根深蒂固的自卑，人人都有自卑情结，就看我们是如何克服它，更确切的说，应该是如何看待它，因为它可能无法避免。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(三十八) 如何才能保持高效的节奏</title>
   <link href="http://www.luzexi.com/2020/03/22/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A838.html"/>
   <updated>2020-03-22T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/03/22/思路探讨38</id>
   <content type="html">&lt;h3&gt;精力旺盛，活力充沛，健康强壮是一个人走向成功的前提。&lt;/h3&gt;

&lt;p&gt;看了美国叙事史《光荣与梦想》第一部和第二部，罗斯福在后期的健康状况与前中期的对比判若两人，对事物的处理也不再明锐和精明。国内国外事无巨细的指导工作，迫使他放弃了游泳健身，放弃了最重要的支撑工作的身体健康，这个举动得不偿失。生活中常常发生这样的情况，当长远的利益受到了破坏时我们虽然知道但并没有加以归正，这种长期计划在短期内无法看见而看见时则为时已晚，这种做法其实就是短视，是不以长期效益为前提的人生体验。罗斯福是个很厉害的人物，但在60多岁时却也忘了这些简单的道理。我能理解他这么做肯定是迫不得已的，因为大家都是在迫不得已的时间做出的选择。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;现实中很多人都没有弄明白，自己为什么跟不上别人的节奏。有些人的节奏越来越快，为什么？其实并不是他们节奏越来越快，而是我们自己的节奏越来越慢，精力耗尽疲惫不堪导致我们慢下了脚步，甚至停止不前。为什么大家都是人，你我一天都是24小时，8-11小时的工作强度，有些人就能拥有饱满的精力面对困难，行动起来主动积极注意力能很快集中。而我们却感觉跟不上，累得只想快点下班早点休息？我带着这些问题来写文章。&lt;/p&gt;

&lt;h3&gt;强健的身体是所有的前提。&lt;/h3&gt;

&lt;p&gt;活到现在我发现有一副强健的身体是做事和学习的首要之本。我们不是活这几年就没了，我们还需要活40-60年左右，为了能在后面的几年几十年里活的更好，我们应该做好打持久战的准备，有一副强健的身体是持久战的基础，没有它我们什么都不是，即使有钱也得吐回去。&lt;/p&gt;

&lt;p&gt;我认为无论我们有没条件都应该创造条件，每天运动一下以保持身体的强健，为防止衰老也为了防止钝化，更多时候不止如此，还可以是劳逸结合的一部分，以及脑袋换个思路的好方法。&lt;/p&gt;

&lt;h3&gt;主动去劳逸结合&lt;/h3&gt;

&lt;p&gt;我们应该从长远考虑生存问题，不一味的埋头苦干，而要找到自己的节奏。每个人的节奏不一样因此没有统一的答案。这个节奏是身体的节奏，也是自己生活的节奏。&lt;/p&gt;

&lt;p&gt;我们一天24小时，刨去睡觉8小时还有16小时，我们不可能用尽这16小时都在学习或者工作，因为大脑吃不消，短时间内确实可以长时间专注于某事，但长期如此则大脑和身体会剧烈反抗。&lt;/p&gt;

&lt;p&gt;为了能让脑袋在这个持久战中，能持续的正常和高效的工作，我们应该主动去劳逸结合，做到效率优先，否则很容易会让自己看起来很努力，实则什么也没做什么也没记住。&lt;/p&gt;

&lt;h6&gt;记得主动去做劳逸结合，而不是被动的让大脑迫使你休息的那种。我们应该成为大脑的主人，而不是它的奴隶。&lt;/h6&gt;

&lt;p&gt;为了能控制大脑的节奏，我们应该制定自己的习惯和计划。就像人们口中常说的做“时间管理”。没错，不过“时间管理”只是其中很小的一部分。除了时间管理，我们更应该关注“精力管理”，以及习惯养成和计划执行。&lt;/p&gt;

&lt;h3&gt;培养多样性和多元化&lt;/h3&gt;

&lt;p&gt;什么是人身上的多样性和多元化，即你有很好几种感兴趣方向，以及好几种擅长的技能。这样你就能在生活中不断切换着来玩你的兴趣，学习和工作就不会变得枯燥，大脑的接受知识的能力也更加高。&lt;/p&gt;

&lt;p&gt;以前我一直认为单一性会更好，学程序就应该把所有的时间和精力都集中在这项技术上，才能集中力量办大事。这种想法其实是比较狭隘的，多样性不仅能让我们更加愉悦从而使得学习更加高效，也能给我们带来更多的灵感。&lt;/p&gt;

&lt;h6&gt;多样性帮助我们撇开纯粹的娱乐，在娱乐和紧张中间找到中间平衡点。当我们学会了如何放轻松从而提高了效率，高效率又促使我们获得更多成就感，从而更加愉悦，周而复始形成良性循环。&lt;/h6&gt;

&lt;p&gt;多样性有很多种，可以是弹琴，滑板，跳舞，游泳，健身，读书，讨论交流，甚至放风筝，划船，冲浪等。这其中关键点是我们认清什么是适合的尺度，以及如何节制。学会用多样性主动去放松，而不是过分娱乐，损耗了过多精力使自己还没开始学习前就筋疲力尽。&lt;/p&gt;

&lt;h3&gt;确保被动学习和主动学习双向进行&lt;/h3&gt;

&lt;p&gt;很多人忽视了被动学习的重要性，更多人忽视了主动学习的重要性。什么是被动学习呢？我们每天工作生活都会遇到问题，这些问题就是我们被动学习的时间，为了能处理好这些问题，我们每天都在想办法，试探各种途径、方法、可能性，都在为了解决这些生活和工作的问题绞尽脑汁。&lt;/p&gt;

&lt;p&gt;没错我们不知不觉的都在被动学习着，就是生活教育了我们。虽说如此但也有很多没有进行被动学习的人，比如工作和生活非常安逸的人们，他们每天基本上都坐着同样的无聊的事，每天面对都是同样的无聊的情景，没有新的事物注入，没有感兴趣的事，每天过着安逸的生活，他们希望世界永远这样下去不要变化。世界可不是我们说了算的，当真正危机降临时安逸的人们就很容易崩溃。&lt;/p&gt;

&lt;p&gt;我建议没有被动学习的人应该去做主动学习者，为自己的知识储备主动看更多的书学习更多的知识和技能，主动去发掘自己的兴趣，主动去沟通和交流外面的世界。&lt;/p&gt;

&lt;p&gt;主动学习的人也不要忽视了被动学习，工作和生活中的问题，我们也要尽心尽力去尝试各种方法解决，被动学习的力量非常强大，不亚于主动学习。&lt;/p&gt;

&lt;p&gt;为什么这么说呢，人们常说“选择大于努力”，被动学习就是选择后的动作，这里不是说选择好了就不需要努力，而是说在大环境下，在大的浪潮中只要你不断积极处理眼前的问题，被动学习能让走上人生的巅峰。如果没有浪潮可赶，我们最好能和优秀的人一起学习和工作，与他们一起交流，一同进步。&lt;/p&gt;

&lt;p&gt;被动学习和主动学习都同样重要，我们应该确保被动和主动学习的双向进行。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>读书笔记(二) 《如何有效阅读一本书》</title>
   <link href="http://www.luzexi.com/2020/03/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B02.html"/>
   <updated>2020-03-15T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/03/15/读书笔记2</id>
   <content type="html">&lt;p&gt;2020-03-04日买入到手，2020-03-14日读完第一遍并划重点。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;2020-03-15日第二遍读书并筛选重要内容并评论&lt;/p&gt;

&lt;h3&gt;序-&lt;/h3&gt;

&lt;h6&gt;书里的内容都不会被保存在脑子里，这些内容既不能融入你的身心，也不能变成你无形的财富。与此相反，尽管抄完书也不一定能记住全部内容，但某段文章、某个词、作者的语气和思想等等，都会随着抄写时的身体感觉被深深地刻印在头脑和身体里面。&lt;/h6&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;@@@ 想把书中的内容保留在脑子里，就得寻求各种各样的方法来加深印象，比如作者所说的，把自己觉得重要的内容抄到笔记本里，在抄的过程中这种印象就被记录在脑子里。这其实就和我们生活中那些特别美好的或者特别糟糕的回忆会被永远保留在脑子里一样。读书很少有特别美好的回忆，但为了把这些内容保留在脑子里，就得想出各种方法加深印象。&lt;/p&gt;

&lt;h3&gt;前言-&lt;/h3&gt;

&lt;h6&gt;我得记忆力不太好，对亲身经历或是旁观过得事物，印象自然会深刻，但对人名，地名或者读过的文章，就算看多少遍都容易遗忘，读过的书亦是如此。所以我很久以前就意识到了自己在这方面的缺点：我记不得书里的内容，也不太能理解书里的内容。&lt;/h6&gt;

&lt;p&gt;@@@ 其实我也一样，而且我更痛苦的是，很多时候旁观过的也记不住，只有亲身经历过的才会刻在脑子里。这可能彻彻底底的普通人的表现。所以我想方设法的，变着法子的折腾，就是为了让自己能够加深印象，随记，写书，写博客，总结，写框架文档等等，为了让自己能够有更深刻的印象，有更深刻的认识，会花很大的精力和积极主动性去‘折腾’。&lt;/p&gt;

&lt;h6&gt;读书的时候我就会不自觉地想：“所谓‘理解精髓就好’只是个美好的愿望，那是机会主义让自己更安心的理由”。&lt;/h6&gt;

&lt;p&gt;@@@ 确实如此，我当年在学习读书的时候，总抱着这种机会主义的思想，认为我理解精髓就好，就好像别人都是笨蛋似的，其实自己才是笨蛋，不仅笨还懒。&lt;/p&gt;

&lt;h6&gt;只是这样读过书，就等于没有读过。如果只是用眼睛看过，而不是记在脑子里，读再多的书也没有用。&lt;/h6&gt;

&lt;p&gt;@@@ 这不禁让我有点疑问，昨天跟老婆大人讨论，读很多书，和精读几本书各自的意义，我认为，需要两者结合，有时可以快有时可以慢。觉得重要的就精读，觉得不太重要但有兴趣的可以快读，以了解自己感兴趣的内容。&lt;/p&gt;

&lt;h6&gt;读完每一本书，都有扎实的收获。至于一个月能读很多书、读一本书只用几十分钟这样的能力，在这个目标前都是苍白无力的。到达获得扎实的收获这个目标以后，再去训练更快的读书速度，或是买大量书一口气读完，或是锻炼严密的逻辑思考能力，都为时不晚。&lt;/h6&gt;

&lt;p&gt;@@@ 读多读快，确实不一定是什么好事，如果我记不住，时间长了我也会感觉到一种挫败感，我会“想为什么我读了这么多书还是脑袋空空”。所以精读是很有必要的。&lt;/p&gt;

&lt;h3&gt;第一章 用笔记管理读书生活&lt;/h3&gt;

&lt;h6&gt;利用笔记实现的目标：&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    读书不再是’随随便便‘地读，而是带着明确的目的、充满主动性地去读

    真正消化书中的信息，使之成为属于自己的东西

    深入理解书中的要点或思想，并随时拿来参考。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@@@ 很好，我还没尝试过带着如何做笔记这个目标读书的，感觉很有针对性。还没开始读就已经在盘算怎么做笔记了，感觉很容易记住书中的内容，边读边思考把哪些内容放入笔记中，哪些内容是重要的。这种级别的折腾，会给自己在读书的过程中增加很多记忆点，可以更大程度的加深印象。&lt;/p&gt;

&lt;h6&gt;本书所讲的读书方法包括以下四个方面&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    如何选书：怎样选择自己真正想读的书

    如何购书：怎样买到对自己真正有益的书

    如何读书：怎样加深理解、深入思考

    如何活用：怎样运用从书中获得的知识
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@@@ 前两者我不太感兴趣，虽然我都看完了，但跟我想象的差不多，因为自己也是从各种渠道的文章中获得书本的名字，或者在书本中作者的引用和介绍中获得好书，然后把它们放入购物车中，等真的很想看的时候再买回来。后两者我着重的划了很多重点，我想学习作者是如何讲书的内容装进脑子里去的，他是如何做笔记的。&lt;/p&gt;

&lt;h6&gt;介绍笔记的时候方法，可以分为：随想笔记，购书清单，各种报道的剪报，读书笔记。&lt;/h6&gt;

&lt;p&gt;@@@ 我有自己的随记，每次当灵感来了，想说点什么时就写进印象笔记中去，标题通常都是’随记xx‘，xx为数字从1开始到现在已经记到了55。很多中途被我用在了文章中就会删除他们。购物清单我使用淘宝购物车，想买的书都记在那里。剪报的习惯没有，还没感觉到它的好处。读书笔记是我正在学习的事。&lt;/p&gt;

&lt;h6&gt;通过在笔记本上记录的过程，你也可以加深对书的理解，使写下的内容更容易融入自己的身心，促使你把一本书切实地转变为自己的无形财富&lt;/h6&gt;

&lt;p&gt;@@@ 确实，我在如何加深对书的理解和对书中内容的印象要做更多的努力。&lt;/p&gt;

&lt;h6&gt;只要坚持就一定会有效。读书笔记的宝贵内容是你将来总有一天你能用到知识储备。&lt;/h6&gt;

&lt;p&gt;@@@ 坚持读书笔记，让自己获得更多更高效的读书生活。&lt;/p&gt;

&lt;h6&gt;如果在做笔记的过程中感觉很疲惫，创造自己的方式可以激发做笔记的动力，而充足的准备也会让人对笔记本充满留恋。&lt;/h6&gt;

&lt;p&gt;@@@ 疲惫是正常的，为了消除乏味疲惫，我们可以尝试各种自己喜欢的方式去做，比如我就用Macbook来写读书笔记，我喜欢这种方式。&lt;/p&gt;

&lt;h6&gt;作者对普通读书法和笔记读书法做了比较&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    普通读书法在读书时---读书没有重点，需要很长时间。读书过程容易变得单调乏味。读过以后很难提炼要点。

    笔记读书法在读书时---目的明确，读书速度快。通过做记号加深印象。读后可以迅速提炼要点。

    普通读书法在记录时---很难反复阅读。甚至不记得曾经读过，更别说内容了。很难提取信息。

    笔记读书法在记录时---方便反复阅读。通过书写加深印象。以书为媒介丰富思想。

    普通读书法在活用时---很难进行参考。书被遗忘在角落。书太多浪费空间。

    笔记读书法在活用时---便于参考。通过读书笔记吸取知识，并得到提高。可以脱离原书。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@@@ 读书笔记好，加深印象，方便复习，精选知识内容&lt;/p&gt;

&lt;h6&gt;坚持’只选好书，只读好书‘的做法可能不太现实，但只要我们张弛有度地贯彻’好书要细细研读，其他书就粗度略读‘的原则，还是很有可能实现的。&lt;/h6&gt;

&lt;p&gt;@@@ 要张弛有度有度，就像我看的一本书名为《微精通》里写的那样，很多事情都有两个极点，只有平衡好两个极点之间，我们才能真正的精通一门学问。&lt;/p&gt;

&lt;h6&gt;作者介绍了一元化信息管理术，这是在他的另一本书里写的，这里概括的提了些内容。他说，如果整理信息的方法烦冗拖沓，那么是无法坚持下去的。为了能长久地坚持，就要把读书获得的信息不做加工地放在同一个容器里。&lt;/h6&gt;

&lt;p&gt;@@@ 与《微习惯》一书的作者观点一样，首先要容易骗过自己的大脑，如果太烦琐太难，大脑就会第一时间拒绝，意志力消耗过于严重，很难坚持长久。&lt;/p&gt;

&lt;h3&gt;第二章 用购书清单指名购书&lt;/h3&gt;

&lt;p&gt;@@@ 这部分我很快的看过，因为我觉得内容很简单，所以快速的读过就结束了。他里面讲了如何从各种信息渠道中获取书本的名字，了解书本的内容，以便记录到自己的购书清单中。对我来说他里面介绍的最重要的是如何防止冲动购书。他说很多时候我们买书都太冲动，这导致买了很多不必要的书，或者买了太多书看不过来也会有焦虑和挫败感。如果你想买书，就先把书放在购书清单中，冷静下，第二天，或者第二周再来看，这样就会冷静很多。确实如此，对我来说，很多时候都太冲动，甚至有段时间因为买的书太多看不完而焦虑的很，挫败感也时常从中而来，时常会想“我什么时候能看完这些书啊”，以及“别人都看过了我怎么还没看”之类的，让自己有混乱的情绪发生。学习到这种冷静的处理买书的冲动，会让我舒服很多。&lt;/p&gt;

&lt;h3&gt;第三种 用笔记把读过的书变为精神财富&lt;/h3&gt;

&lt;h6&gt;p75 人们经常说“你为别人讲解书中的内容时，才会真正理解它”，把记读书笔记作为目标去读书，得到的效果也是一样。当你以思想输出为前提去读书时，思想输入的质量也会有所提升，而且亲手写文章的好处比口头叙述要多。&lt;/h6&gt;

&lt;p&gt;@@@ 通过传授知识的方式来加深对知识的理解是效率最高的，但这种机会很少。所以我们只能用另一种方式，去记读书笔记，把思想输出为前提去读书，效率会增加很多。&lt;/p&gt;

&lt;h6&gt;p76 当你像这样一边思考一边选择要摘抄的文章时，会不由自主地想多读几遍，尤其是对还没有读懂的部分，。在不断思考、不断重读的过程中，你会惊讶地发现自己已经读过三五遍了。&lt;/h6&gt;

&lt;p&gt;@@@ 强迫自己多读几遍会引起大脑的反感和反抗。我们可以换种方法，一边思考一边选择要摘抄的文章，把注意力转移到选择的内容上，从而骗过要反抗的大脑，在思考和摘抄中发现自己已经重读了很多遍。&lt;/p&gt;

&lt;h6&gt;p78 积极地‘跳读’和‘速读’，保持张弛有度的节奏，可以把更多精力集中在好书的精华内容上。读书的目的是用自己的方式学习，而不是模仿评论家的做法，学习、吸收对自己真正有用的智慧和语句才是最重要的。反过来说，如果有些信息对自己来说无关紧要，那就干脆丢掉。读书的重点是自己认为哪些内容重要，并将其彻底消化。&lt;/h6&gt;

&lt;p&gt;@@@ 还是要积极运用速读、精读，两者张弛有度才是好方法。读重点内容，把精力有效地用在重要的内容上。&lt;/p&gt;

&lt;h6&gt;p80 读书笔记就像日记一样，一旦停止就很难恢复，如果搁置很久，重新开始做笔记时就会产生抵触感。&lt;/h6&gt;

&lt;p&gt;@@@ 所以要每天记一点，就像《微习惯》一样，要每天都保持，如果到读完了再记恐怕大脑的抵触情绪会很大。&lt;/p&gt;

&lt;h6&gt;p81 做好读书笔记，会让自己对书中的内容印象更加深刻。在写读书笔记前提下，读书方法会发生改变，你会进入主动寻找书中“打动人心的内容”的工序。&lt;/h6&gt;

&lt;p&gt;@@@ 做好读书笔记，会使得自己主动去寻找书中的精髓。这点我非常肯定&lt;/p&gt;

&lt;h6&gt;p83 笔记读书法需要我们进行读书、划重点、写读书笔记三个步骤，每个步骤都需要阅读。这种多次阅读留下的印象肯定比普通的阅读深刻好几倍。如果是亲手摘抄，效果会更好。&lt;/h6&gt;

&lt;p&gt;@@@ 读书分几遍，第一遍可以通读，然后通读中或者通读后划出重点，第二遍看着重点写读书笔记，第三遍看着读书笔记写读后感文章。&lt;/p&gt;

&lt;h6&gt;p84-p88 作者给出了几种筛选程序。通读、重读、标记，通读时把读起来不错的折一角，重读时读折过的页仍然觉得很好时再折一角，再重读时仍然觉得值得一读则做好标记。像这样经过思考后再在树上画线，还可以避免书中出现无意义的线条，最后连原文都看不清。又说也可以利用书签来读，通读书签，重读书签，标记书签，分别在通读、重读、标记后休息时夹在书中。&lt;/h6&gt;

&lt;p&gt;@@@ 方法确实不错，但我觉得还是划线方便，第二遍重读时只读划线部分，筛选出来记入笔记，第三遍只读筛选部分，对其再进行筛选后写入读后感，方法越简单越容易坚持，毕竟是长期的过程，操作如果太复杂意志力消耗大，就难以坚持。&lt;/p&gt;

&lt;h6&gt;p90-p99 作者介绍了‘葱鱼火锅’式读书笔记。笔记要写读书笔记的日期、书名、作者名。摘抄时格式为，自己觉得重要的内容和自己对这段的感想，摘抄和评论交替进行，是为了在摘抄以后趁着印象还鲜明写下自己的感想。要是等摘抄完所有文章再去从头开始顺序写评论，一定会忘记之前看文章时的感想。就像每做完一道数学题都要马上对答案一样，自己的思考也需要立即落实到纸上。&lt;/h6&gt;

&lt;p&gt;@@@ 记日期，书名，作者，摘抄和评论交替进行，确实很有效果，加深了印象的同时，方便以后再次翻看。不过我喜欢写在macbook上，所以一般都会先看完一大段，后再把它们摘抄到macbook上去。这种方式对我来说更轻松，切入读书笔记更容易。不过亲手摘抄确实能很大程度加深对书的记忆，也同时加深理解。我应该尝试下。&lt;/p&gt;

&lt;h6&gt;p100 自己当下的想法才是最重要的，摘抄这一段文章的原因和自己当时的想法才是日后值得参考的贵重资料。读书时获得的感想正是原创思想的源泉。这样的一本读书笔记，是以书为媒，创出属于自己的思想舞台&lt;/h6&gt;

&lt;p&gt;@@@ 自己的原创思想最重要，读书笔记能帮助我们做到。虽然我不同意作者说一定要读书的时候下评论，我觉得再读的时候写评论会更好更清晰更理智。&lt;/p&gt;

&lt;h6&gt;p109-p112 重读书评以加深思考。通过自己的书评，我脱离了我习惯的角度，看到了完全不同的一本书。由此可见，对比书评和自己的感想，可以让自己变得不那么绝对化。只要把书评保存好，多读几遍，就可以享受多重得读书体验。&lt;/h6&gt;

&lt;p&gt;@@@ 人在当时的思考方式记录下来是很重要的，这方便日后的反思，我在当时是这么想的，现在这么想的，有什么变化， 为什么会有变化，有没有值得自己借鉴的事情。&lt;/p&gt;

&lt;h6&gt;p115 丢弃不重要的书籍，你会有一丝不舍，因为可能是你与这本书最后的诀别。所以至少要做好读书笔记，在想起那本书时才能有所慰藉，读书体验比书本身重要。&lt;/h6&gt;

&lt;p&gt;@@@ 确实，读书体验比书本重要。如果一些书读过后觉得是浪费时间或者是有问题的，可以丢弃，但最好有些笔记可以留下来，以后还能有点念想，让自己记起还读过这本书，以及书中的内容。&lt;/p&gt;

&lt;h6&gt;p116 请找到那本能够成就自己的书。失落的时候，走投无路的时候，那本书都会成为自己的心灵支柱。我们需要一些能与自己长期共处的书，比如旅行时想读的书、难过时想读的书，而寻找它们正是我们平时读书的目的。通过读书笔记，你就可以找到一本“读了它我就可以做自己”的书，给自己坚实的心理支撑。&lt;/h6&gt;

&lt;p&gt;@@@ 寻找到一本可以和自己作伴很久的书确实很重要，我有一两本书，翻看了很多很多遍也看不厌，每次心情不好时就会拿出来读一下，让自己从悲伤的心情中脱离出来。或者无聊时也是一样，它能置换我的心情，让我更加积极面对生活。&lt;/p&gt;

&lt;h3&gt;第四章 通过重读笔记提高自我&lt;/h3&gt;

&lt;h6&gt;p121 ‘书上写的这些，我是这么理解的...’，‘以此为契机，我想到了这件事...’，对比之下你会发现，只有在读完书后对书中的内容做出反应，进行主动思考，才能真正掌握这本书的内容。读书笔记是一种升华工具，可以让读书活动完成从生搬硬套到独创思维的飞跃。&lt;/h6&gt;

&lt;p&gt;@@@ 这让我想起了以前读书和写作时的情景，我边看书边将书中的内容和我自己的理解写入我的文章当中去，这种主动思考的方式，很容易让我掌握书中的内容。就像作者说的，它可以让独创思维飞跃。&lt;/p&gt;

&lt;h6&gt;p123 向别人表达自己的想法可算是最常见的思维输出。哪怕是你自认为非常了解的事情，一旦需要向别人说明或写下来，还是会出现很多模糊不清的内容。正因为这样，演讲和写作都需要经过全面的准备才能开始。   知道自己要在别人面前表达自己的想法后，我们才会去调查那些我们从未在意过的出处、资料，重新审视自己的观点，建立起系统的知识体系。你会发现，这个补充学习的过程就像从零学起一样，需要花费不少精力。而能够正视这些辛苦的人，最后都是很厉害的人。如果掌握再多的信息，如果不去积极输出，是无法形成知识体系的。&lt;/h6&gt;

&lt;p&gt;@@@ 没错向别人输出知识，输出思想的方式，是学习效率最高的方式，它会逼迫我们去重新审视自己的观点是否正确，是否严谨，逻辑是否清晰。只有不断去输出的人才能真正掌握这门知识。&lt;/p&gt;

&lt;h6&gt;p124 这里作者提到了重读笔记。偶尔还需要把读书笔记完完整整地翻一遍，了解自己到目前为止都读了什么书。这样的反复输出，也可以说是在对自己灌输思想。而通过这样的过程，已经消化过的信息又经历了一次精细的咀嚼。&lt;/h6&gt;

&lt;p&gt;@@@ 这里作者强调了重读的重要性，有了读书笔记在重读时就方便多了。多重读几次，可以让知识消化的更彻底，或许还有新的知识或感兴趣的事物出现。&lt;/p&gt;

&lt;h6&gt;p126-p132 这里提了重读的习惯和重读的好处。感觉进入死胡同或者有些疲劳时习惯把读书笔记拿出来翻翻看。就这样，读书笔记成了我日常生活中一个小小的乐趣。作者还推荐了几本书，卡雷尔.恰佩克的《各种各样的人》，《美国派》，乔治.奥维尔的《一九八四》。你可以通过读书笔记来丰富本次读书体验，也可以偶尔从书架上拿下笔记重读一遍，这样的积累会让你真正掌握书中的内容。如果说读书笔记是为了丰富自己的思想，那么读书笔记的作用就是让自己更有深度。&lt;/h6&gt;

&lt;p&gt;@@@ 重读读书笔记确实重要，既然我把文字写在电脑中，我就可以用打印机的方式，把它们打印出来再看一遍。用打印出来的方式，可以轻松拿在手上，方便阅读，不断去积累书中的精华，丰富自己的思想，提高自己的深度。&lt;/p&gt;

&lt;h6&gt;p133 比如看完一本书的前半部分后就写一部分笔记，写好再去读剩下的部分，会比只是从头到尾读一遍理解得更深刻。&lt;/h6&gt;

&lt;p&gt;@@@ 确实是这样，读书的时候应该读一部分停下来，做一下笔记，再继续读下面的内容。这样对前面的内容理解了，后面读起来理解的就会更快。&lt;/p&gt;

&lt;h6&gt;p140 写读书笔记可以锻炼对文章结构的组织能力、提高思想输出的质量，写作技巧会得到大幅提升。&lt;/h6&gt;

&lt;p&gt;@@@ 确实会这样，在写读书笔记的同时，也是对文章结构的一种观察。对于写作能力，特别是阅读理解能力有大幅的提高。&lt;/p&gt;

&lt;h6&gt;p143 这里作者介绍了一种借用三本书的读书笔记来相互交流辩论的方式写读后感文章并得到了自己的学习经验。这就好像请三位专家围绕某个问题给自己提意见，并让他们进行对比和讨论一样。经过整理总结以后，渐渐就会得出一个假设--‘其实就是这样的吧’但这始终是个假设，还需要重读一遍做过记号的内容和写好的读书笔记，来验证刚才的假设。&lt;/h6&gt;

&lt;p&gt;@@@ 通过三本书的读书笔记，尽然可以做到这样有趣的辩论，真是好厉害。下次我可以试试看。把三本书的读书笔记放在一起，写一部有趣的辩论赛，最后得出一个自己的答案。&lt;/p&gt;

&lt;h6&gt;p163-p165 过去的读书法经常会强调‘读书要多看多重复’。确实，要想加深理解，只能多读几遍。有句话叫‘读书百遍，其义自见’，由此可见重读是加深理解的必要方法。如果有了读书笔记，就可以立即满足这种找书的重读。参考读书笔记，也是一项以笔记内容为线索进行回忆的过程。只要认真阅读笔记，就能在重读时会想起目标书籍里大部分内容。这样看来，根据需要进行重读才是重现实的做法。&lt;/h6&gt;

&lt;p&gt;@@@ 作者提到了重读的重要性，‘读书百遍，其义自见’。利用读书笔记就能快速回忆起自己读过的书，那么重读会更加容易。在想看想读的时候拿出读书笔记来重读，是最佳的重读方式。&lt;/p&gt;

&lt;h6&gt;有兴趣的问题时不要无动于衷，应该马上查找、翻阅笔记。在参考读书笔记的同时回想当时的思路，再与现在更成熟的思想相比较，一定会获得更多的知识和信息。这样的读书方法才能真正让书融入自己的思想，是普通的重读无法比拟的。&lt;/h6&gt;

&lt;p&gt;@@@ 兴趣驱动是关键，有了兴趣要立马执行同样关键。刨根问底的精神在所有领域中都是值得提倡的，在学习中特别有效。&lt;/p&gt;

&lt;h3&gt;第五章 让读书体验更充实的19个技巧&lt;/h3&gt;

&lt;h6&gt;p169-p200&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1.不依赖网络多用参考书。

    2.多读百科全书，百科全书就是一种能将好奇心与思想输出结合起来的工具。

    3.通过订阅来提醒自己，通过订阅杂志来打破大脑内容程式化的协调关系。

    4.书店里不只有新书旧书，还有意外的发现。旧书中那些与现代视角截然不同的思想输入可以让自己对事物的见解得到进一步的飞跃。

    5.由浅入深吃透难懂图书。如果书里的内容太难，实在看不进去，倒不如退一步，看看漫画版，解说版，图解版，精编版，讲演录，交流版，打字版，现代译制版。遇到难题时，不要勉强自己正面强攻，要先找到一个比较简单的切入点再发起进攻。把理解难题的过程或感想写在笔记本里，也是可以促进理解的。

    6.把书堆成山，读书不再难。‘一字板书架’

    7.把名著放在枕边。名著读起来有些乏味，但经过几年的沉淀以后就会知道它的价值所在。经得起时光洗礼的书一定有流芳百世的价值。

    8.常带三本书同时阅读。以应对看腻了某本书的情况。

    9.在家里的每个角落放满书。

    10.去掉外封，让读书变得轻松

    11.杂志要边撕边读

    12.不能小看了有声文学。有声文学可以成为比较难的内容的‘软肋’。有时候针对某个领域，听演讲、看视频比读书更容易。所以有声图书也是种‘软肋’。

    13.准备一支你想珍藏的钢笔。心理学家指出，处于大脑构造的原因，简单作业的过程会带动起人们的热情，使其专心致志投入工作，这就是工作热情。晚上收拾好房间以后反而会变的精神饱满也是因为这个原因。

    14.名言要贴在显眼处

    15.读后感从摘抄开始。‘引用是魔杖’，引用文章不仅可以增加说服力，还更容易组织文章，会让下笔更流畅。

    16.用复印机让读书更方便。

    17.用‘独创版权页’记录书的履历。记录内容有：购买日期，阅读结束日期，标记结束日期，制作读书笔记日期。

    18.书与笔记交叉使用。既然有时候看了读书笔记会想再看看原书，那么自然有时候再看过原书后又会想看读书笔记。就这样，我们可以交叉使用书与笔记，让读书生活变得更加丰富。

    19.书架是读书生活的基地。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@@@ 这里有些我无法体会到，比如，1，2，9，19，11，14，19。我无法感受到这几点，所以我并不认为这几点是多么有效的。另外一些又觉得做起来确实有难度但又感觉很有用，包括，3，4，7，13，18。&lt;/p&gt;

&lt;p&gt;@@@ 其余的我认为是需要的，包括5中的，对比较难懂的书应该由浅入深的方式，这样才不会打击到自信心。6的一字板堆放方式会很有成就感。12的有声图书确实降低了不少门槛，让更多有读书障碍的人慢慢养成读书的习惯包括我自己。15的引用文章可以带来大量的思考，增加文章的说服力。16的复印机确实是帮助我们学习的好帮手，大大便捷了学习途径。17的有助于回忆自己所读过的书当时的情景。18的笔记与原书交叉阅读，会更加快更加深的帮助我们理解书中的内容。&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;第三遍读摘抄和评论的内容并筛选更精简内容并融合成文章&lt;/h2&gt;

&lt;p&gt;未开始&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>励志英文(五) 永不屈服 Unbroken</title>
   <link href="http://www.luzexi.com/2020/03/07/%E5%8A%B1%E5%BF%97%E8%8B%B1%E6%96%875.html"/>
   <updated>2020-03-07T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/03/07/励志英文5</id>
   <content type="html">&lt;iframe frameborder=&quot;0&quot; src=&quot;https://v.qq.com/txp/iframe/player.html?vid=o3077srfgyn&quot; allowFullScreen=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;原文如下:&lt;/h3&gt;

&lt;p&gt;you can’t connect the dots looking forward, you can only connect them looking backwards.&lt;/p&gt;

&lt;p&gt;So you have to trust that the dots will somehow connecting your future, you have to trust in something.&lt;/p&gt;

&lt;p&gt;Your god, destiny, life, karma, whatever. Because believing with the dots will connect down the road, will give you the confidence to follow your heart, even when it leads you off the well-worn path and that will make all the difference.&lt;/p&gt;

&lt;p&gt;Your time is limited so don&amp;#39;t waste it living someone else&amp;#39;s life, don&amp;#39;t be trapped by dogma which is living with the results of other people&amp;#39;s thinking.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t let the noise others opinion ground drown out your own in the voice. You&amp;#39;ve got to find what you love and that is a true for work as it is for your lovers.&lt;/p&gt;

&lt;p&gt;Your work is going to fill large part of your life and the only way to be truly satisfied is to do what you believe this great work and the only way to do great work is to love what you do. If you haven&amp;#39;t found it yet, keep looking and don&amp;#39;t settle. Have the courage to follow your heart and intuition. They somehow already know what you truly wanted to become.&lt;/p&gt;

&lt;p&gt;﻿But you&amp;#39;re going to have some ups then you&amp;#39;re gonna have some downs.&lt;/p&gt;

&lt;p&gt;Most people give up on themselves easily. You know the human spirit is powerful. There&amp;#39;s nothing is powerfull, it&amp;#39;s hard to kill the human&amp;#39;s spirit.&lt;/p&gt;

&lt;p&gt;Anybody can feel good when they have their health, their bills the pain, they have happy relationships. Anybody could be positive then, anybody can have a large vision then, anybody can have faith under those kinds of circumstances.&lt;/p&gt;

&lt;p&gt;The real challenge of growth mentally emotional spiritual comes when you get knocked down. &lt;/p&gt;

&lt;p&gt;It takes courage to act.&lt;/p&gt;

&lt;p&gt;Part being hungry when you have been defeated. That takes courage to start over again.&lt;/p&gt;

&lt;p&gt;Fear kills dreams, fear kills hope, fear put people in the hospital, fear can age you, can hold you back from doing something that you know within yourself that you&amp;#39;re capable of doing but it will paralyze you.&lt;/p&gt;

&lt;p&gt;At the end of your feelings is nothing, but at the end of every principle is a promise. Behind your liitle feelings, it might not be absolutely nothing at the end of your lip feelings, but behind every principle is a promise.&lt;/p&gt;

&lt;p&gt;And some of you and your life the reason why you not at your goal right now, because you just all about your feelings.&lt;/p&gt;

&lt;p&gt;﻿You all on your feelings you don&amp;#39;t feel like wakeing up, so who does.&lt;/p&gt;

&lt;p&gt;Every day you say no to your dreams, you might be pushing your dreams back a whole six months a whole year. That one single day that one day you didnt get up could push your stuff back, I dont know how long.&lt;/p&gt;

&lt;p&gt;Dont allow your emotions to control you, we are emotional but we you want begin to discipline your emotion. If you dont discipline and contain your emotions they wont use you.&lt;/p&gt;

&lt;p&gt;You want it and you&amp;#39;re gonna go all out to have it. It&amp;#39;s not going to be easy when you want to change. It&amp;#39;s not easy if it were in fact easy everybody to do it, but if you&amp;#39;re serious you&amp;#39;ll go out.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m in control here. I&amp;#39;m not gonna let this get me down. I&amp;#39;m going to let this destroy me. I&amp;#39;m coming back, 
and I&amp;#39;ll be stronger and better because of you have got to make a declaration.&lt;/p&gt;

&lt;p&gt;This is what you stand for. You&amp;#39;re standing up for your dreams. You&amp;#39;re standing up for peace of mind. You&amp;#39;re standing up for helping take full responsibility for your life.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s suck where you are and the responsibility that you&amp;#39;re going to take yourself where you want to go.&lt;/p&gt;

&lt;p&gt;You could decide that I&amp;#39;m going to live each day as if it were my last.&lt;/p&gt;

&lt;p&gt;Living your life with passion with some dry.&lt;/p&gt;

&lt;p&gt;﻿That you&amp;#39;re going to push yourself the last chapter to your life has not been written yet. It doesn&amp;#39;t matter about what happened yesterday, it doesn&amp;#39;t matter what happen to you what matters what do you wanna talk about.&lt;/p&gt;

&lt;p&gt;This year I will make this goal become a reality. I wont talk about it more. I can, I can, I can.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(三十七) 良性循环的建立与恶性循环的改善</title>
   <link href="http://www.luzexi.com/2020/02/29/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A837.html"/>
   <updated>2020-02-29T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/02/29/思路探讨37</id>
   <content type="html">&lt;p&gt;良性循环和恶性循环存在于我们生活工作的方方面面，我们应该如何建立良性循环，如何改善恶性循环呢。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;最近看了很多大萧条时期的文章，在那个时间段的人，面对大环境不好的情况折射出来的无力感，造成人们的沮丧和低落情绪弥漫着整个社会。&lt;/p&gt;

&lt;h6&gt;一个人情绪的低落，还可以通过被周围人和环境的影响而恢复活力，但整个社会的情绪低落导致的，更加根深蒂固的情绪下沉，让那些本来可以开开心心的情绪，被周围的环境拉下去变得低沉。&lt;/h6&gt;

&lt;p&gt;对于整个社会的情绪我们能做的很少，我们能做的就是管理好个人的情绪与积极性，从而用积极的一面来影响周围的人和事。&lt;/p&gt;

&lt;p&gt;那么怎么才能使自己恢复活力，恢复情绪，或者应该说是恢复对生活的信心呢？&lt;/p&gt;

&lt;h6&gt;要努力让自己高兴起来，即使假笑也行，让情绪假假的恢复正常运转。大部分时候情绪都是通过行动来恢复的，即使是假笑也会慢慢变成真笑，从而恢复情绪的低落。&lt;/h6&gt;

&lt;p&gt;为了恢复情绪，我们可以在行动上改变下自己，比如可以看喜欢看的电影特别是喜剧电影，让自己情绪可以假装被恢复。也可以去运动一下(如果是一直在运动的人，可以改变一下运动方式)，让行动和汗水恢复理智。可以去与很久没见的朋友见上一面，聊聊过去开心的往事。&lt;/p&gt;

&lt;h6&gt;万事开头难，想要人从一个环境或情绪中跳出来，是比较困难，我们应该更加积极去做第一步，起了个开头后面就会好多了，就像动摩擦比静摩擦要在阻力上要小的多那样，动起来就没有静止的那么糟糕了，我们可能看到的会是另一番景象。&lt;/h6&gt;

&lt;p&gt;先动起来开个头，只是第一步，我们要做的还有很多。想建立良性循环，我们需要坚持的理念比较重要，这个理念可能是’自律‘，抑或可能是’吃得苦中苦方为人上人‘，等等。理念一定要是积极的，正向的，才是能够被我们接受或者被大众接受从而影响到我们自己，形成一个良性的反馈循环。&lt;/p&gt;

&lt;p&gt;建立从无到有的良性循环的难度比从恶性循环开始改善再到转换到良性循环要容易的多。我们身边到处都有这样的恶性循环的存在，包括我们自己的生活在内，情绪常失控，失落的情绪环绕在身上，懒惰懒散的习惯，夫妻不和，家庭不和，父子不和，父女不和，工作事业不顺，同事间的隔阂，团体内形成的恶性竞争，甚至是国家之间的仇视等，我们冷静下来想想其实就是日积月累的过程，在某个点彼此的观点存在了差异，后面机缘巧合下没有去进行改善，最终导致越来越严重，最终一发不可收拾形成了一个恶性循环。&lt;/p&gt;

&lt;p&gt;说实在，恶性循环确实很难处理。但是如果你能冷静下来，跳出恶性循环，看到人的本质和本性，从利他的角度去处理事情的话，就会慢慢得到改善。&lt;/p&gt;

&lt;p&gt;这需要我们有足够的耐心，耐力，毅力，冷静的态度，开放的心态，还包括抗压能力等。即使拥有这样的多种能力，也不是百分之百处理好日就积累起来的恶性循环的，有时我们应该放过自己。当我们去处理这种类型的恶心循环时，我们需要放平心态，告诉自己要尽自己努力去改善循环，尽力去改变各个环节的情绪、环境、氛围，但也要时刻做好准备告诉自己这是场持久战，即使自己败下阵来也是正常的，只要我做了贡献，接下去的工作将会交给另一个人继续工作，这样长年累月的积极改善，总会有看到出头的日子的，我即使调节失败也已经为整个事情做出了应有的贡献。&lt;/p&gt;

&lt;h6&gt;我们应该首先调整自己，不能让自己卷入恶性循环，自己不能崩溃，才有希望对事情做出大的贡献。在积极面对的同时，我们也应该评估，恶性循环的改善百分比，以及还需要多久才能彻底扭转局面，好让自己有些许心理准备。&lt;/h6&gt;

&lt;h6&gt;最后我们应该吸取教训，我们在改善恶性循环的同时，应该吸取教训，如何在以后的工作生活中，避免这样的事情发生。也同时要对建立生活中和工作中的良性循环的工作增加更多的积极性，用利他心态去做事，用平和的心态面对失败，释放压力，减少焦虑，让自己可以做事时更专心更专注，思路更宽广，心态更开放，接纳度更高，包容性更强，更能明事理。世界都是有规则的，遵循规则，推动规则，导向成功才是真正的有意义的。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(四十) 对赚钱和学习的一些思考(下)</title>
   <link href="http://www.luzexi.com/2020/02/27/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A840.html"/>
   <updated>2020-02-27T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/02/27/思路探讨40</id>
   <content type="html">&lt;h3&gt;前面讲的都是概念层的东西也可以认为是战略方向，下面讲些战术上的。战略上要对，只有方向正确了，战术才有效。即做人要做对，做事才能事半功倍。&lt;/h3&gt;

&lt;p&gt;这里除了拥有深度的技能外，还需要我们拥有一些普世的能力，即对世界的理解，和对人性的洞察力，这是两种能力是基本功，基本功不扎实，我们的天花板(瓶颈)就会比较低。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;其实赚钱最容易的方法是，你专心做好自己喜欢的事，做的深点做的专一点至少比普通人做深做精2-3倍，肯定能赚到钱，温饱基本不用愁。&lt;/p&gt;

&lt;p&gt;如果你能做精好几样那就会很厉害。只是我们的精力和意志力有限，对一样事物做到比普通人精2-3倍不容易。但仍然有人能做到拥有多种比较深的能力，为什么呢？我们来探讨下。&lt;/p&gt;

&lt;h6&gt;困难到底在哪？&lt;/h6&gt;

&lt;p&gt;1.持续的积累&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;各种能力的学习和练习，需要长年累月的积累。

这是一个不可逾越的障碍，没有谁能在短时间里获得某种成就，都是靠着长时间的积累，成年累月的坚持才有突出重围的机会。

很多人都是十几年，甚至是几十年的积累才有现在的成就、知识、智慧(包括经验)、人脉(包括人气、信誉)、团队、家庭(或家族)。

原来我对有效积累有些固执，以前我认为有些积累是无效的(比如我一个程序员去学如何做裁缝，学习如何制作一件衬衫)，但我现在不这么认为了，现在我认为这是学习能力的体现，你对你敢兴趣的事情，能，并且，愿意，抽出时间来去学习到达精通，这是非常难能可贵的表现。现在反而担心的有人对自己敢兴趣的事物冷漠不懈，不去埋头研究而只在浅层的皮毛上看看，没有学习的欲望，这是比较不好的表象。

有时候想想，这人生确实是一场马拉松赛跑，有的人是兔子，有的人乌龟，也有极少数人是兔子的速度乌龟的毅力(只能望其项背)。确实一山还有一山高，人比人比死人，不过没关系，大部分人(99.9%)要么是乌龟要么是兔子，我们总是停停走走，而且越往上走越难越慢，还会时不时倒退。我们有的是机会和时间来追赶他们，就像古人说的，任何时候奋发图强都为时不晚，我们只需静下心来，沉淀自己。

持续的积累很难，不是我们笨而是真的意志力不够用。每天的坚持都要消耗许多意志力，导致当意志力消耗殆尽时，我们就再也无法坚持下去了，放弃是大概率事件。

为什么有人就能坚持下来呢？我原来一直以为是人与人之间的意志力是有区别的。后来慢慢改正了这个观点，特别是看了《微习惯》这本书后，再经过我实践的检验和对理论知识的梳理，明白了这本书所教我的’如何建立习惯‘的技巧相当有用。其实坚持可以不用这么痛苦，越痛苦得坚持越难以持续下去，一意孤行还容易导致心理扭曲。书中主要讲解了，大脑对难度比较高的事物抵制的过程，书中教会我们应该如何运用巧妙的方法骗过大脑的抵抗，让困难的习惯养成计划变得简单轻松。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.对人性的洞察&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;不经历风雨怎能见彩虹，我们都是人，脱离大众的思维不容易，能从上帝的视角洞察人性的通常不是一般人，需要积累足够多的知识，并且受到足够多的挫折，经历足够多的的曲折，才能比别人看到更多的东西，感受到更多别人感受不到的体会。

我们需要深刻和彻底的明白，这个世界是多样化的，是个由60亿不同种类的人创造而成，每个人都是一个种类而不是某个种类中的一个，他们有自己的共性也有自己的不同。

理解这点，才能明白包容和同理心占据了整个人性洞察的重要位置。能看到多少个角度的心里状态，能明白和理解多少人，才是洞察人性的重要标志。

比如《乌合之众》这本书就很好的诠释了人性在大众舆论中的表现。

以及股票的K线图。如果你对股票的K线图有过深入的学习的话，会发现K线图其实就是大众的情绪表现，大众情绪的起伏与宣泄从K线图上表现的淋漓尽致。

包括我前面说的，人与人之间的信任机制，也是有用的洞察人性的途径。我们建立信任，也同时在摧毁信任，它既是强大的也是脆弱的，洞察其中的奥秘，能让我们受益匪浅。

我们要看清世界是扭曲的，但也要明白这种扭曲是正常的，人性是永远不会改变的，但也要明白人性是可以理解和包容的。

在一个朋友的签名上写着，“贪安稳就没有自由，要自由就要历些风险，只有这两条路”。确实如此，他洞察到了世界和人性，我们这个世界不存在安稳的自由，虽然我们一直在追求这个目标，但大部分时候我们都身不由己。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.积极勤奋，自我学习自我完善&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;我们无论如何都逃不开积极和勤奋两个关键点，更多时候积极乐观的态度是长胜的重要关键。倘若没有积极乐观的一面，消极和悲观的情绪只会让你的思维变得更狭窄并且固步自封。倘若在积极乐观的同时如果能做到谨慎行事，就会有更好的效果。

勤奋则是所有做人做事的基础，它是所有基础的基础，就像我们脚下的地面一样，勤奋就是这个地，没有地面我们就会坠入万丈深渊。我们要保持这个地，有的人时时刻刻保持勤奋，地就厚，起点会高一点，有的点不是很勤奋，地就薄，起点会低一点。

高低，前后，这种你追我赶的事，大部分时候，落后一点没有关系，甚至落后很多也无妨，现在开始追赶从来都不会晚。我们更多时候是被自己的情绪打败，失落，焦虑，害怕，自责，导致最终放弃自己，丧失勇气，丧失信心，丧失动力。

勤奋虽然是基础，但它是有顶的，这个顶部其实很容易就达到，只靠勤奋是行不通的，天花板会比较低，很快就会到达瓶颈点。

因此我们还需要自我学习和自我完善，以及不停的学习和不停的完善。我从一本名为《微精通》的书中受到颇多的启发。

它说，见多识广的人对生活有更浓厚的兴趣和更强的能力，并且更快乐，更坚强。他们思维开放而不因循守旧。创业，创新，创造性活动都需要有博识的眼光。博学存在于科学的顶峰，生机勃勃。

它说，人不仅要从知识的深度上学习到更精湛的技艺，还要从广度上学习到更多种的思路并将这些知识融合在一起创造出更多的解决方案。

我很认同书中的观点，在工业发展还没这么发达的时期，那时我们分工并没有这么明确，一个设计师一个工程师，其实什么都要懂，什么都要学，所以那时很多科学家都拥有惊人的创造力，而现在我们的分工太过于明细，每个人只关心自己那条线上的知识线，那时完全不够的，或者说这样是不能拥有良好的创造力的。

其实拥有多条线的兴趣和知识，就能拥有更多的机会从多个方向上获得成就感，良好的正向反馈是继续向前迈进的关键，不间断的获得来自各个方向的成就或赞扬，就能随时保持积极乐观的心态面对学习，对学习这种本身看起来枯燥乏味的事情就会显得更有趣。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4.积极的寻求正向的反馈&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;积极的寻求正向的反馈尤为重要，它是我们坚持下去的很大一个关键。正向的鼓励与成就能很大程度上促进我们的继续坚持下去继续往前奔跑，就像孩子们在学习的过程中，每完成一项任务，每拼完一个积木城堡，每完成一次作业，每练习一次钢琴，每听完一次线上的英语课，都要寻求父母的鼓励和赞扬那样，我们成年人也同样需要，并且需要的更多。

但大部分时候没人会来‘表扬’你，鼓励你，赞同你，我们就得自己主动需求反馈。这其实是种能力，一种寻求自信，寻求肯定的能力。

虽然很多时候我们的成就实在太小，根本不起眼，没有人会在意，我们一方面要明白自己的积累还不足够的多，另一方面要积极改变自己寻求正向反馈的方式，比如分享的文章太枯燥，一方面要改善自己的写作技巧，另一方面就试着多加点有趣的图片，又比如英语学习太枯燥，那就把有趣的英文文章朗读出来分享给大家听，得到大家的赞许，又比如写代码太枯燥，那就把每日写代码的页面用视频记录下来，加入歌曲和快进，大家看了都会觉得可爱有趣生动。

积极寻求正向反馈很多时候需要我们以不害臊的心态去面对。这很正常，每个人的视角和理解程度都不同，不是每个人都认同你，有时甚至完全没有人欣赏你也不用气馁，我们练的是内功，自己欣赏自己最重要，做到自己能够做的，今天就足够了。剩下的便是别人的事。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;最后总结，积累是我们沉淀自我的最好方法，及早的认识到这个人生的重要方向对我们来说至关重要。但成年人的世界已经不再是那么简单，随着年龄的逐渐增大，我们需要处理的事情越来越多，越来越复杂。积极勤奋是积累过程中最重要的法宝，积极勤奋还不够，自我学习与自我完善也是我们需要提倡的，在这个过程中，枯燥乏味和疲惫阻碍着我们，于是积极的寻求正向反馈就变得尤为重要，它是击败枯燥乏味和疲惫的重要武器。&lt;/h6&gt;

&lt;h6&gt;我们都想变得更强大。什么是强大？我一直在琢磨这件事，是学习成绩高吗，还是编程技术好，还是财富多，还是名誉大，还是权利大，还是眼界广阔，还是知识渊博，还是生活中的智慧，这些都不是绝对的，地球上60亿人每个人都不一样，而且每个人在人生中的每个阶段也不一样，有些人有知识，有些人有钱，有些人有智慧，有些人有眼界，我们不需要做到这么完美什么都要，只要在当下这个阶段里拼尽自己全力以赴就足够，少一点欲望，多一点积极的态度，不要辜负了当下这个阶段的时光。当下全力以赴的你就是对人生下一个阶段最好准备工作。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(三十九) 对赚钱和学习的一些思考(上)</title>
   <link href="http://www.luzexi.com/2020/02/15/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A839.html"/>
   <updated>2020-02-15T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/02/15/思路探讨39</id>
   <content type="html">&lt;h3&gt;一直来提倡要想尽办法开拓自己的思路，对事物，对世界，对人性，我们都要想方设法从远到近，从宏观到微观各个角度观察思考。但人的思维定式很难突破，很多事物、概念，想法我们都无法理解。没关系，我们还有时间，总能想明白的。不要被自己的情绪打败，静下心来，沉淀自己。&lt;/h3&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;疫情面前我又重新对人生的道路审视了一下，当然健康是人生的第一重要的事情，没有人本身这个主体其他都是没有意义，所以健康最重要。只有健康肯定也满足不了我们日益增长的需求，所以我们探讨下生活，看看怎么走才，正确，得体。&lt;/p&gt;

&lt;p&gt;我们把生活想的太单纯，比如说很多人认为成年后都是为了挣钱而活，这个想法就太单纯。享受愉快的生活不需要多少钱，有些情况下不需要钱，而且有不少情况’钱‘只会破坏愉快的生活。&lt;/p&gt;

&lt;h6&gt;我们生活在群体里(人是群居动物，离不开群体)，对群体有帮助有贡献的受人追捧，对群体有害的则受人排斥。钱在这个大群体中代表了信任度(有些时候因为人性的问题它变的有点扭曲，但大体上都是按照正规的方向在运转)，就像教科书里写的，钱是国家的信用货币，是建立国家信用体系的重要指标。&lt;/h6&gt;

&lt;h5&gt;因此如何赚钱其中一个比较重要的要点是，如何取得别人的信任，特别是如何取得陌生人的信任，只有取得了他们的信任，他们才能相信你，愿意把钱交给你买你的产品，信任和金钱的关系就体现在这里。&lt;/h5&gt;

&lt;p&gt;人生的复杂度是随着年龄逐级上升的，从只关心吃，后来关心玩，再后来关心成绩的竞争，再后来关心男女关系，人际关系，再后来关工作技能，工资收入，婚嫁，升职加薪创业，孩子，教育，家族兴旺，40-50岁的生存，退休，儿女的婚嫁，孙子孙女的养育等等等。&lt;/p&gt;

&lt;p&gt;我们一直在一步步往更加复杂的层级走去。于是我的想法也越来越复杂，就像我以前写的关于很多我所想我所做的那些文章那样，想法越来越多，思路越来越复杂，但最终所有复杂的事物都还是归于简单的几个道理来支撑，这就是我们人类的思维模式，从简单到复杂，再从复杂归于简单。&lt;/p&gt;

&lt;h6&gt;我不是有钱人，也没赚到钱，我希望与大家一起共同摸索与探讨。我知道最终的那个点其实是简单的，只是现在我还没领悟到，比如曾经就有前辈告诉我只要好好工作就行了生活就会美好，简单的道理蕴含着复杂的思考与经历，那时我无法理解，这些年通过自己在生活遇到的错误与正确后通过自己的思考与反思才能理解他们。其实我也知道赚钱的’奥义‘最终肯定归于一个或几个简单的道理，只是现在我无法理解，我正在一步步逼近真相。&lt;/h6&gt;

&lt;p&gt;随着我的自律生活的加强，我的人生体验也有更高的境界，与之带来的思路也更加开阔，最近感悟到，赚钱有许多种方法，当你的能力的种类变多了，各种能力上有比较高的深度时，加上你对这个世界的洞察，特别是对人性的洞察到了一个比较深的程度时，会发现其实赚钱并不难。所以我现在才明白为什么超级学霸(超强能力者)喜欢学习这么多不同种类的技能，因为他们知道能力越多，面对困难和问题时思路越多，解决问题的可能性越大，成功的概率就越大。&lt;/p&gt;

&lt;h3&gt;上面讲的都是概念层的东西，下篇讲战术。战略上要对，只有方向正确了，战术才有效。即做人要做对，做事才能事半功倍。&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>防电话骚扰防呼死你日志</title>
   <link href="http://www.luzexi.com/2020/01/31/%E9%98%B2%E7%94%B5%E8%AF%9D%E9%AA%9A%E6%89%B0-%E9%98%B2%E5%91%BC%E6%AD%BB%E4%BD%A0%E6%97%A5%E5%BF%97.html"/>
   <updated>2020-01-31T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/01/31/防电话骚扰-防呼死你日志</id>
   <content type="html">&lt;p&gt;前段时间去二手市场买了个东西，因为东西是坏的给退了回去，没想到收到满满恶意，对方在网上买了呼死你恶意骚扰服务开始攻击，模拟各种国外的电话打进来来骚柔你，还可以定时或自动打，一直持续了好几个月，现在还在持续。前面被骚扰时也很心烦，但后来慢慢变得从容了，也积累了一些经验，能够防治这些‘垃圾’人的恶意。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;我本身是防为主，而不是攻，所以只谈防，至于攻则另说，因为攻容易上火，容易影响生活和工作，我不希望影响正常的生活和工作。如果对方有进一步激进或违法的行为则再进行反击。我也记录了很多对方的证据，通过打电话报警和去派出所报警的方式试图通过法律手段警告和阻止对方，也曾想过用律师诉讼的方式将对方绳之以法。但警方辩解说难于取证收效甚微，律师则费用比较大，所以不到万不得已不会浪费金钱和时间去与之对抗。&lt;/p&gt;

&lt;p&gt;下面是我总结的一些防治措施:&lt;/p&gt;

&lt;h6&gt;1.开启陌生人来电挂断设置，只有电话簿中的人才能打通和接听。&lt;/h6&gt;

&lt;h6&gt;2.取消移动的境外电话提醒业务。具体查百度或者拨打10086人工服务器要求取消。&lt;/h6&gt;

&lt;h6&gt;3.下载防骚扰大师，或者手机管家等app，录入允许拨通的电话，比如快递等。这个只能防住被录入的骚扰电话，没有被录入的无法拦截&lt;/h6&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;h6&gt;4.开通移动的高频骚扰电话防护措施。拨打10086人工服务器要求开通。这个是针对高频次电话的号码进行屏蔽的，感觉不是很有用。&lt;/h6&gt;

&lt;h6&gt;5.开启移动电话服务公众号，“机伶”，防御各种骚扰。她里面有个服务是开启国外电话防骚扰，但也不能完全屏蔽呼死你的商家，他们会利用一些漏洞，用模拟普通手机的电话来骚扰你。所以呼死你服务是防不胜防，开启陌生人屏蔽是必要的手段。‘机伶’可能只有移动服务商才提供，联通或电信的暂时不清楚需要问下客服。&lt;/h6&gt;

&lt;h6&gt;6.开通移动的电话验证业务，需要拨号验证才能打通电话。(有效期3天)可在移动app中开通，也可以在‘机伶’这个微信小程序中开通，只有3天有效期，我们可以设个闹钟，每三天去打开一下就可以。开启电话验证的服务功能后，计算机自动拨打的电话是进不来了，但人工手动骚扰还是可以通过的，所以只是提高了骚扰的时间成本和精力成本。提高了骚扰的时间成本和精力成本就足够了，因为对方为了购买这个防骚扰服务还需要付出金钱成本，所以三重成本会增加他撒气的困难。&lt;/h6&gt;

&lt;h6&gt;7.最后还是要与对方拼意志力，会使用这种下三烂手段的人意志力通常都不强，所以即使没能完全能防住对方骚扰，也可以耐心等待对方意志力耗尽，不停的骚扰我们的同时，他的意志力也同时以比较快的速度在消耗，对他的日常生活会有很不利的影响，设想谁会在负面情绪的生活中活得开心呢，越不开心意志力越薄弱。&lt;/h6&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;h6&gt;最后总结下，因为网络电话可以模拟任何电话号码，所以要防住‘呼死你’电话骚扰，首先要开启陌生人电话屏蔽，取消境外电话提醒业务，然后开启移动服务器提供商的防骚扰服务让其需要手动拨号才能骚扰，再下载一个防骚扰软件，比如防骚扰大师或腾讯手机管家，最后用类似‘机伶’这样的服务，屏蔽国外电话。这些方式和手段的目标都是提高骚扰者的成本，时间成本，精力成本和金钱成本。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>励志英文(四) Believe 相信</title>
   <link href="http://www.luzexi.com/2020/01/30/%E5%8A%B1%E5%BF%97%E8%8B%B1%E6%96%874.html"/>
   <updated>2020-01-30T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/01/30/励志英文4</id>
   <content type="html">&lt;iframe frameborder=&quot;0&quot; src=&quot;https://v.qq.com/txp/iframe/player.html?vid=s3056u8mp4w&quot; allowFullScreen=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;我常常会自己写鸡汤来激励自己，如今想换个方式来做此事，用励志英文来替代。励志英文挺不错的，每次看后都热血澎湃，对生活和工作的理念都非常赞，时常引起我的共鸣，我对每篇文章的体会和重要内容的理解和翻译都会在文章中记录下来，供大家参考和鉴赏。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;第一段就引起了我的共鸣：在你成功的道路上最大的障碍不是缺少文凭，不是缺少背景，不是缺少金钱，而是缺少你对自己的信心。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    The biggest single obstacle standing in your way to success, it&amp;#39;s not lack of education, it&amp;#39;s not lack of background, it&amp;#39;s not lack of money, it&amp;#39;s lack of belief in yourself. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第三段也能让我感同身受，乐观积极的人与悲观被动的人，在人生的道路上有着巨大差别：在通向成功的道路上最重要的是你的态度。态度决定你的人生。拥有乐观积极思想的人最终赢得了胜利，充满悲观思想的人最终收获了失败。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    The most important thing to winning is your attitude about you. It&amp;#39;s your attitude about life. Positive thinkers win, and negative thinkers lose.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第六段一击即中我心，我们首先应该从精神层面上来赢得世界，才能最终在现实中战胜困难：最重要的是你的激情。你获胜是因为你的心，而不是你的头脑。你获胜是因为你的情感，而不是逻辑。通向胜利的道路上最重要的你有多相信自己。你有多相信自己可以赢得胜利，有多相信许多好事发生在你身上，有多相信你是特别的人。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    The most important thing is your passion. You win with your heart, hot your head. You win on emotion, not on logic. The most important thing to winning is the power of believing in you. The power of believing that you can win. The power of believing that good things will happend to you. The power of believing that you&amp;#39;re special.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;原文如下：&lt;/h3&gt;

&lt;p&gt;The biggest single obstacle standing in your way to success, it&amp;#39;s not lack of education, it&amp;#39;s not lack of background, it&amp;#39;s not lack of money, it&amp;#39;s lack of belief in yourself. I believe the most important thing to winning is you.&lt;/p&gt;

&lt;p&gt;I believe the most important thing to winning is you. It&amp;#39;s what kind of person you are, what kind of husband you are, what kind of wife you are, what kind of dad you are, what kind of mom you are, what kind of example you are, see folks, you are it. You are everything.&lt;/p&gt;

&lt;p&gt;The most important thing to winning is your attitude about you. It&amp;#39;s your attitude about life. Positive thinkers win, and negative thinkers lose.&lt;/p&gt;

&lt;p&gt;Whatever you expect to happen with confidence happens. The fundamental key to success is what you believe is true for yourself. Not what you want, It&amp;#39;s what do you believe.&lt;/p&gt;

&lt;p&gt;The first thing you&amp;#39;ve gotta do to get what you want is believe that you can. Believe it&amp;#39;s possible for you to have it. And if there&amp;#39;s someone out there that has done it, why the fuck ain&amp;#39;t it possible for you? We&amp;#39;re all born with the same amount of time in a day, and anything that they can do, you can do too.&lt;/p&gt;

&lt;p&gt;The most important thing is your passion. You win with your heart, not your head. You win on emotion, not on logic. The most important thing to winning is the power of believing in you. The power of believing that you can win. The power of believing that good things will happend to you. The power of believing that you&amp;#39;re special.&lt;/p&gt;

&lt;p&gt;Believe that you can, and once you want something and believe that you can get it, you gotta block out all the noise around you that&amp;#39;s gonna tell you you can&amp;#39;t do it. Don&amp;#39;t listen to all that shit. Just believe that you can.&lt;/p&gt;

&lt;p&gt;The difference in being great and average and ordinary, the difference in winning and losing, is this little much. And this much is what I call a special kind of attitude. A special kind of mental toughness. A special kind of hunger to be somebody. &lt;/p&gt;

&lt;p&gt;The single most important thing you&amp;#39;ll develop in your entire lifetime is a positive attitude. Focus on how your life will be better, and what your life will look like when you get what you want. You do this, and your brain will think that by helping you get what you want, you&amp;#39;re moving away from pain and towards pleasure.&lt;/p&gt;

&lt;p&gt;Greatness isn&amp;#39;t achieved by that one massive thing you do, it&amp;#39;s those tiny little consistent baby steps we take every single day that add up to achieving that goal.&lt;/p&gt;

&lt;p&gt;Amazing things happen when you believe you have something. Your brain actively goes out to make it happen. Believe that you can do it, and work hard to get it, and it&amp;#39;s yours.&lt;/p&gt;

&lt;p&gt;You can do anything you want in this life, anything at all. But you gotta believe it&amp;#39;s possible and work your ass off to get it. &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>励志英文(三) Destiny 命运</title>
   <link href="http://www.luzexi.com/2020/01/18/%E5%8A%B1%E5%BF%97%E8%8B%B1%E6%96%873.html"/>
   <updated>2020-01-18T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/01/18/励志英文3</id>
   <content type="html">&lt;iframe frameborder=&quot;0&quot; src=&quot;https://v.qq.com/txp/iframe/player.html?vid=a0689csu8is&quot; allowFullScreen=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;我常常会自己写鸡汤来激励自己，如今想换个方式来做此事，用励志英文来替代。励志英文挺不错的，每次看后都热血澎湃，对生活和工作的理念都非常赞，时常引起我的共鸣，我对每篇文章的体会和重要内容的理解和翻译都会在文章中记录下来，供大家参考和鉴赏。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h6&gt;这是一篇鼓励我们朝着梦想前进的文章。&lt;/h6&gt;

&lt;p&gt;开头中，鼓励我们向更高的成就前进，“If you feel you have something to give, if you feel that your particular talent is worth developing, is worth caring for, then there&amp;#39;s nothing you can&amp;#39;t achieve.”，如果你感到有什么需要去奉献，或者如果你感觉你的聪明才智值得去开发值得去关注，那么世界上就没有你达不到的成就。&lt;/p&gt;

&lt;p&gt;在中间里，鼓励我们超越自己，“When you grow up, you tend to get told that the world is that the way it is. Your life is just to live your life inside the world, trying not to bash into the walls too much. That&amp;#39;s a very limited life. Life can be much broader, once you discover one simple fact: Everything around you that you can life, was make up by people that were no smarter than you. Once you learn that, you&amp;#39;ll never be the same again. ”，当你长大后，往往会被告知世界就是这样的。你的人生就在这样的世界里，不要试图超越这个范围太厉害。其实这是个非常受束缚的人生。人生可以更加广阔些，一旦你发现一个简单的事实：你周围所有你能生活的，是被那些不比你聪明的人创造出来的。一旦你领悟到这点，你将不再是以前的你了。&lt;/p&gt;

&lt;p&gt;最后，鼓励我们创造历史。“Let me share something with you: History is being read, But it is also being written by people with imagination. Dont stop, Dont stop, Dont stop running toward your dream! ”，让我与你分享些事：历史一直在被阅读，但它也一直在被充满想象的人书写。不要停，不要停，不要停止奔向你的梦想。&lt;/p&gt;

&lt;h3&gt;原文如下：&lt;/h3&gt;

&lt;p&gt;The two most important days in your life are the day you are born and the day you find out why.&lt;/p&gt;

&lt;p&gt;I do not belive, that any of us have dreams,
that were not given to us, for the purpose of accomplishing those particular dreams.&lt;/p&gt;

&lt;p&gt;If you feel you have something to give, if you feel that your particular talent is worth developing, is worth caring for, then there&amp;#39;s nothing you can&amp;#39;t achieve.&lt;/p&gt;

&lt;p&gt;So applaud you for your dreaming, for your running toward your dream. I applaud you for believing in yourself, because that&amp;#39;s what life is about: stretching and challenging, looking for ways that you can begin to improve yourself.&lt;/p&gt;

&lt;p&gt;Not only it is possible for you to have your dream, but it&amp;#39;s necessary. It&amp;#39;s necessary that you go for what is yours in the universe.&lt;/p&gt;

&lt;p&gt;Logical, practical thinking says &amp;#39;you can&amp;#39;t do it today&amp;#39;&lt;/p&gt;

&lt;p&gt;But if you want to produce unreasonable results in your life, like living your dream and taking charge of your destiny, you&amp;#39;ve got to be an unreasonable person.&lt;/p&gt;

&lt;p&gt;When you grow up, you tend to get told that the world is that the way it is. Your life is just to live your life inside the world, trying not to bash into the walls too much. That&amp;#39;s a very limited life. Life can be much broader, once you discover one simple fact: Everything around you that you can life, was make up by people that were no smarter than you. Once you learn that, you&amp;#39;ll never be the same again. &lt;/p&gt;

&lt;p&gt;If it&amp;#39;s hard, why do people do it? Why did they go? People who climb mountains. Why would Nelson Mandela give up 26 years of his life? Why do people do that? Even though it&amp;#39;s hard, it&amp;#39;s worth it. It&amp;#39;s worth it!&lt;/p&gt;

&lt;p&gt;The people who go after their stuff, what makes it worth it? It&amp;#39;s gotta be your passion! &lt;/p&gt;

&lt;p&gt;You gotta love it, and it&amp;#39;s gotta be what you are supposed to do! You do what it is you supposed to do. You supposed to build something, you supposed to create something. I dont know how to do it. LEARN!&lt;/p&gt;

&lt;p&gt;Let me share something with you: History is being read, But it is also being written by people with imagination. Dont stop, Dont stop, Dont stop running toward your dream! &lt;/p&gt;

&lt;p&gt;Our deepest fear is not that we are inadequate. Our deepest fear is that we are powerful beyond measure. It is our light, not our darkness, that most frightens us. &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>励志英文(二) Today is yours</title>
   <link href="http://www.luzexi.com/2020/01/12/%E5%8A%B1%E5%BF%97%E8%8B%B1%E6%96%872.html"/>
   <updated>2020-01-12T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/01/12/励志英文2</id>
   <content type="html">&lt;iframe frameborder=&quot;0&quot; src=&quot;https://v.qq.com/txp/iframe/player.html?vid=t0503w4dby9&quot; allowFullScreen=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;我常常会自己写鸡汤来激励自己，如今想换个方式来做此事，用励志英文来替代。励志英文挺不错的，每次看后都热血澎湃，对生活和工作的理念都非常赞，时常引起我的共鸣，我对每篇文章的体会和重要内容的理解和翻译都会在文章中记录下来，供大家参考和鉴赏。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h6&gt;这是一篇激励自己的文章，情景是当前运动比赛、考试、测试、考验前的心理准备，长久以来的辛苦要在今天得到结果了，赛前的心理暗示对自我充满信心的鼓舞。&lt;/h6&gt;

&lt;p&gt;文中说，我们已经做好了准备迎接这一刻 “All the training, the hours of preparation, the pain you felt, they have brought you to this moment, they are the armor that you wear.” 所有的训练，所有的准备，所有的忍耐过来的痛苦把我们带到了现在这个时刻，我们已经穿上装甲做好最后的准备。&lt;/p&gt;

&lt;p&gt;然后说，质变即将到来 “It&amp;#39;s about taking all those hours and turning them into the best version of yourself. Today is about being better than you ever dreamed you could be.” 所有训练和花费的精力都将我们变为更好的自己，我们梦想中能达到的更好的自己将要到来。&lt;/p&gt;

&lt;p&gt;接着说，抛开怀疑的态度坚定自己， “Let people doubt you they&amp;#39;ll see with time. Let the obstacle stand, you will run right through them. Let everything in this universe tell you no, you have already told yourself yes.” 让怀疑我们的人们看看我们的实力，让障碍停止在那里，我们会垮过去。当整个世界都对你说不行的时候，我们已经知道自己是可以的。&lt;/p&gt;

&lt;p&gt;然后说，是时候抬升自己了，&amp;quot;you were the god of your world, And in your world you write the script. There is no tired, you left that in the wait room years ago. There is no one sure, push yourself to exhaustion every day took care of that, There is only when, when do you rise up.&amp;quot; 我们是自己世界里的神，可以编写自己的剧本。前几年我们在等候室里不知疲倦。没人会知道我们每天精疲力尽会如何，只有当我们抬升自己时才会感觉到。&lt;/p&gt;

&lt;p&gt;最后说，我们总有一天会向世界证明自己，“It will not disappear with time, it will live on, you have earned today. Go make sure the world knows.” 所有的努力都不会消失，它会存留在那里，我们已经赢得了今天，让世界知道我的努力。&lt;/p&gt;

&lt;h3&gt;以下就是全文：&lt;/h3&gt;

&lt;p&gt;The thing about time is that comes and goes. Tomorrow will make today a distant memory And as quick as you were here, you&amp;#39;ll be gone. What&amp;#39;s in front of you is an opportunity to make right now something you&amp;#39;ll never forget. You have the ability to write history to create a story that will live with you forever.&lt;/p&gt;

&lt;p&gt;Think back to all the days leading up to today. All the training, the hours of preparation, the pain you felt, they have brought you to this moment, they are the armor that you wear.&lt;/p&gt;

&lt;p&gt;Right now is about execution. It&amp;#39;s about taking all those hours and turning them into the best version of yourself. Today is about being better than you ever dreamed you could be. These are the moments you live for.&lt;/p&gt;

&lt;p&gt;Gone are the insecurities the doubt the disbelief, this day is yours. Look your opponents in the eye, they cannot give what you can, you have built this opportunity piece by piece, you have created an unstoppable force and it&amp;#39;s finally time to reveal that to the world.&lt;/p&gt;

&lt;p&gt;Let people doubt you they&amp;#39;ll see with time. Let the obstacle stand, you will run right through them. Let everything in this universe tell you no, you have already told yourself yes.&lt;/p&gt;

&lt;p&gt;The hardest thing in this world to stop is someone who knows they&amp;#39;ve won before the game is started. This is your everything, embracing. Make it, so that you never forget today.&lt;/p&gt;

&lt;p&gt;you were the god of your world, And in your world you write the script. There is no tired, you left that in the wait room years ago. There is no one sure, push yourself to exhaustion every day took care of that, There is only when, when do you rise up.&lt;/p&gt;

&lt;p&gt;There some a point when you just given too much, you sacrifice is too great, to accept anything but the very best, everything else is noise. This is your day.&lt;/p&gt;

&lt;p&gt;It will not disappear with time, it will live on, you have earned today. Go make sure the world knows.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(三十二) 2019年我做了哪些金融投资与经济系统的学习和思考</title>
   <link href="http://www.luzexi.com/2020/01/10/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A832.html"/>
   <updated>2020-01-10T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/01/10/思路探讨32</id>
   <content type="html">&lt;p&gt;2019年我做了哪些金融投资与经济系统的学习和思考。&lt;/p&gt;

&lt;p&gt;2019年是继2018后经济回暖的一年，2018年的萧条景象还记忆忧心，在2020年1月这个点我们来回顾和总结下2019年我对金融体系的思考。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/life/idea-talking32-1.png&quot; alt=&quot;且慢投资组合&quot;&gt;&lt;/p&gt;

&lt;p&gt;(图为我在且慢上的投资方案)&lt;/p&gt;

&lt;p&gt;2019年我在金融投资上只有买股票这个操作，从股债房，三个投资方向来看，房价确确实实已经到了一个瓶颈，房价的上升本来就需要国民钱包的支撑，如果国民钱包没有鼓起来，再上升就是不理性的，也更容易出现崩盘的机会，值得庆幸的是国家控制住了房价，以‘房住不炒’的理念来抑制房价过大的起与伏，为中国未来的发展又一次扫平了障碍。&lt;/p&gt;

&lt;p&gt;为什么说扫平障碍呢？基建是国家的命脉，是国家兴旺发展的基础，但房市太活跃升值太快，导致大量资金流入房地产而不是基建，就会伤害实体经济，因为钱是有限的，往房地产市场流入的多，那么在实体经济里的钱就会变少(如果股市太旺也是同样的道理，钱都用来投机倒把)，渐渐的房地产就会成为国家经济支柱，炒房成了国民赚钱手段，这不是道德问题，而是未来发展的问题，钱都去搞房地产的话实体经济就没钱创新和发展，因为没钱在实体经济导致实体经济的发展和创新受到了阻碍。&lt;/p&gt;

&lt;h6&gt;房地产毕竟是靠涨价来吸引投资市场的，而且涨价是有限的，价格不符合国民钱包就会很危险，价格除了涨还有跌，跌下来时伤害的不只是老百姓的钱包，还有国家的经济和对国家经济的信心，所以国家对此处理的很谨慎，也处理的很对，智囊团很厉害。所以总的来说现在房价已经涨到了国民的钱包无法支撑的阶段了，价格的瓶颈也在此停住了，但国家经济仍然支撑的房地产，因此没有恐慌，也没有必要恐慌，只是恢复了平静而已，我们继续各自工作和等待，暂时来说房地产的机会还需要等待。&lt;/h6&gt;

&lt;p&gt;对股市来说2019年是值得欢喜的一年，很多人在2018年所遭受的损失在2019年这一年里弥补了回来，甚至有人还有盈余。股市是国家经济的晴雨表，总体上反应了国家的情况，所以其实可以根据今年的股市来判断我国经济回暖的情况是比较好的。&lt;/p&gt;

&lt;p&gt;2019年里我买了些股票也卖了些股票，对于平民百姓来说想靠股市赚钱就得学习很多知识，分析很多问题，亲身去接触企业，感受企业经营状况。&lt;/p&gt;

&lt;h6&gt;今年我终于明白了，为什么要亲自去感受企业的产品，最好能亲自去他们厂里、店里去感受他们的经营状况。我也开始抛售了一些我不了解的企业的股票，和一些我自己亲自使用过并且体验很差的产品的企业，买入了更多我使用过他们家产品，并且有很好体验的企业。&lt;/h6&gt;

&lt;p&gt;今年我更多的感受到了股票市场的情绪化，更深刻的记住了短期的情绪是导致的价格波动主要原因，于是我开始去情绪化，更加冷静和沉着的看待股票投资。比如，我不再被涨价所心动，也不再被下跌所恐慌，而更多的关注横盘平稳阶段的投资点。&lt;/p&gt;

&lt;h6&gt;我也开始明白，对一个企业来说，财报的局限性，财报是给老板看的，是给大众看的，是给懂事和股东看的，是给领导看的，要好看，否则要你这个财务总监干什么，做账当然是要漂亮一点，所以财报是人为的’漂亮报告‘。但也有实在兜不住的时候，那就破罐子破摔把前两年的问题都暴露出来，一次性把最坏的情况兜底也是常有的事。所以’财报‘不可全信，只能看个大概，30%的内容还是有用的，比如固定负债，流动负债，以及负债率，还有现金流和固定资产，其余的只能相信30-50%。&lt;/h6&gt;

&lt;p&gt;我也开始意识到股东结构的重要性，以及股东作用的局限性。这个机构，这个自然人，为什么要投这个公司，而且还投的这么多，进了前10的股东名单，他们肯定分析过，慎重考虑过，否则不会花这么多钱去玩这场没有把握的游戏，他们是否考虑了5-10甚至20年的投资回报，因此在这个点买入。但即使买入，股东的局限性也很多，因为在市场面前他们无法力挽狂澜，即使红杉集团或腾讯或阿里进入了10大股东列表那又怎么样，只能说他们分析后有几成的把握5年左右有大回报的可能，但毕竟他们的投资有撒网式的嫌疑，把投资额度分成了20-100份，我们看到的只是其中一份而已，对他们而言这一份没有起色还有其他的，因此他们并不是孤注一掷。另外他们看准的是投资回报，还是股票长期分红，或者领域上的战略投资，也是与我们的投资目标有相当大的不一样的。我们老百姓更多期望的是当下的收益，而他们则有多种情况的考虑，并不一定全为了收益，还有战略。&lt;/p&gt;

&lt;h6&gt;我也开始意识到，对股票的理解应该换个角度看问题，比如从宏观角度看股市，股市毕竟是跟随着国家的经济发展而不断前进的，如果国家经济衰落或不稳定，那么股市就会下行或动荡，因此我们都在赌国家兴旺发达，如果国家遭遇灾难或困难，我们就大概率是赌输的。&lt;/h6&gt;

&lt;p&gt;这些都是我们只投资自己国家的视角下的，因为身在祖国，投资祖国是必然的。我们无法决定国家的命运，那么有没可能去别的国家投资股票，现在有老虎证券可以投资美股、港股，不过外汇有额度每年35w左右额度，对于平民百姓也够用了。如果在国内投资国外可以通过基金，或使用ETF来投资纳斯达克指数，标普指数，港股指数，以及德国30的指数。说实话国家并没有封死平民百姓日常的对外投资，只是封锁了富豪的资产外流和转移。&lt;/p&gt;

&lt;h6&gt;从国际经济条件来讲，第一霸主的美国和我国确实有很大的差距，从当下看投资美股确实是稳当的，但这个差距也一直在缩小。但天下哪有稳当的生意，稳当安逸永远都是最危险的处境。难道美国就一直会霸主下去吗，中国就不可能取代它或与它一起成为霸主吗？谁都不知道，所以假如我们投资了美股，则要担心美国是否会犯错，也要担心中国的崛起是否会影响到美国的发展。从这个角度看我们去投资美国，会有诸多问题。&lt;/h6&gt;

&lt;p&gt;况且我们不在美国，不是生活在美国，并不了解美国，就像我前面说的，我们不了解一个企业，却买了它的股票一样，心中的疑惑和担心会与日俱增。我觉得是得不偿失的，我们毕竟是人，首先是要寻求自己内心的平静，如果心是平静的，做事就会更加坚定，投资也是这样，越是了解的越能平静对待，越是陌生的越是猜疑担心。所以我决定主战场还是国内，除非中国腐败到有一天我对国内彻底绝望。&lt;/p&gt;

&lt;h6&gt;我们再换个角度看股市，从涨跌的方向看股市。我们说过股票的涨跌，短期看情绪，中期看业绩，长期看国家经济。那么我们能不能用情绪的涨跌来赚钱呢？答案是能却非常很难，首先因为机会很少，一年可能就出现1次，甚至可能一次都没有，其次很难感受到情绪的反转点，需要老练的经验和冷静的头脑分析，最后选股还要谨慎。对于想躺着赚钱的人来说，根本是不可能的，这种操作需要大量的时间学习和经验积累，专业程度比较高。我的体会是两个点的位置可以尝试，一个是恐慌情绪结束时，一个是回暖情绪起来时，其他时候都不合适，涨跌互现会让我们心力交瘁，得不偿失。&lt;/h6&gt;

&lt;p&gt;再换个角度看问题，其实投资过程中，不只是标的的问题，我们自身也存在诸多的变化，例如，工作上的，生活上的开支使得现金流紧张时，我们自然需要从稳定的角度看现有的整体资金投资比例，可能需要缩小一部分投资金额用于生活。生活中各种层出不穷的情况千变万化，并不是我们想象的有余钱就投这么简单，我们需要平衡生活与投资，需要预留备用金以备正常生活和以便不时之需，因此投资并不是简简单单的买入卖出，它需要根据我们当前生活的状态动态平衡，只有找到平衡，生活才能如意的走下去，如果我们连生活都无法顺畅的走下去，投资带来的情绪会让我们走入地狱。不过，没有什么困难是过不去的，只是大部分人都难过情绪这关，柳暗花明又一村的事常有，我们量力而为。&lt;/p&gt;

&lt;h6&gt;最后我们再来换个角度看问题，分析和执行保持一致的难度。假设说，现在我们确认并且肯定某个买入的机会，无论是股票还是房产，我们是否能做到坚定的去执行，是否应该全力去执行。我想这个问题肯定每个人都不一样，执行前首先我们要清楚没有什么是机会百分百肯定的，如果你想清楚了后果那么无论是否执行都应该坚定得去做。&lt;/h6&gt;

&lt;h6&gt;每个人的理念都不同，我的理念只是其中一个，在我的理念里，我们应该首先保证当前生活能够继续下去的前提下来投资，确保即使彻底失败也不至于无法生活，投资和生活和工作一样是个循序渐进的过程，长期的痛苦才是真痛苦，我们需要用毅力慢慢磨平长时间的痛苦，让快乐回归正途，就像我提倡的在工作上的积累那样，不要幻想短期的就能收到巨大的回报。有很多人就不这么认为，没有对错，有人就会不惜一切代价去赌一把，我们称他们为‘亡命之徒’，就像梭哈那样ALL In一把结束一切痛苦，他们这所谓的痛苦都太短暂根本无法磨练人的意志，只是一味的图个简单方便，痛苦是短了结局不怎么样，当然也有成功的时候，就会一夜暴富传为佳话，但这种毕竟是少数，大部分都是要么抗不过去还没看到黎明就败下阵来，要么就是彻底失败走上邪路从此坑蒙拐骗，要么自毁前程断送性命。&lt;/h6&gt;

&lt;p&gt;我们来看债券市场中2019年并不是很好，继2018后2019的雷暴虽然相对减少了但依然有不少。我们现在应该只关注国债和国家的逆回购比较安全，可以存余额宝等货币基金以度过冬天等待春天。&lt;/p&gt;

&lt;p&gt;投资之道当然没有这么简单，如果能简单到只要随便学习一下就能掌控，那就不是人类社会的。他需要深度学习，不仅如此还需要耐心等待机会，并且在机会到来时小心谨慎的执行。其实没有那么精彩、风光，只是回头看再编一编夸大一下就成了神话。&lt;/p&gt;

&lt;h6&gt;今年我也发现了一个我一直忽视的事，其实我们所有人无论哪个阶层的人，都一直在找能’永远‘躺着赚钱的投资标的(即使只是看起来是‘永远‘)，但能永远躺着赚钱的投资标的，大部分要么很贵、性价比不高，要么是个坑。其实没有完美的投资标的，都是有这样那样的缺陷，我们还是不要盯着缺陷，而是要看是否合适我们自己，我们关注的是什么，是长期分红，是租金，还是当下的涨幅，是短期还是长期，是保值还是想升值，每个人的心态、状态和理念都不一样，找到合适我们的，并且找对标的的长处，是我们的重中之重。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(三十六) 英语励志文章1</title>
   <link href="http://www.luzexi.com/2020/01/08/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A836.html"/>
   <updated>2020-01-08T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/01/08/思路探讨36</id>
   <content type="html">&lt;p&gt;半年前我把这篇文章打印了下来，每天读一遍读了很多遍，每次读都有不同的体会，文字是视频中的对话。很多时候当我们还没到那个高度的时候，催眠自己也不妨是一种途径。&lt;/p&gt;

&lt;iframe frameborder=&quot;0&quot; src=&quot;https://v.qq.com/txp/iframe/player.html?vid=n0147njlz3k&quot; allowFullScreen=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;I dont know what that dream is that you have, I dont care how disappointing it might have been, as you&amp;#39;ve been working towards that dream. But that dream that you&amp;#39;re holding in your mind, that it&amp;#39;s possible.&lt;/p&gt;

&lt;p&gt;That some of you already know that it&amp;#39;s hard. It&amp;#39;s not easy. It&amp;#39;s hard changing your life.&lt;/p&gt;

&lt;p&gt;That in the process of working on your dreams, you are going to incur, incur a lot of disappointment, a lot of failure, a lot of pain , there are moments when you’re going to doubt yourself, you will say “ God why? why is this happening to me? I’m just trying to take care of my children and my mother I’m not trying to steal or rob from anybody. How did this have to happen to me?”&lt;/p&gt;

&lt;p&gt;For those of you who have experienced some hardships, don’t give up on your dream.&lt;/p&gt;

&lt;p&gt;There are rough times that gonna come but they have not come to stay, they have come to pass.&lt;/p&gt;

&lt;p&gt;Greatness is not this wonderful esoteric, elusive, god-like feature that, only the special among us will ever taste, you know, it’s something that truly exists in all of us.&lt;/p&gt;

&lt;p&gt;It’s very important for you to believe, that you are the one!&lt;/p&gt;

&lt;p&gt;Most people, they raise a family, they earn a living and then they die.&lt;/p&gt;

&lt;p&gt;They stop growing, they stop working on themselves. They stop stretching. They stop pushing themselves.&lt;/p&gt;

&lt;p&gt;Then a lot of people like to complain, but they don’t wanna do anything about their situation, and most people don’t work on their dreams. why?&lt;/p&gt;

&lt;p&gt;One is because of fear, the fear of failure, “what if things don’t work out?” And the fear of success, “what if they do and I can’t handle it?”. These are not risk-takers.&lt;/p&gt;

&lt;p&gt;You spend so much time with other people, you spend so much time trying to get people to like you, you know other people more than you know yourself, you&amp;#39;ve studied them, you know about them, you wanna hang out like them, you wanna be JUST LIKE THEM!&lt;/p&gt;

&lt;p&gt;And you know what? You’ve invested so much time in them, you don’t even know who you are, I&amp;#39;m telling you to spend time by yourself.&lt;/p&gt;

&lt;p&gt;It’s necessary that you get the losers out of your life, if you want to live your dream.&lt;/p&gt;

&lt;p&gt;But for people who are running towards their dreams, life has a special kind of meaning.&lt;/p&gt;

&lt;p&gt;When you become the &amp;quot;right person&amp;quot;, what you do is you start separating yourself from other people, you begin to have a certain uniqueness.&lt;/p&gt;

&lt;p&gt;As long as you follow other people, as long as you’re being a copy-cat, you will never ever be the best copy-cat in the world. But you will be the best that you could be. I&amp;#39;m telling you to find your value.&lt;/p&gt;

&lt;p&gt;That everybody won’t see it, that everybody won’t join you, that everybody won’t have the vision, it’s necessary to know that. That you are an uncommon breed!&lt;/p&gt;

&lt;p&gt;It’s necessary that you align yourself with people and attract people into your business, people who are hungry.&lt;/p&gt;

&lt;p&gt;People who are unstoppable and unreasonable, people who are refusing to live life just as it is and who want more.&lt;/p&gt;

&lt;p&gt;The people that are living their dream are fighting winners. They attach themselves to. The people who are living their dreams are the people that know that if it’s gonna happen, it’s up to them.&lt;/p&gt;

&lt;p&gt;If you wanna be more successful, if you wanna do and have stuff you&amp;#39;ve never done before, No.2, I’m asking you to invest in you.&lt;/p&gt;

&lt;p&gt;Someone’s opinion of you does not have to become your reality, that you don’t have to go through life being a victim. And even though you face disappointments, you have to know within yourself that I can do this, even if no one else sees it in me, I must see it for myself.&lt;/p&gt;

&lt;p&gt;This is what I believe and I&amp;#39;m willing to die for it, period.&lt;/p&gt;

&lt;p&gt;No matter how bad it is or how bad it gets, I&amp;#39;m going to make it!&lt;/p&gt;

&lt;p&gt;I wanna represent an idea. I wanna represent possibilities.&lt;/p&gt;

&lt;p&gt;Some of you right now, you wanna be, you wanna say, you wanna go to next level, &amp;quot;I want a council, you know, I wanna be an engineer, I wanna be a doctor.&amp;quot; Listen to me: You can&amp;#39;t get to that level, you can&amp;#39;t get to the level economically where you wanna be, until you start investing in your mind. You are not reading books, I challenge you all to go to the conference. I dare you to invest time, I dare you to be alone, I dare you to spent an hour to get to know yourself. When you become who you are, when you become the person that you are created to be, designed to be, who you were designed to be. When you become an individual, what you do is you take yourself and you start separating yourself from other people. I&amp;#39;m telling you, to get to a place where people do not like you or do not even bother you any more. Why? Cause you are not concerned with trying to make them happy, because you are trying to blow, you are trying to get to the next level. I need you to invest in your mind.&lt;/p&gt;

&lt;p&gt;If you’re still talking about your dream, if you’re still talking about your goal, but you have not done anything, just take the first step. That you can make your parents proud, you can make your school proud, you can touch millions of people‘s lives, and the world will never be the same again, because you came this way.&lt;/p&gt;

&lt;p&gt;Don’t let nobody steal your dreams! After we face a rejection or a &amp;#39;NO&amp;#39; or we have a meeting and no one shows up. or somebody said ” you can count on me ” and they don’t come through.&lt;/p&gt;

&lt;p&gt;What if we have that kind of attitude, that cause reposes, nobody believes in you. You’ve lost again, and again, and again! The lights are cut off, but you’re still looking at your dream, renewing it every day and saying to yourself: IT&amp;#39;S NOT OVER, UNTIL I WIN!&lt;/p&gt;

&lt;p&gt;YOU CAN LIVE YOUR DREAM!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(三十五) 合作带来自信</title>
   <link href="http://www.luzexi.com/2020/01/05/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A835.html"/>
   <updated>2020-01-05T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/01/05/思路探讨35</id>
   <content type="html">&lt;p&gt;我们常常会做出强迫别人执行自己的指令，古时有指腹为婚的习惯，今有强制学习、强制加班等。我们的控制欲太强，常常会导致别人有被捆绑被束缚的感觉，这种感觉导致降低了合作的发生几率。我们需要寻求合作，不管是工作上的合作，还是男女朋友或夫妻家庭生活上的合作，亦或我们与孩子之间的合作上，都增进了效率，增加了感情，最终间接提高了生活和工作的效率。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;《自卑与超越》一直围绕着讲的，也是“合作”这个关键词。合作对我们非常重要，但由于我们不好的习惯和思维方式的沉淀，常常不由自主的去破坏合作。&lt;/p&gt;

&lt;h6&gt;婚姻也本该是合作为基础的，合作是婚姻的首要条件。夫妻本身彼此应该像是很要好的朋友，和外界也应该保持良好的亲密的友谊关系。只有这样，他们的孩子才会觉得在他们的家庭之外也有值得信赖的人。&lt;/h6&gt;

&lt;h6&gt;如果每对夫妻对于其伴侣的兴趣都高于对自己的兴趣，那么他们之间便会有真正的平等。如果他们都很诚心地奉献出自己，他们便不会觉得自己低声下气或者受家庭拖累。只有男女双方都有这种态度，平等才有出现的可能。他们两人都应该努力使得对方的生活平稳和富裕，这样他们才会有安全感。他们会觉得自己是有价值的，并且觉得自己是被需要的。&lt;/h6&gt;

&lt;h6&gt;没有人能够心平气和地忍受卑下的地位。伴侣们或者共事的人们必须是平等的，人们只有在平等的时候才能找出克服共同困难的方法，也只有人与人之间感到平等时合作才能激发出最惊人的力量。&lt;/h6&gt;

&lt;h6&gt;如果我们能成为身边的人的好朋友，并有美满的婚姻和有价值的工作，我们就不会觉得自己不如别人，或者被人别所击败。我们会觉得这个世界是个友善的世界，在哪里我们都能坦然处之，我们会遇到很多喜欢我们的人也会遇到很多我们喜欢的人，应付困难时也能得心应手。因为合作，与人合作带给你愉快，与所有人合作愉快带给你实实在在的自信。&lt;/h6&gt;

&lt;p&gt;在我们现代的文化里，人们经常都没有做好合作的准备。我们的教育都太注重个人的成功，都太强调要考虑我们能够从生活中获得什么，而不是我们能付出什么。我们一直都是遵照着我们生活样式做出种种应急的反应，这些反应大都是只考虑自身的利益，因此我们非常不习惯于考虑另一个人的利益、他的目标、他的欲望、他的野心和他的希望。这也是我们因为缺少合作能力而造成的，无法换位思考，导致无法体会到对方的处境和情绪。&lt;/p&gt;

&lt;h6&gt;如果一个人真正对另一个人感兴趣，他会成为对方真诚的友伴，他会勇于负责，他还会使得自己忠实可靠。最坏的情况是一个人只顾及自己的利益，他终日都在盘算着，“我能从中得到什么？”，他会一直要求自由和解脱，从不考虑要怎样才能使对方生活的更轻松或更富裕。虽然如此，但这种情况也不是种罪恶，而只是一种错误的方法。就像所有老谋深算、千方百计想从婚姻中得到什么或者逃脱什么的人一样，最终都走上了错误的道路。&lt;/h6&gt;

&lt;p&gt;这个世界确实并非能够这么理想，也真的有很多邪恶、困难、偏见和悲哀，但这就是我们的世界，它的优点和缺点也是我们自身的优点和缺点。对于我们个人生活而言，在面对周围人和事环境时，无论是顺境还是困境，都必须要以合作的方式来加以改进，这是最有效的方法和途径。&lt;/p&gt;

&lt;p&gt;最后引用一段阿尔佛雷德.阿德勒的话来结束最近几篇对《自卑与超越》的探讨：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    每个人都有不同程度的自卑感，因为没有一个人对其当前的地位感到满意，对优越感的追求是所有人的通性。然而，并不是人人都能超越自卑，关键在于正确对待职业、社会和性，在于正确理解生活。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参考文献:&lt;/p&gt;

&lt;p&gt;《自卑与超越》 阿尔佛雷德.阿德勒&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(三十四) 纠正错误观念</title>
   <link href="http://www.luzexi.com/2020/01/02/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A834.html"/>
   <updated>2020-01-02T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2020/01/02/思路探讨34</id>
   <content type="html">&lt;p&gt;平时会用‘印象笔记’来记录自己在脑中一闪而过的想法，这些想法很细碎，很难形成连贯的大篇幅的文章，于是我把它们都命名为‘随记’1、2、3、4...到现在已经记录到了60多个随记片段，部分已经写入到文章中已经被删除，留下了45个片段还没有被连接进入大篇幅的文章中。&lt;/p&gt;

&lt;p&gt;在平时写文章的过程中会用到一些片段，但很多片段都没有成形的理论体系，连自己都想不明白也就无法拿出来与大家分享。其中有一些理论在当时看来觉得很对，现在回过头去看却是错误的观念。今天就把一部分记录在‘随记’里的错误观念，拿出来复盘一下，当时自己是怎么想的，为什么错。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;记在‘随记3‘中的:&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    大多数成功是可以根据现有的经验推出来的。
    虽然不能说一定成功，不过，一旦有了先前成功经验，就能在大概率上，或者说关键点加强成功概率。

    这样说有点泛泛而谈，有些成功经验确实是没有意义的，比如躺赢，突然被风口吹上天，突然政策转变你刚好被砸中等，一些完全没有自己全程经历过的事情，没有辛苦琢磨过的，都有可能是伪成功经验，这种经验是大坑。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这段想法错从本质上就错误的理解了’成功‘。’成功‘就是赚到钱吗？不是的。但当时记录我就是这么认为的，话中透露出我对赚到钱的渴望，这种渴望会诱导我走向错误的道路，比如只关注短期结果，对长期的计划和展望关注度减少，形象到生活中比如只关注与钱有关的事物，而对人与人之间的合作比如情绪、交流、人情交际上关注度减少，最终将导致原本想找捷径更快走向目标’赚钱‘，反而绕了更大的弯路甚至走向了完全相反的方向’费钱‘。&lt;/p&gt;

&lt;h6&gt;其实只对钱感兴趣的必定会和合作之道背道而驰，在这个我们光怪陆离的时代，致富之道何止万千，即使是旁门左道，有时候也会为人带来巨富。对此我们不必感到惊讶，虽然我们绝不敢说做人正直、有所不为的人一定能够成功，但是我们却敢断言，守正道、明事理必能使其勇气保持不坠，并且不失尊严与自信。&lt;/h6&gt;

&lt;h3&gt;记在’随记2‘中的:&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    能力太大就会很容易越过界，造成严重失误。

    枯燥，乏味，充斥着大部分生活，如果没有目标，很快就会陷入困惑，从而降低学习和工作效率。

    游戏太浪费时间和精力，能否找到有效的放松方式很关键，健康的放松方式和方式习惯让人非常受益，每个人每个阶段都不一样。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;言语和文字中看出本质，这段想法的本质是对’个人能力‘的错误理解。我当时太关注’个人能力‘。’个人能力‘能解决所有问题吗？不能。但当时的记录来看我就是这么认为的，认为个人能力可以解决所有问题，至少认为是可以解决所有核心问题。对个人能力的错误理解，其实就是对’人与人合作‘的错误理解，人类是合作的社会，没有合作就没有人类发展，工作、生活也是同样的道理因为它反映了人类生活的结构规则。人类社会得益于分工制度，它为人类生产生活提供巨大效益。如果每个人都是什么都要完全自己来，没有人合作，没有人站在前人的肩膀上工作、学习，那么整个社会就是停留在原始的动物阶段，没有工具、知识、文化的积累，一生下来就是重新开始，只靠着基因进化适应环境，跟动物没有分别。&lt;/p&gt;

&lt;h6&gt;对于合作产生的效益来说，个人能力实在微不足道。工作、生活中亦是如此，我们应该放弃个人能力改变世界的愚蠢想法，转而致力于促进更多的合作，改进合作向更好的合作走去，当每个个人奉献出自己的力量的时，让 1人 加 1人 或者 10人 + 10人 或者更多组合 10人 + 12人 + 18人 + ... = 等于原来结果数倍还多的能量。&lt;/h6&gt;

&lt;h3&gt;记在’随记7‘中的:&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    我们要理解蠢货的存在，不要去计较蠢货的思维逻辑。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;没有人是蠢货，存在即合理。我们心中的世界本质上是围绕我们自己为中心的世界，本来就是一个扭曲的世界，用扭曲的世界看真实的世界，怎么看怎么不合理。归根结底还是我们自己太狭隘，太固执，没有放平心态，敞开怀抱拥抱世界，这种不寻求合作反而倒退去固步自封的想法，是错上加错。&lt;/p&gt;

&lt;h3&gt;记在’随记7‘中的:&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    我的智慧足以教育女儿登顶同龄人成为人生赢家，但我的财力不足以支撑我这么做。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我把教育想的太简单，也高估了自己，这是在我还没有深入接触幼儿教育之前的想法，那时完全由我妻子来负责，而我只负责空想。当我深入接触和了解时则与我想象的完全不同，一下子感觉到了自己的渺小，对方的伟大。《自卑与超越》中写下了大量人类儿童时期的心理过程让我深受启发。一些浅见是，我们应该更多的思考，如何让孩子对周围的环境和人发生足够的兴趣，以使得他们在日常活动中形成更多的合作，我们也应该致力于让孩子尽早了解社会分工制度，尽早确立自己感兴趣的职业方向。&lt;/p&gt;

&lt;h6&gt;其实还有许多愚蠢的想法，愚蠢到自己都羞涩难忍，就放在后面的文章中再一一显露出来好了。写’思维探讨‘的目的就是进阶思维方式和思维角度，靠什么进阶呢，光靠自己空想没用，要多看书而且是精读，再和周围的朋友们多聊聊各自的想法，从中碰撞出思维的火花。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(三十三) 2019年我做了什么</title>
   <link href="http://www.luzexi.com/2019/12/28/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A833.html"/>
   <updated>2019-12-28T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/12/28/思路探讨33</id>
   <content type="html">&lt;p&gt;最近忙了好多事情，原以为休息在家可以轻松点，但依然忙的不可开交，我没常回家的1年多时间里有这么多事情堆积着。原本想着把《算法导论》再看一遍后把关于‘算法’的文章写完，可惜算法这块知识量和知识深度有点大，还需待点时日。&lt;/p&gt;

&lt;p&gt;2019年我做了什么呢？虚的我觉得讲出来可能大家都有不同的意见（什么人生哲学，生活大道理，思维方式，智慧之举等等），我们就讲讲实实在在能看到的，我把这些实实在在能看到的学习生活记录了下来，尽量记录的详尽，虽然有部分遗漏但大部分都被记录了下来。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;一整年我都在使用一个叫‘滴答’的任务app，我在里面设置了每天要做的事情，每天做完把它勾掉，做不完也没事，留到下一天来做。不想给自己太多的压力，也为了放过自己，既然做不完，那就让它过去，第二天里的任务继续有，只要我今天做了一个任务我就把它勾掉。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/life/idea-talking33-3-2.png&quot; alt=&quot;滴答详情&quot;&gt;&lt;/p&gt;

&lt;p&gt;于是就有了上面这张图。其实不止这些，还加入了简简单单就能完成的任务，比如每天白天累了趴下休息10分钟，每天早中晚三餐规律饮食，每天不看娱乐新闻，每天下午3点吃点东西补充能量，每天12点前睡等等等，有28条每日任务。&lt;/p&gt;

&lt;p&gt;我做了这么多年游戏已经彻底清楚的明白对于一个平民玩家，每日任务就是其最宝贵的追上土豪玩家的途径，土豪玩家有钱没毅力快速提升靠钱砸，平民玩家没钱只能靠毅力靠肝靠做任务坚持几个月，最终还是能追上一部分土豪玩家的，毕竟他们整体上来说总是在不断放弃与重新开始中，平民玩家也就只有肝，那么肝之中，每日任务最为精华，其他途径都是效率相对比较低的。结合到实际生活中也是同样的道理，我们可以把人生看成一次游戏，要么你出生就有钱有地位，要么就只有肝这条路。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/life/idea-talking33-3.png&quot; alt=&quot;滴答等级&quot;&gt;&lt;/p&gt;

&lt;p&gt;我每天都会点掉很多任务，也留下了很多任务。每点掉一个任务就会增加一些经验，就像游戏人生一样，我每天做一些任务学一些东西就会增加一些人生阅历和知识经验。这个软件也是一样，于是我就有了如上图所示的经验等级。其实它的满级只有10级，但是在里面用的人真的很厉害，我花了很大的力气，坚持了这么久，还有百分之5的人没有被我击败，可想而知他们该有多努力。&lt;/p&gt;

&lt;p&gt;这是在我去年9月份时看了一本《做时间的朋友》后开始做的事情，当初的想法是把时间利用起来，跟时间一起‘玩’，这样就能让自己每天的生活很充实，也很高效。虽然事情一开始比较顺利，但随着日子一天天过，枯燥和疲惫的冲击，做这些事变得越来越困难，甚至一度停止过。&lt;/p&gt;

&lt;p&gt;这其实跟人生在岔道口的挑战一样，当挑战来临时，有明显的征兆，比如当挑战来临时你一定很疲惫，你一定很痛苦，甚至有时你很无聊。熬过去很多时候会是柳暗花明又一村的另一个美好世界的景象。我想我熬过来了，这个过程我加入了很多反馈机制，来调节我的感官上的感觉，以达到刺激自我感觉的目的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/life/idea-talking33-8.png&quot; alt=&quot;anki&quot;&gt;&lt;/p&gt;

&lt;p&gt;比如这张图，我用Anki软件来背英语单词，每天的背诵量被记录下来，并且用这种日历方格的统计形式展示出来，让我很有成就感，每天都为打满这个图而不懈的坚持，越多越有劲，越坚持越停不下来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/life/idea-talking33-7.png&quot; alt=&quot;github&quot;&gt;&lt;/p&gt;

&lt;p&gt;也比如这张图，这是我在github上写文章的记录，原本计划是每天写半小时文章，但计划并没有顺利的进行，这个任务难度确实很大，我不跟自己死磕到底，我也怕自己的身体受不了，于是我饶了自己，尽自己所能的每天写点，在身体允许的范围下尽量做到每周一篇文章。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/life/idea-talking33-9.jpeg&quot; alt=&quot;github&quot;&gt;&lt;/p&gt;

&lt;p&gt;写书写文章的灵感并不是每天都有的，一开始会有很多灵感，是因为我这么多年积累了很多自己的生活，工作的知识和经验，想说的想表达的，但毕竟我的经历还是单薄，狭窄的世界观有时任然显露无疑，为了能让自己能有更多的知识，更深刻的理论体系，更广泛的见识，我坚持每天看书，每天风雨无阻坚持看半小时-两小时。看书的速度与日俱增，但始终无法敌过我买书的速度，看书的速度越快，买书的量就越凶残，最后导致办公桌上全是书。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/life/idea-talking33-4.png&quot; alt=&quot;github&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/life/idea-talking33-5.png&quot; alt=&quot;github&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/life/idea-talking33-6.png&quot; alt=&quot;github&quot;&gt;&lt;/p&gt;

&lt;p&gt;其中我看了《精力管理》这本书后让我对时间和精力的管理，有了更深刻的认识。先前知识对时间的认识，也只是想着要好好利用时间，提高时间的利用率，但并没有结合人的属性来制定计划和规划。在看了《精力管理》后，对人本身的精力和时间上的规划有了更深刻的认识。先前我不屑于对时间和精力的精确管理，在看了《精力管理》后，让我对时间和精力管理有了更加浓厚的兴趣。于是就有了上面三张图的内容，这是我日常中记录下来的每天做事的大致内容，内容并没有精确细致到细节，但是时间块上的记录让我知道了我每天运用精力都在什么地方上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/life/idea-talking33-1.png&quot; alt=&quot;github&quot;&gt;&lt;/p&gt;

&lt;p&gt;就这样用昨天的记录来调整今天的状态，每天周而复始，从今年3月份开始，记录下了我每天都把精力花在哪了，用每日、每周、每月的统计图表的方式，让自己了解自己的状态如何。于是就有了上图这张，至今为止记录下来的统计图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/life/idea-talking33-10.png&quot; alt=&quot;github&quot;&gt;&lt;/p&gt;

&lt;p&gt;这些记录与练习仍然不够，我在不断发掘自己的缺点，比如我的说话表达能力很差，因为30几年来一直认为‘没什么好说的，成绩和实干决定一切’的错误观念，导致我脸部的肌肉非常糟糕，软软的只能用来装可爱，因为没有得到充分的锻炼，在说话时完全没有脸部肌肉工作的成分，使得说话非常吃力，完全由大脑来控制该说什么话，如何说，如何开口，如何动口，大脑工作得很累，久而久之就会觉得说话很累，不想说话，于是情况更加糟糕。&lt;/p&gt;

&lt;p&gt;为了改进这个缺点，我找到了一个方法，就是朗读，用朗读书本的方式去锻炼脸部的肌肉，当脸部肌肉得到了锻炼在我说话时就不会那么累了，部分词语完全可以用脸部的肌肉记忆代替大脑的工作，减轻大脑的负担。于是就有了上图，在‘喜马拉雅app’上每天对着书朗读10-20分钟，并且上传到个人文件夹保存起来留作纪念，也是一种正向的反馈机制让自己能够更加有兴趣继续下去。&lt;/p&gt;

&lt;h6&gt;我发现我越来越向务实靠近，脱虚务实的趋向越来越严重，这并不是什么绝对的好现象，但至少我现在需要它。最近在公众号上看到的一个人提出来，&amp;quot;心上学，事上练&amp;quot;的口号，我很是赞成。接下来我希望自己少写些，哲学类话题，而更多的是事实在在的从事情上学习、研究、分析，真正能够做到‘事上练，心上学’。&lt;/h6&gt;

&lt;h6&gt;2019年只是一个开始，既然开始了，我不想再停下来，别人说曾国藩自律了20年才有这样的成就，那我可以先试试自律10年。我看见了另一个世界，一个更加积极，更加自律，更加善于合作的世界。&lt;/h6&gt;

&lt;h6&gt;题外话：我很赞同《自卑与超越》里说的，”合作能力是大多数人所缺乏的“，我们要努力成为一个容易合作、能够主动建立合作、帮助别人加入合作的人。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第七章，渲染管线与图形学(五) - Projector投影原理</title>
   <link href="http://www.luzexi.com/2019/12/10/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E4%B8%8E%E5%9B%BE%E5%BD%A2%E5%AD%A610.html"/>
   <updated>2019-12-10T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/12/10/Unity3D高级编程之进阶主程-渲染管线与图形学10</id>
   <content type="html">&lt;h3&gt;Projector 投影的原理与应用&lt;/h3&gt;

&lt;p&gt;Unity3D中的 Projector 投影像是一个很神秘的组件，但其实它依然运用的是以着色器为基准的渲染流程，和普通的3D模型渲染从本质上来看并没有实质上的区别，唯一的区别是它从它自己的视体(视锥体或平视体)中检测到的模型，并根据默认或者自定义的材质球与Shader着色器，将这些物体又重新绘制了一遍。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;从Unity3D引擎上来讲，可以这样解释 Projector：&lt;/p&gt;

&lt;p&gt;根据 Projector 自身的视体的范围，平视体或视锥体，遍历并计算出视体范围内与视体占边的所有物体。&lt;/p&gt;

&lt;p&gt;接着 Projector 取得这些物体模型数据，并计算投影矩阵。&lt;/p&gt;

&lt;p&gt;这个投影矩阵是什么呢，其实就是前面说的 Projector 视体空间的投影矩阵。&lt;/p&gt;

&lt;p&gt;最后将投影矩阵传入Shader中，根据这个投影矩阵，对这些物体再渲染一次。&lt;/p&gt;

&lt;p&gt;投影中的Shader着色器是投影绘制的主要手段，Projector 的工作只是检测了所有范围内的模型，并传递了投影空间的矩阵而已。&lt;/p&gt;

&lt;p&gt;投影Shader中，通常会结合传入的投影矩阵，将顶点转为 Projector 投影空间中，并以此为投影贴图的UV来渲染模型。&lt;/p&gt;

&lt;p&gt;例如这个简单的投影着色器：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sampler2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_MainTex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;float4x4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unity_Projector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SV_POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;texc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TEXCOORD0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;v2f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appdata_base&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v2f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UNITY_MAXTRIX_MVP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unity_Projector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COLOR&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tex2Dproj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_MainTex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;texc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 unity&lt;em&gt;Projector 变量就是由 Projector 传入投影矩阵。在顶点着色器中 unity&lt;/em&gt;Projector 矩阵被用来构造投影坐标，和普通的空间投影转换矩阵MVP(Model View Project)不同的是，其中的V是 Projector 空间的相关矩阵，即 Projector 组件所属的 Transform 的 worldToLocalMatrix变量，而P则是和Projector远近裁切相关的矩阵。&lt;/p&gt;

&lt;p&gt;用 unity_Projector 矩阵计算出vertex(顶点)在投影空间中的坐标后，我们就可以以此坐标为uv坐标绘制物体了。&lt;/p&gt;

&lt;p&gt;为什么可以将顶点坐标视为uv坐标呢？当坐标变换到投影空间后，其坐标空间就变成了投影平面视角，在这个视角中如果我们将平面视为纹理大小，就相当于一一匹配上顶点的uv坐标。&lt;/p&gt;

&lt;p&gt;这个转化后的投影空间中的坐标，也就是我们常说的&amp;quot;投影纹理坐标&amp;quot;。&lt;/p&gt;

&lt;p&gt;&amp;quot;投影纹理坐标&amp;quot;不能直接当作uv来作为纹理坐标来使用，需要调用 tex2Dproj 方法来获取纹理坐标:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    tex2Dproj(texture,uvproj);

    这个纹理投影函数，其实就是在使用之前会将该投影纹理坐标除以透视值

    可以等价于按如下方法使用普通二维纹理查询函数

    float4 uvproj = uvproj/uvproj.w;

    tex2D(texture,uvproj);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果如下图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;缺图
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;​###### 投影的技巧还有很多，我们下面介绍几种投影技巧在游戏项目中的运用。&lt;/p&gt;

&lt;h6&gt;平面阴影&lt;/h6&gt;

&lt;p&gt;平面阴影也是投影技巧的一种，它稍微需要运用些图形计算，主要的原理是在着色渲染模型时，另外做一个Pass将模型上顶点转换到平面上再渲染一次，以此作为平面的阴影，无论地上有没地形，都以平面呈现。如下图:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺图
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要计算这个平面阴影需要我们从光源点，顶点，法线，平面这些已知数据出发计算顶点转换到平面上的点。&lt;/p&gt;

&lt;p&gt;我们首先已知的是地面法线向量 TerrainNormal，和平面上随便一个初始点点的坐标 TerrainPos，我们假设我们需要计算的点为p点&lt;/p&gt;

&lt;p&gt;由平面表达公式得知，平面上的任意向量与该平面的点乘所得值为0，因此地面上的方向向量 TerrainNormal 与 要投影的坐标与初始点所形成的方向向量点乘为零，即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    (p - TerrainPos) 点乘 TerrainNormal = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;又由于平面映射的P点是由光射到顶点延伸到平面而得到的，所以&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    p = d*L + L0 其中L0为顶点，的l为光到顶点的射线方向，d为L0射到p点的距离。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因此根据这两个公式，代入得到:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    (dL + L0 - TerrainPos) 点乘 TerrainNormal = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解析后为&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    dL 点乘 TerrainNormal + (L0 - TerrainPos) 点乘 TerrainNormal = 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;于是再得到d为:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    d = ((TerrainPos - L0) 点乘 TerrainNormal) / (l 点乘 TerrainNormal)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再代入进 p = d * l + L0 这个公式得到p，即如下Shader中的顶点函数所写&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CGPROGRAM&lt;/span&gt;

    &lt;span class=&quot;cp&quot;&gt;#pragma vertex vert&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#pragma fragment frag&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;quot;UnityCG.cginc&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appdata&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2f&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SV_POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;            

    &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TerrainPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TerrainNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v2f&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;vert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appdata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v2f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unity_ObjectToWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 光的方向&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;float3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_WorldSpaceLightPos0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// d 值的计算&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TerrainPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TerrainNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TerrainNormal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 代入 p = d * l + L0 公式&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 空间顶点转换&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unity_MatrixVP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fixed4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;frag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SV_Target&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixed4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ENDCG&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述Shader中，利用了_WorldSpaceLightPos0来确定光的反向，也可以用一个光的坐标与顶点的差值来得到一个光的方向。计算过程的公式转换可以以这张手绘的图作为参考。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/pingmianyinying.png&quot; alt=&quot;平面阴影&quot;&gt;&lt;/p&gt;

&lt;p&gt;图中清晰的标明了所有已知向量，和可计算向量，以及最终需要结算的点，上述所说的这些公式的转换都是基于这个图来做的。&lt;/p&gt;

&lt;h6&gt;利用深度信息计算图片投影&lt;/h6&gt;

&lt;p&gt;图片投影其实就是贴花的动态版，其做法也有很多种，我们在这里简单讲讲其中一种方法为:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    绘制一个box，其纹理的展示方式则以深度信息为依据，纹理贴近其绘制的模型上。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种方式可以随着这个box的移动贴到不同物体上。&lt;/p&gt;

&lt;p&gt;大致的方向是，以一个BOX为渲染对象，渲染时在片元着色器中重新判定渲染纹理与渲染坐标。怎么判定呢？&lt;/p&gt;

&lt;p&gt;先从顶点着色器上获得顶点坐标的屏幕坐标，在片元着色器中传入的屏幕坐标时成了片元在屏幕上的坐标，用屏幕坐标获取对应的深度值，再让深度值作为z坐标来形成一个三维坐标，这时三维坐标只是屏幕空间上的坐标，我们让其屏幕空间转换到相机空间，再从相机空间转换到世界空间，再转换到投影空间，这样坐标就到了投影空间，再除以透视值，就得到坐标在0-1范围的坐标值，用这个值去提取纹理上的颜色，最后用这个颜色绘制片元。&lt;/p&gt;

&lt;p&gt;这个方法比较费的点为片元着色器中重新计算渲染坐标，这个坐标会以深度信息为z轴信息需要经过几个空间的转换，导致计算量比较大，不能放在顶点着色器中的原因是因为只有在片元着色器中才能得到片元深度信息。&lt;/p&gt;

&lt;h6&gt;贴花(喷图)&lt;/h6&gt;

&lt;p&gt;贴花的制作，可以以摄像机为节点向外计算一个长方体，所有与长方体有交集的模型上的面上的顶点都被存储起来，另外如果有顶点里外都有的面，则计算与长方体的面相交的新节点并加入进来，最后把所有得到的顶点和三角面制作成一个新的模型，这个模型的顶点转换到立方体空间再除以透视值，则成为了uv点，以此来呈现一个贴花(喷图)的效果。&lt;/p&gt;

&lt;p&gt;参考文献：&lt;/p&gt;

&lt;p&gt;《Unity3D ShaderLab 开发实战详解》&lt;/p&gt;

&lt;p&gt;《维基百科 Line–plane intersection》 https://en.wikipedia.org/wiki/Line%E2%80%93plane_intersection&lt;/p&gt;

&lt;p&gt;Planar Shadow http://qiankanglai.me/2016/12/23/planar-shadow/&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第七章，渲染管线与图形学(四) - 多重采样以及着色器编译原理</title>
   <link href="http://www.luzexi.com/2019/12/04/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E4%B8%8E%E5%9B%BE%E5%BD%A2%E5%AD%A69.html"/>
   <updated>2019-12-04T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/12/04/Unity3D高级编程之进阶主程-渲染管线与图形学9</id>
   <content type="html">&lt;h3&gt;GPU上的多重采样(Multisampling)与反走样(Antialiasing)&lt;/h3&gt;

&lt;p&gt;多重采样(Multisampling)是一种对几何图元的边缘进行平滑处理的技术，也称为反走样技术之一。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;OpenGL支持几种不同的反走样技术，比如线段反走样，多边形反走样，纹理图像压缩的质量以及导数精度设置。事实上这几个反走样技术都是以开关的形式在OpenGL中存在，算法大致是将原本单一的线条或像素块周围填充更多的像素块，具体的填充算法细节比我们想象的要复杂的多，而且不同OpenGL是现在的算法中也有细微的差异，我们在这里不进行深入讨论。&lt;/p&gt;

&lt;p&gt;多重采样的工作方式是对每个像素的几何图元进行多次采样。在多次采样后，每个像素点不仅仅只是单个颜色(以及除了颜色外的深度值、模板值等信息)，还记录了许多样本值。&lt;/p&gt;

&lt;p&gt;这些样本值类似于将一个像素分拆成了更小型的像素，每个像素都存储着颜色、深度值、模板值等信息，当我们需要呈现最终图像的内容时，这个像素的所有样本值会被解析为最终像素的颜色。&lt;/p&gt;

&lt;p&gt;在Unity3D中对这方面的反走样功能也提供了支持，可以通过Quality Settings中的AntiAliasing来设置，它将启用图形接口(OpenGL或DirectX)中的多边形的反走样算法，并且开启多重采样，根据多重采样信息对多边形边缘进行像素填充。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    AntiAliasing 可以设置3档采样质量分别是 2倍, 4倍 and 8倍的多重采样。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GPU上的反走样代价是消耗更多的GPU算力和显存，庆幸的它并不消耗CPU算力。&lt;/p&gt;

&lt;h3&gt;着色器编译过程与变体&lt;/h3&gt;

&lt;p&gt;我们在知道GPU渲染管线如何运作后，对着色器编译过程仍然需要知晓，我们还是以使用OpenGL为例来学习着色器在Unity3D中从编译到执行的全过程。&lt;/p&gt;

&lt;p&gt;着色程序的编译过程与C语言等编译语言的编译过程非常类似，只是C语言在编译时是以离线的方式进行，而着色器程序的编译则是当引擎需要时，通过引擎调用图形接口(OpenGL或DirectX)的方式来进行编译，整个应用程序只需要编译一次后面可以重复利用，这和我们通常所说的JIT(Just in time 即时编译)有点相似。&lt;/p&gt;

&lt;h6&gt;上面所说的这些都是图形引擎控制和执行的，也就是当需要某个着色器程序时Unity3D引擎通过判断是否存在已经编译好的着色器程序，来决定是否编译着色器代码或是重用已经编译好的着色器程序。&lt;/h6&gt;

&lt;p&gt;那么着色程序从编译到执行过程到底是怎样的呢？让我们来讲一讲。&lt;/p&gt;

&lt;p&gt;首先当引擎得知渲染需要用到的Shader不曾被编译过时，就会调用图形接口 glCreateShader 为着色器创建一个新的着色器对象。&lt;/p&gt;

&lt;p&gt;然后通过程序从Shader文件中获取Shader内容(字符串)并调用 glShaderSource 将源代码(字符串)关联到刚刚创建的着色器对象上。&lt;/p&gt;

&lt;h6&gt;这时着色器对象已经关联了源代码，我们可以通过调用图形接口的编译接口 glCompileShader 对这个着色器对象进行编译。&lt;/h6&gt;

&lt;p&gt;编译完成后，我们可以通过 glGetShaderInfoLog 来获得编译信息以及是否成功的结果。&lt;/p&gt;

&lt;p&gt;到此仅仅是某个着色器对象编译完成，这个着色器对象可能是顶点着色器，也可能是片元着色器，或也许是细分着色器或几何着色器。&lt;/p&gt;

&lt;p&gt;通常情况下，有好几个着色器需要编译，顶点着色器和片元着色器通常都成对出现，则会创建相应的着色器对象来分别编译它们的源代码。&lt;/p&gt;

&lt;p&gt;有了着色器对象还不够，我们需要把这些着色器关联起来。&lt;/p&gt;

&lt;p&gt;首先引擎会使用 glCreateProgram 需要创建一个空的着色器程序。&lt;/p&gt;

&lt;p&gt;然后多次调用 glAttachShader 来一个个地绑定着色器对象。&lt;/p&gt;

&lt;h6&gt;当所有必要的着色器对象关联到着色器程序之后，就可以链接对象来生成可执行程序了，调用 glLinkProgram 将所有关联的着色器对象生成一个完整的着色器程序。&lt;/h6&gt;

&lt;p&gt;当然，着色器对象也可能存在某些问题，因此在链接过程中依然可能失败，引擎通过 glGetProgramiv 来查询链接操作的结果，以及通过 glGetProgramInfoLog 接口来获取程序链接的日志信息，由此我们就可以判断错误原因。&lt;/p&gt;

&lt;p&gt;成功完成了着色器程序的链接后，引擎就可以通过调用 glUseProgram 来运行着色器程序。&lt;/p&gt;

&lt;p&gt;我们平常在Unity3D中用到的Shader中的Pass，每个Pass中都有着色器需要编译，因此每次在绘制不同的Pass时都会对Pass中的顶点着色器和片元着色器进行编译。也就是说，Unity引擎会为每个Pass标签生成一个着色器程序，生成这些着色器程序后，执行顺序仍然按照Pass的先后次序来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/shader_compile.jpg&quot; alt=&quot;着色器编译流程&quot;&gt;&lt;/p&gt;

&lt;h6&gt;除了着色器的编译流程外，Unity3D中的Shader Varant(变体)在实际开发中也是比较严重的问题&lt;/h6&gt;

&lt;p&gt;那么什么是“变体”呢。其实它是由Unity3D自身的宏编译指令引起的，它为不同情况而编译生成不同的着色器程序。从引擎端的说法来看，Unity3D把不同的编译版本拆分成了不同的着色器源代码，在运行时再通过图形接口将这些着色器源代码编译成不同的着色器程序。&lt;/p&gt;

&lt;p&gt;为什么要使用宏编译指令导致生成这么多的着色器程序呢？因为要简化Shader，让同一个Shader在不同材质球上的应用不同的效果时更加便捷，修改和完善起来也更加高效。&lt;/p&gt;

&lt;h6&gt;假如编写很多同一个风格但不同效果的Shader，在使用和维护过程中会造成诸多的麻烦和不便，为了统一风格，为了提高效率，也为了能更好的打通各部门之间的沟通渠道，以及能让美术同学能更好的发挥对画面效果的调整，将同一个风格不同效果的Shader写在同一个Shader文件里是必不可少的，这样能更加容易的统一美术风格和制作流程，目的就是为了让风格更加统一，沟通更加便捷，效率更加高。&lt;/h6&gt;

&lt;p&gt;那么我们来看看Unity3D是怎么通过编译指令来编写宏以及它是怎么生成着色器源代码的。&lt;/p&gt;

&lt;p&gt;Unity3D的Shader中使用&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma multi_compile&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#pragma shader_feature&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两个指令来实现着色器程序的自定义宏，它既适用于顶点片元着色器也适用于表面着色器。&lt;/p&gt;

&lt;p&gt;在运行时，Unity3D会根据材质(Material)的关键字(Material的对象方法EnableKeyword和DisableKeyword)或者全局着色器关键字(Shader的类方法EnableKeyword和DisableKeyword)&lt;/p&gt;

&lt;p&gt;我们通过 multi_compile 指令编写例如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma multi_compile A_ON B_ON&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;这样会生成并编译两个Shader(变体)，一个是A&lt;em&gt;ON的版本，一个是B&lt;/em&gt;ON的版本。&lt;/h6&gt;

&lt;p&gt;运行的时候Unity3D会根据材质(Material)的关键字或者Shader全局关键字判断应该使用哪个Shader，如果两个关键字都为false，那么会使用第一个(A_ON)Shader变体。&lt;/p&gt;

&lt;p&gt;我们也可以创建多个组合关键字例如:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#pragma multi_compile A B C&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#pragma multi_compile D E&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样会使得Shader的变体成倍的增加，例如上述的预编译方式，会生成 3x2 = 6 个变体，分别是 A+D、 B+D、 C+D、 A+E、 B+E、 C+E 六种。&lt;/p&gt;

&lt;p&gt;假如multi_compile组合多到10行，每行2个，就是2的10次方个Shader(变体)就是1024个，这样生成这1024个Shader(变体)，在打包时会耗费很长在变体的生成上的打包时间。&lt;/p&gt;

&lt;h6&gt;除了 multi&lt;em&gt;compile 之外，另外一个指令 shader&lt;/em&gt;feature 也可以设置预编译宏，与 multi&lt;em&gt;compile 的区别是 shader&lt;/em&gt;feature 不会将没有被使用到的Shader(变体)打包进包内，因此 shader&lt;em&gt;feature 更适合材质球的关键字指定预编译内容，因为Unity3D只生成和编译被使用的预编译情况，而 multi&lt;/em&gt;compile 更适合全局Shader指定关键字，因为它会把所有组合都编译一遍，无论有没有用到。&lt;/h6&gt;

&lt;p&gt;除了这两个自定义预编译指令，Unity3D 本身自带的一些内建的 multi_compile 的快捷写法也会导致Shader变体的产生：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    multi_compile_fwdbase 为前向渲染编译多个变体，不同的变体处理不同的光照贴图的计算，并且控制了主平行光的阴影的开关。

    multi_compile_fwdadd 为前向渲染额外的光照部分编译多个变体，不同的变体处理不同灯光类型，平行光，聚光灯，点光，以及他们附带的cookie纹理版本。

    multi_compile_fwdadd_fullshadows 和 multi_compile_fwdadd 一样，并且包含了灯光的实时阴影功能。

    multi_compile_fog 为处理不同的雾效类型（off/linear/exp/exp2）扩展了多个变体。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;总的来说，无论是 multi&lt;em&gt;compile 还是 shader&lt;/em&gt;feature 亦或内建预编译指令，都会造成 Shader(变体)数量的增多，使得打包时间增加，运行时编译次数增多。当Unity3D在运行时检测到需要渲染的材质球里是不曾被编译的Shader时，则会将与自己匹配的Shader变体拎出来编译一下生成一个着色器程序，因此为了应对变体在运行时的编译消耗，通常会在运行时提前将所有Shader变体编译一下，使得运行中不再有Shader编译的CPU消耗。&lt;/h6&gt;

&lt;p&gt;参考文献:&lt;/p&gt;

&lt;p&gt;《OpenGL编程指南》&lt;/p&gt;

&lt;p&gt;《Unit3D Documentation》 https://docs.unity3d.com/Manual/SL-MultipleProgramVariants.html&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第七章，渲染管线与图形学(三) - 渲染原理与知识3</title>
   <link href="http://www.luzexi.com/2019/11/20/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E4%B8%8E%E5%9B%BE%E5%BD%A2%E5%AD%A68.html"/>
   <updated>2019-11-20T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/11/20/Unity3D高级编程之进阶主程-渲染管线与图形学8</id>
   <content type="html">&lt;h3&gt;GPU Instancing 的来龙去脉&lt;/h3&gt;

&lt;p&gt;GPU Instancing 初次听到这个名词时还有点疑惑，其实翻译过来应该是GPU多实例化渲染，它本身是GPU的一个功能接口，Unity3D将它变得更简单实用。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;前面讲过一些关于Unity3D的动态合批(Dynamic batching)与静态合批(Static batching)的功能，GPU Instancing 实际上与他们一样都是为了减少Drawcall而存在。&lt;/p&gt;

&lt;p&gt;有了动态合批和静态合批为什么还需要 GPU Instancing 呢，究竟他们之间有什么区别呢，我们不妨来简单回顾一下Unity3D动态合批(Dynamic batching)与静态合批(Static batching)。&lt;/p&gt;

&lt;h6&gt;开启动态合批(Dynamic batching)时，Unity3D引擎检测视野范围内的非动画物体(通过遍历所有渲染模型，计算包围盒在视锥体中的位置，如果完全不在视锥体中则抛弃)，如果在视锥体内并且符合条件的就进行合批操作，将他们的网格合并后与材质球一并传给GPU去绘制。&lt;/h6&gt;

&lt;p&gt;需要符合什么条件呢：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1，900个顶点以下的模型。

    2，如果我们使用了顶点坐标，法线，UV，那么就只能最多300个顶点。

    3，如果我们使用了UV0，UV1，和切线，又更少了，只能最多150个顶点。

    4，如果两个模型缩放大小不同，不能被合批的，即模型之间的缩放必须一致。

    5，如果是不同的材质球实例同样不能被合批，即使他们一模一样。即材质球属性不能被修改，材质球对象实例必须是同一个。

    6，如果他们有lightmap的数据，必须是相同的才有机会合批。

    7，多个pass的Shader是绝对不会被合批。

    8，延迟渲染是无法被合批。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;条件比较苛刻，一不小心就无法达到合并条件。为什么它要使用这么苛刻的条件呢，我们来了解下设计动态合批这个功能的意图。&lt;/p&gt;

&lt;h6&gt;动态合批(Dynamic batching)这个功能的目标是以最小的代价合并小型网格模型，减少Drawcall调用。&lt;/h6&gt;

&lt;p&gt;很多人会想既然合并了为什么不把所有的模型都合并呢，这样不是更减少Drawcall的开销。如果把各种情况的中大型网格都合并进来，就需要消耗巨大的CPU资源，而且在摄像机移动过程中，每帧都要进行合并网格的消耗，CPU算力消耗太大，得不偿失。于是Unity3D就对这种极其消耗CPU算力的功能做了如此多的的限制，就是为了让它在运作时性价比更高。&lt;/p&gt;

&lt;p&gt;与动态合批不同，静态合批(Static batching)并不实时合并网格，而是会在离线状态下生成合并的网格，所有被标记为静态物体的模型，只要拥有相同实例的材质球都会被一并合并成网格。&lt;/p&gt;

&lt;p&gt;静态合批有诸多优点，但也存在不少弊端。被合批的是静态物体，它们是不能被移动旋转和缩放的，也只有这样我们在离线状态下生成的网格才是有效的（离线的网格数据不需要重新计算），生成的离线数据被放在Vertex buffer和Index buffer中。&lt;/p&gt;

&lt;h6&gt;静态合批生成的离线网格将导致存放在内存的网格数据量剧增，因为在静态合批中每个模型都会独立生成一份网格数据，无论他们所使用的网格是否相同，也就是说场景中有多少个静态模型就有多少个网格，与原本只需要一个网格就能渲染所有相同模型的情况不一样了。&lt;/h6&gt;

&lt;p&gt;好处是静态合批后同一材质球实例(材质球实例必须相同，因为材质球的参数要一致)调用Drawcall的数量合并了，另外合批也不会额外消耗CPU算力因为它们是在离线时生成的合批数据(也就是网格数据)，在实时渲染时如果该模型在视锥体范围内，三角形索引被部分提取出来合并后提交，而那些早就被生成的网格将被整体提交(整体网格过大时则会导致CPU和GPU的带宽消耗过大)，最后再一并发送给GPU进行渲染。&lt;/p&gt;

&lt;h6&gt;简而言之，动态合批为了平衡CPU消耗和GPU性能优化，将实时合批条件限制在比较狭窄的范围内。静态合批则牺牲了大量的内存和带宽，以使得合批工作能够快速有效的进行。&lt;/h6&gt;

&lt;p&gt;GPU Instancing 没有动态合批对网格数量的限制，也没有静态网格需要这么大的内存，很好的弥补了这两者的缺陷，但也有存在着比较大的优缺点，我们下面来逐一阐述。&lt;/p&gt;

&lt;p&gt;GPU Instancing 并不像动态和静态合批那样通过对网格的合并操作进行优化，GPU Instancing 的目标是只用一个模型网格绘制很多个地方，这些地方绘制的网格缩放大小，旋转角度和坐标可以不一样，材质球虽然相同但材质球属性可以各自有各自的区别。&lt;/p&gt;

&lt;p&gt;本质上来说 GPU Instancing 调用的是 OpenGL 和 DirectX 里的多实例渲染接口。我们拿 OpenGL 来说:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;glDrawArraysInstanced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLenum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Glsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;glDrawElementsInstanced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLenum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLenum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;glDrawElementsInstancedBaseVertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GLenum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLenum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLsizei&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GLuint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseVertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这三个接口正是 GPU Instancing 调用多实例渲染的接口，第一个是无索引的顶点网格集多实例渲染，第二个是索引网格的多实例渲染，第三个是索引基于偏移的网格多实例渲染。调用这三个接口会向GPU传入渲染数据并开启渲染，与平时渲染多次要多次执行整个渲染管线不同的是，这三个接口会分别将模型渲染多次，并且是在一个渲染管线内。&lt;/p&gt;

&lt;p&gt;如果只是一个坐标上渲染多次模型是没有意义的，我们需要将一个模型渲染到不同的多个地方，并且以不同的缩放大小和旋转角度，以及不同的材质球参数，这才是我们真正需要的。&lt;/p&gt;

&lt;p&gt;GPU Instancing 正我们提供这个功能，上面三个渲染接口告知Shader着色器开启一个叫 InstancingID 的变量，这个变量可以确定在着色计算时使用哪个实例的属性。&lt;/p&gt;

&lt;p&gt;有了这个 InstancingID 就能使得我们在多实例渲染中，辨识到底使用哪个属性参数。Shader的顶点着色器和片元着色器可以通过这个变量来获取模型矩阵、颜色等不同变化的参数。&lt;/p&gt;

&lt;p&gt;我们来看看Unity3D是怎么做的:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shader&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SimplestInstancedShader&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_Color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Color&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;SubShader&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Tags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;RenderType&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Opaque&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LOD&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Pass&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CGPROGRAM&lt;/span&gt;
            &lt;span class=&quot;cp&quot;&gt;#pragma vertex vert&lt;/span&gt;
            &lt;span class=&quot;cp&quot;&gt;#pragma fragment frag&lt;/span&gt;
            &lt;span class=&quot;cp&quot;&gt;#pragma multi_compile_instancing&lt;/span&gt;
            &lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;quot;UnityCG.cginc&amp;quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appdata&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;UNITY_VERTEX_INPUT_INSTANCE_ID&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//顶点着色器的 InstancingID定义&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2f&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SV_POSITION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;UNITY_VERTEX_INPUT_INSTANCE_ID&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//片元着色器的 InstancingID定义&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;UNITY_INSTANCING_BUFFER_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 定义多实例变量数组&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;UNITY_DEFINE_INSTANCED_PROP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;UNITY_INSTANCING_BUFFER_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;v2f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appdata&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;v2f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;UNITY_SETUP_INSTANCE_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//装配 InstancingID&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;UNITY_TRANSFER_INSTANCE_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//输入到结构中传给片元着色器&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnityObjectToClipPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;fixed4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2f&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SV_Target&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;UNITY_SETUP_INSTANCE_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//装配 InstancingID&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UNITY_ACCESS_INSTANCED_PROP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//提取多实例中的当前实例的Color属性变量值&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ENDCG&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述是一个很普通的调用 Instancing 的Shader，其中&lt;em&gt;Color 和 unity&lt;/em&gt;ObjectToWorld (模型矩阵)是多实例化的，他们通过 InstancingID 索引来确定取数组中的哪个变量。&lt;/p&gt;

&lt;p&gt;为什么这么说呢？我们来看看Shader中这些包含有 INSTANCE 字样的宏定义。&lt;/p&gt;

&lt;p&gt;首先编译命令 multi&lt;em&gt;compile&lt;/em&gt;instancing 会告知着色器我们将会使用多实例变量。&lt;/p&gt;

&lt;p&gt;其次在顶点着色器和片元着色的输入输出结构中，加入 UNITY&lt;em&gt;VERTEX&lt;/em&gt;INPUT&lt;em&gt;INSTANCE&lt;/em&gt;ID 告知结构中多一个变量即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    uint instanceID : SV_InstanceID;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每个顶点和片元数据结构中都定义了 instanceID 这个变量，这个变量将被用于确定使用多实例数据数组中的哪个实例参数，很关键。&lt;/p&gt;

&lt;p&gt;接着Shader中要把需要用到的多实例变量参数定义起来:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;UNITY_INSTANCING_BUFFER_START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;UNITY_DEFINE_INSTANCED_PROP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UNITY_INSTANCING_BUFFER_END&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述中的宏很容易从字面看出它们为&amp;quot;开始多实例宏定义&amp;quot;，&amp;quot;对多实例宏属性定义参数&amp;quot;，以及&amp;quot;结束多实例宏定义&amp;quot;。&lt;/p&gt;

&lt;p&gt;这三个宏定义我们可以在 UnityInstancing.cginc 中看到，即:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class=&quot;cp&quot;&gt;#define UNITY_INSTANCING_BUFFER_START(buf)      UNITY_INSTANCING_CBUFFER_SCOPE_BEGIN(UnityInstancing_##buf)&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#define UNITY_INSTANCING_BUFFER_END(arr)        UNITY_INSTANCING_CBUFFER_SCOPE_END&lt;/span&gt;
        &lt;span class=&quot;cp&quot;&gt;#define UNITY_DEFINE_INSTANCED_PROP(type, var)  type var[UNITY_INSTANCED_ARRAY_SIZE];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以上述的宏定义中理解到，这三个宏可以对多实例的多属性数组进行定义。&lt;/p&gt;

&lt;p&gt;于是在顶点着色器与片元着色中，我们对 InstancingID 进行装配，即宏定义：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    UNITY_SETUP_INSTANCE_ID(v) 和 UNITY_SETUP_INSTANCE_ID(i);

    装配过程其实就是从基数偏移的过程 unity_InstanceID = inputInstanceID + unity_BaseInstanceID;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终我们通过 UNITY&lt;em&gt;SETUP&lt;/em&gt;INSTANCE&lt;em&gt;ID 装配得到了 unity&lt;/em&gt;InstanceID 即当前渲染的多实例索引ID。&lt;/p&gt;

&lt;p&gt;有了多实例的索引ID，我们就可以通过这个变量获取对应的当前实例的属性值，于是就有了以下的宏定义 UNITY&lt;em&gt;ACCESS&lt;/em&gt;INSTANCED_PROP 以及通过这个宏定义获取变量的代码。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define UNITY_ACCESS_INSTANCED_PROP(arr, var)   var[unity_InstanceID]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;UNITY_ACCESS_INSTANCED_PROP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//提取多实例中的当前实例的Color属性变量值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;有了类似_Color的多实例属性操作，在模型矩阵变化中也需要具备同样的操作，我们没看到模型矩阵多实例是因为Unity在Shader编写时用宏定义把它们隐藏起来了，它就是 UnityObjectToClipPos。&lt;/h6&gt;

&lt;p&gt;UnityObjectToClipPos 其实是一个宏定义，当多实例渲染开启时，它被定义成了如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#define unity_ObjectToWorld     UNITY_ACCESS_INSTANCED_PROP(unity_Builtins0, unity_ObjectToWorldArray)&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnityObjectToClipPosInstanced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UNITY_MATRIX_VP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unity_ObjectToWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnityObjectToClipPosInstanced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnityObjectToClipPosInstanced&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xyz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define UnityObjectToClipPos UnityObjectToClipPosInstanced&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个定义也同样可以在 UnityInstancing.cginc 中找到，其中unity_ObjectToWorld是关键，它从多实例数组中取出了当前实例的模型矩阵，再与坐标相乘后计算投影空间的坐标。也就是说当开启 Instancing 多实例渲染时，UnityObjectToClipPos 会从多实例数据数组中取模型矩阵来做模型到投影空间的转换。而当不开启 Instancing 时，UnityObjectToClipPos 则只是用当前独有的模型矩阵来计算顶点坐标投影空间的位置。&lt;/p&gt;

&lt;p&gt;到此我们就从着色器中获取了多实例的属性变量，根据不同实例的不同索引获取不同属性变量包括模型矩阵，从而渲染不同位置，不同的旋转角度，不同的缩放大小，以及更多比如_Color的其他属性，整个过程都是围绕着 InstancingID 来做索引操作。&lt;/p&gt;

&lt;h6&gt;知道了 GPU Instancing 是如何渲染还不够，我们还要知道数据是怎么传进去的。&lt;/h6&gt;

&lt;p&gt;我们还是拿 OpenGL 接口编程来分析。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//获取各属性的索引&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position_loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glGetAttribLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;position&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normal_loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glGetAttribLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;normal&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color_loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glGetAttribLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix_loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glGetAttribLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;model_matrix&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//按正常流程配置顶点和法线&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;glBindBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_ARRAY_BUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//绑定顶点数组&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;glVertexAttribPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_FLOAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//定义顶点数据规范&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;glEnableVertexAttribArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;position_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//按上述规范，将坐标数组应用到顶点属性中去&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;glBindBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_ARRAY_BUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normal_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//绑定发现数组&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;glBertexAttribPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_FLOAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//定义发现数据规范&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;glEnableVertexAttribArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//按上述规范，将法线数组应用到顶点属性中去&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//开始多实例化配置&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//设置颜色的数组。我们希望几何体的每个实例都有一个不同的颜色，&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//将颜色值置入缓存对象中，然后设置一个实例化的顶点属性&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;glBindBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_ARRAY_BUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//绑定颜色数组&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;glVertexAttribPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_FLOAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//定义颜色数据在color_loc索引位置的数据规范&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;glEnableVertexAttribArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//按照上述的规范，将color_loc数据应用到顶点属性上去&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;glVertexattribDivisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//开启颜色属性的多实例化，1表示每隔1个实例时共用一个数据&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;glBindBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GL_ARRAY_BUFFER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model_matrix_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//绑定矩阵数组&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//设置矩阵第一行的数据规范&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glVertexAttribPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix_loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_FLOAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GL_FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mat4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vec4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//将第一行的矩阵数据应用到顶点属性上去&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glEnableVertexAttribArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix_loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//开启第一行矩阵数据的多实例化，1表示每隔1个实例时共用一个数据&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;glVertexattribDivisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix_loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个示例很精准的表达了数据是如何从CPU应用层传输到GPU上再进行实例化的过程。&lt;/p&gt;

&lt;p&gt;我在代码上做了比较详尽的注释，首先获取需要推入顶点属性的数据的索引，再将数组数据与OpenGL
缓存进行绑定，这样才能注入到OpenGL里去，接着告诉 OpenGL 每个数据对应的格式，然后再根据前一步描述的格式应用到顶点属性中去，最后如果做的是 GPU Instancing 多实例的属性数据则开启多实例化属性接口，让 InstancingID 起效。&lt;/p&gt;

&lt;h6&gt;总结，我们解析了 GPU Instancing 在 Unity3D 中的工作方式，得知了它能用同一个模型同一个材质球渲染不同的位置、角度、缩放大小、以及不同颜色等属性。这种没有对模型网格数量限制，没有占用大量内存的性能优化来说，很好的弥补了动态合批(Dynamic batching)与静态合批(Static batching)的不足。&lt;/h6&gt;

&lt;p&gt;但是它毕竟是只能围绕一个模型来操作，只有相同网格(Mesh)和相同的材质球实例(参数可以不同，但必须使用API来设置不同参数)的情况下才能做到多个实例在同一个渲染管线中一次性渲染的优化操作，而动态合批和静态合批却只需要材质球实例一致，网格是可以有差别的。&lt;/p&gt;

&lt;h6&gt;三者利弊各不同，有互相弥补的地方，各自本身也存在着不同程度的限制和优缺点。从整体上来看，GPU Instancing 更适合同一个模型渲染多次的情况，而动态合批(Dynamic batching)更适合同一个材质球并且模型面数小的情况，静态合批(Static batching)更适合当我们能容忍内存扩大的情况。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(三十一) 钱、才、运</title>
   <link href="http://www.luzexi.com/2019/11/09/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A831.html"/>
   <updated>2019-11-09T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/11/09/思路探讨31</id>
   <content type="html">&lt;p&gt;最近几年一直在突破自己的认知，可能是我本身从小对世界的认知水平就比较狭小的缘故，努力了好几年才只是普通人的水平，但对我来说已经是很厉害了，我很满足，山外有山，人外有人，一山还有一山高，一水还有一水深，做好自己最重要。&lt;/p&gt;

&lt;p&gt;从小到大一直无法想明白的一件事是，‘有才’为什么不一定有钱，有钱人为什么不是因为‘有才’才赚到钱。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h6&gt;后来才渐渐明白，这是我人生中一个比较大的认知错误，认为钱和才是对等的。&lt;/h6&gt;

&lt;p&gt;钱和才，虽然谈不上完全是两码事，但他们之间的联系确实没有这么紧密，不过‘有才’至少能让你解决温饱问题。&lt;/p&gt;

&lt;h6&gt;一个人有价值(就是有知识，有技能，有经验)和赚到大钱是两码事，很多时候有价值的人能被人看重，但并不一定能赚到钱，因为公司或者说组织不一定能成事，他是厉害了，周围的人不配合不协作，各怀鬼胎，一个人再厉害也无法扭转乾坤，即使周围的人协同性很好而时代潮流不配合也同样无济于事。&lt;/h6&gt;

&lt;p&gt;所以想要赚到大钱，‘天时、地利、人和’一样不能少，这个就是我们俗称的‘运气’。说起来很俗气，‘运气’很神秘，就像神棍一样，没有科学的依据，但确实这个东西真真正正存在我们的周围。&lt;/p&gt;

&lt;p&gt;这个‘运气’，有两种诠释：&lt;/p&gt;

&lt;h6&gt;一种是像稻盛和夫(日本经营之神，创业百分百成功，做什么成什么，企业破产了求他接手，立刻妙手回春)这类的，认为‘运气’是靠自己争取来的，以精神世界为中心，自己积善行德才能积攒足够多的‘运气’，用利他心态来做事，加上不屑努力，最后全社会都会回馈给他以‘运气’，最终靠着这股‘运气’走上成功的道路。&lt;/h6&gt;

&lt;p&gt;另一种是认为‘运气’是随机，就像守株待兔里的农夫，指不定什么时候兔子就自己撞到枪口上了就能有一顿饱肉吃，也像彩票的中奖概率，不知道什么时候就来那么一下，你就什么都有了。&lt;/p&gt;

&lt;p&gt;这两种我更偏向于稻盛和夫的理念，我也一直向他老人家在学习，用利他的心态做事，不屑努力，来感动全宇宙的量子(这个说法是从一本叫做《The Secret》中文叫秘密里看到的，它其实是一部鸡汤成功学的书，它告诉你其实全世界都是量子，你只要拿出你的诚意并且全力拼搏，量子就会被你吸引来帮助你)。&lt;/p&gt;

&lt;p&gt;我们不偏执任何一种，事实上两种都存在，既有自身的因素，也有随机的因素。&lt;/p&gt;

&lt;p&gt;随机的运气也并不是我们表面上看上去那么容易，它很多时候都需要毅力支撑。毅力二字是大多数人成功的秘诀，即使日子再苦再累再无趣，受压迫得再厉害，如果依然能够扛得住，运气就有可能降临到他们身上。&lt;/p&gt;

&lt;p&gt;为什么？因为风险是波动的，当震荡加剧，波幅增大，低谷更低，时间更长时，精神上和肉体上的压力就会增大，无法承受导致崩溃消亡也是正常的现象。大部分人无法承受这种非人的精神压力都选择了退缩，但只要扛过去，通常都是拨云见日，柳暗花明又一村，只是人是脆弱的，99%都选择了退缩，那最后1%中也有一半中途崩溃了，最后剩下的才是苦字熬出头的人，最终运气降临在他们身上，这种看似运气而实非运气的事也很常见。&lt;/p&gt;

&lt;h6&gt;这个世界还是公平的，我们无法把控的‘运气’确实占了成功因素的很大一部分，也只有这样才不是任何人想怎么样就怎么样的么，王思聪有钱有人有才，理论上说没有失败的理由，实际上，他开的公司，创的业，投资标的，不照样该垮的还是垮，”不经历风雨怎能见彩虹，没有人能随随便便成功“。&lt;/h6&gt;

&lt;p&gt;说实在的，我们可以避开赚钱二字不谈，人不一定要赚到足够多的钱才会幸福。&lt;/p&gt;

&lt;p&gt;“没有赚到钱的人生也能幸福”这句话很多人不理解。因为人们把钱看得太重，以至于认为成功就是有钱，有钱才能幸福，把三者划上了等号。&lt;/p&gt;

&lt;p&gt;这个偏执的观念会让人变得很痛苦，人常常会被欲望所控制，越想有钱，越痛苦，越不幸福，是一个恶性循环的开始。&lt;/p&gt;

&lt;h6&gt;我们应该坦然一点才是。​我希望我们能想明白，我们赚钱的目的是什么，如果是养家糊口，那是应该的。如果是追求富足的生活，我觉得该量力而行，别最后钱没赚到人没了情也没了，或者钱有了情没了身体没了，都得不偿失。如果是追求更高的精神境界，我觉得应该有计划的，有进也有退的，以更加稳健的姿态走向目标。&lt;/h6&gt;

&lt;p&gt;我在知乎的问答里看到这么一句话，虽然偏题了但我觉得挺值得深思，他说：”如果一个人到了40几岁，夫妻感情好，每个周还能有性生活，孩子学习成绩好，全家人身体强壮有力，这就是成功“，体会一下。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(三十) 改变自己才能改变孩子</title>
   <link href="http://www.luzexi.com/2019/11/04/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A830.html"/>
   <updated>2019-11-04T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/11/04/思路探讨30</id>
   <content type="html">&lt;p&gt;这4年半的父亲生涯着实让我改变了很多，我从我的女儿身上学到了很多很多东西。&lt;/p&gt;

&lt;p&gt;我知道她是我的镜子，我不经意间的坏习惯都能在她的身上放大很多倍，每次责备她时我都会想到自己的问题，让我心生愧疚。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;我着实明白孩子是张白纸，大部分的行为方式都是从我们日常的行为中学到，她没有这么多的经历和生活经验，所以也无法判断好与坏，只是顺着我们行为方式照着模仿罢了。&lt;/p&gt;

&lt;h6&gt;只是我们也很讨厌我们自己，大部分时候我们自己知道的自己的缺陷和自卑，而通常自己选择了原谅自己，而大部分时候无法原谅孩子有同样的问题。&lt;/h6&gt;

&lt;p&gt;这就像我们生活和工作中那样，总是拿自己做不到的事情来要求别人，我一直记得一句话：对别人是马克思主义，对自己却是自由主义。&lt;/p&gt;

&lt;p&gt;所以我想到了改变自己，我想让女儿知道，并且以自己的行为方式和思维方式让女儿知道，“我们应该怎样做才是正确的，并且做正确的事有很多很多的好处。”&lt;/p&gt;

&lt;p&gt;在正确的道路上行走着实不容易，就像我们以前在学校里上课学习那样，平时的上课学习着实枯燥乏味，如果没有小伙伴能与你一起共同努力共同学习共同生活，我们很难在读书学习这条路上直线的走下去，总是会把注意力跑偏向更加有趣的事物上去。&lt;/p&gt;

&lt;p&gt;因此我知道她要有个伴，这个伴至少应该是个精神上的伙伴，如果还能成为生活中的伙伴那是最好不过的了。(通常我的工作并不允许经常性的陪伴在她身边，但一有时间我就围绕着她)&lt;/p&gt;

&lt;p&gt;我们也像大部分父母那样严格要求女儿去纠正自己的行为习惯，不同的是我们还是觉得我们需要以洞察和理解人性的角度来对待我的女儿，只因为我深刻的认识到其实我们大部分时候，知道和明白她所要做的事情很难突破，很枯燥，很复杂，连我们自己都无法做到，却让孩子去完成。&lt;/p&gt;

&lt;h6&gt;不过无论对女儿有多心疼，多理解，我还是没有放弃对孩子正确的行为习惯和思维方式的教育，只是我想换种方式，我希望这种方式更加彻底，我也明白这种方式的艰难程度。&lt;/h6&gt;

&lt;h6&gt;抱着这种既要女儿纠正行为习惯，要学习，要突破，也同时要理解女儿是我们自己缺点和自卑心理写照的心态，我希望自己走上改变自我再影响她的路线。&lt;/h6&gt;

&lt;p&gt;于是，“改变自己，同时改变女儿，我优秀了女儿也会优秀”，成为了我的教育理念。&lt;/p&gt;

&lt;p&gt;这个教育理念是从我这些年对社会的理解和反思的所得。&lt;/p&gt;

&lt;p&gt;那么我应该怎么改变自己，改变成什么样才是对的。如果我的方向错了，或者偏了，改变的最终效果还是会有问题。&lt;/p&gt;

&lt;p&gt;于是我把这个问题的思考引向了，改变自己到什么样才是对的这个问题上。&lt;/p&gt;

&lt;h6&gt;我首先发现的是安心的心理环境是促成的理智心理的重要因素。&lt;/h6&gt;

&lt;p&gt;理智沉稳的心理状态对学习和生活都是非常有效的帮助。相反，焦躁、恐惧、不安的心态时常会导致效率低下，无法集中注意力，思考的角度也会变得狭窄和阴暗。&lt;/p&gt;

&lt;p&gt;于是我首先让自己时常保持理智，尽量减少情绪的波动，心平气和的与女儿对话，让她感觉到这个氛围是平和的。&lt;/p&gt;

&lt;p&gt;我希望创造一种环境，这种环境中，女儿能很好的思考，包括自己的问题，和别人的问题，环境对她只有促进作用而不是阻碍作用，因此我首先要保证我是理智的，平和的，否则她的思维习惯会跑偏。&lt;/p&gt;

&lt;h6&gt;其次我发现最应该原谅的是别人而不是自己，最应该去帮助别人而不是期待别人的帮助。&lt;/h6&gt;

&lt;p&gt;我们大部分时候都觉得，自己没问题，全是别人的错。这其实是人性的弱点，我们最容易原谅的是自己，最容易责备的是别人，也最容易把希望寄托在别人身上，而自己什么都不做。&lt;/p&gt;

&lt;p&gt;原谅应该更多的体现在对待别人上，只有原谅了别人，事情才会有进展。教育女儿也是一样，我更多的选择理解和原谅女儿的缺点和坏习惯，理解并且明白在困难面前人都是软弱的。&lt;/p&gt;

&lt;p&gt;帮助则更应该体现在对待别人身上，只有通过帮助别人，事情才会有十足的推进。教育女儿也是一样，我更多的去辅助女儿改掉坏习惯，在对她面对的困难的理解之上，逐步纠正她的缺点与习惯，而不是逼迫她。&lt;/p&gt;

&lt;h6&gt;我发现对精神世界改造的重要性&lt;/h6&gt;

&lt;p&gt;面对这个充满焦虑的时代，欲望与恐惧充斥着满世界，我们时常都会不由自主的随波逐流的被世界带着走，被金钱、名誉、权利、地位所吸引，被捆绑，被遏制。&lt;/p&gt;

&lt;p&gt;我反复思考着我们最终人生的意义，我想它肯定不是这些金钱、名誉、权利、地位这些东西，虽然是它们都是我们所渴望的、期盼的，也是避不开的实实在在的‘必需品’。&lt;/p&gt;

&lt;p&gt;但它们毕竟是靠机缘巧合出现的，也时常机缘巧合的消失(眼看他起高楼，眼看他宴宾客，眼看他楼坍塌的事数不甚数)，唯有精神力量才会一直存在下去。&lt;/p&gt;

&lt;h6&gt;精神力量能让我们在面对幸运时更加稳健，在面对低谷时更加冷静沉着，也只有精神力量才能让我们更加持久、幸福、并且优秀的生活下去。&lt;/h6&gt;

&lt;p&gt;于是我希望改造自己成为精神力量的源泉，而不是精神力量的消耗者，锻炼自己拥有更加强大的毅力、耐力、抵抗力，并且将这颗精神力量的种子种在女儿身上，始终鼓励她勇敢的挑战自己，突破自己，让她变得坚强、勇敢、积极乐观。&lt;/p&gt;

&lt;h6&gt;我发现人生中无论大小孩，积累对我们的重要性&lt;/h6&gt;

&lt;p&gt;我发现社会是由‘积累’构成的，无论是财富，名誉，智慧，知识，经验，都是逐日积累而成，而不是一蹴而就的。&lt;/p&gt;

&lt;p&gt;就因为不是一蹴而就的，所以才形成了一种牢固的‘优势’，这种‘优势’不是一日所成(人们总是幻想着能拼几天几星期几个月就能换来‘优势’)，也并不会因一日所垮。‘劣势’或者说坏习惯，也同样不是一蹴而就的，也是通过日复一日，年复一年的积累而成，我们时常担心着潮流会瞬息间转向导致自己无法适应。&lt;/p&gt;

&lt;h6&gt;于是我提出了“每日一小步，每年一大步”的生活和学习理念，我不但要自己每日践行这种自律的理念，也希望女儿心中也能逐步体会到积累的重要性，在我们生活中，每天都积累一些小优势，每年就能积累一个大优势，年复年的坚持下去，最终我和她都将得益于积累，也得以于自律。&lt;/h6&gt;

&lt;h6&gt;对女儿的教育始终源自于我对人性的洞察，我们无法避免的承受着各种各样的缺点和自卑的情节，有时我也原谅自己，但始终未放弃前进，我希望最终我的努力奋进和自我突破的意识，能感动女儿，在她心中种下一颗小小的种子，这颗种子在她潜意识里生根发芽。&lt;/h6&gt;

&lt;h6&gt;女儿的性格是我性格的写照，女儿的习惯是我生活中的点滴所形成的，“改变女儿最有效的方式就是改变自己”这句话始终刻印在我心中，警醒着我不断向更好的自己，更好的家庭，更好的未来前进。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第五章，资源的加载与释放</title>
   <link href="http://www.luzexi.com/2019/11/02/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E8%B5%84%E6%BA%90%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E9%87%8A%E6%94%BE.html"/>
   <updated>2019-11-02T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/11/02/Unity3D高级编程之进阶主程-资源的加载与释放</id>
   <content type="html">&lt;p&gt;我们在计算机上编程，始终逃不过计算机的体系范围。对于计算机来说不过是进程，线程，CPU，CPU缓存，内存，硬盘，GPU，GPU显存，我们在编程和优化时始终围绕着这个几个关键点在做文章。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;从计算机宏观的角度上来看，计算机本身的内容就这么些，假如我们暂时不去细想具体的逻辑细节，我们可以从大体上明白我们需要做的工作与这些内容有多大的关系。&lt;/p&gt;

&lt;p&gt;我们制作的软件运行在进程上，所以进程是我们的载体，线程可以分担进程的负担，有利于我们更大限度的利用多核CPU，这样就有不只一个CPU为我们工作。&lt;/p&gt;

&lt;p&gt;在PC下CPU的负荷是由多个进程的消耗所组成的但我们只需要关心我们自己进程的消耗，它大部分都是由业务逻辑、算法，内存分配与回收等程序运行所造成的消耗。&lt;/p&gt;

&lt;p&gt;CPU缓存的存在增加了CPU执行命令的命中率，使得CPU执行效率提高。只是CPU只认机器码由1和0组成的命令组合，于是在CPU之上又有了汇编这种语言做中间件，使得我们能够不用去记住0和1的世界，只是这个中间件还需要操作寄存器等直面硬件的事务让我们觉得还是太繁琐。对于庞大的软件系统来说人类无法承受如此庞大复杂度系统下的调试之苦，于是就有了更高级的语言+编译器来让编程变得更加简单，编译器它翻译了我们能容易识别的各种语言包括C++、Java、C#等，它先翻译成中间语言再将中间语言翻译成的二进制码被CPU识别。&lt;/p&gt;

&lt;p&gt;这些高级语言能够让人类更加专注于编写复杂和庞大的软件系统，从而解放了我们直面硬件的痛苦。Unity3D引擎从这层意义上来说也是做了同样的事情，它将大部分对OpenGL/DirectX等图形接口底层的调用都封装好了等我们去用，解放了我们需要学习枯燥复杂的底层的时间，可以将更多的注意力放在对业务逻辑的框架结构和逻辑上。但是在我们制作过程中始终绕不过去的是硬件的工作流程和方式，如果我们想要编写更加优秀的程序，就得学习和理解这些底层原理，也只有这样才能明白我们在编写具体框架逻辑中对计算机是有利还是有弊。&lt;/p&gt;

&lt;p&gt;内存是除了CPU缓存外最快的数据存取地点了，所以要想更快的取得内容就要更多的借助内存，不过也不能无止境的使用内存，比如我们的移动设备，在手机中内存还不是那么廉价或者说容量还不足以可以肆无忌惮的任意使用，即使是PC上内存已经足够大了也要考虑到其他软件进程的内存消耗，不能只顾自己进程的霸占更多内存。&lt;/p&gt;

&lt;p&gt;硬盘在现代已经是很廉价了，硬盘占用的大小已经很少被大家所诟病，不过背后却需要考虑宽带问题。虽然硬盘廉价，但宽带并没有那么廉价，大部分对磁盘的占用都需要从网络上下载下来，这种宽带的占用量其实是紧张的，因此我们经常需要约束对硬盘的占用量，就是为了考虑下载时更多的节省宽带的占用量。&lt;/p&gt;

&lt;p&gt;GPU对CPU的优势是对图形图像的处理比CPU更加强大，它的主要架构和运行模式都是为图形图像而生的，CPU常将大部分图形图像处理都交给GPU去做。从前都是CPU自己处理图形图像，但现代社会中GPU已经不像是以前那么昂贵了，成本已经到了平民化的水平，GPU也已经完全普及在各大设备中。即使是GPU普及的情况下，但GPU的性能好坏也是参差不齐，我们依旧要尽最大的努力去学习和理解GPU的运作原理，以在利用GPU算力时尽可能得发挥其最大优势，以及降低无用的等待与消耗。&lt;/p&gt;

&lt;p&gt;虽然移动设备架构的设计没有将显存加入进去，但显存在PC上却是运用的玲离尽致，显存也确实让GPU在工作效率上升了一个台阶，就像CPU的缓存一样，显存让GPU得到数据和处理数据的效率更高。&lt;/p&gt;

&lt;h6&gt;前面的章节说了这么多关于算法、框架、结构、数学、图形学等，我希望能用更大的角度来观察总结我们所天天需要接触的编程工作。每条语句，每个结构，每个编码都能知道我们现在所要围绕的是哪个节点，是否能通过节点优化来让当前程序的执行更加高效，让程序跑在设备上时更加流畅。&lt;/h6&gt;

&lt;h6&gt;说了这些关于计算机本身的事，寓意是想从宏观的角度看问题，抛开具体的架构、系统逻辑、框架结构等细节来看看我们所面对的工作到底是个怎样的世界。从根本上看我所说这些并不是什么特别具体底层的东西，但是也可以从另一个角度了解我们所面对的编程工作，对我们未来的技术方向会有很大的帮助。&lt;/h6&gt;

&lt;h3&gt;前面讲了很多关于计算机本质的东西，这节我们主要来讲一下关于资源的内容。&lt;/h3&gt;

&lt;h3&gt;资源加载的多种方式&lt;/h3&gt;

&lt;p&gt;虽然资源的格式并不一定要依照引擎来，但如果自己另开辟一种格式来做为自定义资源格式确实耗时耗力，性价比很难适合，虽然也要按项目的需求来，如果是那种资源保密性要求很强的，其实也可以借助Unity3D自身的机制来完成加密工作(下面的章节中会介绍加密)。&lt;/p&gt;

&lt;p&gt;这里我们还是主要来说说以Unity3D自身格式为重点的资源加载方式。&lt;/p&gt;

&lt;p&gt;我们可以把资源加载分为阻塞式和非阻塞式。到底什么是阻塞式什么是非阻塞式呢？&lt;/p&gt;

&lt;p&gt;简单来说，阻塞是当前资源加载完了才能执行下一条语句，非阻塞是开另一个线程(或协程)加载资源，当前的主线程可以继续执行程序，当加载完毕时再通知主线程。&lt;/p&gt;

&lt;p&gt;在Unity3D中阻塞式的加载主要有：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1.Resource.Load
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Resource.Load是传统的资源加载方式，Unity3D通过Resources这个名字的文件夹来加载资源。&lt;/p&gt;

&lt;p&gt;在移动设备下，Unity3D打包了Resources文件夹的所有资源文件成为1个或几个资源文件(是资源文件合并成1个或几个资源包文件)放入包内，当调用Resource.Load时从这几个资源文件中加载。&lt;/p&gt;

&lt;h6&gt;这个资源包文件会被Unity3D在打包时压缩，保证了包体的大小会适度的减少，压缩的另一面是解压，因此在通过Resource.Load加载时也增加了解压的CPU损耗。这也是很多项目不乐意使用Resources的缘由，解压消耗带给他们不必要的开销，因为CPU资源比硬盘资源珍贵的多。&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    2.File read + AssetBundle.CreateFromMemory + AssetBundle.Load
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们也可以先通过文件操作加载资源文件，再通过AssetBundle.CreateFromMemory的方式把byte数据转换成AssetBundle格式，再通过AssetBundle.Load从AssetBundle中加载某个资源。&lt;/p&gt;

&lt;h6&gt;这种方式看起来费时费力，但是这种方式可以加入我们些许自定义功能。比如能在加载AssetBundle前做加解密操作，加载AssetBundle前自主加载了文件，文件的数据的加解密方式就可以自由的把控，我们可以先用文件操作获得数据后解密，再转换成AssetBundle实例，最后交给资源控制程序处理。&lt;/h6&gt;

&lt;p&gt;不过获得加解密AssetBundle的能力，是需要付出代价的，代价就是内存和GC(内存的分配与销毁)。&lt;/p&gt;

&lt;p&gt;由于用文件操作时完全读入了整个文件的数据，导致当前还不需要的资源也一并读入内存，增大了内存消耗，另外转换成AssetBundle后的byte数据也不再由用处，等待GC的消耗动作，大大增加了内存分配和销毁的CPU负荷。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    3.AssetBundle.CreateFromFile + AssetBundle.Load
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们还可以使用通过直接加载文件变成AssetBundle的方式，再通过AssetBundle.Load接口来获得资源。&lt;/p&gt;

&lt;p&gt;这种加载方式最大的好处是按需分配内存。AssetBundle.CreateFromFile并不会把所有资源文件整个加载进内存中，而是先加载数据头，通过数据头中的数据去识别各个资源在文件中的偏移位置，当调用AssetBundle.Load时，根据数据头中对应资源偏移量的记录，找到资源位置，加载数据进入内存，因此我们说它是按需分配内存的。&lt;/p&gt;

&lt;p&gt;在Unity3D中非阻塞式的加载有：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1.AssetBundle.CreateFromFile + AssetBundle.LoadAsync
    2.WWW + AssetBundle.Load
    3.WWW + AssetBundle.LoadAsync
    4.File Read all + AssetBundle.CreateFromMemory + AssetBundle.Load
    5.File Read all + AssetBundle.CreateFromMemory + AssetBundle.LoadAsync
    6.File Read async + AssetBundle.CreateFromMemory + AssetBundle.Load
    7.File Read async + AssetBundle.CreateFromMemory + AssetBundle.Load
    8.File Read async + AssetBundle.CreateFromMemory + AssetBundle.LoadAsync
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;几种方式主要是由文件读取和AssetBundle异步加载形式组合而成。&lt;/p&gt;

&lt;h6&gt;前2种为主流的异步加载方式。其中第1种用的比较多，因为大多数资源文件都会在游戏开始前进行比对和下载，所以没必要使用WWW的形式从本地读取或从网络下载。&lt;/h6&gt;

&lt;p&gt;其实这里涉及到“为什么要用非阻塞加载”的问题。阻塞式加载这么好用，为什么还要用非阻塞式。&lt;/p&gt;

&lt;p&gt;我们不要为了异步而异步，有人会觉得异步更高级，如果只是为了异步而做异步是没有意义的。大部分情况下我们在使用阻塞式加载资源时，都会遇到一个问题，在某一帧加载的资源很多，加载完毕后需要实例化的资源也很多，从而导致画面在这一帧耗时特别长，画面卡顿现象特别不严重，用运营同学们的话说“对用户来说不友好”。为了能更好更平滑的过度场景，我们需要把要加载和实例化的时间跨度拉长，虽然增加了些许等待时间，却能平滑过渡到最终我们需要的画面。&lt;/p&gt;

&lt;h6&gt;具体怎么做呢。其实不复杂的，可以先获取所有需要加载的资源，放入队列中，每次加载N个(N可以根据实际情况调整)，如果已经加载过的就直接通知逻辑程序实例化，不曾被加载的则调用加载程序并将调用后的加载信息(AssetBundleRequest)放入‘加载中’队列，不开携程而是用Update帧更新去判断‘加载中’队列中是否有完成的，每加载完毕一个资源先从‘加载中’队列里移除，再通知逻辑程序再进行实例化，直到队列中的请求加载完毕为止，继续下一个N个加载请求。当然这里也需要做些判断，例如已经在加载队列里的资源不重复加载等一些避免重复加载的判断。&lt;/h6&gt;

&lt;h3&gt;AssetBundle的引用计数方式卸载&lt;/h3&gt;

&lt;p&gt;Assetbundle在加载后我们需要寻求释放，只有加载没有释放内存只会不断攀升。该怎么释放就成了问题，因为资源使用的地方太多，太庞杂，所以为了能更好的知道什么时候该释放资源，我们需要制定一个规则，这个在遵守这个规则的前提下，我们就知道什么时候资源没有被再使用了，有多少个地方在使用。&lt;/p&gt;

&lt;p&gt;引用计数就是判断这种释放依据的很好的技巧，具体方式为如下：&lt;/p&gt;

&lt;h6&gt;我们对AssetBundle包装一个计数器(是个整数)，当需要某个AssetBundle时先加载所有依赖的AssetBundle，每加载一个AssetBundle就为该AssetBundle的引用计数加1。&lt;/h6&gt;

&lt;p&gt;如果调用的是Prefab，会通过Instantiate进行实例化，这里必须在每次实例化时对该AssetBundle引用计数加1，不过这样在实例化时才做引用计数加1的手法，又消耗了些许我们的注意力而且容易遗漏，我们可以选择一次实例化调用一次加载，这样就节省了人额外的注意力，少一点主意力的消耗，就少一些遗漏。&lt;/p&gt;

&lt;p&gt;如果是Texture贴图这种不需要进行实例化的资源则最好不要被再次被引用，因为被再次引用会导致引用计数的错乱，我们可以选择每次当需要Texture时通过查看AssetBundle是否加载，有则直接取，没有则加载后再取，每次取资源时都对相应的AssetBundle计数加1。&lt;/p&gt;

&lt;h6&gt;当Destroy销毁实例或者不需要用资源时，则统一调用某个自定义的Unload(假设这个接口名字是自定义类AssetBundleMrg.Unload)接口并附上加载时的关键字(为了能更快的找到AssetBundle实例)，从而将对应的AssetBundle的引用计数减1。&lt;/h6&gt;

&lt;p&gt;减少引用计数后，倘若该AssetBundle引用计数为0，则认为可以进行AssetBundle卸载，则立即卸载。&lt;/p&gt;

&lt;p&gt;但是问题又来了，及时的卸载也会有问题，因为每次都卸载后又需要该资源时需要再加载，中间消耗的IO和CPU也很多，我们可以通过增加空置倒计时时间来给卸载AssetBundle一个预留时间。&lt;/p&gt;

&lt;p&gt;当需要卸载时，AssetBundle进入倒计时，比如5秒，5秒内仍然没有任何程序使用这个资源则立即进行卸载，如果5秒内又有程序加载该AssetBundle资源则继续使用引用计数来判断是否需要进入卸载倒计时。&lt;/p&gt;

&lt;p&gt;不过还是有个小问题，如果大量资源在同一时间卸载，就会造成大量资源同一时间进入倒计时，倒计时完毕同时进行卸载，也会带来1帧消耗过大的问题，毕竟资源的卸载时内存的消耗，大量的内存在同一时间销毁会带来大量的CPU消耗。此时我们可以对倒计时进行随机2-5秒的时间内随机一个值，让卸载分散在这个时间段内，让卸载的消耗更加平滑。&lt;/p&gt;

&lt;h3&gt;AssetBundle的打包与颗粒度大小&lt;/h3&gt;

&lt;p&gt;Unity3D对AssetBundle的封装做的很好，当我们在打包AssetBundle时Unity3D会自动去计算AssetBundle与AssetBundle之间的依赖关系，所以我们能很轻松的将资源打的很细(贴图，网格，Shader，Prefab，每个资源分的很开)。&lt;/p&gt;

&lt;p&gt;这使得我们能很轻松得让一个AssetBundle只装一个资源文件并且控制起来也得心应手，只要在加载时读取存有依赖关系的AssetBundle就能得到AssetBundle之间的依赖关系数据(AssetBundleManifest实例数据)，根据这个依赖数据我们就能轻松的加载相关的其他AssetBundle。&lt;/p&gt;

&lt;p&gt;既然AssetBundle颗粒度可以很容易的缩放，那么我们就需要考虑颗粒度的大小到底对项目产生多大的影响。&lt;/p&gt;

&lt;p&gt;我们说说左右两种极端状态下的表现。&lt;/p&gt;

&lt;h6&gt;一种为颗粒度极粗状态，所有资源都打成一个AssetBundle包，所有逻辑程序要的资源都从这个AssetBundle里取。引用计数，在这里已经完全没有了用处，由于只有一个AssetBundle已经完全没有卸载的可能了。这导致了内存只会逐步增大，而绝不会因为不再需要某资源而卸载AssetBundle(当前AssetBundle的卸载机制中没有只销毁某部分资源的功能)。&lt;/h6&gt;

&lt;p&gt;我们来看看整个过程，从一个很大的文件包从网络上下载下来，解压后成为一个AssetBundle文件，然后我们读取它并从中获得资源。从这个过程来看只有一个AssetBundle的极限状态下，文件操作的数量极低，导致读取AssetBundle文件信息没有障碍，解压的IO连续性非常高，导致解压时不需要创建很多文件从IO上会相对比较快些，同时由于只有一个文件内容所以打包的压缩率也是最大的。&lt;/p&gt;

&lt;h6&gt;另一种为颗粒度极细状态，所有贴图、网格、动画、Shader、Prefab都各自打自己的一份AssetBundle(一份AssetBundle只带一个资源)。为了能更有效的控制内存，AssetBundle之间的依赖关系和引用计数在这里用处非常大。通过引用计数和依赖关系，我们能很有效的控制逻辑系统中需要的资源和内存中的资源是一致的。&lt;/h6&gt;

&lt;p&gt;我们来看看整个过程，从网上下载下来所有AssetBundle资源文件，对每个压缩过的资源文件进行解压，当需要某个资源时从AssetBundle读取资源并且读取前先根据依赖关系读取需要的资源，并且对所有加载过的AssetBundle引用计数加1。当卸载时，对当前卸载的AssetBundle引用计数减一，并且对存有需求上依赖关系的其他AssetBundle也减一（由于当前资源卸载后对其他依赖资源不再引用），如果引用计数为0则启动卸载。&lt;/p&gt;

&lt;p&gt;我们从这个过程看来，一个极限细分颗粒度状态下的AssetBundle机制，文件操作数量会很大，IO操作的时间会因为文件增多的增大许多，导致下载时间拉长，下载完毕后解压的总时间也会拉长，打包时由于每个文件单独打包压缩因此压缩比率会降低压缩时间加长。&lt;/p&gt;

&lt;p&gt;上述分析了两种极限状态下的利弊，我们可以根据自己项目的需求来定制AssetBundle打包机制。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第七章，渲染管线与图形学(三) - 渲染原理与知识2</title>
   <link href="http://www.luzexi.com/2019/10/26/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E4%B8%8E%E5%9B%BE%E5%BD%A2%E5%AD%A67.html"/>
   <updated>2019-10-26T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/10/26/Unity3D高级编程之进阶主程-渲染管线与图形学7</id>
   <content type="html">&lt;p&gt;这节我们将继续补充前面渲染管线中没有讲到的渲染知识和原理。&lt;/p&gt;

&lt;h3&gt;Filter 滤波方式&lt;/h3&gt;

&lt;p&gt;Filter滤波其实在图形引擎中被用到的地方有很多，我们在做项目时却很少察觉到，它的重要性不容忽视。Filter 滤波到底是什么呢？下面我们来讲讲它的来龙去脉。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;一张纹理贴图可以是线性的，正方形的，长方形，甚至三维形式的，当它们被映射到网格表面，再变换到屏幕坐标系之后，纹理上的独立纹素(纹素)几乎不可能直接和屏幕上的最终画面像素直接对应起来。为什么呢？&lt;/p&gt;

&lt;p&gt;因为屏幕上的物体可能是放大后的效果，或者离摄像机很近导致物体需要被放大在屏幕上，这样就导致是屏幕上的一个像素只是对应纹理贴图上一个纹素的一部分（因为被放大了），或者也有可能物体被缩小了，或者离摄像机很远，这时一个像素可能包含很多纹素（因为被缩小了）。因此一个纹素与一个像素通常都是无法一一对应的。&lt;/p&gt;

&lt;p&gt;无论哪种情况我们都无法精确的知道应该使用哪些纹素值，以及如何对它们求平均值或插值。OpenGL就为我们提高了多种Filter 滤波方式，不同的滤波方式在速度和画质上做出了不同的权衡。&lt;/p&gt;

&lt;p&gt;滤波一般分两种，一种是最近采样即Nearest，一种是线性采样即Linear。在Unity3D中Point类型的采样就是最近采样(Nearest Point Sampling)，线性采样在Unity3D中又分为双线性采样(Bilinear)和三线性采样(Trilinear)。&lt;/p&gt;

&lt;p&gt;最近采样，即当纹素与像素大小不一致时，取最接近的纹素进行采样。虽然使用了Mipmap技术，但像素点与纹素仍然没有得到很好的匹配，所以这种方法在纹理需要进行放大或缩小时，结果会变形难看。于是就有了更好的双线性采样算法。&lt;/p&gt;

&lt;p&gt;双线性采样，是取离纹素最近的4个纹素，取得的纹素与中心点的纹素的距离就是参与计算的权重值，把所有采样得到的纹素进行加权平均后得到最终的像素颜色。&lt;/p&gt;

&lt;p&gt;双线性过滤是怎么计算的这4个纹素呢？假设源图像大小为m x n，目标图像为a x b。那么两幅图像的边长比分别为：m/a和n/b。目标图像的第（i,j）个像素点（i行j列）可以通过边长比对应到源图像。其对应坐标应该为（i&lt;em&gt;m/a,j&lt;/em&gt;n/b）。显然这个对应坐标一般来说不是整数，而非整数的坐标是无法在图像中使用。双线性插值通过寻找距离这个对应坐标最近的四个像素点，来计算该点的像素值。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    映射点计算方法:

    srcX=dstX* (srcWidth/dstWidth)+0.5*(srcWidth/dstWidth-1)

    srcY=dstY* (srcWidth/dstWidth)+0.5*(srcWidth/dstWidth-1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/book/7/g1.png&quot; alt=&quot;双线性过滤&quot;&gt;&lt;/p&gt;

&lt;p&gt;双线性过滤像素之间的过渡更加平滑，但是它只作用于一个MipMap Level,它选取纹素和像素之间大小最接近的那一层MipMap进行采样。当和像素大小匹配的纹素大小在两层Mipmap Level之间时，双线性过滤在有些情况效果就不太好。于是就有了三线性过滤。&lt;/p&gt;

&lt;p&gt;三线性过滤以双线性过滤为基础。对像素大小与纹素大小最接近的两层Mipmap Level分别再进行一次双线性过滤，然后再对两层得到的结果进行线性插值。&lt;/p&gt;

&lt;p&gt;上面的几种线性过滤外，还有各向异性过滤(Anisotropic Filtering)。什么是各向异性和同性呢：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    各向同性，当需要贴图的三维表面平行于屏幕就是各向同性。

    各向异性，当要贴图的三维表面与屏幕有一定角度的倾斜则是各向异性。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;各向异性过滤，除了会把Mipmap因素考虑进去外，还会把纹理与屏幕空间的角度这个因素考虑进去。它会考滤一个像素对应到纹理空间中在u和v方向上与u和v的比例关系，如果u:v不是1:1时，将会按比例在各方向上采样不同数量的点来计算最终的结果。&lt;/p&gt;

&lt;p&gt;各向异性采样的多少取决于Anisotropic Filtering的X值，所以在Unity3D的纹理图片设置上有一个Aniso Level的设置选项，用来设置Anisotropic Filtering的级别。&lt;/p&gt;

&lt;p&gt;采样方式从，最近采样，到双线性过滤，到三线性过滤，再到各向异性过滤，采样次数一级级提高，最近采样1次，双线性采样4次，三线性采样8次，各向异性采样随着等级不同各有不同，效果也是一级级的提高，随着采样次数的提高需要消耗的GPU也会逐级提高(这些都是在OpenGL或DirectX中完成的)，因此我们在设置图片过滤时需要权衡画质与性能。&lt;/p&gt;

&lt;h3&gt;光照阴影是如何生成的&lt;/h3&gt;

&lt;p&gt;前面讲了很多关于Mipmap和纹理采样的知识，对Mipmap和纹理采样的理解对底层画面渲染的理解有很大的帮助。这些所讲的内容也同样具有重大意义，阴影涉及到实际生活中的知识在渲染中是如何模拟的，让原本虚拟的计算机画面更加拟真现实生活。&lt;/p&gt;

&lt;p&gt;为了能让场景和人物看起来更加真实，光影效果是不可或缺的。我们经常能在画面中看到阴影跟随着物体摆动而变动，并且物体被光照遮挡的阴影投射在其他物体上，这样的效果十分动人，那么阴影是如何产生的呢？我们来细致的解析一下，通过解析我们能够更加深刻的理解阴影的生成原理，还可以通过对阴影原理的理解来有针对性的优化阴影对性能的消耗。&lt;/p&gt;

&lt;p&gt;我们可以首先考虑真实生活中阴影的产生流程，当一个光源发射一条光线遇到一个不透明物体时，这条光想不能再继续照亮它背后的物体。因此这个物体背后的物体就会产生阴影，这些阴影区域的产生是因为光线无法到达这些区域。&lt;/p&gt;

&lt;p&gt;在计算机的实时渲染中我们无法用表达出每条光照的射线，我们是如何做到阴影的投射的呢？&lt;/p&gt;

&lt;p&gt;其实可以很简单，假设，我们将摄像机放在光源的位置上，方向与光源照射的方向重合，那些看不到的地方就成了阴影产生的地方。不过，我们不可能真的将摄像机放在那里，但却可以用这种形式的方式，单独渲染一次在摄像机在该位置的图像。只有图像不行，我们需要的是阴影，刚好物体从该位置渲染出来的片元的深度值提供了我们需要的数据，将所有片元的深度值都写入深度缓存中后，我们就可以利用这个深度缓存做阴影的计算了，深度值越大的片元被遮挡的可能性越大，深度值最小的片元不会被遮挡。&lt;/p&gt;

&lt;p&gt;这就是阴影映射纹理(Shadow Map)技术，即在渲染中第一个渲染流程(pass)负责在光源点位置计算得到深度值，输出像素到阴影映射纹理(Shadow Map)。我们实质上得到是一张深度图，它记录了从该光源的位置出发，能看到的场景中距离它最近的表面位置的深度信息。&lt;/p&gt;

&lt;p&gt;只是这张阴影映射纹理对于我们人类来说不够直观，如果想要更好更直观的看到当前摄像机屏幕上的阴影图就更好了。屏幕空间的阴影投影技术(Screenspace Shadow Map)就产生了这种直观的效果，性能和效率也更高，不过它需要显卡支持MRT(Multiple Render Targets)，有些移动平台并不支持这种特性。&lt;/p&gt;

&lt;p&gt;当使用了屏幕空间阴影投射技术(Screenspace Shadow Map)时，Unity3D会让从光源出发的深度图与摄像机产生的深度图做比较，如果摄像机的深度图中记录的点的表面深度大于转化到光源出发生成的深度图的点的深度，那么就说明表面虽然是可见的但却处于该光源的阴影中。通过这样的方式，屏幕空间阴影投射技术(Screenspace Shadow Map)得到了当前摄像机屏幕空间中的阴影区域，即得到了当前摄像机屏幕的阴影图。&lt;/p&gt;

&lt;p&gt;到这里，我们已经得到了阴影映射纹理，不管是传统的阴影图还是屏幕空间阴影图，我们都可以根据这张阴影图来计算出投射到物体的阴影了，那么阴影图有了，应该怎么投射呢？&lt;/p&gt;

&lt;p&gt;主动计算投射到其他物体产生阴影是比较难的，但反过来，根据阴影图主动计算当前渲染物体上的片元是否被阴影是相对比较容易。我们会看到Unity3D在渲染物体上看到有生成阴影和接受阴影两个选项，即Cast Shadows 和 Receive Shadows。&lt;/p&gt;

&lt;p&gt;传统的接受阴影的方式，是将当前顶点的位置变换到光源点的空间下得到它在光源空间中的位置，再根据xy轴分量对阴影映射纹理(Shadow Map)进行采样，从而得到阴影映射纹理中该位置的深度值，如果这个深度值小于该顶点的深度值即z轴分量，那么说明该点位于阴影中，于是在片元颜色输出上加深阴影颜色，反之则没有被阴影遮盖。&lt;/p&gt;

&lt;p&gt;在屏幕空间阴影映射技术中(Screenspace Shadow Map)则可以更加方便一点，因为已经得到了当前摄像机整个屏幕的阴影图，不需要再进行额外的计算，只需要在当前屏幕位置对阴影图进行采样便能知道是否在阴影下，即将当前顶点坐标从模型空间变换到屏幕空间后使用这个坐标对阴影图进行采样即可。相对于传统的阴影渲染来说，屏幕空间阴影映射技术提高了更多的GPU性能效率。&lt;/p&gt;

&lt;p&gt;在Unity3D中使用 LightMode 为 ShadowCaster 的Pass标记为阴影生成管线。当Unity3D在渲染时会首先在当前Shader中找到LightMode为ShadowCaster的Pass，如果没有则会在Fallback指定的Shader中继续寻找，如果没有则无法产生阴影，无论传统的阴影投射还是屏幕空间阴影投射都需要第一步先产生阴影纹理图(Shadow Map)。当找到LightMode为ShadowCaster的Pass后，Unity3D会使用该Pass来制作光源的阴影映射纹理(Shadow Map)。&lt;/p&gt;

&lt;h3&gt;Lightmap烘培原理&lt;/h3&gt;

&lt;p&gt;随着硬件技术的发展，人们对场景的画质效果越来越高，实时光照早已经满足不了人们对画质的需求，想要更加细腻真实光照效果，只能通过离线的烘培技术才能达到理想画质的效果。&lt;/p&gt;

&lt;p&gt;全局光照，简称GI(Global Illumination)，是在真实的大自然中，光从太阳照射到物体和地面再经过无数次的反射和折射，使得地面的任何物体和地面都叠加着直接照射的光和许许多多物体反射过来的间接光(反射光)，导致我们从眼睛里看到画面是光亮又丰富的。&lt;/p&gt;

&lt;p&gt;这种无数次反射和折射形成的高质量画面，才是人们在3D游戏画面中真正想要看到的。但是即使今天硬件技术发展的如此迅速，也无法做到实时的进行全局光照(Realtime Global Illumination)，这样计算量太大，CPU和GPU都无法负担起这个重任。&lt;/p&gt;

&lt;p&gt;离线全局光照就担负起了这个丰富画面光照效果的重任，它不再需要这么多的实时计算的CPU和GPU算力，只要1张或几张光照图(Lightmap)就能将全局光照的效果复原到物体上，不过也仅限于场景静态物体的光照烘培。&lt;/p&gt;

&lt;p&gt;其实烘培这趟水很深，如果要具体深入到工程上的实现，涉及到的算法和图形学知识非常多，这里并不打算深究，而是讲讲我们能相对容易获得的关于Lightmap的原理和知识。根据这个原理，我们在项目的制作和优化中能起到很好的作用。&lt;/p&gt;

&lt;p&gt;什么是烘焙？个人认为从英文‘Bake’翻译过来有点偏差，导致很多工具按钮用‘Bake’表示时，很多人都同样把它理解成了烘培，其实更应该理解为‘制作’。&lt;/p&gt;

&lt;p&gt;烘培简单地说, 就是把物体光照的明暗信息保存到纹理上, 实时绘制时不再需要进行光照计算, 而是采用预先生成的光照纹理(Lightmap)来表示明暗效果。&lt;/p&gt;

&lt;p&gt;我们在渲染3D模型时用到的基本都是顶点，UV，纹理贴图等(这里不多展开)，在顶点上设置UV，形成片元后就成了顶点间的插值UV，用这个UV坐标去纹理贴图上取得颜色值，再填充到帧缓存中最后显示到画面上。&lt;/p&gt;

&lt;p&gt;光照纹理(Lightmap)的显示也是同样道理，用UV坐标来取得光照纹理(Lightmap)上的颜色，最后叠加到片元颜色上输出给缓存。&lt;/p&gt;

&lt;p&gt;这其中的UV有一点讲究。我们在制作模型时的UV数据可以有很多个，其中UV0主要是为了映射贴图纹理而用，在模型制作过程就在模型数据中制作好了，而UV1也就是我们程序中的uv2或俗称的2u，主要是为Lightmap做准备的，还有UV2即程序中的uv3，是为实时全局光照准备的，只有UV3即程序中的uv4开始才是我们程序可以自定义使用的UV数据，其实uv可以有很多个uv5，uv6，不过Unity3D的网格类(Mesh)暂时只提供到uv4的获取接口。&lt;/p&gt;

&lt;p&gt;既然光照纹理(Lightmap)存储的是光照信息，那么它到底存了哪些信息呢？我们先来看下这幅图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺图
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这幅图解释了烘培的简单模型，它分为三个部分，第一部分为光线射到墙壁后反射过来照到模型上，第二部分为光线照射过来时被其他模型挡住，导致当前的模型没有被光线照射到并且有阴影产生，第三部分为光线直接照射到模型上产生的颜色信息。&lt;/p&gt;

&lt;p&gt;这三者之和最终形成了完全的光照颜色。可以用一个简单的公式来说明这三者的结合方式：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    光照颜色 = 间接光照颜色 + 直接光照颜色 * 阴影系数(0到1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于直接光的计算代价比较少，在一些光照并不复杂的场景中不记录直接光信息，而是由Shader自己计算直接光照。因此我们能看到，很多项目并没有记录直接光，而只是记录间接光，即光照纹理中只记录了从其他物体反射过来的光产生颜色的总和，加上另一张阴影纹理记录产生阴影部位的信息。如果你希望记录在光照纹理中主要光的方向，则可以开启Directional Model的Directional来获得，这个文素上主要光的方向信息可以被用在Shader中作为计算的变量。&lt;/p&gt;

&lt;p&gt;现在我们知道了烘培(Bake)会最多产生3种贴图，一种是光照纹理图(可能是间接光照纹理图，也可能是间接光照+直接光照+阴影合并的纹理图，取决于你在Unity3D中Lighting Mode的设置)，一种是阴影纹理图，一种是主要光方向纹理图，以及模型的UV2数据。&lt;/p&gt;

&lt;p&gt;其中UV1(不是UV2，因为uv对应UV0，uv2对应UV1)会被加载到模型网格信息中去，也就是烘培后模型prefab的mesh.uv2的数据会被改写。因此我们在制作和导出模型时要注意，烘培需要用到模型的uv2数据，在导出模型时如果没有导出uv2数据，则无法得到正确的烘培。&lt;/p&gt;

&lt;h6&gt;那么烘培器是如何生成uv和贴图的呢？我们需要理解下UV Chart&lt;/h6&gt;

&lt;p&gt;在烘培时，烘培器会对所有场景中的静态物体上的Mesh网格进行扫描，按块大小和折线角度大小来制作和拆分Mesh上的对应的UV块，这个UV块就是UV Chart。&lt;/p&gt;

&lt;p&gt;UV Chart是静态物件在光照纹理(Lightmap)上某块Mesh的对应的UV区块，一个物体在烘培器预计算后会有很多个UV Chart。因此每个物件的UV Charts是由很多个UV Chart组成，每个UV Chart为一段连续的UV片段。默认情况下，每个Chart都至少是4x4的纹素，无论模型的大小一个Chart都需要16个纹素。UV Chart之间预留了0.5个像素的边缘来防止纹理的溢出。如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/uvchart.png&quot; alt=&quot;UV Chart0&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    图0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/book/7/LightingGiUvs-2.png&quot; alt=&quot;UV Chart1&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    图1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/book/7/LightingGiUvs-4.png&quot; alt=&quot;UV Chart2&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    图2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/book/7/LightingGiUvs-0.jpg&quot; alt=&quot;UV Chart3&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    图3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中1描述了，当一个场景只有1个正方形物体时，这个正方体网格物体被烘培后，6个面上的UV Chart是如何映射到烘培纹理上的。图2描述了场景中当有多个简单的立方体时，每个物体被扫描后制成UV Chart的情况。图3描述了当烘培场景更加复杂时，扫描后UV Chart被制作的情况，不同规格的模型UV被映射到Lightmap纹理贴图上。&lt;/p&gt;

&lt;p&gt;我们很清晰的能从图中了解到，在烘培时，每个场景中的静态物体都会被扫描网格，并且将计算出来的UV Chart合起来制作成一张或几张(可能场景太大一张不够用)光照纹理贴图。&lt;/p&gt;

&lt;h6&gt;那么什么决定了烘培中扫描网格时形成的UV Chart大小和数量呢？相邻顶点间的最大简化距离和最大夹角值。&lt;/h6&gt;

&lt;p&gt;烘培器为了能更加快速的计算制作出UV Chart，烘培器需要对模型面的顶点扫描进行简化。简化方式为，将相邻顶点间距离小于某个数值的顶点归入一个UV Chart，当这个数值设置相对比较大时，UV Chart生成的速度就会加快。但是只是距离上的简化往往会出现很多问题，我们需要从相邻面的角度上进行约束，即当相邻面间的角度大于某个值时，不能简化成同一个UV Chart。这两个参数在Unity3D中都有设置，点击静态物体在右边的版面上就能看到。如图位置：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/LightingGiUvs-3.png&quot; alt=&quot;UV Chart1&quot;&gt;&lt;/p&gt;

&lt;p&gt;图中展示了静态物体Mesh Renderer中设置Lightmap UV生成参数，参数包括最大简化顶点距离，最大邻接面角度。&lt;/p&gt;

&lt;p&gt;当设置的最大简化距离和邻接面最大角度数值比较大时，计算生成UV Chart的数量就会比较少，相反如果设置的最大简化距离和最大邻接面角度比较少，则需要计算和生成的UV Chart会比较多，烘培的速度也会比较慢，因为在预计算实时全局光照(GI)时，每个UV Chart上的像素都会计算灯光，预计算的时间跟Chart的数量有很大关系。&lt;/p&gt;

&lt;h6&gt;上述描述了烘培的前置制作中Lightmap纹理分布和场景中物体的UV映射的原理，那么绘制Lightmap纹理贴图时纹理上颜色是怎么生成的呢？&lt;/h6&gt;

&lt;p&gt;我们知道如果不用烘培，在实时渲染中，因为算力的原因我们只能计算直接光对物体的明暗影响，如果想要在实时渲染中计算间接光的影响是非常消耗GPU的算力的，即使有足够强大的显卡支撑使用光线跟踪计算，也只能在带有RTX的显卡计算机上使用。暂时还没有做到普及的程度，因此离线烘培成了我们解决间接光的主要手段。&lt;/p&gt;

&lt;p&gt;在一个场景中如果这些物体只考虑直接光的影响，则会缺乏很多光影细节，导致视觉效果很“平”。而间接光则描述了光子在物体表面之间的反弹，增加了场景中明暗变化以及光线折射的细节，提高了真实感。&lt;/p&gt;

&lt;p&gt;光照纹理贴图的颜色主要是根据光的折射与反射现象来计算的，这里我们需要了解一下Unity3D中采用的Enlighten和Progressive Lightmapper算法解决方案。&lt;/p&gt;

&lt;p&gt;全局照明可以用一个称为渲染方程的复杂方程来描述：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/LightingGi-1.png&quot; alt=&quot;渲染方程&quot;&gt;&lt;/p&gt;

&lt;p&gt;这个渲染方程定义了光线是如何离开表面上某个点的。但是这个积分方程太复杂以至于无法快速计算出结果，Unity3D中Enlighten采用的近似方法即辐射算法，可以大大提高计算渲染方程式的速度。&lt;/p&gt;

&lt;p&gt;辐射算法假设了场景中存在一组有限的静态元素，以及仅有漫射光传输来简化计算。在计算过程中它把场景拆分成很细很细的面片，分别计算它们接受和发出的光能，逐次迭代直到每个面片的光能数据不再变化(或者到一定的阀值)为止，得到最终的光照图。&lt;/p&gt;

&lt;p&gt;场景拆分后的以及每个面片之间的作用，如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/LightingGi-2.png&quot; alt=&quot;渲染方程&quot;&gt;&lt;/p&gt;

&lt;p&gt;Enlighten将场景切割成很多个面片我们称它们为Cluster(Cluster大小可以通过Unity3D的烘培设置数值大小)，这些Cluster会对其映射的静态物体的纹理中的反射系数进行采样，然后计算Cluster之间的关系，使得光在Cluster之间传递。&lt;/p&gt;

&lt;p&gt;Enlighten将渲染方程简化成了迭代公式即：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/LightingGi-3.png&quot; alt=&quot;渲染方程&quot;&gt;&lt;/p&gt;

&lt;h6&gt;其中Bi指的是在i点最终的光，Le是i点本身的光，而两个Cluster之间光的反弹系数有Fij来决定，Lj则是J点的光。这也是为什么Enlighten能够支持场景物体不变的情况下允许光源发生变化的原因：因为几何体素化和辐射系数计算代价比较大，需要离线计算，而迭代每个Cluster形成最终结果则计算量相对比较小可以实时进行。&lt;/h6&gt;

&lt;p&gt;Progressive Lightmapper即渐进式光照贴图，是Unity3D 2018版本后才能使用的烘培算法。&lt;/p&gt;

&lt;p&gt;Progressive Lightmapper是一种基于路径追踪（fast path-tracing-based）的光照贴图系统，它能在编辑器中逐步刷新的烘焙光照贴图（baked lightmaps）和光照探针（Light Probes）。&lt;/p&gt;

&lt;p&gt;Progressive Lightmapper主要的优势是能随着时间的推移逐步细化输出画面，及时逐步的看到画面效果，这样能够实现更完善的交互式照明工作流。另外Progressive Lightmapper还提供了一个预估的时间，所以烘焙时间更加可预测。&lt;/p&gt;

&lt;p&gt;参考文献：&lt;/p&gt;

&lt;p&gt;《OpenGL编程指南》&lt;/p&gt;

&lt;p&gt;《OpenGL ES 3.0编程指南》&lt;/p&gt;

&lt;p&gt;《Unity移动平台下的烘焙使用及优化》&lt;/p&gt;

&lt;p&gt;《浅析Unity中的Enlighten与混合光照》&lt;/p&gt;

&lt;p&gt;《Progressive CPU Lightmapper》&lt;/p&gt;

&lt;p&gt;《光照贴图Lightmap初探》&lt;/p&gt;

&lt;p&gt;《辐射度算法(radiosity)原理》&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(二十九) 有没有可能是我们理解错了</title>
   <link href="http://www.luzexi.com/2019/10/13/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A829.html"/>
   <updated>2019-10-13T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/10/13/思路探讨29</id>
   <content type="html">&lt;h1&gt;有没有可能是我们理解错了&lt;/h1&gt;

&lt;p&gt;我经常这样问自己，有没有可能是我理解错了。有没有可能完全不是我理解的那么回事。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h6&gt;这个世界的真相总是在我们背后，但我们总认为自己的前方所见就是全世界。因此完全推翻自己的认知是有必要的。&lt;/h6&gt;

&lt;p&gt;“有没有可能是我们理解错了”，这个问题是来自于我们的反思，不过看起来似乎像是用好奇心来破解当前面对的困局。&lt;/p&gt;

&lt;h6&gt;当我们遇到困境，遇到疑惑，遇到迷茫时，不妨用好奇的口吻来表达我们渴望突破。&lt;/h6&gt;

&lt;p&gt;其实我们都是井底的那只蛙，我们弹跳力不够很难跳出这口井，就像我们无法用旁观者的角度看自己那样，在井中我们总是认为自己所思所想都是对的，以至于认为世界就是我们所认为的方式在运作。&lt;/p&gt;

&lt;p&gt;映射到实际生活中，比如像我一样的程序员编程技术工作者们，我们很难跳出这个技术视野去看事物。很多像我一样以为只要技术好就能升职加薪赢取白富美走上人生巅峰，这可能是程序员思维中最大的错误理解。因为我们身处在具体的工作细节中，这个具体工作本身就是那口井，我们无法跳出这口井去看外面的世界，就像我们无法用旁观者的角度看清问题的本质一样。&lt;/p&gt;

&lt;h6&gt;面对程序员的职业发展与事业道路，我对自己表达了好奇“有没可能是我理解错了”，我希望透过现象看本质。&lt;/h6&gt;

&lt;p&gt;就此我提出四个点来表达透过现象看到的本质：&lt;/p&gt;

&lt;h3&gt;技能可以用来打工，产品才能用来赚钱。&lt;/h3&gt;

&lt;p&gt;为什么说“只要技术好就能升职加薪赢取白富美走上人生巅峰”是错的呢？&lt;/p&gt;

&lt;p&gt;不是技术没用，而是只有技术还远远不够。口才和心理素质比技术有用的多。&lt;/p&gt;

&lt;p&gt;技术只不过是熟能生巧而已，可以理解为经验和知识在脑中的肌肉记忆。&lt;/p&gt;

&lt;p&gt;而口才是嘴巴和脸部肌肉的肌肉记忆，心理素质则是环境在脑中的肌肉记忆。&lt;/p&gt;

&lt;p&gt;只有这几个肌肉记忆联结起来才会产生实质性的效果。而产品其实就是这几个因素联结起来的结果。&lt;/p&gt;

&lt;p&gt;一个好的产品不只要有好的技术，还要有好的营销，好的运营，好的耐心和好的专注。&lt;/p&gt;

&lt;p&gt;如果只有技术，那就会什么都不是。&lt;/p&gt;

&lt;h3&gt;开源只是种学习的方式，并不能成为崛起财富的途径。&lt;/h3&gt;

&lt;p&gt;很多人都喜欢开源，因为他们弄不清目标，只是觉得开源很酷。&lt;/p&gt;

&lt;p&gt;开源是种精神，这种精神很多种，有的纯粹为了分享，虽然对世界有益，但对个人而言毫无益处。但有的开源就是为了锻炼自己，把自己的行为、希望、作品抛到全世界的平台上去让大家去检验去抨击你，（前提是这种行为是你这个领域一无所有或者投资太多关注太少的时候，如果你已经拥有很多，开源就会变成了一种浪费），那是真正对自己有益的行为。&lt;/p&gt;

&lt;h3&gt;技术驱动的企业必定失败，只有利益和市场才是财富的依靠。&lt;/h3&gt;

&lt;p&gt;世界上没有以技术为导向的公司，所有声称以技术导向的公司都死了，因为这并不符合市场的规律，不符合人类的天性。&lt;/p&gt;

&lt;p&gt;人类的天性是逐利的，技术并不能决定市场的逐利行为，技术不迎合市场一样遭遇淘汰。&lt;/p&gt;

&lt;h3&gt;市场是不道德的，遵循道德跟是否得到市场认可无关，但遵循道德可以让人安心踏实。&lt;/h3&gt;

&lt;p&gt;市场跟道德无关，很多现象看似不道德其实只是人们心里的偏见而已，其实并无他，即使站在道德的制高点也不会让市场回头。&lt;/p&gt;

&lt;p&gt;不过虽然道德跟很多逐利的事物无关，但跟人本身却有很大关系，它能让人安心踏实，人生在世，图的其实就是个安心，道德对人来说就是最好的抚慰剂，让人安心踏实。&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;最后说说我自己。我有好奇的毛病，我想大多数人都和我一样，它时常让我陷入困境，比如我时常有奇思怪想，去体验一把没有体验过的人生旅途，最后发现没有人去体验不是因为他们不敢而是因为这条路体验很差或许还很受伤。不过好奇也同样时常让我豁然开朗，因为体验后自己就经历了比别人更多的遭遇，也有了更多人生体验和感悟。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第七章，渲染管线与图形学(三) - 渲染原理与知识1</title>
   <link href="http://www.luzexi.com/2019/10/13/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E4%B8%8E%E5%9B%BE%E5%BD%A2%E5%AD%A66.html"/>
   <updated>2019-10-13T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/10/13/Unity3D高级编程之进阶主程-渲染管线与图形学6</id>
   <content type="html">&lt;p&gt;前面的几篇非常详尽的讲述了渲染管线的整个流程以及渲染管线上的每个节点的来龙去脉。这节我们来说说，一些渲染概念和原理，以及上几章中对渲染管线上没有说到的细节，或者在现代GPU中已经被优化的流程。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;为什么要有渲染顺序&lt;/h3&gt;

&lt;p&gt;前面章节中我们介绍了深度测试这个模块，它用片元的深度值与深度缓存中的值比较得到测试结果，再决定是否要写入深度缓存中，如果判断失败则抛弃片元不再继续下面的流程。这其中涉及到了 ZTest On/Off 状态开关，和，ZWrite On/Off 状态开关，其中ZTest 用于控制是否开启测试，ZWrite 用于控制是否写入深度缓存。&lt;/p&gt;

&lt;p&gt;渲染管线中的深度测试节点最大的好处是帮助我们尽早的发现不需要渲染的片元，并抛弃它们以节省GPU消耗提高效率。&lt;/p&gt;

&lt;p&gt;其实大部分情况下我们都使用 ZTest LEqual 做判断，即离摄像机越近的物体越容易遮挡住离得远的物体。&lt;/p&gt;

&lt;p&gt;从这个角度看渲染机制，如果能先把离屏幕近的物体放前面渲染，那么后面的物体虽然不能完全在CPU层面判定它是否被掩盖而剔除，但能在深度测试的机制下早早的抛弃掉很多片元，会提升不少的GPU效率。&lt;/p&gt;

&lt;p&gt;于是渲染顺序就成了关键，Unity3D引擎对所有不透明物体在渲染前做了排序工作，即离摄像机近的排在前面渲染，离的远的排在后面渲染，这个渲染队列又有了新的排序规则。&lt;/p&gt;

&lt;p&gt;那么半透明物体怎么办呢？因为半透明物体需要Blend混合，ZWrtie开关一般都是关的，因为如果开启来的话半透明部分在深度测试时就变成了完全的遮挡，从而没有了半透的效果。因此它需要在所有不透明物体渲染后再渲染才能真正发挥出它半透明的效果。&lt;/p&gt;

&lt;p&gt;在Unity3D引擎在提交渲染时增加了这么条规则，即对所有半透明物体的渲染都排在了不透明物体的后面，这样就确保了半透明物体能在不透明物体渲染完毕后才开始渲染，以保证半透明物体的渲染效果。&lt;/p&gt;

&lt;p&gt;那么怎么标记物体是不透明还是半透明呢，Unity3D引擎为了解决这个问题，将渲染顺序放在Shader中实现，即 Queue 标签来决定我们的模型将归于哪个渲染队列。&lt;/p&gt;

&lt;p&gt;Unity3D在内部使用了一系列整数索引来表示渲染的次序，且索引越小越表示排在前面被渲染。&lt;/p&gt;

&lt;p&gt;Queue 标签：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Background，索引号1000

    Geometry，索引号2000

    AlphaTest，索引号2450

    Transparent，索引号3000

    Overlay，索引号4000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Shader中我们选择任意Queue标签就会指定那个索引类型，Unity3D还有一个规则是2500以下的索引号，当多个物体拥有相同索引号时，排序规则以根据摄像机的距离由近到远顺序渲染，如果是2500索引号以上的包括2500，当多个物体拥有相同索引号时，则排序规则以根据摄像机的距离由远到近顺序渲染(与2500以下的物体相反)。&lt;/p&gt;

&lt;p&gt;为什么要这么排序呢？因为2500以下物体都是不透明物体，渲染在深度测试阶段越早剔除掉越好，所以对摄像机由近及远的渲染方式对早早的剔除不需要渲染的片元有莫大的帮助，提高GPU效率。而2500索引以上的物体，通常都是半透明物体或者置顶的物体(例如UI)，如果依然保持由近到远的渲染规则，半透明物体就无法混合被它覆盖的物体。因此2500索引及以后的物体与2500索引以前的物体，在相同索引号时渲染排序的规则是相反的。&lt;/p&gt;

&lt;p&gt;半透明的排序问题通常是头疼的，为什么呢？因为前面我们说的它是需要由blend混合完成半透明部分的操作，而blend操作必须在前面物体已经绘制好的条件下才能有blend混合后成为半透明或全透明效果。&lt;/p&gt;

&lt;p&gt;Queue在Transparent半透明索引号下，相同索引号是从远到近渲染的，在粗糙颗粒的排序上还是可以解决的，即两个物体模型没有相交部分，前后关系的blend混合是可以依靠模型中点离摄像机的远近做排序的，Unity3D引擎也是这么做的。但是如果两个物体相交，或者本物体中模型有前后叠加关系时则无法再区分片元的前后关系了。&lt;/p&gt;

&lt;p&gt;因此使用Blend混合做半透明物体，通常情况下很难做到前后关系有秩序，特别是当模型物体有交集的时候。而且通常都采用手动排序，例如在Queue上+1，即Tag{ Queue = &amp;quot;Transparent+1&amp;quot; } 的形式，这也是为什么很多特效Shader要有好几个一模一样Shader功能只是Queue不同。&lt;/p&gt;

&lt;p&gt;所有的渲染顺序都是引擎自主排列的，而不是由GPU排序的，GPU只知道渲染、测试、裁切，完全不会去管物体的前后次序，这也是为什么称它叫“流水线”的原因，它就像工厂里的作业流水线一样，每个工人都只是一个节点的螺丝钉，他们很多时候只要记住一个动作就可以“无脑”的重复劳动，GPU里也是一样。&lt;/p&gt;

&lt;h3&gt;Alpha Test&lt;/h3&gt;

&lt;p&gt;上面和前几章讲了好多关于半透明物体的知识，而Alpha Test其实也是属于半透明物体的特征，不过它不是混合，而是裁切。&lt;/p&gt;

&lt;p&gt;我们在制作模型过程中，很多模型的边角都需要极其细微的面片，比如树上的叶子，一堆乱糟糟的草，还有许许多多圆形的洞等，这些如果用网格模型来制作的话会多出很多很多面片，制作时间长，调整起来慢，同屏面数高，这些问题滚滚而来。&lt;/p&gt;

&lt;p&gt;怎么办呢，Alpha Test能很好的解决这些问题，Alpha Test 用纹理图片中的 Alpha 来测试判定该片元是否需要绘制，即当我们展示一些很细节的模型时，用一张图片和两三个面片就能代替巨量的面片制作方式。如果有需要调整的地方，也只是需要调整纹理图片和少量顶点就可以完成工作。&lt;/p&gt;

&lt;p&gt;这种方式被大量用在节省面片渲染数量上，因为它的制作简单，调整容易，被众多开发人员所喜爱。&lt;/p&gt;

&lt;p&gt;其渲染的过程也比较简单，在片元着色器中判断该片元 Alpha 值是否小于了某个阈值，一旦判定小于某个阈值就调用clip或者discard丢弃该片元，该片元流水线停止。&lt;/p&gt;

&lt;p&gt;我们来开如图所示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺图
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中这些小草都只是一个个面片，GPU在渲染片元时会先去判定该片元的 Alpha 是否小于某个阀值，如果小于则不渲染该片云，否则继续渲染。&lt;/p&gt;

&lt;p&gt;这种方式的裁剪片元对于只需要不透明和全透明的物体来说很好用，而且 Alpha Test 不需要混合，它完全可以开启 ZTest 的深度测试，和 ZWrite 的深度写入，在渲染遮挡问题上完全没有问题。&lt;/p&gt;

&lt;p&gt;不过它并不是万能的，也存在很多缺陷，我们下面就要讲讲在现代GPU中它的问题。&lt;/p&gt;

&lt;h3&gt;Early-Z GPU硬件优化技术&lt;/h3&gt;

&lt;p&gt;前面说了ZTest 深度测试在片元着色器之后做了片元(即像素带些信息)之间的前后遮挡测试，使得GPU对哪些片元需要绘制又有哪些片元被遮挡而不需要绘制有了依据。&lt;/p&gt;

&lt;p&gt;不过深度测试只是在所有片元都基本成型时才做的测试，使得大部分被遮挡的片元在被剔除时就已经经过一轮的着色器计算，这使得当片元重叠遮挡比较多时导致了大量的GPU算力的浪费。&lt;/p&gt;

&lt;p&gt;这种情况常常发生，特别是在摄像机需要渲染更多物体的时候，遮挡的情况会越来越严重，每个物体生成的片元无论是否被遮挡都会被经过一次差不多是一整个的渲染流程，那么这时的ZTest 深度测试前的渲染计算就几乎全部浪费掉了宝贵的GPU算力。&lt;/p&gt;

&lt;h6&gt;Early-Z 技术就专门为这种情况做了优化，我们可以称它为前置深度测试。由于渲染管线中，ZTest 深度测试其实发生在片元着色器之后，这时候再进行深度测试时，就是对所有渲染对象的像素都计算一遍，几乎没有性能提升，仅仅是为了得出正确的遮挡结果，造成大量的无用计算算力浪费，因为每个像素点上重叠了许许多多次计算。&lt;/h6&gt;

&lt;h6&gt;因此现代GPU中运用了Early-Z的技术，在几何阶段与片元着色器之间（光栅化之后，片元着色器之前）先进行一次ZTest 深度测试，如果深度测试失败，就跳过片元阶段的计算，节省了大量的GPU算力。&lt;/h6&gt;

&lt;p&gt;那么具体它是怎么个流程呢，我们来看看如下图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Early-Z--|
    |        |no
    |yes     |
    |    片元着色计算
    |        |
    |        |
    ZTest 深度测试 -- 抛弃
    |
    |
    屏幕像素缓冲
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上图中展示了Early-Z 前置深度测试的流程，当光栅化后的片元先进入Early-Z 前置深度测试阶段，如果片元测试被遮挡，则直接跳过片元着色计算，如果没有被遮挡则继续片元着色的计算，无论是否通过Early-Z 前置深度测试，最终都会汇集到ZTest 深度测试再测试一次，由ZTest来最终觉得是否抛弃该片云，由于前置测试已经测试完毕了片元的前后关系，因此所有跳过片元着色计算的片元都会在ZTest 节点被抛弃，反之则会继续渲染流程最终进入屏幕像素缓冲区。&lt;/p&gt;

&lt;p&gt;Early-Z的实现是GPU硬件自动调用的，它主要是通过两个pass来实现，即第一个是Z-pre-pass，对于所有写入深度数据的物体，先用一个超级简单的pass不写入像素缓存，只写深度缓存，第二个pass关闭深度写入，开启深度测试，用正常渲染流程进行渲染。&lt;/p&gt;

&lt;h6&gt;由于我们在片元着色器中可以自主的抛弃片元，因此问题又出现了。&lt;/h6&gt;

&lt;p&gt;片元在着色器中被主动抛弃后，Early-Z 前置深度测试的结果就会出现问题，因为如果可见片元被抛弃后，被它遮挡的片元就成为了可见片元，导致前置的深度测试结果失效。&lt;/p&gt;

&lt;p&gt;因此GPU在优化算法中，对片元着色器抛弃片元和修改深度值的操作做了检测，如果在片元着色器中存在抛弃片元和改写片元的操作，则Early-Z 将被放弃使用。&lt;/p&gt;

&lt;h6&gt;简单来说，Early-Z 对遮挡处理做了很大的优化，但是如果我们使用了Alpha Test 来渲染物体时要注意，Early-Z 的优化功能将被弃用。同样的在修改深度值时也要引起注意，Early-Z也同样会被关闭。&lt;/h6&gt;

&lt;h3&gt;Mipmap的原理&lt;/h3&gt;

&lt;p&gt;Mipmap是目前应用最为广泛的纹理映射技术之一。Mip来源于拉丁文中的multum in parvo，意思是“在一个小区域里的很多东西”。Mipmap技术与材质贴图技术结合，根据物体距摄像机远近距离的不同，以不同分辨率的纹理贴图，将单一的材质贴图以多重图像的形式表现出来。&lt;/p&gt;

&lt;p&gt;Mipmap功能在3D游戏中非常常见，但很多人还是不太了解Mipmap的来龙去脉，我们在这里详细的讲一讲。&lt;/p&gt;

&lt;p&gt;在我们为物体渲染纹理贴图时，经常会出现物体离摄像机很远的情况，屏幕像素与纹理之间的比率会变得非常低，因此纹理采样的频率也会变得非常低，这样会导致渲染图像上的瑕疵。我们举例来说：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    如果要渲染一面墙，假设这面墙纹理有 1024 x 1024 这样的大小，当摄像机距离墙很近时渲染的图像是没有问题的，因为每个像素都有各自对应的纹理贴图上合理的像素。但是当摄像机向这面墙渐渐远离，直到它在屏幕上变成一个像素点时就出现问题了，因为纹理采样的结果可能会在某个过度点上发生突然的变化导致图像产生瑕疵。

    特别是在屏幕上不断前后运动的物体可能会使得屏幕上渲染产生闪烁的问题。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mipmap为了降低这个效果的影响，对纹理贴图进行了提前的滤波，并且将滤波后的图像存储为连续的不同分辨率的纹理贴图。OpenGL在开启Mipmap后会自动判断当前应当使用纹理贴图的哪层分辨率贴图，判断的依据是基于物体在屏幕上渲染的像素大小来决定的。&lt;/p&gt;

&lt;p&gt;除了能更好的平滑渲染远近物体像素上的瑕疵和闪烁问题外，Mipmap还能很好的提高采样的效率，由于采用从已经缓存的不同分辨率纹理的采样对象，那些远离摄像机的物体采用了更小分辨率的纹理贴图，使得采样时宽带的使用降低从而获得更高的效率，其实大部分物体都离摄像机较远，这使得Mipmap的采样效率提升在渲染中发挥了重要的作用。&lt;/p&gt;

&lt;p&gt;一般在使用Mipmap的时候，OpenGL会负责计算细节层次并得到Mipmap层级的结果，再将采样结果返回给用户。不过我们也可以自己取代这个计算过程再通过OpenGL纹理获取函数(textureLod)来选取指定的纹理层次。&lt;/p&gt;

&lt;p&gt;那么在OpenGL中到底 Mipmap 是怎么决定采用哪层分辨率的贴图的呢？我们来详细的讲解一下。&lt;/p&gt;

&lt;p&gt;这里有2个概念要复习一下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1.屏幕上的颜色点叫像素，纹理贴图上的颜色点叫纹素。

    2.屏幕坐标系我们用的是XY坐标系，纹理贴图坐标系用的是UV坐标系。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在片元着色器中，每个片元即屏幕空间XY上的像素都会找到对应的纹理贴图中的纹素来确定像素的颜色。&lt;/p&gt;

&lt;p&gt;这个查找纹素的过程就是一个从XY空间到UV空间的一个映射过程。我们可以通过分别求x和y偏导数来求屏幕单个像素宽度纹理坐标的变化率。&lt;/p&gt;

&lt;p&gt;在屏幕上，某区域上的像素，对应到实际的纹理贴图中可能是一个长方形的区域。&lt;/p&gt;

&lt;p&gt;那么x轴方向上的纹理贴图大小和屏幕上的像素区域大小有一个比例，y轴方向上的也同样有一个比例。&lt;/p&gt;

&lt;p&gt;例如，获取到的纹理贴图上的纹素大小为 64x64，屏幕上的像素区域大小为32x32，那么它们在x轴上的纹素和像素大小比例为 2.0 (即64/32)，y轴上的也同样是 2.0 (即64/32)。又比如，纹理贴图上的纹素大小为 64x32，屏幕上的像素区域大小为 8x16，那么它们在x轴上的纹素和像素大小比例为 8.0(即64/8)，在y轴上的纹素和像素大小比例为2.0(即32/16)。&lt;/p&gt;

&lt;p&gt;这个比例就是纹素的覆盖率，当物体离摄像机很远时，纹素的覆盖率就很大，当物体离摄像机很近时则很小，甚至小于1(当纹素覆盖率小于1时则会调用纹理放大滤波器，反之则用到了Mipmap，如果刚好等于1则使用原纹理)。&lt;/p&gt;

&lt;p&gt;在着色器中我们可以用ddx和ddy求偏导的方式分别求这个两个方向上的覆盖率，然后取较大的覆盖率。&lt;/p&gt;

&lt;p&gt;为什么ddx和ddy偏导函数就能计算覆盖率呢，这里稍微复习一下。我们知道在光栅化的时刻，GPU会在同一时刻并行运行很多片元着色器，但是并不是一个像素一个像素的去执行，而是将其组织成 2x2 为一组的像素块，再去并行执行。而偏导数就正好能计算这一块像素中的变化率。&lt;/p&gt;

&lt;p&gt;我们来看下偏导的真相：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    ddx(p(x,y)) = p(x+1,y) - p(x,y)

    ddy(p(x,y)) = p(x,y+1) - p(x,y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;x轴上的偏导就是 2x2 像素块中 x轴方向上附近的数值之差。同理，y轴上的偏导就是 2x2 像素块中 y轴方向上附近的数值之差。&lt;/p&gt;

&lt;p&gt;因此MipMap层级的计算可以描述为&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MipmapLevel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;float2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ddx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ddy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;求出x轴和y轴方向上的覆盖率后，取最大值d(dot(dx,dx)其实就是dx的平方)，再log2后获得Mipmap层级，这里0.5是技巧，本来应该是d的平方。&lt;/p&gt;

&lt;p&gt;大部分时候OpenGL已经帮我们做了Mipmap层级的计算，也就是说我们在Shader中使用tex2D(tex, uv)获取颜色的时候就相当于在GPU内部展开成了如下面所示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tex2D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sampler2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CalcLod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ddx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ddy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tex2Dlod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里的意思是uv所求的导数越大，在屏幕中占用的纹理范围就越大。简单来说就是我们在片元计算中发现uv导数很大时，就说明这个片元离摄像机很远，从这个方面来理解uv的在片元着色器中的求偏导就可以明白，我们只需要通过uv的求偏导就能间接计算出x轴和y轴方向的覆盖率。&lt;/p&gt;

&lt;h6&gt;在OpenGL中Mipmap的计算其实依赖于片元中的uv求偏导值，也就是说，片元所映射的uv范围越大，计算出来的Mipmap层级越高，纹理贴图选取的分辨率越小。&lt;/h6&gt;

&lt;h3&gt;显存的存在&lt;/h3&gt;

&lt;p&gt;显存经常被我们忽视，因为近几年流行的都是手机端的游戏项目，其实它在PC端存在的意义很大。一个显卡除了有图像传给处理单元GPU外，还拥有自己的内存，即显存VRAM(Video Random Access Memory)。&lt;/p&gt;

&lt;p&gt;GPU可以在显存中存储任何数据，例如图像缓存、深度缓存、模板缓存、着色器实例等。&lt;/p&gt;

&lt;p&gt;除了这几个必要的缓存外，显卡中还存放着渲染时需要用到的贴图纹理、顶点缓存等，这些内容都是需要从CPU内存中拷贝过来的，在调用渲染前，应用程序可以调用图形应用接口OpenGL将数据从普通内存中拷贝到显卡内存中，这个过程只存在于PC端和主机端，因为它们都拥有显卡的存在。&lt;/p&gt;

&lt;p&gt;因此PC端在渲染前还有进一步拷贝数据的过程，显存并不多即使现代显存成本变低的情况下仍然捉襟见肘。&lt;/p&gt;

&lt;p&gt;手机端就没有这样的拷贝过程。手机端大都是ARM架构，芯片中嵌入了各种各样的硬件系统，包括SoC(即芯片级系统，包含了完整系统并有嵌入软件的全部内容)、图像处理GPU、音频等。而显存由于种种限制没有被设计加入到ARM中去，因此在手机端中CPU和GPU共用同一个内存控制器，也就是说CPU和GPU是共用内存带宽的，没有独立显存只有普通内存，不过即便这样GPU也有自己的独立内存部分，例如上面的缓存和后面的可写数据的拷贝都需要一份独立的“共享显存”。&lt;/p&gt;

&lt;p&gt;手机端没有独立显存，因此OpenGL ES就设计了映射缓冲区对象，它在不需要拷贝内存的前提下可以通过共享内存来实现数据的提取。如果贴图或顶点数据是只读状态的话完全没有必要为渲染而重新拷贝一份，而是可以选择建立起映射缓冲区对象，直接读取内存来获取数据。不过也有不做建立映射缓冲区对象的时候，当数据、纹理被开启可写状态时则必须重新拷贝一份在GPU独立内存中，因为原数据随时会被CPU更改，而当时可能GPU还在渲染中，如果仍然并行处理同一个数据则会造成显示问题，因此两个并行的脑袋不能共享一份可写的数据。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第七章，渲染管线与图形学(二) - 渲染管线2</title>
   <link href="http://www.luzexi.com/2019/09/28/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E4%B8%8E%E5%9B%BE%E5%BD%A2%E5%AD%A65.html"/>
   <updated>2019-09-28T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/09/28/Unity3D高级编程之进阶主程-渲染管线与图形学5</id>
   <content type="html">&lt;p&gt;继上篇讲解了渲染管线的应用阶段、几何阶段和光栅化阶段，这一节我们来讲讲最后的逐片元操作阶段，以及着色器中我们常见的一些概念和原理。&lt;/p&gt;

&lt;h6&gt;逐片元操作(Per-Fragment Operations)是OpenGL的说法，在DirectX称为输出合并阶段(Output-Merger)，其实只是说法不同而已包含的内容都是相同的，包括了，剪切测试(Scissor test)，多重采样的片元操作，模板测试(Stencil Test)、深度测试(Depth Test)、混合(blending)、以及最后的逻辑操作。&lt;/h6&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;这几个节点都是以片元为基础的元素操作动作，它们都决定了片元的去留问题。所以逐片元操作阶段是解决片元的可见性问题的一个重要阶段，如果片元在这几个节点上任意一个节点没有通过测试，那么它就会被丢弃并且之后的测试或操作都不会被执行，如果执行全部通过就会进入帧缓存。每个节点实际测试的过程是个比较复杂的过程，而且不同的图形接口实现的细节也不一样，但我们要理解到它们的基本原理和大致的过程相对简单一些。&lt;/p&gt;

&lt;p&gt;所有这些测试和操作其实都可以看做是以开关形式存在，因为他们的操作命令大都包含了On和Off操作指令，在OpenGL里以glEnable()和glDisable()来表示功能是否被开启或关闭。&lt;/p&gt;

&lt;p&gt;第一个可见性测试就是剪切测试(Scissor)，它主要针对的是片元是否在矩形范围内的测试判断，如果片元不在矩形范围内则被丢弃。&lt;/p&gt;

&lt;p&gt;这个范围是一个矩形的区域，我们称它为剪切盒。实际上可以有很多个剪切盒存在，只是默认情况下所有渲染测试都在第一个剪切盒上完成，要访问其他剪切盒就需要几何着色器。&lt;/p&gt;

&lt;p&gt;Unity3D并没有开放这个剪切测试的功能，它的实际应用比较少。&lt;/p&gt;

&lt;p&gt;第二步是多重采样的片元操作。&lt;/p&gt;

&lt;p&gt;普通采样只采一个样本或者说一个像素，而多重采样泽是分散取得多个样本，这些样本可能是附近的几个位置也可能是其他算法。因此在多重采样中，每个片元都有多种颜色，多个深度值和多组纹理坐标，而不是只有一种（具体有多少个取决于子像素的样本数目）。&lt;/p&gt;

&lt;p&gt;如果没有开启多重采样的片元操作，多重采样在计算片元的覆盖比例时，不会考虑alpha值的影响。&lt;/p&gt;

&lt;p&gt;一旦开启多重采样的片元操作，我们就可以用片元的alpha值来影响采样的覆盖率计算。&lt;/p&gt;

&lt;p&gt;Unity3D的没有开放自定义设置多重采样的片元操作功能，但像素本身不是单单只是它本身的颜色和深度，而是由附近的像素一起决定的。具体的多重采样内容将在后面的章节中讲述。&lt;/p&gt;

&lt;p&gt;前两步可能并没有引起我们足够的重视，但后面几步需要我们着重学习。&lt;/p&gt;

&lt;p&gt;第三步模板测试(Stencil Test)，模板测试说的简单点，其实和比大小无异，关键就是怎么比，与谁比，这又能玩出很多花样。&lt;/p&gt;

&lt;p&gt;在模板测试中模板缓存是必要的内存块，因为每个片元在通过测试后都会被写入到模板缓存中。&lt;/p&gt;

&lt;p&gt;开发者需要指定一个引用参考值(Reference value)，这个参考值代表了当前物体所有片元的参考值，这个参考值会与模板缓存(Stencil Buffer)中当前位置片元的模板值进行比较，比较时模板缓存中当前位置片元的参考值是被前面的物体通过测试时写入的一个值，比较两个值后会根据比较的结果做判断是否抛弃片元，判断可以是大于、等于、小于等，一旦判断失败片元将被抛弃反之则继续向下传递，只是判断成功后也可以有相应对模板缓存做其他操作，操作可以有，替换旧的片元，增加一定的参考值，参考值置零等等。&lt;/p&gt;

&lt;p&gt;我们来看看到底有多少种判断，和，多少种对模板缓存的操作。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Greater 大于模板缓存时判断通过
    GEqual  大于等于模板缓存时判断通过
    Less    小于模板缓存时判断通过
    LEqual  小于等于模板缓存时判断通过
    Equal   等于模板缓存时判断通过
    NotEqual    不等于模板缓存时判断通过
    Always  总是通过
    Never   总是不通过
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述这些都是对于是否通过测试的判断种类，看上去就像是简单的比大小。在Unity3D的Shader中的完整的模板测试写法如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Stencil {
        Ref 2 //指定的引用参考值
        Comp Equal //比较操作
        ReadMask 255 //读取模板缓存时的掩码
        WriteMask 255 //写入模板缓存是的掩码
        Pass Keep //通过后对模板缓存的操作
        ZFail IncrSat //如果深度测试失败时对模板缓存的操作
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;模板测试的步骤简单明了，当前值与模板缓冲比较，通过的做一个指定的操作替换或者增加或者减少等，不通过的片元被抛弃。&lt;/p&gt;

&lt;p&gt;上述Unity3D模板命令中 Pass 的操作就是通过测试后的操作种类，它有如下几种方式可选：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Keep    不做任何改变，保留当前缓存中的参考值
    Zero    当前Buffer中置零
    Replace 将当前的参考值写入缓存中
    IncrSat 增加当前的参考值到缓存中，最大为255
    DecrSat 减少当前的参考值到缓存中，最小为0
    Invert  翻转当前缓存中的值
    IncrWrap    增加当前的参考值到缓存中，如果到最值255时则变为0
    DecrWrap    减少当前的参考值到缓存中，如果到最小为0时则变为255
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不同的物体有不同的引用值，每个比较操作都可以不一样，包括掩码值、成功后的操作动作，一个简简单单的比大小其实也能玩出这么多花样来。不止如此，除了比较和通过后的操作指令外，深度测试失败时还可以影响模板缓存中的值。我们用一幅图就能理解模板测试的美妙：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺图
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中三个球一起叠加在一起，却只显示了一个球的，并且在这个球上显示了三个球叠加的部分。因为其他两个球的模板测试并没有通过，但叠加部分则通过了模板测试。&lt;/p&gt;

&lt;h6&gt;如果片元幸运的通过了模板测试，则会来到第四步，深度测试。有没觉得这个片元很像某生理教课书上描述精子通过重重困难终于来到了卵子的的位置那样，课本上总是这么介绍，刚好片元也是如此。&lt;/h6&gt;

&lt;p&gt;深度测试主要目的是将被覆盖的片元丢弃，或者说将需要覆盖的片元绘制在屏幕上，其实这两个操作都是根据物体渲染的前后关系操作的。&lt;/p&gt;

&lt;p&gt;深度测试工作分为两块，一块是比较即ZTest，一块是写入即ZWrite，只有比较并被判定通过的才有写入的资格，我们也可以把写入关了，让物体无法写入，这就会导致它片元深度无法与其他物体比较，这种写法在半透明中很常用，其他时候大部分都是默认开启深度值写入即ZWrite On。&lt;/p&gt;

&lt;p&gt;深度测试是怎么比较的呢？还记得前面介绍的模板测试么，重点就是“比大小”，比完判定通过的就写入缓存，深度测试的方法和模板测试的流程和方法简直就是一个妈生出的俩个孩子。深度测试的 ZTest 对应模板测试的 Comp指令，深度测试的 ZWrite 对应模板测试的 Pass指令，先拿当前片元比较缓存中的值再操作缓存，两者简直一模一样。&lt;/p&gt;

&lt;p&gt;与模板测试不同的是深度测试用的是深度值，而不是固定某个值，写入缓存也不没有那么多花样。&lt;/p&gt;

&lt;p&gt;那么什么是深度值？这个深度值是从哪来的？&lt;/p&gt;

&lt;p&gt;还记得前面顶点着色器中介绍的，顶点在变化坐标空间后z轴被翻转成为了视口前方的轴么。整个锥视体变成了立方体，x、y轴则成为了视口平面上的平面方向轴，原来的z轴转换成了顶点前后关系的深度值。我们再来看看这幅图片：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺图
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是的，正是因为那次坐标系的转换和后面的归一化，使得所有顶点的坐标都在一个立方体的空间内，且这个立方体的大小被限制在了-1到1的大小，x、y成为了屏幕相对参考坐标，而z则成为了前后关系的深度参考值。&lt;/p&gt;

&lt;p&gt;虽然这只是顶点上的坐标，但在后面的步骤中三角面被光栅化，并对每个像素背后形成了片元，每个片元根据三角形顶点信息的插值后z坐标也进入了片元中，这就是我们需要的片元的深度值。&lt;/p&gt;

&lt;p&gt;深度值在片元中成为了片元在深度测试中判断的依据，如果输入片元的深度值即z值可以通过制定的深度测试环节，那么它就可以替换当前深度缓存中已经有的深度值(如果ZWrite 没有被关闭的话)。&lt;/p&gt;

&lt;p&gt;深度测试的判断依据也有很多种，我们来看下它有多少中判断种类:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    ZTest Less | Greater | LEqual | GEqual | Equal | NotEqual | Always
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述中表达了所有判断种类，从左到右为，小于缓存中的就通过，大于缓存中的就通过，小于等于缓存中的就通过，大于等于缓存中的就通过，等于缓存中的就通过，不等于缓存中的就通过，以及总是通过与缓存无关。其中LEqual 最为常用，即越接近摄像机的越需要覆盖其他面片，越远离摄像机的越容易被覆盖或者说越容易通不过深度测试。&lt;/p&gt;

&lt;h6&gt;我们可以更加白话一点表达深度测试，一般情况下都是用LEqual 作为深度测试判断依据，即哪个片元离摄像机越近就用哪个，其他种类的类型判断类型也可以解释的类似与摄像机距离有关。&lt;/h6&gt;

&lt;p&gt;如果片元很幸运冲破前面这么多种测试终于来到了第五步混合阶段，这一步从测试上来说其实是最后一个阶段。&lt;/p&gt;

&lt;h6&gt;混合阶段实质上并没有丢弃任何片元，但却可以让片元消失不见。&lt;/h6&gt;

&lt;p&gt;如果一个片元通过了上面的测试，那么它就有资格与当前颜色缓冲中的内容进行混合了。最简单的混合方式就是直接覆盖已有的颜色缓冲中的值，实际上这样不算混合，只是覆盖而已，我们需要两个片元的真正混合。&lt;/p&gt;

&lt;p&gt;那么什么叫混合？为什么要混合？&lt;/p&gt;

&lt;p&gt;混合是两个片元的从颜色上和alpha值上相加或相乘的算法过程，通过我们自己指定的数学公式来确定混合后的像素颜色，这个公式不复杂，其实就是颜色和因子的加减乘的基本运算，通过这种运算我们能得到想要的效果。&lt;/p&gt;

&lt;p&gt;由于物体都是一个接一个的被渲染在缓冲中的，当前物体被光栅化成为片元后要写入缓存时，面临着前面渲染的物体已经被铺在缓冲中的情况，如果没有开启混合，当前的片元则会直接覆盖掉当前所在的缓冲中的像素，两个片元并没有做任何关联性的操作，但如果这时开启混合则可以对这两个片元在颜色上做更多的操作，这可能是我们所期望的。&lt;/p&gt;

&lt;p&gt;大多数情况混合与片元的 alpha 值有关，但不是硬性要求一定要与alpha有关，也可以只与颜色有关，只是这种类型比较多而已。&lt;/p&gt;

&lt;p&gt;alpha 是颜色的第四个分量，OpenGL中片元的颜色都会带有 alpha 无论你是否需要它，无论是否你显性地设置了它，alpha默认为1不透明。&lt;/p&gt;

&lt;p&gt;但是 alpha 太抽象，我们无法从肉眼看到它，只能在脑袋中想象它。alpha 代表了片元的透明程度，是颜色的第四个分量，我们可以用它实现各种半透明物体的模拟就像有色玻璃那样。&lt;/p&gt;

&lt;p&gt;说白了，混合就是当前物体的片元与前面渲染过的物体的片元之间的颜色与alpha上的操作，那么混合有哪些操作呢？我们来看下Unity3D中的混合指令：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Blend SrcFactor DstFactor

    Blend SrcFactor DstFactor, SrcFactorA DstFactorA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里有两种操作方式，第一种是混合颜色包括alpha，第二种是分开混合即，RGB颜色和RGB颜色混合(alpha不参与)用一种方式，alpha和alpha混合则用另一种方式(颜色不参与)。&lt;/p&gt;

&lt;p&gt;其中 SrcFactor 这个因子(变量)会与刚刚通过测试的物体片元(即当前物体片元)上的颜色相乘。&lt;/p&gt;

&lt;p&gt;DstFactor 这个因子(变量)会与前面已经渲染过的物体的片元(即缓存中的像素)的颜色相乘。&lt;/p&gt;

&lt;p&gt;SrcFactorA 这个因子(变量)会与刚刚通过测试的物体片元(即当前物体片元)上的 alpha 相乘。&lt;/p&gt;

&lt;p&gt;DstFactorA 这个因子(变量)会与已经渲染过的物体(即缓存中的像素)片元上的 alpha相乘。&lt;/p&gt;

&lt;h6&gt;这个过程有两个步骤，第一步是相乘操作，第二步是相乘后的两个结果再相加(还可以选相减等)。我们称为混合方程&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    即 Src * SrcFactor + Dst * DstFactor

    或 SrcColor * SrcFactor + DstColor * DstFactor, SrcAlpha * SrcFactorA + DstAlpha * DstFactorA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通常情况下相乘的结果再相加得到最终的混合片元。但我们可以改变这种方程式，用减号，或者调换位置的减号，最大值函数，最小值函数，来代替源数据与目标数据之间的操作符。即&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    BlendOp Add 加法
    BlendOp Sub 减法
    BlendOp RevSub 置换后相减
    BlendOp Min 最小值
    BlendOp Max 最大值
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述5种操作符的修改就分别代表了因子相乘后会相加，会相减，会置换后相减，会取得最小值，会取得最大值。拿Sub，Max来举例子：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    当写入BlendOp Sub时，方程式就变成了：

    Src * SrcFactor - Dst * DstFactor

    当写入BlendOp Max时，方程式就变成了：

    Max(Src * SrcFactor, Dst * DstFactor)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了操作符可以变化外，SrcFactor、DstFactor、SrcFactorA、DstFactorA 这四个变量的可以选择为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    One     代表1，就相当于完整的一个数据
    Zero    代表0，就相当于抹去了整个数据
    SrcColor    代表当前刚通过测试的片元上的颜色(即当前物体片元)，相当于乘以当前物体片元的颜色
    SrcAlpha    代表当前刚通过测试的片元上的alpha(即当前物体片元)，相当于乘以当前物体片元的alpha
    DstColor    代表已经在缓存中的颜色，相当于乘以当前缓存颜色
    DstAlpha    代表已经在缓存中的alpha，相当于乘以当前缓存alhpa
    OneMinusSrcColor    代表缓存上的片元做了 1 - SrcColor 的操作，再相乘
    OneMinusSrcAlpha    代表缓存上的片元做了 1 - SrcAlpha 的操作，再相乘
    OneMinusDstColor    代表当前刚通过测试的片元上的颜色做了 1 - DstColor 的操作，再相乘
    OneMinusDstAlpha    代表当前刚通过测试的片元上的颜色做了 1 - DstAlpha 的操作，再相乘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上述举的几个例子，并列出了所有变量的选择，我们可以知道其实Blend混合可以玩出很多花样来。&lt;/p&gt;

&lt;p&gt;这4个变量选择，和操作符的选择决定了混合后的效果，我们来看看其常用的混合方法：&lt;/p&gt;

&lt;h6&gt;1， 透明度混合Blend SrcAlpha OneMinusSrcAlpha，即常用半透明物体的混合方式。&lt;/h6&gt;

&lt;p&gt;这是最常用的半透明混合，首先要保证半透明绘制的顺序比实体的要后面，所以Queue标签是必要的Tags {&amp;quot;Queue&amp;quot; = &amp;quot;Transparent&amp;quot;}。Queue标签告诉着色器此物体是透半透明物体排序。至于渲染排序Queue的前因后果将在后面的文章介绍。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/shader36.png&quot; alt=&quot;blend&quot;&gt;&lt;/p&gt;

&lt;p&gt;Blend SrcAlpha OneMinusSrcAlpha 我们来解释下，以上图为例，图中油桶是带此Shader的混合目标。&lt;/p&gt;

&lt;p&gt;当绘制油桶时，后面的实体BOX已经绘制好并且放入屏幕里了，所以ScrAlpha与油桶渲染完的图像相乘，部分区域Alpha为0即相乘后为无(颜色)，这时正好另一部分由OneMinusSrcAlpha(也就是1-ScrAlpha)为1即相乘后原色不变，两个颜色相加后就相当于油桶的透明部分叠加后面实体Box的画面，于是就形成了上面的这幅画面。&lt;/p&gt;

&lt;p&gt;反过来也是一样，当ScrAlpha为1时，源图像为不透明状态，则两个颜色在相加前最终变成了，源图像颜色+无颜色=源图像颜色，于是就有了上图中油桶覆盖实体Box的图像部分。&lt;/p&gt;

&lt;h6&gt;2，加白加亮叠加混合 Blend One One，即在原有的颜色上叠加屏幕颜色更加白或亮。&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/shader37.png&quot; alt=&quot;blend&quot;&gt;&lt;/p&gt;

&lt;p&gt;第一参数One代表本物体的颜色。第二个参数代表缓存上的颜色。两种颜色没有任何改变并相加，导致形成的图像更加亮白。这样我们就看到了一个图像加亮加白的图像。&lt;/p&gt;

&lt;h6&gt;3，保留原图色彩Blend One Zero，即只显示自身的图像色彩不加任何其他效果。&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/shader38.png&quot; alt=&quot;blend&quot;&gt;&lt;/p&gt;

&lt;p&gt;本物体颜色，加上，零，就是本物体颜色。&lt;/p&gt;

&lt;h6&gt;4，自我叠加（加深）混合Blend SrcColor Zero，即源图像与源图像自我叠加。&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/shader39.png&quot; alt=&quot;blend&quot;&gt;&lt;/p&gt;

&lt;p&gt;与上面相比，加深了本物体的颜色。先是本物体的颜色与本物体的颜色相乘，加深了颜色，第二个参数为零，使得缓冲中的颜色不被使用。所以形成的图像为颜色加色的图像。&lt;/p&gt;

&lt;h6&gt;5，目标源叠加（正片叠底）混合Blend DstColor  SrcColor，即把目标图像和源图像叠加显示。&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/shader40.png&quot; alt=&quot;blend&quot;&gt;&lt;/p&gt;

&lt;p&gt;第一个参数，本物体颜色与缓存颜色相乘，颜色叠加。第二个参数，缓存颜色与本问题颜色相乘，颜色叠加。两种颜色相加，加亮加白。这个混合效果就如同两张图像颜色叠加后的效果。&lt;/p&gt;

&lt;h6&gt;6，软叠加混合Blend DstColor  Zero，即把刚测试通过的图像与缓存中的图像叠加。&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/shader41.png&quot; alt=&quot;blend&quot;&gt;&lt;/p&gt;

&lt;p&gt;与前面的叠加混合效果相似，这个只做一次叠加，并不做颜色相加操作，使得图像看起来在叠加部分并没有那么亮白的突出。因为第二个参数为零，表示后面的屏幕颜色与零相乘即为零。&lt;/p&gt;

&lt;h6&gt;7，差值混合BlendOp Sub，Blend One One，即注重黑白通道的差值。&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/shader42.png&quot; alt=&quot;blend&quot;&gt;&lt;/p&gt;

&lt;p&gt;在这个混合中使用了混合操作改变，从默认的加法改成了减法，使得两个颜色从加法变为了减法，不再是变白变亮的操作，而是反其道成为了色差的操作。&lt;/p&gt;

&lt;h6&gt;除了对源片元和目标片元，相乘再相加的操作，还可以改变相乘后的加法操作。比如减法，取最大值，取最小值等。&lt;/h6&gt;

&lt;h6&gt;Blend混合很像 Photoshop 中对图层操作，Photoshop中每个图层都可以选择混合模式，混合模式决定了该层与下层图层的混合结果，而我们看到的都是是混合后的图片。&lt;/h6&gt;

&lt;h3&gt;逻辑操作&lt;/h3&gt;

&lt;p&gt;在混合结束后，片元将被写入缓存中去，在写入缓冲中去时，还有一步逻辑操作，这是片元的最后一个操作。&lt;/p&gt;

&lt;p&gt;它作用于当前刚通过测试的片元数据以及当前颜色缓存中的数据，在它们之间进行一次操作，再写入到缓存中覆盖原来的数据。&lt;/p&gt;

&lt;p&gt;由于这个过程的实现代价对于硬件来说是非常低廉的，因此很多系统都允许这种做法。这种逻辑操作的方式很像上面的混合(Blend)，但是更加简单，不再有因子，只是两种颜色之间的数字操作，例如，XOR异或操作，AND与操作，OR或操作等。&lt;/p&gt;

&lt;p&gt;Unity3D中并不能自定义设置逻辑操作，这里不重点讲解。&lt;/p&gt;

&lt;h6&gt;双缓冲机制&lt;/h6&gt;

&lt;p&gt;片元最后都会以像素颜色的形式写入缓冲中，但是如果只有一个缓冲，那么我们会时常见到绘制的中间状态即图形的形成过程，这对画面呈现效果很不友好，所以GPU通常采用双缓冲机制，即前置缓存用于呈现画面，而后置缓存则继续由GPU继续工作。&lt;/p&gt;

&lt;p&gt;当整个画面绘制完成时，后置缓冲与前置缓冲进行调换，这时后置缓存可以成为了前置缓冲并呈现在屏幕上，而原来的前置缓存则成为后置缓冲交由GPU作为缓冲内存继续绘制下一帧，由此我们可以保证看到的图像是连续的最终状态。&lt;/p&gt;

&lt;h6&gt;整个渲染管线已经全部呈现在这里了，我们来总结一下。&lt;/h6&gt;

&lt;p&gt;整个渲染管线从大体上分，应用阶段，几何阶段，光栅化阶段。渲染数据从应用阶段生成开始。&lt;/p&gt;

&lt;p&gt;数据在应用阶段被记录、筛选(或者也可以叫裁剪)、合并，这个筛选和合并有些运用了算法来达到裁剪的目的，有些放大了颗粒度用少量的消耗来加速筛选(裁剪)，有些利用了GPU工作原理合并了渲染数据提高了GPU工作效率。&lt;/p&gt;

&lt;p&gt;几何阶段着重于处理顶点的数据，顶点着色器是其中最为重要的一个着色器，它不但需要计算顶点在空间上的转换，还要为下一个阶段光栅化阶段做准备。&lt;/p&gt;

&lt;p&gt;在顶点着色器中，计算和记录了片元着色器计算颜色需要的数据，这些数据都会被放入顶点(图元)数据内，这些数据在下一个阶段会被做插值后放入片元中。&lt;/p&gt;

&lt;p&gt;光栅化阶段主要任务是将三角形面转化为实实在在的像素，并且根据顶点上的数据做插值得到片元信息，一个片元就相当于一个像素附带了很多插值过的顶点信息。&lt;/p&gt;

&lt;p&gt;片元着色器在光栅化阶段起了重要的作用，它为我们提供了自定义计算片元颜色的可编程节点，不但如此，我们还可以根据自己的喜好抛弃某些片元。&lt;/p&gt;

&lt;p&gt;除了片元着色器外，片元在片元着色器后还需要经过好几道测试才能最终呈现在画面上，包括判断片元前后顺序的深度测试，可以自定义条件的模板测试，以及常用来做半透明的像素混合，片元只有经过这几道关卡才最终被写入缓存中。&lt;/p&gt;

&lt;h6&gt;我们讲解了很多，但还是有很多很多细节被忽略，我们会在后面的章节中详细为大家解剖，这些细节可能在各个图形编程接口(OpenGL和DirectX)的实现中不尽相同，但大体上都是运用了同一种原理和概念。&lt;/h6&gt;

&lt;p&gt;Unity3D为我们封装了很多东西，使得我们能很快的上手去运用，但也屏蔽了很多原理上的知识，使得我们在面对底层原理时感到迷茫。本书虽然不是致力于Shader的教学，但也将尽最大的努力使读者们从根本上理解GPU的工作原理，从而在面对工作上的困难时能一眼看透问题的本质，从根本上解决麻烦并优化效率。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>杭州景点体验概览</title>
   <link href="http://www.luzexi.com/2019/09/21/%E6%9D%AD%E5%B7%9E%E6%99%AF%E7%82%B9%E4%BD%93%E9%AA%8C%E6%A6%82%E8%A7%88.html"/>
   <updated>2019-09-21T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/09/21/杭州景点体验概览</id>
   <content type="html">&lt;p&gt;杭州景点体验概览&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;1.西湖--西湖音乐喷泉--三潭印月--断桥残雪--苏堤--白堤--西湖游船--曲院风荷--六和塔--花港观鱼--梅家坞--云栖竹径--龙井路与满觉陇路--孤山公园--虎跑公园--杨公堤&lt;/p&gt;

&lt;p&gt;2.灵隐寺（飞来峰）景区----北高峰索道&lt;/p&gt;

&lt;p&gt;3.宋城景区--宋城千古情演出&lt;/p&gt;

&lt;p&gt;4.杭州动物园&lt;/p&gt;

&lt;p&gt;5.吴山广场，河坊街&lt;/p&gt;

&lt;p&gt;6.雷峰塔&lt;/p&gt;

&lt;p&gt;7.杭州长乔极地海洋公园 -- 好，贵，大&lt;/p&gt;

&lt;p&gt;8.杭州野生动物世界 -- 良好，停车难，略贵，不大&lt;/p&gt;

&lt;p&gt;9.西溪国家湿地公园 -- 差，管理无章法，太大以至于找不到重点&lt;/p&gt;

&lt;p&gt;10.九溪&lt;/p&gt;

&lt;p&gt;11.南宋御街&lt;/p&gt;

&lt;p&gt;12.杭州乐园&lt;/p&gt;

&lt;p&gt;13.太子湾公园&lt;/p&gt;

&lt;p&gt;14.千岛湖中心湖区--千岛湖景区--千岛湖森林氧吧--千岛湖东南湖区景区--千岛湖游船&lt;/p&gt;

&lt;p&gt;16.大明山景区&lt;/p&gt;

&lt;p&gt;17.杭州烂苹果乐园 -- 游乐园&lt;/p&gt;

&lt;p&gt;18.杭州海底世界&lt;/p&gt;

&lt;p&gt;19.浙西大峡谷&lt;/p&gt;

&lt;p&gt;20.钱塘江观赏堤坝&lt;/p&gt;

&lt;p&gt;21.浙江省科技馆--西湖文化广场&lt;/p&gt;

&lt;p&gt;22.杭州浪浪浪水公园&lt;/p&gt;

&lt;p&gt;23.杭州Hello Kitty乐园&lt;/p&gt;

&lt;p&gt;24.桐庐县雅鲁激流探险漂流----临安市龙井峡漂流----淳安县九龙溪漂流----桐庐县虎啸峡激流探险漂流----余杭区双溪漂流景区&lt;/p&gt;

&lt;p&gt;25.桐庐县瑶琳仙境，垂云通天河景区&lt;/p&gt;

&lt;p&gt;26.杭州DO都城，亚洲最大的少年儿童体验类教育场馆&lt;/p&gt;

&lt;p&gt;27.桐庐县大奇山国家森林公园&lt;/p&gt;

&lt;p&gt;28.临安太湖源&lt;/p&gt;

&lt;p&gt;29.良渚，彻天彻地童玩中心，让孩子训练协调能力，培养冒险精神&lt;/p&gt;

&lt;p&gt;30.江干区江和美海洋公园&lt;/p&gt;

&lt;p&gt;31.临安大明山景区&lt;/p&gt;

&lt;p&gt;32.慈溪杭州湾国家湿地公园&lt;/p&gt;

&lt;p&gt;33.胡雪岩故居&lt;/p&gt;

&lt;p&gt;34.京杭大运河，余杭塘栖&lt;/p&gt;

&lt;p&gt;35.杭州国际博览中心，萧山区&lt;/p&gt;

&lt;p&gt;36.多乐岛蹦床公园杭州馆，江干区&lt;/p&gt;

&lt;p&gt;37.桐庐县大奇山疯狂森林主题乐园，冒险探险&lt;/p&gt;

&lt;p&gt;38.城西银泰，娱乐场--滑冰--玩具店 -- 逛买逛买&lt;/p&gt;

&lt;p&gt;39.浙江大学紫金港校区 -- 好风景好环境&lt;/p&gt;

&lt;p&gt;40.塘西古镇  -- 逛吃逛吃，小&lt;/p&gt;

&lt;p&gt;41.杭州北高峰 -- 交通不方便&lt;/p&gt;

&lt;p&gt;42.良储遗址 -- 大，美，便宜，自带食物，能游览大半天&lt;/p&gt;

&lt;p&gt;43.井山湖农耕文化公园(塘子堰，中小学生实践基地) -- 免费，向日葵基地，大片草地，搭帐篷，风景美，自带食物&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>上海景点体验概览</title>
   <link href="http://www.luzexi.com/2019/09/21/%E4%B8%8A%E6%B5%B7%E6%99%AF%E7%82%B9%E4%BD%93%E9%AA%8C%E6%A6%82%E8%A7%88.html"/>
   <updated>2019-09-21T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/09/21/上海景点体验概览</id>
   <content type="html">&lt;p&gt;上海景点体验概览&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;1.理工大学  大草坪，小溪流，小森林，运动场，食堂，能玩半天。 !!&lt;/p&gt;

&lt;p&gt;2.理工大学边上商场游乐场  儿童游乐设施，能玩半天 !!&lt;/p&gt;

&lt;p&gt;3.上海植物园  各类植物，大众活动区，能野餐，有风景，有花有草，有大草坪，玩半天-1天。 !!&lt;/p&gt;

&lt;p&gt;4.上海动物园  自带食物和水。各类动物，游乐设施，大草坪，能玩一天。 !!&lt;/p&gt;

&lt;p&gt;5.上海野生动物园  自带食物和水。各类动物，野生动物，动物喂食(喂鸽子，喂鱼比较人性化，其他没试过)，游乐设施，能玩一整天。 !!&lt;/p&gt;

&lt;p&gt;6.上海长风海洋公园  自带食物和水。各类海洋动物，能玩半天。 !!&lt;/p&gt;

&lt;p&gt;7.宜山路博库书城周边包括光启城  各类书籍，玩具，旁边有商场，有好东西吃，有逛有吃。对面有85度c，停车到对面写字楼便宜。里面有小孩子的补习班，兴趣班。 !!&lt;/p&gt;

&lt;p&gt;8.南京路步行街  商场，人群多，路开阔，有玩有吃，就是贵。 !!&lt;/p&gt;

&lt;p&gt;9.东方明珠塔  175元/人(携程），自带食物和水。263米主观光层 + 259米透明悬空走廊 + 78米“更上·海”环动多媒体秀 + 0米上海城市历史发展陈列馆 + 0米魔法光影欢乐园。能玩半天-1天。可订旋转餐厅自助餐，需要提前1个工作日订。电梯排队人多，很多时间会浪费在排队进电梯上。 !!&lt;/p&gt;

&lt;p&gt;10.上海海洋水族馆 &lt;/p&gt;

&lt;p&gt;11.上海科技馆  不错的科学知识普及地点 !!&lt;/p&gt;

&lt;p&gt;12.上海博物馆  免费，但人多要排队，11点半左右去人最少，因为出来的人多了。空调很冷，因为要给文物降温。自带食物和水。&lt;/p&gt;

&lt;p&gt;13.上海自然博物馆&lt;/p&gt;

&lt;p&gt;14.中国航海博物馆&lt;/p&gt;

&lt;p&gt;15.上海汽车博物馆&lt;/p&gt;

&lt;p&gt;16.上海电影博物馆&lt;/p&gt;

&lt;p&gt;17.银行博物馆&lt;/p&gt;

&lt;p&gt;18.宋庆龄故居纪念馆&lt;/p&gt;

&lt;p&gt;19.上海邮政博物馆&lt;/p&gt;

&lt;p&gt;20.上海外滩美术馆&lt;/p&gt;

&lt;p&gt;21.上海当代艺术馆&lt;/p&gt;

&lt;p&gt;22.上海当代艺术博物馆&lt;/p&gt;

&lt;p&gt;23.上海琉璃艺术博物馆&lt;/p&gt;

&lt;p&gt;24.BUS TOUR 上海观光游 自带食物和水。50/人(携程)。携程上购买半价，需提前1个工作日购买，1.3米以下儿童免费，能够观光一整天。&lt;/p&gt;

&lt;p&gt;25.上海儿童博物馆&lt;/p&gt;

&lt;p&gt;26.上海工艺美术博物馆&lt;/p&gt;

&lt;p&gt;27.龙美术馆西岸馆&lt;/p&gt;

&lt;p&gt;28.钟书阁&lt;/p&gt;

&lt;p&gt;29.上海环球金融中心观光天阁&lt;/p&gt;

&lt;p&gt;30.上海天文博物馆&lt;/p&gt;

&lt;p&gt;31.上海图书馆&lt;/p&gt;

&lt;p&gt;32.chi K11美术馆&lt;/p&gt;

&lt;p&gt;33.上海老相机制造博物馆&lt;/p&gt;

&lt;p&gt;34.外滩历史纪念馆&lt;/p&gt;

&lt;p&gt;35.上海电信博物馆&lt;/p&gt;

&lt;p&gt;36.打字机博物馆&lt;/p&gt;

&lt;p&gt;37.上海观复博物馆&lt;/p&gt;

&lt;p&gt;38.上海少年儿童图书馆&lt;/p&gt;

&lt;p&gt;39.复旦大学博物馆&lt;/p&gt;

&lt;p&gt;40.多伦现代美术馆&lt;/p&gt;

&lt;p&gt;41.星空错觉艺术馆&lt;/p&gt;

&lt;p&gt;42.闵行区博物馆&lt;/p&gt;

&lt;p&gt;43.浦东图书馆少儿馆&lt;/p&gt;

&lt;p&gt;44.上海浦东展览馆&lt;/p&gt;

&lt;p&gt;45.上海历史收藏馆&lt;/p&gt;

&lt;p&gt;46.科学节能展示馆&lt;/p&gt;

&lt;p&gt;47.天空画画水族馆&lt;/p&gt;

&lt;p&gt;48.民生现代美术馆&lt;/p&gt;

&lt;p&gt;49.上海木文化博物馆&lt;/p&gt;

&lt;p&gt;50.上海杜莎夫人蜡像馆&lt;/p&gt;

&lt;p&gt;51.朱家角古镇景区&lt;/p&gt;

&lt;p&gt;52.宜山路中山西路，宜家家居。可购物，可逛街，可吃饭。 //早上10点才开门，早餐可以在里面吃。里面路很长，有上下两层，能逛半天。中午吃饭人多，价格适中。 !!&lt;/p&gt;

&lt;p&gt;53.安徒生童话乐园  //孩子的乐园，自带食物，门票贵的，一大一小200元。 !!&lt;/p&gt;

&lt;p&gt;54.锦江乐园  //孩子的乐园100元多玩几次，小吃多，吃的贵。可以自带食物。 !!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第七章，渲染管线与图形学(二) - 渲染管线1</title>
   <link href="http://www.luzexi.com/2019/09/21/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E4%B8%8E%E5%9B%BE%E5%BD%A2%E5%AD%A64.html"/>
   <updated>2019-09-21T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/09/21/Unity3D高级编程之进阶主程-渲染管线与图形学4</id>
   <content type="html">&lt;p&gt;计算机的世界里其实是很纯粹的，没有什么高深的技术，无非就是进程、线程、内存、硬盘、CPU。&lt;/p&gt;

&lt;p&gt;在现代社会的实际编程中，很多时候引擎或者框架帮我们屏蔽了底层上的操作使得程序员只需要将所有精力放在上层应用就可以了，因此数学和算法很多时候成了重点，这是符合社会进步规律的，我们需要站在巨人的肩膀上才能走得比巨人更快更远。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;Unity3D就是帮助我们快速建立程序结构的好引擎，有了Unity3D我们才能在较低门槛的情况下，创造出自己的想法和创意，让’我‘里面有的内在才能快速和有效的得到放大。&lt;/p&gt;

&lt;p&gt;除了进程、线程、内存、硬盘、CPU这些通常我们程序员在编程时都要接触的因素外，对于我们前端程序员来说又多了一个GPU的技术范畴，因此我们需要学习和考虑的问题比其他程序员会更加多一些也更加高阶一些，Unity3D虽然封装了所有引擎需要的GPU接口功能但我们还是必须要了解渲染管线是如何处理的，最终是如何将渲染数据渲染要屏幕上的等等这些底层的知识和原理。&lt;/p&gt;

&lt;h3&gt;OpenGL、DirectX究竟是什么&lt;/h3&gt;

&lt;p&gt;OpenGL 和 DirectX 其实是一回事，它们都是图形渲染的应用程序编程接口，它们都是一种可以对图形硬件设备特性进行访问的软件库。它们的区别只是接口名字不一样，并且，分别由不同的两个开发群体开发出来的两套程序。&lt;/p&gt;

&lt;p&gt;为什么会是两个不同群体开发出来的两套差不多功能的软件，并且还同时运行在现有的世界中呢？&lt;/p&gt;

&lt;p&gt;OpenGL是由SGI(Silicon Graphics 美国硅图公司)开发的，而DirectX是由微软开发的，由于市场竞争的关系两家公司做了同样的事，最后导致现在的局面。从现在的局面看，我们可以想象的到，在当初还没有形成统一的硬件渲染接口时，各家公司的编程方式有多混乱，情况有多复杂，对标准统一接口的标准竞争有多激烈。在这种严峻的情况下才使得两家公司为了各自的利益，一直在不断维护和升级着各自的驱动接口直到今天。&lt;/p&gt;

&lt;p&gt;幸运的是 Unity3D 已经帮我们封装好了 OpenGL 和 DirectX 的接口，我们无需关心到底是调用 OpenGL 还是 DirectX。我们这里会以OpenGL为例来讲解Unity3D与OpenGL的关系，暂时免去DirectX的麻烦。&lt;/p&gt;

&lt;h6&gt;OpenGL究竟处在哪个位置&lt;/h6&gt;

&lt;p&gt;Unity3D通过调用 OpenGL 来渲染图像，OpenGL 定义各种标准接口就是为了让像 Unity3D 这样的应用程序在面对不同类型的显卡硬件时可以不必慌张，也就是说由于 OpenGL 的存在，Unity3D完全不需要去关心硬件到底是哪个厂家生产的，它的驱动是什么。其实与其说OpenGL在标准接口中适配了硬件厂商的驱动程序，不如说硬件厂商的驱动程序适配了OpenGL，事实上确实是这样。&lt;/p&gt;

&lt;p&gt;当Unity3D在渲染调用时去设置OpenGL的渲染状态，OpenGL就会去检查显卡驱动程序里是否有该功能，如果有就会调用，如果是那些比较特殊的渲染接口，有些硬件驱动是没有的则不调用。&lt;/p&gt;

&lt;p&gt;如果把GPU硬件看做是最底层的那个模块的话，显卡驱动就是在硬件之上的模块，它是用来将指令翻译成机器语言并调用硬件的那个程序。&lt;/p&gt;

&lt;p&gt;显然OpenGL是在驱动程序之上的应用程序，我们可以把它看做是适配不同驱动程序的中间件。如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/7/render-pipeline1.png&quot; alt=&quot;opengl&quot;&gt;&lt;/p&gt;

&lt;p&gt;上图中很清晰的表达OpenGL所处的位置，应用程序(如Unity3D)向OpenGL发送渲染指令，告诉OpenGL我的某个模型数据需要渲染或者说某个状态要设置，OpenGL发送指令给显卡驱动程序，显卡驱动程序将指令翻译为机器码后，将指令机器码发送到GPU，GPU先从显存中获得需要的数据再根据指令做处理。&lt;/p&gt;

&lt;p&gt;我们看到这个过程中显卡驱动程序只是做了传递指令消息的工作，指令从OpenGL那里发起到GPU接受到指令，显卡驱动只是起到了翻译的作用。因此我们在平常的讨论中，常常将显卡驱动程序的工作忽略掉，而用 OpenGL 与 GPU 的互动代替之。甚至有时会将OpenGL也忽略掉用GPU代替，或把GPU忽略掉用OpenGL代替，因为GPU的工作是机械式的它俩的工作完全可以看做一个整体。&lt;/p&gt;

&lt;p&gt;当然这里GPU不只会处理一次，OpenGL会通过显卡驱动发送很多次指令给GPU，让它处理一连串的操作，每次指令都有可能不一样，经过一系列的处理过程后，最终形成了一张屏幕大小的图像存放在缓存中，这时GPU才向屏幕输出最终画面。&lt;/p&gt;

&lt;p&gt;下面我们就来详细介绍一下渲染管线。&lt;/p&gt;

&lt;h3&gt;究竟渲染管线是什么？&lt;/h3&gt;

&lt;p&gt;上面所说的 OpenGL 通过驱动程序向 GPU 发送很多个指令，其实为了渲染很多个模型每一帧都会发送很多个指令，这一系列指令加起来，才形成一整个渲染过程，拥有完整的一个画面。&lt;/p&gt;

&lt;p&gt;渲染管线就是指令中完成一个绘制命令(drawcall)的流水线。这条流水线中有很多个环节，每个环节都自己干自己的事，就像工厂里的流水作业一样，每个节点的工人都会拧属于自己的螺丝，完全不会去管前面节点发生了什么事情，不过在现代GPU中也会做些流程上的优化，比如调整节点的顺序，但节点还是自顾自的工作，这部分会在后面的文章中提到。&lt;/p&gt;

&lt;p&gt;从严肃的理论描述来说渲染管线：是一系列数据处理的过程，这个过程最终的目的是将应用程序的数据转换到最终输出的缓存上最后输出到屏幕。&lt;/p&gt;

&lt;p&gt;我们说的再白话一点。渲染管线从接受到渲染命令后开始，分几个阶段处理了这些数据，这几个阶段分别是应用阶段，几何阶段，光栅化阶段，经过这几个阶段处理最终输出到屏幕上。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中每个阶段都有各自细分的流程，我们来一一讲述下。&lt;/p&gt;

&lt;h6&gt;应用阶段&lt;/h6&gt;

&lt;p&gt;应用阶段其实就是我们执行Unity3D引擎和代码的过程，在逻辑代码过程中，我们实例化了很多个模型或者UI（UGUI的UI也是网格，跟渲染场景中的3d模型从根本上是没有区别的），这些模型有贴图，有材质球，有网格，对于引擎来说，这个阶段在代码执行完毕后它知道了哪些模型需要被渲染，有哪些光源存在，摄像头的位置大小，于是就知道该如何通知GPU去渲染，总的来说这个阶段是准备渲染数据的阶段，为调用渲染准备。&lt;/p&gt;

&lt;p&gt;引擎除了知道有哪些东西(数据)需要被提交到GPU渲染外，在提交前还会对这些数据做很多优化工作，从而提高渲染性能。&lt;/p&gt;

&lt;p&gt;优化工作有很多种，从具体业务逻辑上做优化的方案，前面的章节中我们也讲到了很多很多关于在逻辑端上优化的工作，现在我们来重点说一下引擎的‘剔除’优化部分。&lt;/p&gt;

&lt;p&gt;Unity3D引擎会对不需要渲染的物体进行剔除，原本这是在GPU中做的事搬到了CPU上做。为什么要搬到CPU上做呢？因为在引擎端掌握的是第一手数据信息，如果从粗颗粒上下手做剔除工作，CPU会更快更方便，如果放到GPU去剔除，则更可能是三角形级别的裁剪，会浪费很多计算同时降低了功效。&lt;/p&gt;

&lt;p&gt;引擎在粗颗粒上是怎么剔除的呢，引擎当然不会像GPU那样去计算每个面是否可展示，因为这个操作对GPU来说更快，而是去计算更粗的颗粒，即整个模型的包围盒是否需要被剔除。&lt;/p&gt;

&lt;h6&gt;引擎会计算一个模型的包围盒，这个包围盒就是Unity3D的Mesh.bounds变量，这个包围盒为AABB包围盒，即一个顶点与最大最小长宽高，我们可以理解为包围盒是个立方体有8个顶点，这8个顶点决定了这个模型是否会被剔除，即只要有一个顶点在摄像机可视范围内(锥视体内或正交范围)，就不会被剔除，否则将被剔除。&lt;/h6&gt;

&lt;p&gt;引擎通过这种快速的判断包围盒与锥视体的关系来剔除不需要渲染的物体，以达到对粗颗粒的渲染优化。&lt;/p&gt;

&lt;p&gt;除此之外，对粗颗粒的剔除判断还有 occlusion culling 即遮挡剔除，也是属于应用阶段的优化剔除，它其实也是属于业务逻辑层的优化方案并不是所有项目都会使用，而通常只在第一人称视角的游戏上使用这种剔除方式，即被遮挡的物体不进入渲染队列。&lt;/p&gt;

&lt;p&gt;除了得到和优化需要渲染的数据外，应用阶段的最后时刻就是向GPU提交需要渲染的数据，即拷贝数据到显存中、设置渲染状态、渲染调用(Draw call)。&lt;/p&gt;

&lt;p&gt;在PC端中显存是最接近GPU的内存设备，将数据拷贝到显存中会加速GPU的工作效率，但在移动端里并没有显存，安卓和IOS的架构决定了它们只能用内存来为GPU提供服务，因此在手机端中没有拷贝数据到显存的这个说法，使用的都是同一个内存地址，除非我们需要读写这块内存内容才将它们另外复制一份。&lt;/p&gt;

&lt;h6&gt;那么什么是渲染状态？很多人都很困惑，其实就是一连串的开关或方法以及方法的地址指向。&lt;/h6&gt;

&lt;p&gt;比如：要不要开启混合，使用哪张纹理，使用哪个顶点着色器，使用哪个片元着色器，剔除背面还是剔除前面亦或都不剔除，使用哪些光源等等。&lt;/p&gt;

&lt;p&gt;通俗的来说，设置渲染状态，就是设置并决定接下来的网格如何渲染，有了渲染的具体方法，至于具体的渲染工作则是由GPU来执行。&lt;/p&gt;

&lt;p&gt;有了渲染的具体方法，就要调用渲染的具体对象，这就是渲染调用即 Draw call 做的工作。实际上 Draw call 就是一个命令，它的发起方是CPU，接收方是GPU，这个命令仅仅指向了一连串的图元（即点,线,面，我们可以理解为网格被拆分后的状态），并不会包含其他任何材质信息。&lt;/p&gt;

&lt;p&gt;每个 Draw call 前面都伴随着一个渲染状态的设置，因此整个渲染命令队列中都是一对对出现的，并且都是由CPU向GPU提交。&lt;/p&gt;

&lt;h6&gt;那么为什么要有这个渲染命令队列呢？&lt;/h6&gt;

&lt;p&gt;因为CPU和GPU相当于是两个大脑，它们是分离的，如果没有很好的协调机制，它们无法正常梳理自己的工作。一个命令缓冲队列就是用来协调CPU与GPU的，CPU只管向命令缓冲队列中推数据，GPU只管取数据并且处理数据，取一个处理一个，其他时间的都自顾自的忙自己的事。这个命令缓冲队列成了CPU与GPU的关系纽带。&lt;/p&gt;

&lt;p&gt;这条关系纽带(命令缓冲队列)很好的连接了CPU与GPU，但也成了它们之间交互的瓶颈，即我们通常所说的 Draw call 太多时GPU的工作效率比较差。其根本原因就是 CPU 发送了很多渲染命令后，只是空转的等待GPU完成这些渲染操作。&lt;/p&gt;

&lt;h6&gt;几何阶段&lt;/h6&gt;

&lt;p&gt;CPU准备好数据后，向GPU发送了渲染状态的设置命令和渲染调用命令后，接下来的工作就完全属于GPU了。&lt;/p&gt;

&lt;p&gt;接下来进入的是几何阶段的工作。几何阶段最终的工作目标是将需要绘制的图元转化到屏幕空间中，所以它决定了哪些图元要绘制，怎么绘制。&lt;/p&gt;

&lt;p&gt;图元即点、线、面。我们可以理解为网格的拆分状态，是着色器中的基础数据，在几何阶段作用最大。&lt;/p&gt;

&lt;h6&gt;几何阶段会经过几个节点，按顺序排列为，顶点着色器，曲面细分着色器，细分计算着色器，几何着色器，图元装配，裁减和剪切。如下图所示：&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺图
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中几何阶段分拆成了，顶点着色器、曲面细分着色器、细分计算着色器、几何着色器、图元装配、裁剪和剪切，6个节点。&lt;/p&gt;

&lt;p&gt;顶点着色器会对每个顶点进行逐一的计算，OpenGL会调用一个顶点处理函数来处理顶点数据。&lt;/p&gt;

&lt;p&gt;这个顶点处理函数就是我们可编程的部分，它可以很简单，只是数据复制并传递到下一个节点，也可以很复杂，例如变换矩阵的方式来得到顶点在屏幕上的位置，或者通过光照计算来判断顶点的颜色，或者记录和计算其他下一个阶段需要的信息。具体我们将在后面的章节中详细讲解。&lt;/p&gt;

&lt;p&gt;曲面细分着色器，细分计算着色器，几何着色器，都是可选的着色器。细分着色器包括曲面细分着色器和细分计算着色器会使用面片来描述一个物体的形状，并且增加面片数量使得模型外观更加平顺。几何着色器则允许增加和创建新的图元，这是唯一一个能自定义增加新图元的着色器。&lt;/p&gt;

&lt;p&gt;前面几个着色器节点处理的都是顶点数据，到了图元装配节点，它将这些顶点与相关的几何图元之间组织起来为下一步的裁剪和剪切工作做准备。&lt;/p&gt;

&lt;h6&gt;经历过前面几个阶段的变换，特别是在顶点着色器中的顶点空间转换，从模型空间到世界空间再到视口空间再到投影空间，Unity3D的Shader中常见的UNITY_MVP就是这个坐标空间转换的矩阵，再经过硬件上透视除法后得到了归一化的设备坐标，这使得到裁剪和剪切节点时，这个归一化的设备坐标使得裁剪会更加容易，不仅如此还对后面的深度缓冲和测试有很大的帮助。&lt;/h6&gt;

&lt;p&gt;归一化后的设备坐标(Normalized Device Coordinates, NDC)可以看做是一个矩形内的坐标体系，这个坐标体系是一个立方体的坐标体系，所有在这个坐标体系内的顶点的坐标都不会超过1到-1之间，无论x、y、z。&lt;/p&gt;

&lt;p&gt;为了能更好的理解经过空间转换后的顶点在后面几个阶段上应用的数据，有必要在这里来理解一下空间坐标系转换前后的样子，如下图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺图1

    缺图2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述图1中我们看到原本在视锥体上的物体，在经过空间矩阵转换后，视口从锥体变为了立方体，而原本在视锥体中的物体则从长方体变成了锥体，这是空间坐标系转化后的结果。&lt;/p&gt;

&lt;h6&gt;其中需要特别注意的是原本在视锥体坐标系上向前方向(forward)的X坐标轴变为了Z轴方向，整个立方体平面由x、y组成二维坐标体系。&lt;/h6&gt;

&lt;h6&gt;相当于，x、y坐标成为了可以映射到屏幕上的相对坐标，z坐标则被用来作为离屏幕有多远的数值参考，这是因为归一化后的NDC坐标系与原本视锥体坐标系相比其Z轴方向发生了翻转。&lt;/h6&gt;

&lt;p&gt;归一化坐标让坐标范围固定在1到-1之间，使得后续对图元数据的处理变得更加简单。不过归一化坐标范围在OpenGL和DirectX上有所不同，在OpenGL上x、y、z坐标范围在[-1,1]之间，而在DirectX上则是[0,1]之间，但这并不影响最终在屏幕上的表达，只是规则不同而已。最终他们都会进行简单的线性变换映射到屏幕的平面矩形范围内。虽然在屏幕映射时，OpenGL和DirectX两者的差异有出现了，OpenGL以左下角为(0,0)点，而DirectX则以左上角为(0,0)点，显然是两个商家因为竞争而故意造成的，还好主流的图形编程接口并不多，不管怎样差异已经存在了我们只能小心留意。&lt;/p&gt;

&lt;p&gt;说了这么多就是为了更好的理解几何阶段最后一步裁剪和剪切。我们将顶点转化到了归一化的坐标空间后，裁剪就容易多了，再通过图元装配，又有了线段和三角形数据，剪切就可以开始了。&lt;/p&gt;

&lt;p&gt;一个图元和可视范围关系，要么完全在范围内，要么完全在范围外，要么就是部分在里面部分在外面。完全在范围内的图元继续向下传递，不做任何操作，完全在范围外的图元则被剔除掉不再进入到后面的阶段，部分在视野内的图元则需要进一步剪切处理，把在范围外的部分剔除掉并在边界处生成新的顶点来连接没有被剔除的顶点。如下图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺图
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中一个完整的三角形两个顶点在范围内，一个顶点在范围外，剪切后在边界上增加了两个顶点，这是比较复杂的情况，另一个中比较简单的情况时一个顶点在范围里，两个顶点在范围外，剪切后形成新的两个顶点与范围内的顶点结合后替换了原来的三角形。&lt;/p&gt;

&lt;h6&gt;我们来分析下那种复杂的情况，因为经过裁剪后三角形由3个顶点变成了4个顶点，成为了4边形，所以需要对这个四边形进行切割。切割的方法其实很简单，选一个新增的顶点与原本的两个顶点替换原来的三角形，另一个新增的顶点与前一个新增的顶点再加上一个旧顶点(这个旧顶点一定是剪切后新增的这个顶点的线段里的)形成新的三角形。&lt;/h6&gt;

&lt;p&gt;不仅如此，裁剪不仅仅是视口的裁剪，还有会有背面裁剪(Back-Face Culling)，即剔除面朝视口反方向的面片，将在后面的Shader编写中详细讲述。&lt;/p&gt;

&lt;p&gt;至此所有几何阶段的操作都结束了，总体来说几何阶段处理的是顶点，以及计算和准备下一个阶段需要用到的数据。&lt;/p&gt;

&lt;h6&gt;光栅化阶段&lt;/h6&gt;

&lt;p&gt;光栅化阶段分为三个节点，光栅化、片元着色器、逐片元操作。&lt;/p&gt;

&lt;p&gt;其中光栅化可以分成，三角形设置、三角形遍历两个节点。&lt;/p&gt;

&lt;p&gt;三角形设置即Triangle Setup，由于前面阶段都是空间意义上的顶点和三角形，到了光栅化阶段我们更加需要的屏幕上的像素，于是三角形设置可以认为是将所有三角形都铺在屏幕坐标平面上，这样就知道了每个三角形片面在屏幕上的范围，它用三角形边界的形式表达了这个覆盖面。&lt;/p&gt;

&lt;p&gt;知道覆盖面还不够，因为屏幕中展示的画面都是以像素为单位计算的，所以一个三角形覆盖哪些像素需要依靠扫描变换(Scan Conversion)得到，这个像素扫描阶段就是三角形遍历(Triangle Traversal)。如下图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺图
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中，在三角形遍历节点中像素依据三角形三条边计算得到像素覆盖范围，即哪些像素被认为是这个三角形内的覆盖范围，再通过三个顶点中信息的插值得到每个像素的信息，信息包括坐标，深度，颜色，法线，纹理坐标等都是顶点上的信息经过插值得到。&lt;/p&gt;

&lt;h6&gt;经过光栅化的节点，我们得到了三角形内每个像素上的信息，我们称它们为片元，每个片元包含了诸多信息。这个片元将被传递到下一个阶段即片元着色器。&lt;/h6&gt;

&lt;p&gt;片元着色器(Fragment Shader)就如字面意思那样，是处理片元的地方，它是可编程的阶段，我们在这里可以编写很多我们喜欢操作来改变片元的颜色，或者也可以丢弃该片元(discard 或者 clip)。&lt;/p&gt;

&lt;p&gt;每个片元就相当于一个像素，只是比起像素，片元装载了很多的信息，这些信息都是通过前面三角形遍历时对三个顶点中的信息插值得到的。&lt;/p&gt;

&lt;p&gt;经过片元着色器的处理，也就是我们编写的片元着色程序的处理后，最终输出的也是片元，我们通常都在片元着色器中计算改变片元的颜色，最终得到一个我们想要的输出到屏幕的片元。&lt;/p&gt;

&lt;h6&gt;这里有一个重点，每次片元着色器处理片元的只是单个片元，也就是单个一个像素，对于片元着色器来说它并不知道相邻的片元是什么样，因此每个片元在处理时无法得到邻近的片元的信息。&lt;/h6&gt;

&lt;p&gt;得不到邻近的片元信息不代表我们就不可以受到邻近的片元影响，虽然每次片元着色器传入的和处理的都是单个片元，但GPU在跑片元着色器时并不是只跑一个片元着色器，而是将其组织成2x2的一组片元块同时跑4个片元着色器。如下图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺图
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上图中，描绘了4个片元组成的片元组，以及偏导数函数对它们的计算过程。我们可以通过ddx和ddy这两个偏导数函数来求得邻近片元的差值。偏导数函数可以用于片元着色器中的任何变量。对于向量和矩阵类型的变量，该函数会计算变量的每一个元素的偏导数。&lt;/p&gt;

&lt;p&gt;偏导数函数是纹理Mipmaps实现的基础，我们将在后面的章节中详细讲解。&lt;/p&gt;

&lt;p&gt;除了计算片元的颜色，我们还可以在片元着色器中丢弃某些片元(discard 或者 clip)，我们常说的Alpha Test就是一个应用丢弃片元来实现的效果，我们将在后面的章节中详细讲解 Alpha Test的原理与利弊。&lt;/p&gt;

&lt;h6&gt;片元着色器和顶点着色器是我们在着色器编程时最重要的两个节点，如果我们想要更通俗简单的理解顶点着色器和片元着色器的区别的话，可以认为：顶点着色器(包括细分着色器和几何着色器)决定了一个三角形应该放在屏幕的什么位置，而片元着色器则用这个三角形包括它的顶点和线段来决定三角形范围内的像素拥有什么样的颜色。&lt;/h6&gt;

&lt;p&gt;片元着色器输出片元后，进入了逐片元操作阶段，也是渲染管线的最后一步。&lt;/p&gt;

&lt;h6&gt;下一节继续讲解剩余的逐片元操作阶段。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(二十八) 如何应对彷徨</title>
   <link href="http://www.luzexi.com/2019/09/09/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A828.html"/>
   <updated>2019-09-09T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/09/09/思路探讨28</id>
   <content type="html">&lt;p&gt;人时不时的总会彷徨的，每个人都一样。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;经常性的会迷失方向，看不清未来。无论我们前面有过多少清晰的认识，或者说多少深刻的觉悟，总是会在某个时刻感受到无法言语的痛苦。&lt;/p&gt;

&lt;p&gt;痛苦从何而来？是前面未知的道路吗，有可能，是疲劳吗，也有，是周遭向我们袭来的负能量吗，肯定有的，是因为没有计划使得自己总感觉是在胡乱的东奔西跑吗，是的。&lt;/p&gt;

&lt;p&gt;精神上和身体上的疲惫，说实在的无论怎么样都会累的，疲劳了就休息一下么，可能太久没有回家了，好想家，那就回家，感受下家的温暖。&lt;/p&gt;

&lt;p&gt;不工作也会累，工作也会累，说实在的其实很多时候精神力是要运作的，我们怎么运作有限的精力和时间，让最饱满的精力用在最重要的事情上，让零星的时间能变得更加充实，这是门学问，这一年多时间我一直在学习时间管理和自律，现在顿悟到精力管理也很重要。&lt;/p&gt;

&lt;p&gt;周遭的负能量能不能屏蔽掉，可以的，人很容易被周遭的环境打乱自己的节奏，我们需要更强大屏蔽能力，闭屏掉所有负能量。这一点我认为明星们做的很好，作为大众的明星，对他/她褒贬不一的评价从全国四面八方袭来，如果没有强大的屏蔽负能量的能力，人很容易就崩溃，但他们做的很好，可以做到自然的屏蔽掉负能量全力做自己。&lt;/p&gt;

&lt;p&gt;能不能为自己提早制定计划，计划确实赶不上变化，至少制定了计划可以让自己知道后面会遇到哪些困难，我需要制定每周的计划，每个月的计划，这样才能有效预知未来前进过程中可能遇到的问题、瓶颈、障碍、困难。&lt;/p&gt;

&lt;p&gt;彷徨无法避免，但我想能不能减少彷徨的频率？怎样才能减少彷徨的频率呢，我可不可以，自己给自己一点多一些安全感，这样就会少一点彷徨。&lt;/p&gt;

&lt;p&gt;怎么给自己多一些安全感？&lt;/p&gt;

&lt;p&gt;为未来优秀的自己积累知识、能力、财富。如果我足够优秀，知识量足够多，能力足够强大，财富足够多，我彷徨的频率肯定就少一些，对未来和当前肯定更加坚定一些，专注力也会更加好一些。&lt;/p&gt;

&lt;p&gt;我要怎样才能达到这个目标？&lt;/p&gt;

&lt;p&gt;关键在于，’积累‘！每天几页书，每天抽出时间学习一下，每天运动一下保持精力充沛，少一些娱乐把精力用在更加重要的事情上，每天这样做，每天。&lt;/p&gt;

&lt;p&gt;只有你肯执行下去、坚持下去，无论现在处于什么样的状态，5年后你一定就是人才，10年后你将是名人，20年后你将是巨星。&lt;/p&gt;

&lt;p&gt;有一次看到一个公众号发的一个消息，上面标题写着“如果一个人20岁开始自律20年会如何”，好奇的点进去一看，三个大字刻进我心中，“曾国藩”。&lt;/p&gt;

&lt;p&gt;于是我阅读了曾国藩的书，我并没有要成为曾国藩，但我明白了自律的重要性。&lt;/p&gt;

&lt;p&gt;从那一刻开始，我想，他自律20年，我能不能自律10年，我想试试，我要挑战自己，要突破自己的瓶颈。&lt;/p&gt;

&lt;h6&gt;良好的心态是人生的重要组成部分&lt;/h6&gt;

&lt;p&gt;保持一种辛苦的感觉才是正确的，辛苦表明你正在努力突破自己，当你感觉不到辛苦时，很有可能你正在慢慢向下滑坡，只是现在外在表象还没发生任何变化，所以无法让你引起足够的重视，一旦表象上发生了什么变化，说明量变已经造成了质变，这时已经来不及了，能做的也只有补救，如果也没有做什么及时补救的行动那么可能前面自己所建立的优势也就会像过往云烟那样消散而去，自己重新回到了被动和劣势的位置。&lt;/p&gt;

&lt;p&gt;不过只有辛苦的感觉其实是还不够的，在辛苦的基础上，每天都要感觉自己活得很充实，活得很对得起昨天的感觉，只有这样一步步往前走下去才是正确的道路。&lt;/p&gt;

&lt;p&gt;人在生命中的道路上行走，犹如在黑暗中行走那样，是看不到前方清楚的道路的，只有当你主动积极的去做一些事情时才能看清前面几米距离的道路，就这样每次看见的都只是前方几米距离的道路，永远都是这种状况。&lt;/p&gt;

&lt;h6&gt;如果不努力我们会一直处于这种看不清前方道路的处境中。&lt;/h6&gt;

&lt;p&gt;只有当你很努力并且持续不断的努力，其实也只有持续不断的努力才能让你渐渐的看清前方的道路，让你更少的时间处于焦虑之中，也只有在我们不断努力下才能强大自我，才能在如此残酷的社会竞争中找到自己的定位。&lt;/p&gt;

&lt;p&gt;我们自己是很难找到自己的问题的，愚蠢的人是不知道自己愚蠢的，但其实我们自己也不知道自己是不是愚蠢。&lt;/p&gt;

&lt;p&gt;有没这种可能，其实我们是愚蠢的，但在自己看自己是聪明的，自己看别人是愚蠢的。每个人确实是这样认为的。&lt;/p&gt;

&lt;p&gt;几乎所有人都这么认为，’我是聪明的，别人是愚蠢的‘，就因为这种盲目乐观的思维方式根深蒂固，我们才难以察觉和发现自己的问题。&lt;/p&gt;

&lt;h6&gt;不努力，我们是看不到自己的问题的。我很确信。不努力学习，不努力工作，不努力地去克制自己，我们可能永远都无法发现自己的问题。所谓的突破自我，也是因为在努力很久的情况下看清了自己的问题，从而解决了自己身上的问题，才最终得到了进阶和升华。&lt;/h6&gt;

&lt;h6&gt;人永远都是处于‘坏’环境下&lt;/h6&gt;

&lt;p&gt;刚工作那几年我一直以为是因为我个人的命途多舛才造就的这么多阻碍和困境，也一直以抱怨的态度对待环境，但渐渐的我发现，其实不只是我，天底下所有的人都处于这种‘坏’环境下，我们永远都感觉被束缚，被阻碍，被捆绑，被遏制，无论这个环境在外人看来有多好有多向往有多羡慕。&lt;/p&gt;

&lt;p&gt;其实最理智的方法是不去抱怨环境，环境永远是受限的，资源永远是缺少的，做好自己，解决自己身上的毛病才是最重要的。如果环境实在差的离谱，有更好的环境就直接去更好的环境，那里会更专注，努力的效果可能会更好，如果没有机会去更好的环境，那么就做好自己。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第七章，渲染管线与图形学(一) - 图形学基础2</title>
   <link href="http://www.luzexi.com/2019/09/07/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E4%B8%8E%E5%9B%BE%E5%BD%A2%E5%AD%A62.html"/>
   <updated>2019-09-07T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/09/07/Unity3D高级编程之进阶主程-渲染管线与图形学2</id>
   <content type="html">&lt;h3&gt;理解矩阵表达缩放的几何意义&lt;/h3&gt;

&lt;p&gt;缩放矩阵和旋转矩阵在几何意义上有着异曲同工之妙，我们同样用二维坐标系来表达缩放矩阵的两个 a,b 向量。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;举例来说，二维标准轴的旋转矩阵：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [1.5,  0]  等  [a]
    [0, 0.75]  于  [b]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们把 a和b 表现在二维坐标系中，即如图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中a，b两个向量可以形成了一个矩形，我们就假设这个矩形图像表达了a，b向量的缩放关系。当a，b被拉长时，这个矩形图像被也同样被拉长。&lt;/p&gt;

&lt;p&gt;其原理为向量与矩阵的乘法，我们知道&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    二维向量与二维矩阵相乘 = (x * m11 + y * m21, x * m12 + y * m22)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于我们上图中标准坐标系上的缩放矩阵来说的到的结果是 (1.5&lt;em&gt;x, 0.75&lt;/em&gt;y)，即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    (x*m11 + y*m21, x*m12 + y*m22) = (x*1.5 + y*0, x*0 + y*0.75) = (1.5*x, 0.75*y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个结果表达了，缩放矩阵对向量缩放时非常直观易懂，因为除了对角线上的数字，其他位置的数字都是0。&lt;/p&gt;

&lt;p&gt;不过这种简单易懂的旋转矩阵，也仅限于标准坐标系中对标准轴的缩放。如果只有标准坐标系上的缩放计算，是远远满足不了我们的需求的。&lt;/p&gt;

&lt;p&gt;那么怎么计算对任意轴方向上的缩放呢？我们来看如下图所示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;沿 N 方向缩放 v 向量，其实和前一节中绕 N 轴旋转 v 向量有异曲同工之妙。&lt;/p&gt;

&lt;p&gt;我们需要根据所知道的推导这个公式，即我们已知v，已知 N，已知缩放因子k (k是一个单纯的数字) ，要求得v’。&lt;/p&gt;

&lt;p&gt;可以通过 N 和 v 求得投影 v1，通过 v 和 v1 求得他们的垂直向量 v2，再通过缩放因子 k 求得v1和v2缩放后的向量 v1‘ 和 v2’，最后通过 v1‘ 和 v2’ 求得缩放后的结果向量 v‘，即如下图公式。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样的，三维空间中，如果是标准坐标系上缩放，则缩放矩阵可以是很简单的对角线矩阵，即。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [scale-x, 0, 0]
    [0, scale-y, 0]
    [0, 0, scale-z]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也同样的，这种标准坐标系上的缩放完全满足不了我们的需求，我们需要沿任意向量上的缩放矩阵。&lt;/p&gt;

&lt;p&gt;同样的向量，同样的变化，同样的推导，最终结果为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最终我们获得了，沿任意方向缩放的矩阵。&lt;/p&gt;

&lt;p&gt;这里不再重复叙述推导的过程，我们只要理解缩放矩阵的由来和推导的方式就可以了，我们最终的目的通过是解释原理来理解缩放矩阵的几何意义。&lt;/p&gt;

&lt;h3&gt;平行投影，镜像，切变的理解和几何意义&lt;/h3&gt;

&lt;h6&gt;平行投影&lt;/h6&gt;

&lt;p&gt;在上述几节中我们了解到了可以用矩阵去缩放任意点和向量，那么如果在缩放时某个轴上的缩放因子为零会变成是什么样的呢，如图所示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中模型所有的点都被’挤‘到了一个平面上，这种所有点都被拉平至垂直轴或平面上的做法就叫，平行投影，或者也可以叫正交投影。&lt;/p&gt;

&lt;p&gt;在标准坐标轴上的平行投影是一个很简单的矩阵，只要把那个投影轴上的缩放因子置零就可以，即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    二维上x轴平行投影

    [1, 0]
    [0, 0]

    二维上y轴平行投影

    [0, 0]
    [0, 1]

    三维上xy平面上的平行投影

    [1, 0, 0]
    [0, 1, 0]
    [0, 0, 0]

    三维上xz平面上的平行投影

    [1, 0, 0]
    [0, 0, 0]
    [0, 0, 1]

    三维上yz平面上的平行投影

    [0, 0, 0]
    [0, 1, 0]
    [0, 0, 1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然只是标准坐标轴上的平行投影还不够用，我们也需要任意直线或任意平面的投影矩阵，不过这次我们不需要再次计算任意轴上的平行投影，只需要通过前面计算过的缩放矩阵在任意方向或任意轴上的缩放矩阵就可以得到平行投影的矩阵，即如下图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过使缩放方向上的缩放因子变为零的方式，来获得平行投影矩阵。三维中也是一样，只是在三维中要 N 方向为垂直平面的方向而不是平行于平面的方向。&lt;/p&gt;

&lt;h6&gt;镜像&lt;/h6&gt;

&lt;p&gt;镜像其实挺容易理解的，平行投影是将某个轴上的缩放因子变为零，镜像就是在某个轴上将缩放因子变为负1，这样在缩放时就形成了‘翻转’的局面。如图所示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;坐标轴的四个象限，右上角的图为正常的图案，左边为对x轴翻转后的图案，下边为y轴翻转后的图案，右下角为x轴和y轴同时翻转的图案。&lt;/p&gt;

&lt;p&gt;镜像矩阵也和平行投影矩阵一样，可以用任意缩放矩阵来计算出对任意方向和轴的镜像矩阵，如图所示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中为任意方向的缩放矩阵在当缩放因子为-1时的公式，我们很容易就明白，镜像不过是缩放的一种特殊形式。&lt;/p&gt;

&lt;h6&gt;切变&lt;/h6&gt;

&lt;p&gt;切变非常特殊和有趣，它其实是一种坐标系‘扭曲’变换。这种坐标系的‘扭曲’变换将会被运用到对次级空间的坐标平移上。切变的形式如图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中y轴方向的向量中的x坐标被平移了。这是切变在x轴上的变化，我们也可以让切变在y轴上发生变化，如图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这两种形式的切变都是通过位移x轴方向上的坐标或y轴方向上的坐标来达到的，其实我们可以理解为对次级维度坐标系的‘扭曲’。&lt;/p&gt;

&lt;p&gt;为什么要这么理解呢，因为它在仿射变化中起到了非常关键的作用，我们将在下面几节内容中介绍。&lt;/p&gt;

&lt;p&gt;切变的矩阵为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    二维x轴方向的‘扭曲’
    [1, 0]
    [s, 1]

    二维y轴方向的‘扭曲’
    [1, s]
    [0, 1]

    三维x,y轴方向的的切变
    [1, 0, 0]
    [0, 1, 0]
    [s, t, 1]

    三维x,z轴方向的切变
    [1, 0, 0]
    [s, 1, t]
    [0, 0, 1]

    三维y,z轴方向的切变
    [1, s, t]
    [0, 1, 0]
    [0, 0, 1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这几个矩阵看起来好像很简单，具体代表什么意思呢。我们用向量与矩阵的乘法表示就知道了：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    向量p与3x3矩阵M的乘法 p * M = [x * M11 + y * M21 + z * M31, x * M12 + y * M22 + z * M32, x * M13 + y * M23 + z * M33]

    由向量与矩阵的乘法得知上面5个矩阵，当向量乘以他们时：

    第一个切变矩阵为向量x轴方向的偏移，(x + y * s, y)

    第二个切变矩阵为向量y轴方向的偏移，(x, x * s + y)

    第三个切变矩阵为向量x、y轴方向的起偏移，(x + s * z, y + t * z, z)

    第四个切变矩阵为向量x、z轴方向的起偏移，(x + s * y, y, t * y + z)

    第五个切变矩阵为向量y、z轴方向的起偏移，(x, s * x + y, t * x + z)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述经过矩阵乘法后，向量得到了切变的偏移，如果乘的是矩阵的话，则会对矩阵产生切变。下面一节平移中就会应用到切变的变化。&lt;/p&gt;

&lt;h6&gt;齐次坐标的平移矩阵&lt;/h6&gt;

&lt;p&gt;我们知道了3x3矩阵的线性变换中不包括平移这个操作，为什么呢？&lt;/p&gt;

&lt;p&gt;因为矩阵乘法的性质，零向量乘法总是变换成零向量，任何相同维度的矩阵乘法都表达不了零偏移。&lt;/p&gt;

&lt;p&gt;矩阵乘法其实很强大，经过我们上面的介绍我们已经知道了矩阵乘法可以表达旋转，缩放，投影，镜像，切变，可惜的是无法表达平移，怎么办？&lt;/p&gt;

&lt;p&gt;齐次矩阵就恰好满足了我们的需求，齐次矩阵它在原来的维度上增加了一个维度，用多出来的那个维度来表达了平移操作。即如下图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [1, 0, 0, 0]
    [0, 1, 0, 0]
    [0, 0, 1, 0]
    [x, y, z, 1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上图中用增加一个维度的方式用x，y，z分别表示了在x，y，z轴上的偏移。&lt;/p&gt;

&lt;p&gt;为什么这种方式就能表达平移操作？&lt;/p&gt;

&lt;p&gt;我们回忆下上一节说的切变的原理和过程，在某个轴不变的情况下对其他轴进行偏移，这就是切变。&lt;/p&gt;

&lt;p&gt;我们无法对当前空间的矩阵进行偏移，却可以通过增加一个维度，用不动新增的维度情况下，再用切变的方式来偏移次级维度，这其实就是个用切变解决平移问题的解决方案。&lt;/p&gt;

&lt;p&gt;在上述的图中描述了4维矩阵在第四维空间上的切变。有了平移矩阵，我们可以通过用3x3矩阵增加一个维度的方式，把原来无法表达的操作全都可以表达出来了。&lt;/p&gt;

&lt;p&gt;比如，我们需要一个将向量 v 旋转后再平移得到 v‘ ，旋转矩阵为R，平移矩阵为T，就可以用向量与矩阵的乘法，以及矩阵与矩阵的乘法来表达：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    v&amp;#39; = vRT

    R为：
    [r11, r12, r13, 0]
    [r21, r22, r23, 0]
    [r31, r32, r33, 0]
    [0,     0,   0, 1]

    T为：
    [1, 0, 0, 0]
    [0, 1, 0, 0]
    [0, 0, 1, 0]
    [x, y, z, 1]

    通过结合律 v&amp;#39; = vRT = v(RT)

    R与T相乘的结果为
    [r11, r12, r13, 0]
    [r21, r22, r23, 0]
    [r31, r32, r33, 0]
    [x,     y,   z, 1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上图中通过乘以旋转矩阵和平移矩阵就可以得到最终结果，或者使用结合律先将矩阵相乘。对于矩阵结合的方式，如果这种系列操作方式比较频繁，可以建立一个固定的常量矩阵，通过常量矩阵来计算结果，这样就省去了很多频繁的重复计算矩阵的过程，顶点着色器中的顶点坐标空间转换就是这样做的，它在整个程序开始执行前就已经计算好了一个变化的矩阵，这个变化的矩阵就叫做 MVP，即Model，View，Projection，它是由模型空间矩阵、观察者空间矩阵、投影空间矩阵相乘得到的结果，乘以此矩阵就会从模型坐标系变换为世界坐标系，再变换为观察者坐标系，最后变化为视锥体的裁剪空间。&lt;/p&gt;

&lt;p&gt;有了平移矩阵我们能做的事更加多了，能运用的地方也更加多了。这次我们用到了齐次矩阵，即通过增加一个维度的方式来表达当前维度无法表达的计算，用高一个维度的切变来表达操作次级维度的平移。&lt;/p&gt;

&lt;h3&gt;如何理解 Quaternion 四元数&lt;/h3&gt;

&lt;h6&gt;为什么不是欧拉角&lt;/h6&gt;

&lt;p&gt;欧拉角的定义是，x,y,z 分别表达了x轴上的旋转角度，y轴上的旋转角度，z轴上的旋转角度，即(20,40,50) 表达了在x轴上旋转20度，y轴上旋转40度，z轴上旋转50度。&lt;/p&gt;

&lt;p&gt;看起来很简单易懂就能定义坐标系上的旋转角度，为什么就不能使用它来表达所有的旋转角度，却还要使用四元数呢？其实是有原因的。&lt;/p&gt;

&lt;p&gt;首先欧拉角存在别名，100度的旋转角度可以用-260度来表示，370度角与10度角以及-350度角是相同的旋转角度，这种表达方式在计算上特别难统一。&lt;/p&gt;

&lt;p&gt;其次欧拉角在插值上存在些问题，一个-260度的角度和一个50度的角度进行插值是需要先进行转换的，先将-260度转换成100度，再进行插值才可以得到正确的结果。简单的别名问题虽然讨厌，但是可以转换角度的方式解决，但转换角度这种方式并不是一个靠谱的方式，在计算过程中会遇到相当多的麻烦。&lt;/p&gt;

&lt;p&gt;欧拉角这种周期性和旋转之间的不独立性造成了欧拉角在线性变化的计算中比较困难。因此我们需要寻找在计算过程中更加便捷的方法，不需要转换，没有别名，统一规格。&lt;/p&gt;

&lt;p&gt;四元数恰好就满足了这些需求，它在线性变换中非常统一而且灵活。不过它有一个致命的缺陷，就是在表现上让你人比较难理解，普通人一眼看不出一个四元数想要表达的旋转的方向和角度。&lt;/p&gt;

&lt;h6&gt;四元数的由来&lt;/h6&gt;

&lt;p&gt;四元数其实是一个我们生活中的“异次元”，这也是为什么普通人难以理解它的原因，为什么说它是一个“异次元”呢？&lt;/p&gt;

&lt;p&gt;我们所有的向量，坐标，矩阵，旋转，缩放，平移，都是建立在使用坐标系和空间矩阵计算的那一套计算体系上的，而四元数则不是，它特立独行，它计算所用的公式，并不是建立在传统的坐标系矩阵上，而是拥有自己一套“自有”的公式体系，即复数体系。&lt;/p&gt;

&lt;p&gt;四元数有两种记法即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    向量v 加 w分量 (v, w) 和 四个分量都分开 (x, y, z, w)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;某些情况下v分量更方便，而在另一些情况下分开记会更清楚。但其实这个w分量和x,y,z的相关度有但不是很大，因此不要被迷惑了，以为他们的值越大或者越小会怎样怎样的，其实和我们肉眼看到的是有所差别的。&lt;/p&gt;

&lt;p&gt;最早数学家们是用复数系统来表达二维中的旋转的。&lt;/p&gt;

&lt;p&gt;我们来回忆下什么是复数？&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    我们把形如z=a+bi（a,b均为实数）的数称为复数，其中a称为实部，b称为虚部，i称为虚数单位。
    其中虚数 i * i = -1；
    当z的虚部等于零时，常称z为实数；
    当z的虚部不等于零时，实部等于零时，常称z为纯虚数。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数学家使用复数对(a, b)来表达二维平面中的旋转，他们把向量也定义为复数对，如果(a,b)为向量的话，那么就定义了 a + b * i，i为虚数，满足 i * i = -1，a为实轴的坐标，b为虚轴坐标，我们可以理解为x，y轴上的坐标。&lt;/p&gt;

&lt;p&gt;对于定义一个旋转复数，则为 (cos(β), sin(β)) 表达式为 cos(β) + sin(β) * i，i为虚数，β为旋转的角度。&lt;/p&gt;

&lt;p&gt;他们发现从平面上求得某个向量旋转 β 的结果，可以用向量复数对乘以旋转复数对的方式来获得，即&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片

    v = x + y * i
    r = cos(β) + sin(β) * i
    v&amp;#39; = vr = (x + y * i)(cos(β) + sin(β) * i)
       = (x * cos(β) - y * sin(β)) + (x * sin(β) + y * cos(β)) * i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述图中的公式推导，乘法的运算看起来是不是跟传统的计算有点差异。因为我们使用的是复数做运算，其中i满足 i * i = -1。&lt;/p&gt;

&lt;p&gt;这是最早发明的二维向量旋转运算法则，由十六世纪被意大利米兰学者卡当提出复数后，经过达朗贝尔、棣莫弗、欧拉、高斯等人的工作，最后成形的数学体系。&lt;/p&gt;

&lt;p&gt;不过二维的上的旋转公式很快就不够用，无法对三维的旋转操作，旋转复数局限性太大。爱尔兰数学家 William Hamilton 终于在1843年找到了一种表达三维旋转的复数表达方式，即四元数就此诞生。&lt;/p&gt;

&lt;h6&gt;四元数的几何意义&lt;/h6&gt;

&lt;p&gt;四元数扩展了复数系统，它使用了三个虚部，即i，j，k，因此四元数的表达复数表达方式为&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    q = w + i * x + j * y + k * z
    其中i，j，k为虚数，即满足
    i*i = j*j = k*k = -1
    i*j=k, ji=-k
    j*k=i, k*j=-i
    k*i=j, i*k=-j
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;和复数能用来旋转二维中的向量类似，四元数也能用来旋转三维中的向量。&lt;/p&gt;

&lt;p&gt;四元数被解释为角位移的轴一角方式。什么是轴一角？&lt;/p&gt;

&lt;p&gt;就是绕某个单一轴旋转一个角位移就能表达旋转的方式就叫轴一角，这个角位移其实就是一个和向量类似的表达方式，即(x,y,z)，只不过四元组用4个元素来表达罢了。&lt;/p&gt;

&lt;p&gt;再通俗点，四元组可以理解为绕 某个轴N 旋转的角位移，和欧拉角用x,y,z表达绕标准坐标轴旋转是同样的道理，只不过这个轴不再是标准轴，而是任意轴。&lt;/p&gt;

&lt;p&gt;这也就说明了，四元组不再受到标准轴的限制，它可以表达绕任意轴旋转的角位移。&lt;/p&gt;

&lt;p&gt;四元组表示为对任意轴 N 的角位移即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    q = [cos(β/2), sin(β/2) * N]
      = [cos(β/2), sin(β/2) * Nx, sin(β/2) * Ny, sin(β/2) * Nz]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用上图的四元组表达方式，假设我们绕的是某个单轴旋转，也就是在x轴上旋转 A 度，或者在y轴上旋转 B 度，或者在z轴上旋转 C 度，根据上述的公式，我们可以得到三个供旋转的四元数，即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    A&amp;#39; = [cos(-A/2), sin(-A/2) * 1, 0, 0]

    B&amp;#39; = [cos(-B/2), 0, sin(-B/2) * 1, 0]

    C&amp;#39; = [cos(-C/2), 0, 0, sin(-C/2) * 1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上图中的角度为什么是负的，因为我们在旋转点时的角度，和在旋转坐标系时的角度恰恰是相反的，因此操作旋转点的角度，其实就是旋转坐标系反方向的角度，即负的角度。&lt;/p&gt;

&lt;p&gt;现在我们要计算绕x轴上旋转A角度，并且绕y轴上旋转B角度，并且绕z轴上旋转C角度的四元组时，可以把 A‘，B’，C‘，这三个四元组乘起来，即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    A&amp;#39;B&amp;#39;C&amp;#39; = (A&amp;#39;B&amp;#39;C&amp;#39;) 最终计算得到

    [x,]
    [y,]
    [z,]
    [w]

    等于

    [cos(B/2)sin(A/2)cos(C/2) + sin(B/2)cos(A/2)sin(C/2),]
    [sin(B/2)cos(A/2)cos(C/2) - cos(B/2)sin(A/2)sin(C/2),]
    [cos(B/2)cos(A/2)sin(C/2) - sin(B/2)sin(A/2)cos(C/2),]
    [cos(B/2)cos(A/2)cos(C/2) + sin(B/2)sin(A/2)sin(C/2)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上图中得到的最后公式就是从欧拉角转换到四元数的计算公式。&lt;/p&gt;

&lt;p&gt;四元数的虽然在计算上很方便且通用，但在辨识度上却存在着严重的缺陷，人肉眼很难分辨某个四元数的旋转情况。但是没关系，我们只要理解它的原理，并且已经知道了四元数的几何意义，我们在运用四元数过程中将更加自如。&lt;/p&gt;

&lt;p&gt;参考文献：&lt;/p&gt;

&lt;p&gt;《3D数学基础:图形与游戏开发》&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第七章，渲染管线与图形学(一) - 图形学基础1</title>
   <link href="http://www.luzexi.com/2019/09/01/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF%E4%B8%8E%E5%9B%BE%E5%BD%A2%E5%AD%A61.html"/>
   <updated>2019-09-01T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/09/01/Unity3D高级编程之进阶主程-渲染管线与图形学1</id>
   <content type="html">&lt;p&gt;游戏项目除了逻辑，模块，框架，架构，算法，还需要图形学的支撑，很多人在业务层面打拼了很多年也始终无法突破的原因就是对图形学研究还不够深。&lt;/p&gt;

&lt;p&gt;最终我们还是要面对图形的绘制和计算的，所以这块也是非常重要的部分，只是在使用了现代图形引擎之后，特别是使用了Unity3D之后，它为我们包装了很多工具和接口，用起来很方便，但就因为方便往往忘了图形学知识的重大意义。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;其实缺哪块都不行，没有逻辑，不懂得各个模块的编写手法，不懂得框架的搭建，不懂架构，或者不懂算法，不懂图形学，都是在无法完整的体现一个优秀程序员的知识面的，特别是对于那些需要在一个项目中当起顶梁柱的主程同学，对于每个部分的都需要了如指掌，特别是图形学部分，因为它很容易被忽视，也特别需要我们静下心来学习、理解、掌握。&lt;/p&gt;

&lt;p&gt;非常想从最最基本的讲起，但我们毕竟是一本面向中高级程序员的书，所以不在将更多篇幅用在对点，线，面，向量，坐标系等的文字说明和介绍上了。&lt;/p&gt;

&lt;p&gt;我们特别挑出了比较重要部分与Unity3D结合的来细致讲解一下。&lt;/p&gt;

&lt;h3&gt;Vector3 的意义&lt;/h3&gt;

&lt;p&gt;Vector3 有，x，y，z三个变量，我们一眼就识别它是个代表坐标的数据。&lt;/p&gt;

&lt;p&gt;不仅如此，其实它还可以代表 距离，速度，位移，加速度，还有方向。&lt;/p&gt;

&lt;p&gt;两个Vector3变量a，b的相减，就能得到一个从b点到a点的向量c。&lt;/p&gt;

&lt;p&gt;这个c是一个长度为a到b的距离并且具备b到a的方向的向量，c也同样是一个Vector3，那么为什么a，b就是坐标，c就是向量呢。&lt;/p&gt;

&lt;p&gt;其实任何一个Vector3变量，确定它是坐标还是向量，全靠我们如何定义它。&lt;/p&gt;

&lt;p&gt;我们可以定义a是坐标，也可以定义a是速度，至于如何定义怎么计算，全靠我们在后面的程序中怎么对待它。&lt;/p&gt;

&lt;p&gt;速度，位移，加速度，也是同样的道理。我们再举个例子。&lt;/p&gt;

&lt;p&gt;还是a，b定义为Vector3的坐标点，a减去b，除以1，可以认为我们向量除以了一个时间1秒得到了我们需要的有方向的速度。&lt;/p&gt;

&lt;p&gt;再比如，a点减去b点，得到c向量，那么任意坐标加上c就会得到与a和b同样的相对位置的d点，那么c就成了位移。&lt;/p&gt;

&lt;p&gt;如果现在是四个坐标a，b，c，d，当a减去b除以1秒得到了a到b的时的速度，那么b减去c除以1秒得到也是b到c时的速度，如果这两个速度再相减，依然是Vector3，而此时这个Vector3已经不再代表坐标和速度，而是一个由两个Vector3的速度得到的加速度了。&lt;/p&gt;

&lt;h6&gt;赋予给Vector3什么样的意义全靠我们用它们来计算什么。&lt;/h6&gt;

&lt;p&gt;我们挑选了几个Vector3比较重要的几何意义。&lt;/p&gt;

&lt;h3&gt;Vector3点乘的几何意义&lt;/h3&gt;

&lt;p&gt;向量a，与，向量b点乘的计算公式为&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    a·b = (x1,y1,z1)·(x2,y2,z2) = x1*x2 + y1*y2 + z1*z2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而点乘又有另外一个计算公式即为&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    a·b = ||a||*||b||*cos(β)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即用更直观的如图所示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中a向量与b向量的夹角为β，a向量和b向量长度不变的情况下，计算出来的值越大，也就是β值越小，说明a和b的夹角越小。&lt;/p&gt;

&lt;p&gt;相反，当计算出来的值越小，也就是β值越小，说明a和b的夹角越大。&lt;/p&gt;

&lt;p&gt;当β大于90度时，计算出来的是一个负数，也就是b指向的方向其实与a指向的方向是相反的。&lt;/p&gt;

&lt;p&gt;我们用这种方式可以用点乘得到一个判断依据，即当a和b点乘得到的数为正数时，两者的方向比较一致，并且在长度相同的情况下结果越大越一致，而当点乘结果为负数时，a和b两者的方向则是相反的，在长度相同的情况下，数值负得越厉害，相反的程度越一致。&lt;/p&gt;

&lt;p&gt;除了方向判断外，我们还可以用点乘来计算出β的角度，即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    β = arcos( (a·b) / (|a|*|b|) )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;// todo Unity3D里的Vector3点乘API&lt;/p&gt;

&lt;h3&gt;Vector3叉乘的几何意义&lt;/h3&gt;

&lt;p&gt;与Vector3点乘一样，Vector3的叉乘也是类似的向量与向量之间的计算公式，不同的是，叉乘的结果不再是一个数值，而是一个同样维度的向量。即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    a x b = (a1, a2, a3) x (b1, b2, b3) = (a2*b3 - a3*b3, a3*b1 - a1*b3, a1*b2 - a2*b1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;两个向量a，b的叉乘，得到的是与a，b向量形成的平面垂直的向量c。&lt;/p&gt;

&lt;p&gt;那么c的长度多少呢，其实a x b的长度等于向量的大小与向量的夹角sin值的积，即&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    |a x b| = |a|*|b|*sin(β)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;即c的长度大小与a和b向量的夹角有关。这样看来，如果β为0时，即a和b是平行的，c就是0长度，当β为90度时，即a和b互相垂直时，a和b的叉乘长度就是a的模乘以b的模。&lt;/p&gt;

&lt;p&gt;此外，|a x b|得到的|a|&lt;em&gt;|b|&lt;/em&gt;sin(β)这个公式，就是a和b形成的四边形的面积值，即如图所示&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中四边形的体积公式其实是，|b| * h，那么h怎么得到呢，我们可以用|a| * sin(β) 得到，因此就有了这个公式的演变，即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    四边形面积 = |b| * h

    由于 h = |a| * sin(β) 代入后 =&amp;gt; 四边形面积 = |b| * |a| * sin(β)

    =&amp;gt; 四边形面积 = |b| * |a| * sin(β) = |a x b|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经过几个公式的转换，我们得到向量叉乘后的模就是四边形的面积。在3D中也是同样适用，因为两个向量确定一个平面，所以两个向量可以确定给一个对等边四边形的平面，从而可以用叉乘可以算出他们的面积。&lt;/p&gt;

&lt;p&gt;// todo Unity3D里的Vector3叉乘API&lt;/p&gt;

&lt;h3&gt;向量之间的投影&lt;/h3&gt;

&lt;p&gt;在几何计算过程中，我们经常用到‘投影’这种方式，在向量中投影也是常用的技巧。如图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中向量b 往 向量a投影得到 c，其实c就是向量a乘以某个系数得到的。这个系数可以认为是c的模除以a的模得到的。即&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    c = a * (|c|/|a|)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们不知道|c|的值，但是c和b的夹角β又能得到计算cos的公式即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    cos(β) = |c|/|b|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;于是&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    |c| = |b| * cos(β)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再套入到计算投影向量c的公式上去时，就变成了：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    c = a * (|b| * cos(β)/|a|)

    进一步 =&amp;gt; c = a * (|b| * cos(β) * |a|/ |a| * |a|)

    由于 |b| * cos(β) * |a| 等于 a与b的点乘公式，于是就有了

    投影向量c =&amp;gt; c = a * (a · b) / |a|^2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此经历了几个公式的转换，得到了b向量向a向量投影，得到c向量的公式。&lt;/p&gt;

&lt;p&gt;// todo Unity3D里的Vector3投影API，以及其他API&lt;/p&gt;

&lt;h3&gt;矩阵的意义&lt;/h3&gt;

&lt;p&gt;矩阵看起来比较玄乎，很多人看到矩阵这个词就头疼，其实耐下心来研究，会发现矩阵是很可爱的。&lt;/p&gt;

&lt;p&gt;矩阵五花八门，这些五花八门的矩阵使用频率非常低，我们常用矩阵其实没几种。&lt;/p&gt;

&lt;p&gt;在图形学计算中，我们常用的矩阵大小是2x2，3x3，4x4 矩阵，这种行与列的数量相同的矩阵，我们称为‘方阵’矩阵。&lt;/p&gt;

&lt;p&gt;在众多方阵矩阵中，常用到也是一些比较特殊的矩阵。如对角矩阵，即只有行列号相同的位置有数字，其他位置都是0的方阵矩阵。&lt;/p&gt;

&lt;p&gt;以及单位矩阵，即行列号相同的对角线上的数字都为1，其他位置都为0的方阵矩阵。&lt;/p&gt;

&lt;p&gt;这两种特殊的矩阵因它们简单易懂在图形学计算过程中也是非常常用的矩阵。&lt;/p&gt;

&lt;p&gt;矩阵间的计算我们可以罗列一下其实并不多。&lt;/p&gt;

&lt;p&gt;转置矩阵，就是把矩阵沿着对角线翻转一下，由于我们常用的是‘方阵’矩阵，所以转置矩阵后方阵矩阵还是同样的大小，只不过对角线两侧的数字对调了一下。&lt;/p&gt;

&lt;p&gt;矩阵乘法，如果是数字和矩阵相乘则，直接带入矩阵中的所有变量即可，这种标量的乘法其实就是扩大矩阵中所有的数值。&lt;/p&gt;

&lt;p&gt;如果矩阵与矩阵相乘则，A矩阵 x B矩阵，则需要一些附加条件，即矩阵A的列数必须与矩阵B的行数相等，否则无法相乘或者说相乘无意义。&lt;/p&gt;

&lt;p&gt;矩阵相乘后得到的矩阵，里面每个位置Cij(即C矩阵的第i行第j列)都是A矩阵的第i行向量与B矩阵的第j列向量点乘的计算结果，如下我们拿2x2方阵相乘做示意：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    A x B = [a11, a12]  x  [b11, b12]
            [a21, a22]     [b21, b22]

    = [a11*b11 + a12*b21, a11*b12 + a12*b22]
      [a21*b11 + a22*b21, a21*b12 + a22*b22]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上图对矩阵乘法公式做出了很简单易懂的描述，即Cij = Ai1 * B1j + Ai2 * B2j + Ai3 * B3j ... 即A的i行向量与B的j列向量点乘的值。&lt;/p&gt;

&lt;p&gt;逆矩阵，逆矩阵由运算矩阵相乘而来，由于矩阵与矩阵相乘也会得到标准的单位矩阵，即对角线都是1其余都是0的方阵矩阵，于是就有了一个矩阵与某个矩阵相乘等于单位矩阵时，这‘某个’矩阵就是该矩阵的‘逆矩阵’。&lt;/p&gt;

&lt;p&gt;然而不是每个矩阵都有逆矩阵的，一个明显的例子是若矩阵的某一行或列上的元素都是0，用任何矩阵乘以该矩阵，结果都是一个零矩阵。因此我们通常称一个有逆矩阵的矩阵为这个矩阵可逆，相反如果这个矩阵没有逆矩阵，那么就称这个矩阵不可逆。&lt;/p&gt;

&lt;p&gt;最后我们了解一下齐次矩阵，齐次矩阵也并没有什么神秘的，只不过是从我们认知的角度上划分了矩阵分量和w分量。&lt;/p&gt;

&lt;p&gt;齐次坐标就是将一个原本是n维的向量用一个n+1维向量来表示，齐次矩阵也是同样的道理，n维表达不了的事情用n+1维来表达，我们由浅入深来理解齐次矩阵会更加容易。&lt;/p&gt;

&lt;p&gt;在二维空间中，(x,y)只能代表平面上的一个点，或平面上的向量，无法表达不同平面的点和向量，当如果需要表达不同平面的点就需要扩容维度，齐次向量就起到了这个作用。&lt;/p&gt;

&lt;p&gt;齐次向量中有3个分量，即(x, y, w)，x，y分量和第三个神秘的w。&lt;/p&gt;

&lt;p&gt;为了能更加容易的理解w分量存在的意义，我们可以把w分量想象是不同平面的代表，即当w = 1的平面是标准平面，即(x, y, 1)为标准平面中的x,y坐标点，这个点在w = 1的这个平面中。&lt;/p&gt;

&lt;p&gt;当w不是1时，就是不同平面的上的点，如果想要将坐标投影到w = 1的平面上去，就需要除以w分量，即齐次坐标(x, y, w)映射在二维平面中标准坐标系中时为(x/w, y/w)。&lt;/p&gt;

&lt;p&gt;同样的道理，在三维空间中(x, y, z)只能代表标准坐标系中的点和向量，无法表达非标准坐标系，齐次向量补充了它的缺陷，齐次向量坐标为(x, y, z, w)，当w = 1时，我们可以认为xyz坐标是在标准三维空间中，当w != 1时，则认为xyz是在其他空间当中的点，如果想要将它们坐标映射到标准三维空间中去，则只要除以w，即(x/w, y/w, z/w)，就是实际在标准空间上的点。那么当 w = 0时怎么办，我们则认为它是‘无限远的点’，它描述的是一个方向而不是一个坐标位置。&lt;/p&gt;

&lt;p&gt;向量在空间中的运用还不够广泛，矩阵可以表达空间中的缩放、旋转、切变，但无法表达偏移，因此我们需要增加一个维度的矩阵叫做齐次矩阵来表达当下维度的偏移，即齐次矩阵。&lt;/p&gt;

&lt;h3&gt;由矩阵带来的旋转，缩放，投影，镜像，和仿射。&lt;/h3&gt;

&lt;p&gt;很多人都难以理解，矩阵为什么能做到旋转和缩放，或者怎么理解矩阵的旋转和缩放，这节我们就来用最通俗易懂的方式讲讲如何理解矩阵的旋转和缩放。&lt;/p&gt;

&lt;h6&gt;我们先来了解下，向量与矩阵的乘法。&lt;/h6&gt;

&lt;p&gt;首先我们要明白，我们用的都是方阵矩阵，即2x2，3x3，4x4的矩阵。由于矩阵与矩阵相乘必须是前置的列与后置的行数要相等才有意义，向量与矩阵相乘也是一样，如果向量不是前置的那个即左乘矩阵，或者向量是以竖列表达方式右乘矩阵，对于向量与矩阵的乘法来说都是无意义的，即如下图所示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中，第一个例子，当向量左乘矩阵，是无定义的结果，第二个例子，向量以竖列的表达方式右乘矩阵，也是无定义的结果，只有第三个例子和第四个例子，向量横向表达右乘矩阵，或竖向表达左乘矩阵，才有意义。&lt;/p&gt;

&lt;p&gt;最终我们得出了向量与矩阵的乘法公式结果为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    (x*m11 + y*m21 + z*m31, x*m12 + y*m22 + z*m32, x*m13 + y*m23 + z*m33)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至于向量的行向量的表达方式，和列向量的表达方式，其实都是可以行得通的，那么我们为什么要选择行向量呢，因为行向量表达更方便，无论是书写还是计算，行向量更加适合我们人类的习惯，因此我们选择了行向量来表达向量。&lt;/p&gt;

&lt;h6&gt;如何理解旋转矩阵&lt;/h6&gt;

&lt;p&gt;我们从 2x2 矩阵讲起，因为比起3x3矩阵2x2矩阵更加容易理解，而它们的原理一样。假设一个 2x2 的矩阵即&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [2, 1]
    [-1,2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们可以认为它是由两个行向量a,b构成，a为(2,1)，b为(-1,2)，即&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [2, 1]  等  [a]
    [-1,2]  于  [b]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在平面坐标系中，a和b的表达如图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中a，b向量表达在2D坐标系中，是两个互相垂直的线段向量。&lt;/p&gt;

&lt;p&gt;我们把这两个a,b向量可以看做是，从两个标准向量(1,0)和(0,1)旋转并且放大过来的向量，即如图下所示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中，(1,0)和(0,1)向量，缓缓的旋转，并且放大，逐步变成了(2,1)和(-1,2)，即从原来的(1,0)和(0,1)向量上，旋转了β度并放大了2.236倍。&lt;/p&gt;

&lt;p&gt;这就是矩阵的几何解释，其实从形象简单，对于标准矩阵来说，旋转多少缩放多少，最终形成了另一个矩阵，这个结果矩阵就是我们需要的‘变换矩阵’。&lt;/p&gt;

&lt;p&gt;对于任何一个向量来说，乘以‘变换矩阵’就能得到‘变换矩阵’所要表达的旋转和缩放值，即&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [2, 1]
    [-1,2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果这个矩阵表达了，向量旋转β度和2.236倍的缩放，那么任何二维向量乘以这个矩阵，就会得到在标准坐标系中以标准轴为基准旋转β度，并且以标准轴为基准放大2.236倍。&lt;/p&gt;

&lt;p&gt;这样一个看起来无关紧要的矩阵还是不够直观，我们来看看更直观的表达方式，如果一个矩阵要表达旋转β度，那么它的a,b的向量该是如下图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;a就是 [cosβ, sinβ]，b就是 [-sinβ, cosβ]，它们分辨表达了标准向量(1,0)和(0,1)旋转β度后的向量。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [cosβ,  sinβ]
    [-sinβ, cosβ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因此任何向量乘以这个这个旋转矩阵都会在标准坐标系中以标准轴为基准旋转β度。&lt;/p&gt;

&lt;h6&gt;理解了二维空间的矩阵旋转原理，我们延伸到三维空间就容易多了。&lt;/h6&gt;

&lt;p&gt;三维空间的矩阵也可以像二维空间一样理解，用三个向量来表示空间中的矩阵，即&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [a]   [Ax, Ay, Az]
    [b] = [Bx, By, Bz]
    [c]   [Cx, Cy, Cz]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个绕x轴旋转β度的旋转矩阵为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [1, 0,     0]
    [0, cosβ,  sinβ]
    [0, -sinβ, cosβ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;那么一个绕y轴旋转β度的旋转矩阵为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [cosβ, 0, -sinβ]
    [0, 1, 0]
    [sinβ, 0, cosβ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;于是一个绕z轴旋转β度的旋转矩阵为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [cosβ, sinβ, 0]
    [-sinβ, cosβ, 0]
    [0, 0, 1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用β度所形成的向量来表达坐标空间中的旋转矩阵，这样的表达可以帮助我们更加清晰的理解旋转矩阵的几何表达意义。&lt;/p&gt;

&lt;p&gt;上述只是对某一个轴进行旋转β度，如果我们要对某个向量做各个方向轴上的旋转，比如在x轴上旋转20度，再在y轴上旋转30度，最后在z轴上旋转15度，相当于这个向量在坐标系中旋转了20°,30°,15°，这时我们该怎么办？&lt;/p&gt;

&lt;p&gt;有了上述对各轴的旋转矩阵，我们就能很容易计算出各方向上的矩阵，就如上面提的问题，在各轴上都有旋转角度，我们就可以用先旋转x轴，再旋转y轴，最后旋转z轴的方式，来计算最后的结果，如图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中，c向量乘以x轴旋转矩阵，再乘以y轴旋转矩阵，最后乘以z轴旋转矩阵，即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;c * Mx * My * Mz = c`(旋转后的结果)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中Mx为以x轴为基准旋转20度的旋转矩阵，My为以y轴为基准旋转30度的旋转矩阵，Mz为以z轴为基准旋转15度的旋转矩阵。c乘以Mx得到旋转x轴后的向量，再乘以My得到旋转y轴后的向量，最后乘以Mz得到旋转z轴后的向量，最终得到结果。&lt;/p&gt;

&lt;h6&gt;绕任意轴旋转&lt;/h6&gt;

&lt;p&gt;绕标准轴即x轴，y轴，z轴旋转，得到的矩阵还远远不够我们需要的计算，很多时候我们需要计算绕任意向量或者说绕任意轴的计算公式。&lt;/p&gt;

&lt;p&gt;让我们导出绕轴 N 旋转角度 β 的矩阵，即这个公式为 F(N, β)，也就是说这个公式满足:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    v * F(N, β) = v&amp;#39; (v向量绕 N 轴，旋转β度后的结果v‘)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;怎么解这个公式呢，其中v已知，N已知，β已知，还需要知道哪些变量，如图所示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中，v 到 N 的投影分量可以计算得到 v1，进而可以计算得到 v 到 v1 的垂直向量 v2，最后用垂直向量 v2 与角度 β 可以计算得到 v’ 与 v 到 N 的投影分量的垂直向量 v‘’，最后由 v‘’ 和 v1 计算得到 v‘。&lt;/p&gt;

&lt;p&gt;其中用到的计算方式有，向量投影计算公式，向量旋转计算公式，垂直向量计算公式，最后结果为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个看起来很复杂的，只要一步步推导就能得到的结果矩阵。&lt;/p&gt;

&lt;p&gt;其实结果并不重要，我们也记不住，但推导的过程是比较重要的，因为推导的过程运用到了很多其他方面的知识，加深了理解，虽然’用进废退‘的我们也很容易忘记这些公式，但只要心里知道有这个公式的存在，只要模糊记忆依然存在，在需要用到时搜索一下很快就能进入状态了。&lt;/p&gt;

&lt;p&gt;参考文献：&lt;/p&gt;

&lt;p&gt;《3D数学基础:图形与游戏开发》&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第十章，地图与寻路(四) 地图的制作与优化</title>
   <link href="http://www.luzexi.com/2019/08/17/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E5%9C%B0%E5%9B%BE%E4%B8%8E%E5%AF%BB%E8%B7%AF4.html"/>
   <updated>2019-08-17T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/08/17/Unity3D高级编程之进阶主程-地图与寻路4</id>
   <content type="html">&lt;h3&gt;地图的制作与优化&lt;/h3&gt;

&lt;p&gt;场景的制作占到所有项目制作中非常大的一块工作内容，这里我们不说场景制作在美术层面上的制作技巧，我们来说说技术层面的。上节把地图编辑器说了一遍，这节我们就在地图编辑器之外说说，地图场景的制作与优化。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;我们先来说说场景中的地图，准确的说应该说地形，地形是场景中比较关键的一部分，在项目中地形的制作分为几种：&lt;/p&gt;

&lt;h3&gt;一种是手动拼接的地图。&lt;/h3&gt;

&lt;p&gt;手动拼接的地形比较常见，由3D设计师制作出来的3D模型作为地面的地形放置在场景中，相当于是一个模型落在场景上一样，只是这个3D模型很可能是有碰撞体的，碰撞体即 Unity3D的 Mesh Collider 根据项目的需要而增加物理系统的组件，一般都会直接使用 Mesh Collider，除非是完全平面式的，不需要碰撞组件，而是自己开发的一套基于平面的2D地图障碍与寻路，完全脱离了传统的物理系统。&lt;/p&gt;

&lt;p&gt;也有可能会使用Unity3D内置的地形，也一样相当于一个3D模型放置在场景中，Unity3D的地形可以任意的改变起伏，但地形的渲染消耗比较大，因此我们并不建议使用Unity3D内置的地形，而是建议地图设计师和3D模型设计师用 Maya 和 3DMax 等模型软件来构建地形的起伏，这种做法能更加容易的被设计师掌控以及自由发挥，也更加节省资源，对程序来说在处理性能优化时也更加容易一些。&lt;/p&gt;

&lt;p&gt;其他3D物体，比如石头，小石块，草，树，动物等也用同种方式放置在场景中，只是放置的手法可能不同，有的可能通过嵌入到prefab的方式，而有的可能通过地图编辑器加入到地图数据文件中，再在加载的地图时，从文件数据中得到要加载的实体的资源位置，再实例化到场景中。&lt;/p&gt;

&lt;p&gt;手动拼接的好处在于地形和地图是可以完全表达美术风格的，地形设计师和场景制作人员能根据自己的喜好和想象中的画面来自由得定制场景，他们可以任意的移动、旋转、缩放，甚至更换、修整、完善等，这能让他们对场景画面的把控有很大的自由度。&lt;/p&gt;

&lt;p&gt;能自由发挥当然是好事，但也带来了诸多不可控性，由于场景内物件没有统一的标准，因此在场景制作时常常会大量使用，小块的地形，甚至带有动画的地形，特效，以及半透明效果来增强画面的效果，画面效果增强的同时导致性能急剧降低。地图上的小件就更不用说了，在给予场景制作团队自由发挥的同时，我们可以想象同时造成了性能无法承受的问题。&lt;/p&gt;

&lt;p&gt;虽然这本质是没有制定和规范场景制作的要求的问题，但无论怎么规范，毕竟不是每个团队的执行力都是完美的，大部分的执行力都是差强人意的，所以都会或多或少的在优化阶段发现很多糟糕的、令人头疼的性能开销问题。&lt;/p&gt;

&lt;h3&gt;另一种是地图地形的程序拼接方式。&lt;/h3&gt;

&lt;p&gt;用程序拼接地图的主旨意图是希望能更好的为设计人员自由设计更好的地图而选择的方式，不仅仅是美术设计人员，还包括策划设计人员，需要在设计和性能上求得平衡点，这样所有的地图都由程序而生成了一个或者几个模型的结构铺满整个地图。&lt;/p&gt;

&lt;p&gt;这种方式来制作地图最常见的要属2D的RPG游戏了，2D角色扮演类游戏中，几乎整个屏幕的地形都需要用地图编辑器来建立和拼合的，当需要这类地图出现时时，程序会将地图数据加载进来后，对每一块的地图都进行动态的拼合，这样一来，整个地图就只有一个drawcall，因为它只是同一个模型。&lt;/p&gt;

&lt;h6&gt;我们先来看看2D RPG游戏中，是如何动态拼合整个地图的&lt;/h6&gt;

&lt;p&gt;很多2D游戏都通过了Unity3D实现，其实2D也是有Mesh、顶点、UV的概念，和3D比起来只是少了1个维度而已。在2D游戏中的地图拼接的手法也都是通过生成顶点和三角来完成的。&lt;/p&gt;

&lt;p&gt;我们可以设想整个地图就是一个大的矩形，地图中每个方块是这个大矩形中的一个格子，而每个格子都由2个三角形构成，既然我们能计算出每个方块的位置，我们就能计算每个三角的顶点和位置。&lt;/p&gt;

&lt;p&gt;我们知道的是，整个地图有多大，也就是这个大矩形在什么位置、有多大，每个方块矩形有多大，也就是每个格子有多大。我们知道有多少格子，有多大的格子，就能计算出，总共有多少个顶点，每个顶点的位置在什么地方，也就能知道三角形该怎么拼接了。&lt;/p&gt;

&lt;p&gt;简单得说，地图是一个大矩形，横切竖切N刀，成了一个个大小一样的小矩形或者正方形，这种有规则、大小一样、位置可寻的网格，是可以通过程序生成的。&lt;/p&gt;

&lt;p&gt;我们利用三角形的拼接方式拼接完矩形，再把地图方块的UV接上去，因为每块地形的图都不一样，所以我们需要在离线时就把所有的地形图都拼成一张图，即以图集的方式存储地图的方块。当我们将图接到网格上时，我们需要将指定的方块图的UV数值赋值给顶点，对每个方块里的2个三角形做UV设置处理，让图集中的方块图显示在网格中。&lt;/p&gt;

&lt;p&gt;伪代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//生成地图&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Generate_map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//遍历每块矩形的方块位置&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width_count&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_count&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_trangle_by_rectangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;texture_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;CombineAdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//生成矩形方块所需要的，4个顶点，4个索引，2个三角形，2个三角形的顶点索引，以及三角形的uv位置。&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate_trangle_by_rectangle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;texture_info&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//矩形的4个顶点&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//顶点增加后的索引位置&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point_index1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point_index2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point_index3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point_index4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//三角形的生成时的顶点&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;trangle1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;trangle2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//三角形顶点的索引信息&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;trangle_index1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point_index1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_index2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_index3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;trangle_index2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point_index3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_index4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_index1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//4个uv点位的信息&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point_uv1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uv_x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uv_y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point_uv2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uv_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uv_y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point_uv3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uv_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uv_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;point_uv4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uv_x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uv_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;Mesh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trangles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trangle1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tangle2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trangles_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trangle_index1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trangle_index2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;uvs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point_uv1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_uv2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_uv3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point_uv4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码中，对所有地图中的方块都进行遍历，在遍历中生成了每个方块所需要的顶点，顶点索引，uv点，进而生成三角形，三角形的索引。在生成完毕后，将这些生成的数据，与前面生成的数据进行合并，使得整个地图是一个一体化的网格，只产生一个drawcall。&lt;/p&gt;

&lt;p&gt;用程序拼接地图的好处是可以任意的通过地图编辑器来改变地形地貌，拼接完成的地图在渲染上的代价也相当的小，而且假如想换个地图的地形，只要更换贴图就可以了，什么样的贴图就可以产生什么样的地图。&lt;/p&gt;

&lt;p&gt;不过同时也带来了很多弊端，必须要有成形的地图编辑器支撑，前期工具的工作量比较大，稍微提高了点门槛，并且地图元素仅限于贴图中的元素，当地图元素增加到一定范围，就要扩大地图的贴图时就要重新排列地图信息。这一连套的工具链包括地图编辑器是必要的前提条件。&lt;/p&gt;

&lt;h6&gt;3D RPG角色扮演类游戏中，也时常常使用这种技巧来绘制游戏地图，曾经在日本风靡一时的《白猫计划》就是这样做的。&lt;/h6&gt;

&lt;p&gt;这种程序拼合的地图，策划设计师、关卡设计师可以在地图编辑器上，任意的绘制、拼接、同种类型的不同样式的地图（即在同一张贴图内容中的模型和地图元素），因此大大缩短了大量的场景试错时间。它能大量的生成出不同样式的地图，而不需要制作大量的不同类型的3D模型，大大缩短了项目时间进度，深受游戏制作人的喜爱。&lt;/p&gt;

&lt;p&gt;那么在3D地图中是怎么拼接方块地形的呢？看上去比2D更加复杂的事情，其实更加简单。&lt;/p&gt;

&lt;p&gt;首先，在3D地形模型制作时需要制定一下模型的规范。&lt;/p&gt;

&lt;p&gt;3D模型的长宽必须和地图切割后的方块长宽是一致的。3D地图中，不需要我们自己来拼接三角形了，因为已经有了固定的地形模型，但对每个地形模型就需要有规范。假如规定每块地形都是 1 x 1，那么在制作和拆分地形模型时就要按规定来，每个3D地形模型都必须以 1 x 1 的标准来定制，否则不可用。当然并不一定要 1 x 1，也可以是2 x 2、 3 x 3等等，只是当标准制定完毕后，地形模型的制作必须要按照标准来做，每个元素都相当于一个地图块。&lt;/p&gt;

&lt;p&gt;其次，所有地形模型的纹理贴图都必须并在一张贴图上制作。因为只有这样才能在合并模型才能合并，并且在合并后让这么多 1 x 1 的小方块只需要1个drawcall渲染调用就可以了绘制所有的地图。也只有这样，才能解决太多模型需要渲染导致的爆量drawcall问题。&lt;/p&gt;

&lt;p&gt;然后，在3D地形模型制作时也是需要相当的考量的，因为这个地图都被拆分成了N种类型的地形方块，所以在制作的初期需要对整个地形有哪些类型的需求，需要有一个设计、交流、探讨、决策、改进的过程。&lt;/p&gt;

&lt;p&gt;并且在读取地图编辑器编辑的数据后，实例化场景地图时也需要增加些许逻辑，这些逻辑是为了适应更好的模型拼合，比如当左边是某个模型时，为了能与它完美的拼接，当前这个格子上的模型必须是迎合它的那个，就像我们在制作和拆分城墙时那样，当城墙处于拐角处时，我们需要用拐角模型代替，还要判断它的左右前后有没有城墙，假设左边有城墙则应该选用带有连接左边城墙拐点的3D城墙模型，右边的、前面的、后面的、以及前后都有的，左右都有的，等等，总共9种情况都有不同的9种拐角城墙所代替，就是为了完美契合周围的环境而进行的额外的处理。&lt;/p&gt;

&lt;p&gt;最后的合并模型步骤就简单的多了，切分开来后的模型，按地图数据文件所描述的位置，放在指定的位置上，并向上面所说的选择好适配的模型，最后调用Unity3D的 Mesh.CombineMeshes 合并所有模型。&lt;/p&gt;

&lt;p&gt;在合并后可能发生衔接处的问题，用程序生成面片来补救很难做到完美的展示，我们还是建议调整3D模型在接缝处的面片与网格，只有这样才能调整出一个完美的或者说完全可掌控的地图造型。&lt;/p&gt;

&lt;h3&gt;常规场景的性能优化&lt;/h3&gt;

&lt;p&gt;上面几节阐述了地图的拼接方式，其中用程序拼接合并地图块的方式确实大大降低了 Drawcall 的数量，提升了渲染的性能，但只针对可拆分的地图类型项目，对大多数游戏类型来说地图是不可拆分成小块的。因此我们还是需要更多的针对常规场景讲解优化的方法和技巧。&lt;/p&gt;

&lt;p&gt;首先我们要清楚的是，是什么造成了场景的低渲染效率。我们在这里罗列一下主要的几个问题：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1.渲染面数太多，GPU压力太大。

    2.渲染管线调用次数太多，即drawcall太多，GPU排队渲染的队伍太长

    3.贴图太多太大，导致显存的带宽负荷太重

    4.动画太多，蒙皮的计算消耗的CPU太大

    5.实时光的GPU开销太大
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实还有很多很多问题需要解决，比如实时阴影导致的 Drawcall 太多，增大了渲染调用的排队长度，以及透贴太多，Overdraw 重绘问题比较严重，还有比如单个物体需要的Pass渲染太多，一个物体需要绘制多次才能完成等等。这些问题也是很重要的，但这节我们重点解决这最重要的5个问题。&lt;/p&gt;

&lt;h3&gt;1.渲染面数太多，GPU压力太大。&lt;/h3&gt;

&lt;p&gt;渲染面数太多分两种，一种是整个场景3D物体太多导致的面数多，一种是同屏展示的面数太多。&lt;/p&gt;

&lt;h6&gt;前一种Unity3D引擎会裁切掉在摄像头之外的物体，不让他们进入到渲染管线以减少消耗，虽然裁切也会消耗小部分CPU，但毕竟比起渲染整个物体要小的多。&lt;/h6&gt;

&lt;p&gt;在进入渲染管线前每个3D物体能计算出或者已经计算好了一个包围盒，即Bounds，这个包围盒由8个顶点组成，加上旋转矩阵就能计算出每个顶点是否在摄像头的锥形体范围内。&lt;/p&gt;

&lt;p&gt;裁切的算法简单说是这样的，如果有包围盒8个点中只要有一个点在锥形体内，就认为是需要渲染的不可被裁剪，如果8个顶点都不在摄像头的锥形体范围内，才认为是不需要被渲染的，然后Unity3D引擎会阻止这个模型渲染即在渲染调用前裁切掉。&lt;/p&gt;

&lt;p&gt;这种Unity3D引擎上的裁剪，帮助我们屏蔽掉了很多不需要渲染的物体，虽然裁剪也会花去些许CPU，但比起要绘制一个3D物体来说要少的多的多。&lt;/p&gt;

&lt;p&gt;这种裁剪的好处是，使得我们只要关心摄像头范围内的面片就可以了，但是如果是一个模型很大，或者常常我们项目中有合并的模型范围从南延伸到北贯穿整个场景，一旦这个模型很大，覆盖了整个场景，包围盒总有一段在摄像头内就不会被裁剪，这样就会浪费很多不必要的GPU计算。&lt;/p&gt;

&lt;p&gt;除了Unity3D引擎内的裁剪，OpenGL即渲染管线也会对每个三角形进行裁剪，不过三角形的裁剪要比8个顶点的包围盒裁剪要费的多。所以我们尽量还是能用包围盒裁剪就用包围盒裁剪方式，将更少的三角形面片带入渲染管线。&lt;/p&gt;

&lt;p&gt;传入渲染管线的所有三角形顶点管线对它们做的第一个动作就是裁剪，其次才是计算，网格根据摄像头锥形体进行裁剪，所有不在锥形体范围内的顶点都会被裁掉。但是这种裁切的效率比起8个顶点的包围盒效率要低得多。&lt;/p&gt;

&lt;p&gt;场景面数太多时，如果没有或者很少有这种从南到北的模型时，渲染的压力就取决于摄像头中可展示的物体的数量，但是如果单个模型通常会覆盖很多天南地北的网格，那么GPU对裁切计算的压力就会增大。&lt;/p&gt;

&lt;h6&gt;后一种同屏面数太多的情况，就是因为3D模型都在摄像头范围内，要么就是模型太多，要么就是模型面数太多，要么就是摄像头太远而显示距离太大造成的。&lt;/h6&gt;

&lt;p&gt;最简单直接的方法就是，拉近摄像头，或者拉近摄像头显示距离，让更少的模型进入视野内。当视野范围内的物体少了，需要渲染的模型面数也就少了，自然CPU和GPU的消耗也就少了。虽然这是最拙劣的办法，也是我们需要调整和调节的参数，让视线范围在一个合理的范围内。&lt;/p&gt;

&lt;p&gt;其次是减少模型面数，或者减少模型在场景中的数量，降低不必要的高品质。3D模型面数的降低，不是一两天就能完成的事，一个模型面数的降低也伴随着画面质量的降低，又要面数低又要品质高那是痴人做梦，所以我们找到一个平衡，也要制定一个容忍度，即前面几章提到的，要将模型面数在研发期间控制在一定范围内。模型数量在场景中的数量的降低，或者更直接的方式，去除了许许多多本来需要渲染的三角面，自然就省去了诸多CPU和GPU消耗，但也伴随着场景变得空旷不饱满不生动。&lt;/p&gt;

&lt;h6&gt;那么有没一种方法可以不更重制3D模型面数，不减少模型在场景里的数量，不缩短摄像头显示距离，也能优化性能的。有。&lt;/h6&gt;

&lt;p&gt;世上没有免费的午餐，想降低GPU的消耗，就得用增大内存来换。&lt;/p&gt;

&lt;p&gt;LOD，即Level of detail，就是此道。用内存换GPU。&lt;/p&gt;

&lt;p&gt;我们把每个3D模型，做成多个不同细节级别的模型，当摄像头拉远时，启用形状相似面数更少细节的模型，当摄像头拉近时，则启用形状相似面数更多细节的模型。&lt;/p&gt;

&lt;p&gt;这样即使众多的模型在摄像头范围内需要渲染，也只有几个模型在靠近摄像头的，而大部分都是远离摄像头的。&lt;/p&gt;

&lt;p&gt;远离摄像头的3D模型面数很少，即使数量众多，它们所展示的低等级的面数的总和也是可以接受的。&lt;/p&gt;

&lt;p&gt;我们常提到的 Mipmap 也是这种方式在运作，对于距离远的物体，启用更小的纹理贴图，而与摄像头距离近的物体则使用更大的纹理贴图。这样在渲染时就传送进渲染管线的贴图就更小了，宽带压力小了，GPU消耗自然少了。&lt;/p&gt;

&lt;p&gt;天下没有免费的午餐，提升了CPU和GPU的性能，就会增大内存的消耗，如果内存消耗太多也是得不偿失的，因此在考虑怎么分级、分多少级的细节级别上也需要一番考量，针对不同的项目分级的层数也是不同，拿大型MMORPG来说，那种可以在天上飞的游戏，看到的物体自然就很多，如果LOD分级少了画面则会显得突兀，而中小项目如果LOD分级太多，则加大了内存量和制作时间，得不偿失。&lt;/p&gt;

&lt;h3&gt;2.渲染管线太多，即 Drawcall 太多，渲染管线太多&lt;/h3&gt;

&lt;p&gt;除了面数带来的GPU计算压力，渲染管线太多也是造成GPU压力的一大问题。&lt;/p&gt;

&lt;p&gt;渲染管线太多的问题，大都是因为场景中的模型物体太多，或者使用的Shader中的管线太多，或者这两者同时造成的。&lt;/p&gt;

&lt;p&gt;其实这个问题是最好解决的，‘干掉’在场景中众多的模型物体，以及‘注释掉’Shader中不必要的管线。&lt;/p&gt;

&lt;p&gt;当然这是最粗暴的做法，无疑将美术设计师，场景设计师的辛勤工作的成果给抛弃了。但也不是不可为，适当的‘干掉’一部分不必要模型的其实是有助于场景制作的。&lt;/p&gt;

&lt;p&gt;那么我们能不能在不毁坏场景的前提下做些优化呢。可以的。&lt;/p&gt;

&lt;p&gt;关键点就在于‘合并’二字。&lt;/p&gt;

&lt;p&gt;为什么呢？因为一个屏幕内需要渲染的面片数量是一定的，即我们不减模型在场景中的数量，不减单个模型面数的情况下，一个画面上需要渲染的三角形面数是固定的数量。&lt;/p&gt;

&lt;p&gt;我们每次调用管线渲染（即drawcall）传给渲染管线的三角形数量却比较少，所以调用的次数比较多。&lt;/p&gt;

&lt;p&gt;我们能否合并这些面片数据，然后一次性得传递给管线，将原来需要很多次的管线调用变成一次，只有这样才能大大降低 Drawcall 的数量，降低渲染调用次数。&lt;/p&gt;

&lt;p&gt;那么减少渲染管线即减少 Drawcall 的数量究竟有什么好处？&lt;/p&gt;

&lt;p&gt;减少了渲染管线的数量，即降低了Drawcall的数量后，尽管并没有减少任何需要渲染的面片数量，只是每次传递给渲染管线的顶点和面片数增多了，传递的次数减少了，但是三角形数据进入渲染管线后，就可以开启GPU并行处理了，单行线变成了8车道甚至16车道单行线，速度加快8-16倍。&lt;/p&gt;

&lt;p&gt;原本调用一次渲染，就要在队列中等待管线渲染完毕后才进行下一次渲染，合并后就不同了。不再是像以前那样调用这么多次Drawcall，每次渲染一个画面时Drawcall的队伍都要排的老长老长的，都等在那排着队等待一个个的交给GPU处理，效率低下。&lt;/p&gt;

&lt;p&gt;合并后就不再是这样了，排队的数量少了，队伍短了，虽然每个排队的‘人’都很‘胖’（即数据量很多），但是一旦进入处理阶段，8-16条生产线并行处理这些数据，比前面排着老长得队伍一个个处理要来的高效的多。&lt;/p&gt;

&lt;p&gt;所以我们要想方设法的合并各种模型。怎么合并？&lt;/p&gt;

&lt;p&gt;其实Unity3D引擎自带有多种合批方式，前面几个章节有详细的介绍，这里我们简单提一下，Unity3D引擎中有动态合批、静态合批、GPU Instancing 三种合批方式，其中动态合批，合并的普通的模型，但要求比较高，包括模型面熟、Shader的Pass数等，静态合批也有自己的规则，它通过消耗的内存来换取CPU，而GPU Instancing 的原理是通过对一个模型传递更多的信息数据从而绘制不同的位置与样式来达到减少Drawcall的目的。&lt;/p&gt;

&lt;p&gt;这里我们暂时不通过Unity3D自动的方式来做‘合并’的操作，我们希望能够自己掌控‘合并’效率和效果。部分原因也是因为引擎自带的合批方式通常都是通用的合批方式，规则比较严格，合批率比较低。所以时常放弃它们而选择自己动手丰衣足食。&lt;/p&gt;

&lt;p&gt;‘合并’也分实时合并，与，非实时合并两种方法：&lt;/p&gt;

&lt;p&gt;其中实时合并也会消耗大量的CPU，因为它要读取多个模型，并创建新模型数据，不断的创建新模型数据，就会导致CPU的消耗。这里不再详细介绍，前面章节已经介绍过，这里简单点说一下，把相同材质球，相同贴图的模型，读取它们的模型数据，生成一个新的合并后的模型，然后隐藏原有的模型。如果很多模型材质球效果一样，但贴图不一样，我们可以在线下手动合并它们的贴图后再放到线上合并。&lt;/p&gt;

&lt;p&gt;非实时合并则全是线下的手动合并，即大家常说的静态合并。Unity3D静态批处理的规则比较严格，即要求相同材质球相同贴图还要形同模型，而且内存消耗比较大，因此我们还是建议使用自己手动合并的方式，即手动拼接场景中静态不动的、有相同材质球、相同贴图的模型，手动拼接成一个模型，也可以用插件来操作，比如 MeshBaker，通过 MeshBaker 来制作和合并模型与纹理贴图。&lt;/p&gt;

&lt;p&gt;静态合并Mesh的好处就是，游戏中不需要实时消耗CPU去合并模型，节省了不少CPU，也降低了很多Drawcall的数量。&lt;/p&gt;

&lt;p&gt;当然过犹不及么，如果把所有的在场景内的物体全部合成为一个模型，整个地图，无论摄像头能不能看到的地方都合并了，那么GPU的压力也同样很大，因为这样的话我们前面提到的引擎自身做的第一层包围盒裁剪就不生效了。渲染时会一股脑的将整个模型数据塞进渲染管线中，GPU在裁剪时的压力就会很大，因为它要裁剪整个地图的所有模型面片，计算量也是巨大的。&lt;/p&gt;

&lt;p&gt;因此我们在静态合并时也要适度，即合并周围距离不太远的、可以合并的模型。这样即减少 Drawcall 次数，也同时降低了GPU裁剪的压力。&lt;/p&gt;

&lt;h3&gt;3.贴图太多太大，显存的带宽负荷太重&lt;/h3&gt;

&lt;p&gt;贴图太多，宽带压力太大，导致的问题，主要是因为GPU在渲染时，需要将内存的纹理拷贝到显存中去才能使用在GPU中。所以拷贝的消耗和显存的消耗也是很大的。不过，显存只存在于主机和PC游戏中，在手机中没有显存的概念，只有内存，因此都是内存和内存的拷贝。&lt;/p&gt;

&lt;p&gt;在手机中只有内存与内存的拷贝，那么岂不是内存中的贴图纹理有两份？是的，如果引擎没有做额外处理的话，按照常理GPU的工作流程确实会是拷贝一份纹理到另外一段内存中，导致一份纹理占用了两份内存。但是毕竟引擎还是做了很多优化的，Unity3D就做了这方面的优化，当贴图没有勾选Read/Write 时Unity3D就认为该贴图是不会被改变的，当GPU需要该贴图时只是把原来在内存中的值传进去，而不是拷贝整个纹理，而当我们 勾选了 Read/Write 后Unity3D就认为该贴图是会被改变的，因此当GPU需要该贴图去渲染的时候，则会重新拷贝一份纹理贴图，这份纹理贴图专门给GPU渲染使用，避免GPU的纹理贴图随时被更改。&lt;/p&gt;

&lt;p&gt;因此我们在贴图设置时，首先要注意 Read/Write 选项是否需要被开启，绝大部分贴图是不需要被开启的，这些贴图被开启后造成的2倍内存也是不必要的。&lt;/p&gt;

&lt;p&gt;贴图太大太多，最好的办法是缩小贴图和压缩贴图。&lt;/p&gt;

&lt;p&gt;看起来挺简单的，其实我们在实际项目中，我们不可能随意的去缩小和压缩贴图，这样很容易导致项目因贴图质量太糟糕而影响画面效果。&lt;/p&gt;

&lt;p&gt;我们需要针对每个部分的贴图逐一去了解和设置，其实每个功能部分的贴图都有其用途。比如UI中的贴图分，图集和Icon图片，图集一般都是无损质量，因为要保障画面，也不需要 Mipmap采样，Icon图也是一样。虽然也不是不能压缩，不过压缩后确实UI的质量会遭到比较显著的降低，针对低端机时确实可以这样去做，因为无损的贴图在内存上和压缩的贴图通常有5-10倍的差距。&lt;/p&gt;

&lt;p&gt;又比如3D模型的贴图，这些模型纹理贴图，通常都是2的幂次存在，因为2的幂次的纹理在GPU中处理起来比较顺手，而他们也通常是可以压缩的，并且带有 Mipmap 采样生成标记的。要压缩多少，压缩到什么比例才适合，每个项目都不一样，因人而异，大部分时候我们都是指压缩到中位数即Normal Compress普通压缩。&lt;/p&gt;

&lt;p&gt;贴图的大小确实比较重要，每个项目在开始时都要好好的规范一下，因为只有遵守良好的规范，项目才能将内存限制在可控范围内。&lt;/p&gt;

&lt;p&gt;幸运的是，美术设计师无论将贴图做的多大，我们都可以在Unity3D里重新设置成我们需要的大小，Unity3D会将所有贴图都重新制作导出成用户指定大小的贴图和格式。因此即使前期贴图太大而导致的问题，也可以在Unity3D的项目中将贴图设置回我们想要的大小。&lt;/p&gt;

&lt;h3&gt;4.动画太多，蒙皮的计算量太大&lt;/h3&gt;

&lt;p&gt;动画确实是最令人头疼的，因为它是动态的，而且时时刻刻都是动态的，不像3D物件，虽然它们会出现消失，但大部分情况下还是静止不同的。而动画则不同，它们时时刻刻都在你眼前动来动去，即使不再屏幕上，大部分时候也需要一直保持动的状态。&lt;/p&gt;

&lt;p&gt;对于动画的优化，其实上几个章节中有讲的比较详细，这里只是简单的点一下。&lt;/p&gt;

&lt;p&gt;动画的消耗点最大的地方是CPU的蒙皮计算，如果有100个动画在屏幕中播放，由于每帧对蒙皮的计算都是全局性的，因此CPU会极大的消耗在蒙皮计算上。&lt;/p&gt;

&lt;p&gt;蒙皮计算，其实质就是骨骼与顶点的计算，骨骼动画用骨骼点去影响顶点，每帧都需要计算骨骼点与顶点的偏移、缩放与旋转。&lt;/p&gt;

&lt;p&gt;如果动画模型的顶点数量很多，骨骼数量很多，顶点关联着骨骼点，骨骼点影响着顶点，那么计算量就会很大，消耗的CPU自然就会很多。&lt;/p&gt;

&lt;p&gt;为了能节省计算量，我们可以减少顶点数，又或者减少骨骼点的数量，抑或两者都进行削减，就能使得CPU降低消耗。&lt;/p&gt;

&lt;p&gt;让3D模型设计师和动画师去减面和减动画骨骼，工作量毕竟是比较大的，涉及到所有3D模型和动画。在削减的时候还需要顾及画面，不能太糟糕，所以时间会比较长。这是我们程序无法控制的，我们能做的就是从程序上尽量的降低开销。&lt;/p&gt;

&lt;p&gt;由于每帧都要计算，所以很费CPU，如果能把计算好的每帧顶点偏移量存起来，播放的时候直接偏移过去就好了，于是就有了 Animation Instancing。它就是把所有动画文件中的数据都导出放入贴图中，由可编程的顶点着色器来完成顶点的偏移。这样我们就不需要计算了，在设置顶点的位置就可以了，省去了大量的CPU计算消耗。&lt;/p&gt;

&lt;p&gt;但是毕竟一个会动的模型，是无法合并Mesh，理论上说应该说每帧都合并一次对CPU消耗的代价太大，所以每个动画模型都需要至少一个Drawcall来支撑，如果Shader中有多个Pass管线，就有更多，比如描边，实时阴影等。&lt;/p&gt;

&lt;p&gt;假设有100个这样的动画，就需要至少100个Drawcall来支撑。消耗还是太大，能不能合并Drawcall，就像合并Mesh一样，相同的材质球合并成为一个Drawcall呢？&lt;/p&gt;

&lt;p&gt;Unity3D的 GPU Instancing 为我们提供了合并的可能。它可以合并相同材质球，相同模型的Drawcall。它原理是将多个模型的相同顶点，相同贴图，相同材质球，在不同位置的物体一次性提交给GPU，让它只绘制一次就能将所有物体都绘制在帧缓存中，进而体现在屏幕上。&lt;/p&gt;

&lt;p&gt;这种方式的条件虽然有点苛刻，但恰好能和 Animation Instancing 配合的很好，Animation Instancing 并没有改变3D模型，贴图，材质球，能与 GPU Instancing 能很好的结合，两者使用起来能减掉很多有用相同模型和材质球的动画物体，还能将计算蒙皮的CPU消耗省去，可以说是绝佳的搭档。&lt;/p&gt;

&lt;p&gt;与之相似的还有，另外一些场景中的草和树的摇动，我们可以用顶点动画和 GPU Instancing 结合来省去Drawcall和蒙皮计算的CPU消耗。&lt;/p&gt;

&lt;p&gt;其实和 Animation Instancing 一样的原理，只是草和树是纯顶点算法计算出来的摇动，而3D模型动画的 Animation Instancing 则是在离线下将动画数据导进纹理贴图中在顶点着色器中偏移顶点罢了。&lt;/p&gt;

&lt;p&gt;前者用了算法计算出顶点，而后者用纹理贴图当做数据载体直接偏移顶点。前者消耗了GPU来代替CPU计算，后者消耗了内存和少量GPU代替CPU，前者更加灵活但也受到算法的局限性，后者则死板一些但性能开销更少。各有利弊，在实际项目中也需要根据实际情况做选择和混用，我们在使用时应该衡量他们在项目中的限制和作用，尽量做最适合的选择。&lt;/p&gt;

&lt;h6&gt;5.实时光的GPU开销太大&lt;/h6&gt;

&lt;p&gt;烘培是解决实时灯光太多，GPU开销太大时比较好的解决手段。对于场景制作与优化，烘培是永远绕不过去的技巧，它能帮助我们省去很多灯光的实时开销，以及实时阴影的巨大开销。&lt;/p&gt;

&lt;p&gt;下一节我们就来专门来讲讲，烘培及其优化。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(二十七) 如何应对30岁的躁动</title>
   <link href="http://www.luzexi.com/2019/08/10/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A827.html"/>
   <updated>2019-08-10T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/08/10/思路探讨27</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/%E9%87%91%E8%9E%8D/idea-talk-27.jpeg&quot; alt=&quot;idea-talk 27&quot;&gt;&lt;/p&gt;

&lt;p&gt;最近对自己影响比较深的一段话。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;台风日没带电脑，只能在手机上打字。&lt;/p&gt;

&lt;p&gt;一整天只在小小房子里原地看看书，原地跑步。&lt;/p&gt;

&lt;p&gt;我依然坚持着自己独有一套理论，即，&lt;/p&gt;

&lt;p&gt;首先要想方设法每天都保持充沛的体力和旺盛的精力，即保持健身、正常的饮食、规律的作息。&lt;/p&gt;

&lt;p&gt;然后，每天必须看几页书以丰富自己的知识、看法、见解和视野，&lt;/p&gt;

&lt;p&gt;其他时间专注于工作，在工作中历练，在工作中积累经验和财富。&lt;/p&gt;

&lt;p&gt;无论处在什么样的状态下，开始努力都为时不晚。&lt;/p&gt;

&lt;p&gt;人只要一直努力下去，肯定比他不努力的强百倍。&lt;/p&gt;

&lt;h6&gt;“努力”应该被称为一种特质，是自驱力的体现，如果你拥有这种特质，总有一天你会发现，所有你所拥有的都因“努力”而得，不管你最终有没有成功，“努力”这两个字将成了你的优势。&lt;/h6&gt;

&lt;p&gt;最近难得平静下来能安安静静的度过一天。也可以梳理下最近的生活和工作。&lt;/p&gt;

&lt;p&gt;30几岁依然是躁动的年纪，只是相比于20几岁，更加让我们躁动的是事业和家庭，比起40几岁，30几岁的我们还不够沉稳，心力还不够强大，经受的狂风暴雨还不够多，这种局面是无法改变，只有我们熬过30岁来到了40岁时，回头看才会知道这一切就是个“轮回”，只是40几岁又有了新的烦恼和痛苦。60后下去了70后起来了，70后下去了80后起来了，80后下去了90后起来了，世界从没因任何人停止过潮汐潮落。我们所感受到的只是我们以自我为中心的视角所看到的和感受到的情景罢了，其实并非我们所想象的那样美好或者那样糟糕，世界就这样悄无声息又平静的路过你，我，他身边，继续向前。&lt;/p&gt;

&lt;h6&gt;如果说世界上有什么办法能够掌控未来，也只有“努力”，并且是持续的长时间的努力，也只有这样才能在下一个阶段来临前打好结实的基础。&lt;/h6&gt;

&lt;p&gt;当下一个阶段来临时，才有足够强的实力，足够多的经验，足够大的视野，足够强壮的身体应对更加复杂的局面。&lt;/p&gt;

&lt;p&gt;也只有我们在当前阶段持续不断的努力，才能在下一个阶段来临时拥有足够多的优势，到那时才能更加从容一点。&lt;/p&gt;

&lt;p&gt;但也同样的，我们会不断面临再下一个阶段的挑战，努力永远都不可能停下来，我们一生都是艰苦而又美好的。&lt;/p&gt;

&lt;h3&gt;我们在“努力”中寻找苦涩的快乐，在“汗水”中绽放疲惫的笑容。&lt;/h3&gt;

&lt;h3&gt;我们一起：苦中作乐&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第十章，地图与寻路(三) 地图编辑器</title>
   <link href="http://www.luzexi.com/2019/08/05/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E5%9C%B0%E5%9B%BE%E4%B8%8E%E5%AF%BB%E8%B7%AF3.html"/>
   <updated>2019-08-05T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/08/05/Unity3D高级编程之进阶主程-地图与寻路3</id>
   <content type="html">&lt;p&gt;对于任何游戏来说，地图与场景的是比较重要的，特别是对于中大型游戏来说，在地图和场景上花费的时间和精力占去了大部分。而对于大部分游戏类型来说，布置场景，优化场景，甚至为场景写个编辑器是必不可少的，我们通常称他们为‘地图编辑器’。&lt;/p&gt;

&lt;p&gt;地图编辑器有哪几种实现方式，该如何实现，顺便讲一讲从哪些方面下手优化场景，我们这节就来讲讲关于地图的事。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;地图编辑器的基本功能&lt;/h3&gt;

&lt;p&gt;什么是地图编辑器？Unity3D本身的编辑器就是属于场景编辑器，但它没有达地图编辑器的功能，只是能添加场景，添加场景里的物件，移动，旋转，缩放模型物件而已，并不能帮助我们将这些物件变成自定义的具体数据然后存储下来成为文件。&lt;/p&gt;

&lt;p&gt;对于一张完整的地图来说，我们需要的是能生成一个包含地图中所有元素数据的文件，并且我们可以通过这个文件还原整个地图。&lt;/p&gt;

&lt;p&gt;这个文件不只是可以在视觉上还原地图，还要还原我们已经设定好的地图中的逻辑，包括碰撞的逻辑，触发逻辑，关卡逻辑，事件逻辑，以及游戏逻辑。&lt;/p&gt;

&lt;p&gt;说白了，为了能让地图还原成我们编辑的那个模式，并且可以继续持续的编辑，我们需要创造一个地图编辑器来完成这个功能。&lt;/p&gt;

&lt;p&gt;下面就让我们来说说地图编辑器是怎么实现的。&lt;/p&gt;

&lt;p&gt;地图的元素都是以坐标，旋转角度，缩放大小为基准形成的数据，大部分元素都是节点，模型，特效，因此大部分地图编辑器都需要有，元素的坐标，角度，缩放大小，至少有这三样的数据记录。其他的数据，也会有包括配置表ID，物件类型，范围大小，脚本名字等，是为了配合不同游戏系统的需要而构建的。&lt;/p&gt;

&lt;p&gt;即通常每个元素的数据为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    class map_unit
    {
        position, //坐标
        rotation, //旋转角度
        scale, //缩放
        type, //类型
        table_id, //配置表ID
        size, //大小
        function_name, //功能名
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中position, rotation, scale 是基础的数据类型，它记录了需要被展示在场景中的位置，角度，缩放大小。而其他的数据，例如 type 可以用来表示这个物件的类型，是人，是怪，是门，是机关，还是不会动的静态场景物件。&lt;/p&gt;

&lt;p&gt;而 talbe&lt;em&gt;id 可以用来表达这个前面这个 type 类型所对应的配置表ID，用这个 table&lt;/em&gt;id 可以映射到具体数据表里或者说Excel表里的某一行数据，因此各种type下的展示效果可以根据这个 talbe&lt;em&gt;id 的不同而不同，例如 怪物有很多种，每个talbe&lt;/em&gt;id 都代表了怪物表里的一种怪物，因此怪物的形状和怪物AI都可以用这个 table_id 映射。&lt;/p&gt;

&lt;p&gt;size 大小则可以认为是该物体所触发事件的一个范围，比如当角色进入5 * 5 这个size大小范围时将触发机关，或者触发剧情，或者触发任务，或者触发生成一堆怪物。&lt;/p&gt;

&lt;p&gt;function&lt;em&gt;name 一般都会指向某个功能性逻辑。当某个物件size范围内被触发时，功能性逻辑就执行操作，使用它的意图是通过它指向的是某个具体的功能，因为每个物件都有可能具有不同类型的操作指令，因此指令可能是纷繁复杂的。 例如，function&lt;/em&gt;name里填上make&lt;em&gt;new&lt;/em&gt;task 可以定义为，触发时制造新的任务，或者 play&lt;em&gt;animation 触发时播放某个动画，或者 generate&lt;/em&gt;master 生成一堆怪物等等诸如此类。 &lt;/p&gt;

&lt;p&gt;有了数据就需要对数据保存和读取，包括地图数据文件的保存和读取，这两个是最基本的功能。&lt;/p&gt;

&lt;h3&gt;数据协议格式在编辑器中应用的选择&lt;/h3&gt;

&lt;p&gt;关于数据的存储与解析，我们在前面的数据协议章节中专门做了详细讲解，这里我们做一些应用，该怎么选择地图数据的数据格式和存储协议。各类协议在这里也能体现其不同的优势。&lt;/p&gt;

&lt;p&gt;我们把数据都存储到文件中，存储数据就需要格式，我们选定一种协议格式来存储后，就得用相同的协议读取，假设我们用最方便的Json协议格式存储所有数据，并放入文件中，那么我们在读取数据的时候也需要从Json数据中解析出每个元素存储到内存中。&lt;/p&gt;

&lt;p&gt;假设说我们在众多协议中选择了使用Json协议，我们选择Json协议的意义是什么呢，乍一眼看来Json占用的空间又大，解析又慢，导致很多人都摒弃它，这样的情况下我们为什么还用它。肯定是因为简单，快速，易上手，只要有一点点编程知识的人都知道Json的格式，即使不知道也只需要花几分钟就能明白其原理，这对于众多新手来说是适合的门槛线，他们能快速上手快速融入团队。这种团队执行效率，对于一些技术力量参差不齐的团队（资深只有1，2个，其他都是新人）来说是好的选择，大家能很容易达成一个比较高的共识，协作起来也没有太多障碍。&lt;/p&gt;

&lt;p&gt;我们可不要小看达成共识的好处，我们必须认识到我们独自一个人是完不成任务的，这一点很多人虽然清楚明白，但实际中总是犯个人主义的毛病，忍不住靠自己，而不是靠团队，最后事情太多弄得自己手忙脚乱。产品要靠大家一起完成每个人都出尽所有的本事而非一个英雄搞定一切，团队在协作时没有共识或者共识比较差，将发生许许多多怪异的问题，最终都会导致团队执行效率下降，产品的质量降低。假设有一种解决方案能让团队所有成员都能达成共识，即使这种解决方案的效率并不高，在团队执行效率面前我们都需要重点考虑一下。&lt;/p&gt;

&lt;p&gt;有很多协议比Json空间占用小，解析快，效率高，自定义格式的数据协议就是其中一种，那么我们为什么又非要抛弃Json来使用自定义格式的数据协议呢？&lt;/p&gt;

&lt;p&gt;假设说我们使用自定义格式的协议，把每个变量都转换成byte流形式存储，这种形式的存储是最能掌控的，也是最能够节省空间的。因此用自定义协议做存储格式的人，可能非常想要掌控这个存储过程，而不想让其他第三方的插件干扰。不过，自定义协议在使用时也有很大的缺陷，当数据格式变化时，对变化协议格式的适应能力比较弱，虽然也不是没办法，但确实有点代价。&lt;/p&gt;

&lt;p&gt;代价是什么呢？代价就是要为每个版本的数据格式各自写一个完整的数据读取和存储的程序。每增加一个版本，为了维护旧的数据，都要在原有的数据解析的程序外，增加一个新的数据解析程序。就如下面的伪代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    void ReadData(io_stream)
    {
        version = io_stream.read_int();
        if( version == 1 )
        {
            Read_version1(io_stream);
        }
        else if(version == 2)
        {
            Read_version2(io_stream);
        }
    }

    voi Read_version(io_stream)
    {
        id = io_stream.read_int();
        level = io_stream.read_int();
    }

    voi Read_version(io_stream)
    {
        id = io_stream.read_int();
        name = io_stream.read_str();
        gold = io_stream.read_int();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码中读取数据时考虑了多种版本的兼容，使用了不同函数应对不同版本的办法，为每个版本写一个特有的读取顺序，在读取开头，用一个int元素来代表是应该使用哪个版本来读取数据，得到数据版本号后就能对应到不同版本的读取方法。&lt;/p&gt;

&lt;p&gt;自定义方式确实压缩了数据，提高了效率，但也同时增加了维护的复杂度，而Proto Buffer就没有这样的缺点。&lt;/p&gt;

&lt;p&gt;再假设说，我们使用Proto Buffer协议来作为存储格式，原本自定义协议的弊端被大大的削减，即使是数据格式升级和改变，都能轻松的应对，确实是一个比较好的选择，协议数据小，解析速度快，协议升级方便。&lt;/p&gt;

&lt;p&gt;但不要忘了，在看似优秀的协议下的同时我们也被被束缚在了Proto Buffer里，即不得不依赖于Proto Buffer。在未来假设的某一天，我们需要使用其他工具或语言来读取数据文件时，必须被要求使用Proto Buffer来得到数据格式的转换。其实，Proto Buffer在学习门槛上也提高了不少，对于新手来说理解Proto Buffer并使用，虽然我们自己并不觉得有多大的难度，但对于新人来说可是个大门槛，在他们的角度上看，Json是比Proto Buffer更适合。&lt;/p&gt;

&lt;p&gt;上面是我们在编写和创作地图编辑器中对数据部分的了解，接下来我们来看看地图数据对整个游戏的作用。&lt;/p&gt;

&lt;h3&gt;地图编辑器所带来的加载方式的改变&lt;/h3&gt;

&lt;p&gt;我们说地图编辑器主要的作用是将场景地图的编辑功能和地图数据再利用功能结合起来，让可视化的地图编辑器更多的帮助策划设计者或者场景美术人员编辑他们觉得更好看，更舒适，更绚丽的场景地图，并且这些编辑完的场景能随时保存成游戏中需要的数据格式。&lt;/p&gt;

&lt;p&gt;也正因为有了地图数据，我们才能在游戏中正确的还原原本编辑好的地图场景，而且在加载地图时有更明确的目标。&lt;/p&gt;

&lt;p&gt;其中数据到场景的还原是通过加载的方式进行的，这里我们不得不说一下地图的加载形式。地图加载的形式有三种，我们可以选择一次性加载全部地图（即阻塞式的加载所有地图元素），也可以选择流式的动态加载，也可以选择按需分批加载地图中的元素模型。&lt;/p&gt;

&lt;p&gt;一次性加载显然是最容易和方便的，只要把所有数据读取进来，针对每个元素的数据，加载它所指定的模型或效果到指定的位置，并设置旋转和缩放，再对挂上对应的脚本如果需要的话。&lt;/p&gt;

&lt;p&gt;一次性加载这么容易和方便，我们有时可以完全不需要地图编辑器，一个prefab搞定整个场景。这样说来话为什么还需要地图编辑器？&lt;/p&gt;

&lt;p&gt;随着功能和需要的扩大，当游戏开始时，很多物件并不需要加载到场景中，而是根据个人玩家的游戏进度来判断是否需要加载。这时如果还是按一个prefab搞定一个场景，一下子把所有物件都加载进来，内存势必浪费很多，这是我们不希望看到的。在一次性加载地图的方式中，地图编辑器就能帮助我们根据需要加载物件，帮助我们节省不必要的开销。&lt;/p&gt;

&lt;p&gt;然后，游戏越做越大，场景不断扩大，场景中物体的种类和数量越来越多，一次性加载需要消耗的CPU和时间也越来越大。原本只要加载几个面片当做地形的prefab，发展成了带有众多山，路，草，石头，路，桥，人，房子等的一整个大场景。这时，即使是按需加载也可能会在加载整个场景的阻塞中卡住很长时间，体验越来越差。流式加载就在这时体现了更加好的体验。&lt;/p&gt;

&lt;p&gt;根据地图编辑器的数据，进行流式的动态加载，让人能有逐步出现的视觉体验，而不是画面卡住的糟糕体验。这里不深入扩展开去说明如何使用Unity3D的API做流式加载，而是将这些内容放“资源加载的多种方式”的章节中进行讲解。&lt;/p&gt;

&lt;p&gt;流式加载缓解了瞬间的CPU消耗，把CPU消耗按时间平摊开来了，所以画面看起来不那么硬板。但是还不够，RPG的大世界中少有切换场景的时候，大都是整个地图无缝连接，这样才能体会到真实世界无缝的行走和旅行的体验。随着地图的继续扩大，整个世界都被容纳进了地图，我们不可能把整个世界都加载进内存里，因此分块分批加载成了最迫切的需求。&lt;/p&gt;

&lt;p&gt;分批和分块的方法其实很多，比如可以用距离来判断加载和卸载的内容，这里我们介绍一个比较常用的方法，即九宫格分块加载方式。&lt;/p&gt;

&lt;p&gt;我们可以把一整个世界横竖切N和M刀，这样就有了分成 (N+1) * (M+1) 个块，每个块之间的地形也是被拆分开来的，因此可以说每块都是独立的，完全可以被独立加载或独立卸载。&lt;/p&gt;

&lt;p&gt;在游戏场景中，其实我们只能看到一部分的画面，即周围的800-1200米范围内的画面，越远的地形和风景意义越来越少，因此当前在所的分割块，加上周围的八个分割块足以能展示我们需要的画面，即九块的地图内容足以成为我们展示的画面内容。即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [-][-][-][-][-][-][-]
    [-][-][-][-][-][-][-]
    [-][-][2][2][2][-][-]
    [-][-][2][1][2][-][-]
    [-][-][2][2][2][-][-]
    [-][-][-][-][-][-][-]
    [-][-][-][-][-][-][-]
    [-][-][-][-][-][-][-]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中1为角色所在的地图块，2位周围8块已经被加载进来的地图内容。&lt;/p&gt;

&lt;p&gt;我们的角色不断向前行进，穿越了我们当前的地图块的边界，进入了另一个地图块，这时九块内容发生了变化，以我们角色为中心点的地图块周围的八块与原先我们所在的八块内容发生了变化。我们需要加载周围八块内容中，没有被加载进来的那三块内容，即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [-][-][-][-][-][-][-]
    [-][-][-][-][-][-][-]
    [-][3][2][2][2][-][-]
    [-][3][1][1][2][-][-]
    [-][3][2][2][2][-][-]
    [-][-][-][-][-][-][-]
    [-][-][-][-][-][-][-]
    [-][-][-][-][-][-][-]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中1为角色所在块，向前进了1块，原来所在的地块不再是角色的中心块了，转移到了新的地图块，那么周围的8块地图的也发生了变化。&lt;/p&gt;

&lt;p&gt;我们必须加载新的地图块，来确保我们展示的内容是完整的，即标记为3的内容块，并且我们还需要卸载被废弃的三块内容，即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [-][-][-][-][-][-][-]
    [-][-][-][-][-][-][-]
    [-][3][3][3][2][-][-]
    [-][3][1][3][2][-][-]
    [-][3][3][3][2][-][-]
    [-][-][-][-][-][-][-]
    [-][-][-][-][-][-][-]
    [-][-][-][-][-][-][-]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中标记为2的内容块是被废弃的内容块，是需要我们卸载的内容块，卸载不必要的内存贴图，模型等数据。&lt;/p&gt;

&lt;p&gt;根据九宫格的加载和卸载规则，角色不断前进或后退，不同方向上的前进或者后退，不断的跨越不同区块的内容，地图模块不断的加载需要的地图内容块并卸载不需要的内容块，角色能始终看到完整的地图内容，而不需要大量的内存支持，因为我们在不断的卸载那些不需要的地图块。&lt;/p&gt;

&lt;p&gt;当然，我们可以把它划分的更细致一些，将地图分的更细，然后再采用25宫格，49宫格等等，在玩家不断行走的同时，加载那些进入范围内的地图模型，而舍弃那些离开我们的地图方块。&lt;/p&gt;

&lt;p&gt;我们也可以将一次性加载和流式加载结合使用，在加载地图块时，把最关键部分一次性阻塞式的加载，比如地形和碰撞体，而其他的物件则用流式加载方式，使得加载不会瞬间消耗大量CPU，平滑的过度到加载完整个场景，所带来的游戏体验将是绝佳的。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第十章，地图与寻路(二) 寻路网格的构建</title>
   <link href="http://www.luzexi.com/2019/07/26/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E5%9C%B0%E5%9B%BE%E4%B8%8E%E5%AF%BB%E8%B7%AF2.html"/>
   <updated>2019-07-26T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/07/26/Unity3D高级编程之进阶主程-地图与寻路2</id>
   <content type="html">&lt;h3&gt;寻路网格构建&lt;/h3&gt;

&lt;p&gt;上一节我们了解了A星寻路的算法及其优化，A星寻路只是算法，需要配套的模块和工具链支撑，单独的一个A星无法运作因为它只是一个算法。&lt;/p&gt;

&lt;p&gt;需要什么样的模块和工具链呢，我们这节就来讲一讲，最重要的配套模块‘寻路网格构建’。除了网格构建外，还有动态障碍物，以及地图和地形的构建，最后再配上A星寻路，才形成最终的地图和寻路。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h6&gt;1.用二维数组构建虚拟的方形网格&lt;/h6&gt;

&lt;p&gt;最最简单的也是最最易于理解的网格构建方式要属二维数组网格，它是一个二维数组，每个元素就代表一个方格，方格中数字0代表无障碍，1代表有障碍，或者也可以是数字1代表障碍难度为1，比1大的数字代表更高的障碍难度，数字越大障碍难度越大，到达某个数字比如999，则认为该障碍难度完全无法跨越。&lt;/p&gt;

&lt;p&gt;举个二维网格的例子：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [0][0][0][0][0][0]
    [1][1][0][0][1][1]
    [1][1][0][1][1][1]
    [0][1][0][0][1][1]
    [0][0][0][1][1][1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是一个 5 * 6 的二维数组，0代表无障碍，1代表有障碍。我们很清晰的看到这张地图中有哪些是障碍点，在这张地图中，我们从任意一个无障碍点出发都能到达任意一个无障碍点，因为所有的0都是联通的。&lt;/p&gt;

&lt;p&gt;用二维数组代表地图是比较抽象的，那么怎么和地图匹配，怎么与地图真正的关联起来呢？&lt;/p&gt;

&lt;p&gt;我们在脑海中需要把地图也切成 5 * 6 这样30块地，比如这个张地图总共大小为 50米 * 60米 的大小，假如左下角为[0,0]位置，我们从0，0点开始，10，10点到0，0点为一个方块与[0,0]这个点关联，坐标10，10到坐标20，20为一个方块与[1,1]这个点关联，0，10点开始，10，20点到0，10点的方块与[0,1]这个点关联，依次类推。&lt;/p&gt;

&lt;p&gt;每个在地图上的10 * 10大小的一个块正方形的区域，都与数组关联。这样我们在用A星寻路在数组中寻路后的结果都可以一一对应到地图上。&lt;/p&gt;

&lt;p&gt;比如，我们寻路到从[0,0]点开始，到[1,4]点的路径为，[0,0]-&amp;gt;[1,0]-&amp;gt;[2,0]-&amp;gt;[2,1]-&amp;gt;[2,2]-&amp;gt;[2,3]-&amp;gt;[2,4]-&amp;gt;[1,4]，反应到地图上时，是0，0点开始移动，先移动到第一个方块也就是(0,0)到(10,10)这个方块的中点，也就是坐标(5,5)的点位上，再移动到(10,0)与(20，10)这个方块区域的中点上，即(15,5)坐标点位上，再移动到(20,0)与(30,10)这个方块区域的中点上，即(25,5)坐标点位上，依次类推，直到移动到最后一个点位，即(10,40)与(20,50)这个方块区域的中点上，即(15,45)这个坐标上，到达终点。&lt;/p&gt;

&lt;p&gt;因此A星寻路结束后，给出了[0,0]-&amp;gt;[1,0]-&amp;gt;[2,0]-&amp;gt;[2,1]-&amp;gt;[2,2]-&amp;gt;[2,3]-&amp;gt;[2,4]-&amp;gt;[1,4]，即数组上的坐标路径，在实际地图中则移动的路径为(5,5)-&amp;gt;(15,5)-&amp;gt;(25,5)-&amp;gt;(25,15)-&amp;gt;(25,25)-&amp;gt;(25,35)-&amp;gt;(25,45)-&amp;gt;(15,45)的坐标点位顺序。&lt;/p&gt;

&lt;p&gt;相当于把整个地图想象成一个矩形，把矩形横切N刀，竖切N刀，成了一个与二维数组匹配的方块地图，每个方块与数组中的一个元素相关联，当我们使用A星算法从数组中算出一个具体的路径时，可以根据这个数组中的路径，来匹配地图上的点位，即方块的中点。&lt;/p&gt;

&lt;p&gt;如果这个地图很大，但数组的大小很小，就无法实现细腻的碰撞体，所以我们需要在内存占用量与地图寻路细节之间权衡，即多大的数组与当前的地图才能匹配的更好，数组不能过大，因为过大的数组会造成内存的浪费，又不能过小，因为过小的数组使得地图的障碍细节无法得到完美的体现。所以我们在决定数组多少的时候，需要考虑的是整个地图的大小，以及最小障碍物为多大，来决策究竟需要用多大的数组。&lt;/p&gt;

&lt;p&gt;这些切割与关联都是由我们的脑袋想象出来的，过于抽象，毕竟我们在做游戏项目的时候，抽象的东西如果无法可视化的话，就会变得难以运用，至少是难以灵活的编辑和扩展。&lt;/p&gt;

&lt;p&gt;那么如何将这个抽象的方块可视化呢，最简单的方法就是用Excel方式，建立一个Excel，在Excel表中填入一个与数组相等大小的矩形方格块，在方格内填入颜色与数字，绿色代表可行区域，并填入0，红色代表不可行区域，并填入1。这样在Excel内就可以设置地图的障碍物，以及障碍物的大小，一眼就能知道，因为那些标记为红色的方格是障碍物，那里是不可通行的，那些标记绿色的地方为空地，那地方是可通行的，整个地图下来哪些地方不可通行，哪些地方可通行，一目了然。最后我们把这个Excel里的数据导出到文件，再在游戏开始时读取文件中的数据，得到地图的二维数组的障碍数据。&lt;/p&gt;

&lt;p&gt;除了Excel，我们还可以使用UnityEditor UI编写的地图编辑窗口，把地图大小，方格大小，障碍物等以可视化的形式放在 UnityEditor UI编辑窗口中，并编写保存数据到文件，和从文件读取地图数据的功能和按钮，这样一个地图编辑窗口就能更形象的体现地图的元素。&lt;/p&gt;

&lt;p&gt;如果这种可视化还不够，就得在具体的3D场景中的地图上做文章，把具体的整个地图加载并渲染在画面上，然后在地图上用颜色方块的方式画出不同颜色的块状，以具体地图为背景，来编辑地图障碍还是可通行块。当然这也带来更加多的编写和维护工作，但也同时是非常值得的可视化网格编辑器。&lt;/p&gt;

&lt;p&gt;如果嫌做一个地图编辑器作为可视化太麻烦，也可以用类似地形贴图的形式来做为可行走点的依据。用一整张1024 * 1024图代表一整个地形的大小，或者也可以为 2048 * 256等不同需求规格的大小，每个像素点代表二维数组的一个元素，比如白色为可行走区域，黑色为不可行走区域，那么这张图就可以压缩成只有R通道的8比特的图，图片像素中0就是黑色，1就是白色，或者加入更多元素2就是泥潭，3就是沼泽等等，这样就可以用图片代替了Excel的数据。当需要加载二维数组作为可行走数据时，则加载该图片读取像素中的每个元素录入到内存中，然后就可以依据内存中的二维数组来判定是否是可行走区域，以及相邻的格子是否是障碍物的判断。&lt;/p&gt;

&lt;p&gt;由于一维数组在分配内存块时的紧凑度往往比二维数组要来的好，用一维数组来读取索引中的数值会更加的快，因此我们常常使用一维数组来代替二维数组，在调用索引时也只是多了一个简单的乘法和加法的操作，即 二维数组 [a, b] 等于 一维数组 [a * width + b]，这样一来只是消耗很小的CPU就能在一维数组中索引到数值，而不再需要内存地址的跳转。&lt;/p&gt;

&lt;h3&gt;2.用路点系统构建寻路路线图&lt;/h3&gt;

&lt;p&gt;用二维数组的方式来构建寻路的基础数据有一定的局限性。当场景特别大，我们就要存储特别大的一个数组，编辑场景的工作量也有所提高，如果一个2048 * 2048 的数组的场景，我们要把所有的障碍点都设置一遍工作量比较大。&lt;/p&gt;

&lt;p&gt;除了数组太大和需要编辑的工作量扩大外，二维数组下的寻路路径最多是8方向的，上，下，左，右，左上，左下，右上，右下，寻路后的行走时会比较不真实，感觉是直来直去行走方向，要么90度方向行走，要么180度方向行走，要么45度方向行走，没有其他角度的行走姿势，让人感觉不真实，在像素游戏上还感觉不出什么来，但在3D地形中则会感觉明显的怪异。&lt;/p&gt;

&lt;p&gt;路点系统弥补了一些二维数组形式的缺点。路点系统也是一个易于理解的系统，它由很多个点构成，这些点我们称它们为路点，即路上的点，这些路点需要我们手动在地图上放进去，每个路点中都存储了坐标，ID，以及与哪些路点相连的数据。&lt;/p&gt;

&lt;p&gt;我们在地图中，放入了很多个路点，并且为这些路点配置了连线，于是就有了这幅画面：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;地图中每个路点都会有与其他某些路点相连接的线，我们可以称它们为路线，由路点与路点之间连线而成。&lt;/p&gt;

&lt;p&gt;如果把地图里的路点和路线铺设的更加复杂一点时，所有的点和线都拼成了一张网：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这张网中，只要我们得到某个点，就能根据这些路点和路线，用A星的算法来寻路到目的地。即，起点为，与起点最近的路点，寻路到，与终点最近的路点，的一条路径。如图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;路点系统很容易理解，但也需要一些可视化的编辑器的支撑，因为所有的路点都需要在既有的地图上编辑，所以编写一个专门的地图编辑器是必不可少的，没有地图编辑器至少也需要路点编辑器，可保存路点数据到文件，和从文件加载路点数据，以及增加路点，减少路点，添加和减少路点连接信息。&lt;/p&gt;

&lt;p&gt;路点系统的缺点也是比较严重的，它任然需要大量的工作量来编辑可寻路的路点信息与连线。另外，它的寻路方式无法识别碰撞而只能用路点的形式来绕过障碍。&lt;/p&gt;

&lt;p&gt;当在大块空地上做寻路时，需要在这个大块空地上手动添加很多的路点，才能平滑的适应各种寻路，虽然没什么难度，但对人来说重复的工作量比较大。&lt;/p&gt;

&lt;h3&gt;3.平面三角形网格的构建 -- Navigation Mesh&lt;/h3&gt;

&lt;p&gt;路点系统虽然直观，门槛低，上手简单，而且一般情况下路点的数量相对比其他方式的网格少很多，因此内存消耗和CPU消耗都比较少。但是人工手动的重复工作量比较大，更糟糕的是它无法识别障碍区域，行走的路线也依赖路点之间的连线。&lt;/p&gt;

&lt;p&gt;三角形网格就很好的解决了路点系统的缺陷，三角形网格是用生成算法自动生成的网格，无需手动编辑，而且还能识别障碍区域。&lt;/p&gt;

&lt;p&gt;Navmesh(即 Navigation mesh)是最耳熟能详的寻路解决方案，其实质是三角形网格生成算法 + 多边形之间的合并与裁切算法 + 寻路算法（A星算法 或 射线算法），这个解决方案在2D和3D游戏上的都得到了普遍使用。&lt;/p&gt;

&lt;p&gt;尽管Unity3D提供了内置的Navmesh寻路插件，以及Unity3D的Asset Store里也提供了众多的类似的不同种类的插件，但如果我们只是停留在插件使用的表层上，无法更深入理解到原理与底层的算法，那么我们在决策和定制寻路解决方案时仍然将始终无法得心应手，当遇到难题或瓶颈时也无法得到彻底有效的解决。&lt;/p&gt;

&lt;p&gt;三角形网格是怎么生成的呢，这个问题在计算机图形学里叫做 “平面多边形的三角剖分问题”，意思是说“怎么将一个平面多边形分解为由许多三角形组成的多边形”。&lt;/p&gt;

&lt;p&gt;平面多边形的三角形剖分问题是计算几何研究的一个基本问题，它广泛应用于模式识别、图像处理、计算机图形学以及机器人领域。一方面，三角形作为最简单的平面图形，较其他平面图形在计算机表示、分析及处理时方便得多；另一方面，三角剖分是研究其他许多问题的前提。&lt;/p&gt;

&lt;p&gt;其中Delaunay三角剖分算法是一种三角剖分的标准，实现它有多种算法。这些算法都是基于已经拥有多个点位的数据之上来建立一个三角形网格的。&lt;/p&gt;

&lt;p&gt;Delaunay三角剖分有其特点，剖分后的多边形里的三角形必须满足：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1.除了端点，三角形的边不包含其他任何点。

    2.除了在点上的连接，没有任何一条边是相交的。

    3.所有的面都是三角形，且所有三角形的合集是所有点集合的凸包。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一、二点很好理解，要求三角形的边上没有任何其他点，以及没有任何一条边有中间斩断式的相交情况，但最后一点说的是凸包，说明Delaunay三角剖分算法只适用于凸包形式的三角剖分。但实际情况时，凹形区域占到了大量的面积和数量。&lt;/p&gt;

&lt;p&gt;实际中我们需要的不只是凸多边形和凹多边形的三角形剖分，也需要考虑凹凸多边形中含有‘洞’(即不规则多边形阻挡物)的情况，甚至还有更复杂的‘洞’中有孤岛的情况，因此单单是凸多边形的三角形剖分不能满足我们实际的需求。&lt;/p&gt;

&lt;p&gt;2002年 David Eberly 在《Triangulation by Ear Clipping》论文中提出了用切耳法构建简单多边形的三角化。&lt;/p&gt;

&lt;h6&gt;什么是简单多边形呢，简单多边形是，所有顶点都是顺时针或者逆时针排列的顶点，每个顶点只连接两条边，边与边之间没有交叉的多边形，就叫做简单多边形。&lt;/h6&gt;

&lt;h3&gt;切耳算法&lt;/h3&gt;

&lt;p&gt;Ear Clipping 切耳算法是一个简单实用的三角形分割算法，其步骤可以简单的分为三步：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    在解释三步骤之前，我们先解释下几个名词的意思。

    1.耳点，耳点的意思是，多边形中相邻的三个顶点V0,V1,V2形成的三角形里，不包含任何的其他顶点，并且如果V1点是凸点，即V0-V1的连线与V1-V2的连线之间形成的夹角小于180度，则认为V1是耳点。所以一个由4个顶点组成的多边形中，至少有2个耳点。

    2.耳朵三角形，三角形顶点中有耳点的就叫耳朵三角形。

    第一，找到一个耳点。

    第二，记录这个耳朵三角形，然后去掉这个耳朵点，在剩余的顶点中，继续回到第一步

    第三，直到剩下最后3个点形成一个三角形并记录下来，把所有记录的三角形拼接起来就形成了三角化网格。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经过这三个步骤的计算，所有的耳点都被切掉后，再把所有记录的三角形拼装成三角形网格，就完成了整个三角形剖分步骤。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;多边形含‘洞’的情况&lt;/h6&gt;

&lt;p&gt;除了普通的简单多边形(包括凹凸多边形)的三角剖分外，如果简单多边形中有‘洞’的情况怎么办。论文中也给出了解决方案，即，依旧使用上述三步骤来做三角形剖分，只是剖分之前定把‘洞’并入外围的简单多边形，即：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1，用外围的简单多边形上的点，连接‘洞’的简单多边形，因此为了保持所有点的一致性，‘洞’必须是与外围的多边形的点的顺序是相反的。即外围如果是逆时针的顺序，‘洞’则需要顺时针的顺序。

    2，在连接处，产生两个一模一样的点，即连接点。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用这种方式来将‘洞’并入成为一个单独的简单多边形，如果有多个洞，则先并入的洞为，拥有x轴方向最大的点的‘洞’，依次并入。&lt;/p&gt;

&lt;p&gt;也就是说，最终计算的还是一个单独的简单多边形，只是在计算之前，将‘洞’以凹形形态并入最外围的简单多边形。&lt;/p&gt;

&lt;p&gt;我们以图为例，可以看的更加清楚一点：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中展示了，如何将一个‘洞’以凹形形态的方式并入外围简单多边形的，就如同从外围简单多边形上，修了一条小小的通路到‘洞’中那样，其实我们完全可以理解为，下图那样：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图中从外围简单多边形的点上延伸出一条路径来连接‘洞’，使得‘洞’的空白与外围的空白联通，就像贴膜里的气泡开了个口把空气放出去了那样。&lt;/p&gt;

&lt;p&gt;如果’洞‘并不是完全包含在外围简单多边形下，有可能是一半在外面，一半在里面，这时只要做多边形裁剪就可以了，将原来外围的简单多边形根据这个’洞‘裁剪成一个凹形，就与’洞‘彻底分离开来了，形成了新的简单多边形。&lt;/p&gt;

&lt;h6&gt;‘洞’中的’岛‘&lt;/h6&gt;

&lt;p&gt;除了有’洞‘，以及’洞‘包含在里面和’洞‘一半在里面一半在外面的情况，还有种情况是‘洞’中有’岛‘。这个‘岛’就像是湖中的‘孤岛’，虽然它也是需要三角剖分，但与外界是无法取得连接的，也就没有与最外围的简单多边形连接的需求。&lt;/p&gt;

&lt;p&gt;因此’洞‘中有’岛‘，这个’岛‘就相当于另一个独立的简单多边形范围，可以另外单独拎出来，自己计算自己的三角化部分。&lt;/p&gt;

&lt;h6&gt;到此，这样就形成了一整个算法，即，如果有‘洞’则先合并‘洞’，如果有岛，则拎出来作为与外围的简单多边形同级别的简单多边形自行计算。所有三角化的计算过程可简单描述为，找耳朵，去耳朵，记录耳朵三角形，最后得到了所有三角形，这四个步骤。&lt;/h6&gt;

&lt;p&gt;应用到实际项目中，最外层的简单多边形，就是我们在地图中定义的可行走的多边形范围。而‘洞’则是地图上的那些静态的障碍区域，而‘洞’中的‘岛’，则是不可行走范围内的可行走的‘孤岛’。&lt;/p&gt;

&lt;p&gt;实际项目中，构建三角寻路网格，我们首先需要找出这个最外围的简单多边形，以及孤岛，再根据切耳算法来构建三角形网格。因此我们需要根据地形来生成相应的可行走三角形网格，通过读取地图中的可行走区域的Mesh，以及读取障碍物Mesh，将它们的竖直方向y轴的值忽略后，再通过多边形合并算法来合并成为最外层的多边形，操作还包括裁切‘洞’一半在里面的情况，最后可以得到需要三角化的简单多边形，以及‘洞’的数据。最后将这些数据用切耳算法得到一个具体的三角网格。&lt;/p&gt;

&lt;h3&gt;4.拥有高度的3D三角形网格构建&lt;/h3&gt;

&lt;p&gt;前面讲了2D平面上的寻路网格构建，在实际项目中大部分时候，2D平面上的寻路就已经够用了，即使是有起伏的地面寻路，也可以用 2D寻路 + y轴射线碰撞的形式 获得位置坐标，在服务器端保存和运算的数据为2D平面数据，在客户端上展示时则加入了y轴碰撞后的数据，这样即满足了寻路的需求，也满足了高低起伏的地形。&lt;/p&gt;

&lt;p&gt;现实项目中有一种解决方案可以用多层级的2D网格做3D寻路的，这是种古老的做法，曾在PC端的RPG网络游戏中非常流行，但在现代的网络游戏中，相对比较少见，因为现代高度网格构建算法有比较成熟和方便的解决方案，但这种多层级2D网格代替3D网格的做法任然有比较好的借鉴的意义。&lt;/p&gt;

&lt;p&gt;我们暂且称它为‘分层平面寻路网格’，‘分层平面寻路网格’需要把所有可行走的区域分成多个层级，第一层与第二层之间可以有多个连接层，第二层与第三层之间也可以有多个连接点，这就像我们在一个多层的有楼梯的古堡中，古堡很高有4层楼这么高，每一层都用楼梯连接着，这个楼梯就是连接层与层之间的中间层。&lt;/p&gt;

&lt;p&gt;我们任然使用2D三角形网格构建法构建每一层的可行走区域，用这种方法我们假设构建出7层网格数据，第一层是地面三角形网格数据，Layout层级我们可以标记为1，第二层是1楼与2楼连接的楼梯层可行走区域的平面三角形网格数据，标记为2，第三层为古堡2楼的可行走三角形网格数据，标记为3，第4层为2楼与3楼连接处的楼梯的平面三角形网格数据，标记为4，依次类推，每一层包括楼梯层都有自己的可行走的平面三角形网格数据。&lt;/p&gt;

&lt;p&gt;这7层网格数据都是独立的，每一层自己走自己的路时都不需要依靠其他层的数据来寻路。但是，如果只是独立计算各自层级中的网格数据，是无法跨越层级去其他层级的，就比如我们从大厅一楼要去楼梯上看看，或者上到二楼去看看，或者去三楼四楼。&lt;/p&gt;

&lt;p&gt;在‘分层平面寻路网格’中，当要跨越层级寻路时，首先必须确定的是‘我’在哪一层，目的地是哪个层级，出发点是哪个层级，按次序一层层往上走或者往下走。&lt;/p&gt;

&lt;p&gt;比如我们去的目的地是二楼，所在的起点是大厅的一楼，那么我们就必须由标记为1的地面层级，先到标记为2的楼梯层级，最后到达标记为3的二层楼，到达标记为3的层级也就是所谓的二楼后，再根据二楼的三角形网格数据进行寻路到达目的地。&lt;/p&gt;

&lt;p&gt;每一层都有自己独立的数据网格，跨越层级的寻路就需要层与层之间的连接点或连接信息，比如第一层的某几个三角形与第二层是连接的，或者也可以是某个点的范围内，只要进入这个三角形或者圆圈的范围，就认为我们上升了一层，或者下降了一层，我们身上标记的自己所处的层级也变化了，用到的寻路网格数据也变成了当前层的数据。&lt;/p&gt;

&lt;p&gt;因此只要我们移动到该区域内，就认为我们进入了第二层级，于是就可以开始了第二层级的网格寻路，再从第二层级移动到与第三层级相交的区域，就等于我们进入到了第三层级，最后在第三层级的网格数据上寻路，直达目的地。&lt;/p&gt;

&lt;p&gt;下楼也是同样的道理，在每一层中都有那么一个范围是可以通往下一个层级的，只要到达这个范围以内就认为是进入了下一个层级，于是就可以在下一个层级的网格数据中寻路。所以每次跨层级寻路时，都要先寻找上楼，或下楼的那个点，先从当前层级到达那个点上下楼的点，再从该点到达其他地方，有点像瞬移，到了某个点上时，瞬移到了另外一层网格上，只是坐标不变，层级的信息和网格数据变了。&lt;/p&gt;

&lt;p&gt;这种伪3D高度寻路解决方案其实也挺好用的，只是现在知道的人稍微少了点，大家都是要么2D寻路网格够用了，要么就直接 RecastNavigation Navmesh 这种第三方解决方案，少有人对这种中间态的技术感兴趣，但是这种中间态的技术并不是没用，相反它在很多情况下能表现出很高的效率。&lt;/p&gt;

&lt;p&gt;RecastNavigation Navmesh 解决方案在各大引擎上非常流行，虽然各自都对其本身做了相应的修改，但核心算法是不变的。&lt;/p&gt;

&lt;p&gt;在Unreal，Unity3D上也同样应用了 RecastNavigation Navmesh，下一节我们会专门讲一讲这个 RecastNavigation Navmesh 中的核心算法，因为它的内容比较多，所以我打算专门用了一节的内容来剖析它，让大家能深刻理解它的原理。&lt;/p&gt;

&lt;h3&gt;5.三角形网格中的A星寻路&lt;/h3&gt;

&lt;p&gt;网格构建完毕了，那么就要派A星上场了。怎样才能让A星与网格数据结合呢。前面一节讲了A星的具体方法，这节就不再具体讲方法了，而是从应用的角度来看待A星的特点。&lt;/p&gt;

&lt;p&gt;A星的特点是必须有邻近的节点可获取，并且邻近的节点与目的地是可以有距离比较的。&lt;/p&gt;

&lt;p&gt;在这种特点的情况下，二维数组下的A星寻路很好理解，邻近节点就是周围的4个点或者8个点，并且与目的地的距离可以直接用方块之间的距离来计算。&lt;/p&gt;

&lt;p&gt;在路点系统中，也有邻近节点，它的邻近节点就是与该节点有线条连接的点，并且与目的地的距离可以直接用点与点之间的距离计算。&lt;/p&gt;

&lt;p&gt;在平面三角形网格中，要从一个点到另一个点，则可以使用三角形的邻近三角形来计算路径，与目的地之间的距离也可以用点与点之间的距离来计算。&lt;/p&gt;

&lt;p&gt;在‘分层平面寻路网格’中，从一个点到另一个点的寻路，和平面三角形网格差不多的方式，也是用邻近三角形来计算路径，只是在计算过程中还需要根据关注网格的层级，每一层都有自己独立的网格。&lt;/p&gt;

&lt;p&gt;二维数组下，计算出来的路径是这样的，[0,0]-&amp;gt;[1,0]-&amp;gt;[2,0]-&amp;gt;[2,1]-&amp;gt;[2,2]-&amp;gt;[2,3]-&amp;gt;[2,4]-&amp;gt;[1,4]。&lt;/p&gt;

&lt;p&gt;路点系统中，计算出来的路径是这样的，(id=1)-&amp;gt;(id=3)-&amp;gt;(id=6)-&amp;gt;(id=12)-&amp;gt;(id=21)。&lt;/p&gt;

&lt;p&gt;平面三角形网格中，计算出来的路径是这样的，(trangle&lt;em&gt;id=1)-&amp;gt;(trangle&lt;/em&gt;id=4)-&amp;gt;(trangle&lt;em&gt;id=8)-&amp;gt;(trangle&lt;/em&gt;id=13)。&lt;/p&gt;

&lt;p&gt;‘分层平面寻路网格’中，计算出来的路径是这样的，(trangle&lt;em&gt;id=1, layout=1)-&amp;gt;(trangle&lt;/em&gt;id=3, layout=1)-&amp;gt;(trangle&lt;em&gt;id=5, layout=2)-&amp;gt;(trangle&lt;/em&gt;id=8, layout=2)-&amp;gt;(trangle&lt;em&gt;id=1, layout=3)，其中trangle&lt;/em&gt;id为layout层级上的三角形ID。&lt;/p&gt;

&lt;p&gt;在三角形网格寻路后，知道了路径上需要经过哪些三角形，那么问题来了。我们行走的路径是根据点来判断的，三角形怎么定点，三角形的大小不一，有可能是宽形三角形，也有可能是扁长的三角形，如果点位定在中心点，那么行走的时候就会很怪异，每次都要先到达三角形的中点才能去下一个三角形，所以中点与中点的连线可能会很怪异。怎么办？&lt;/p&gt;

&lt;p&gt;折中的办法我们可以考虑用边的中点来记录路径，因为相邻三角形之间的穿越都是靠邻边来穿越的，所以邻边的中点更符合三角形穿越，从ID为1的三角形穿越到ID位2的三角形上时，穿越的是ID 1与ID 2三角形的共同边，这种邻边中点计算出来的路径，有更好更平滑的路径效果。&lt;/p&gt;

&lt;p&gt;不过这种三角形进出领边的中点还是不够靠谱，因为三角大小不一，致使三角形边的进出边也会随着三角形而改变，路径同样看起来曲折怪异。那么有没有一种方法能够更好更平滑的计算出三角形网格的路径呢。&lt;/p&gt;

&lt;p&gt;这里就需要引入一个拐点路径算法来优化寻路后的路径。拐点算法有点像射线，所以也常常被称作为射线优化路径算法。&lt;/p&gt;

&lt;p&gt;拐点算法其实并不复杂：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1.从起始坐标点出发，往与下一个三角形的入口边的两个顶点v1,v2产生两个向量line1、line2，然后再往下一个三角形的入口边的两个顶点v3,v4产生两个向量line3、line4。

    2.通过计算这四个向量的叉乘，可以判定一个向量是在另一个向量的左边或者右边。我们可以计算出v3，v4是否在line1，line2形成的夹角。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里会出现几种情况：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1.下一组边与上一个路径点的向量全部在前一组边的范围内，直接把下一组边的两点替换前一组边的两点。

    2.下一组边的右边点与上一个路径点向量在上一组边的范围内，但左边的点不在范围内，把下一组边的右边点替换前一组边的右边点

    3.下一组边的左边点与上一个路径点向量在上一组边的范围内，但右边的点不在范围内，把下一组边的左边点替换前一组边的左边点

    4.下一组边两个点组成的向量都在上一组边的左边，那么上一组边的左边点成为拐点

    5.下一组边两个点组成的向量都在上一组边的右边，那么上一组边的右边点成为拐点

    6.假如下一组边左边的点和上一组边的左边点重合，则把上一组边的左边点成为拐点

    7.假如下一组边右边的点和上一组边的右边点重合，则把上一组边的右边点成为拐点

    8.当寻路达到最后一个多边形，直接判断终点和上一个路径点的向量是否在上一个边两点的中间，假如不是，再增加一个拐点
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;举例说明：从右边的开始点往左边的结束点寻路&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;line3，line4在line1，line2夹角内，左右都缩进。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;v4在外面，左边缩进。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;v3,v4都在line1 左边，v1成为拐点&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从v1出发继续按上面步骤计算拐点&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    缺少图片5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后到达终点，收集所有拐点，加上起点和终点后就是正条经过优化后的路径节点。这种射线算法或者说拐点算法能将原本在三角形网格寻路后诡异的路径转化为更加平滑的直线路径。&lt;/p&gt;

&lt;h6&gt;下一节将重点来剖析一下Unity3D中嵌入的 RecastNavigation Navmesh 网格构建算法和寻路算法。&lt;/h6&gt;

&lt;p&gt;参考文献：&lt;/p&gt;

&lt;p&gt;《Triangulation by Ear Clipping》David Eberly&lt;/p&gt;

&lt;p&gt;《Delaunay三角剖分的几种算法综述》吴莉莉&lt;/p&gt;

&lt;p&gt;《多边形寻路算法简单介绍》 liweizhaolili&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第六章，网络层(六) - 网络同步解决方案</title>
   <link href="http://www.luzexi.com/2019/07/14/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E7%BD%91%E7%BB%9C%E5%B1%826.html"/>
   <updated>2019-07-14T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/07/14/Unity3D高级编程之进阶主程-网络层6</id>
   <content type="html">&lt;p&gt;当前网络游戏中网络同步方案有三种，即状态同步，预测信息同步，帧同步。三种方式并不是完全互相排斥的，很多时候我们在开发的时候，为了能都让游戏显得更加逼真，会让多种的同步方案一起使用。例如魔兽世界这种开放世界的多人在线RPG游戏，就使用了状态同步和预测信息同步两种方案，绝地求生、和平精英等战地竞技类游戏，也同时使用了状态同步与预测信息同步方案，而传奇世界、热血传奇等传奇类游戏因为不需要预测信息就只使用状态同步，王者荣耀等一批5v5地图类竞技游戏则使用了帧同步方案。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;同步方案的目标是在针对多人游戏中如何用更少的信息同步量来逼真的’模拟‘其他玩家的一举一动，让我们在玩游戏的时候能知道其他人的位置、动作、以及状态。这里有个关键词’模拟‘，我们获取的信息由于网络因素的关系通常都是延后的，如何通过这些延迟的信息来模拟是关键的关键。&lt;/p&gt;

&lt;p&gt;在同步的解决方案中不仅涉及到信息同步还涉及到同步的范围，比如魔兽世界、绝地求生、和平精英、传奇世界、热血传奇，如果他们每次都同步地图上所有玩家的信息，那么同步的数据量太大，不仅客户端承载不了渲染压力和信息通信压力，服务器也同样承受巨大的数据传输压力。因此同步方案对游戏来说只是一个方面的解决方案，除了有同步方案，还需要其他解决方案来支撑和优化同步数据压力才得以实现良好的游戏体验。&lt;/p&gt;

&lt;h3&gt;状态同步&lt;/h3&gt;

&lt;p&gt;为什么要状态同步？如果每帧(每秒30帧)都同步信息，传输的信息量就太大了，而且信息到位也不及时，为了能更逼真的模拟其他玩家的行为，我们把每个人的行为动作都切分成若干个状态。比如站立状态，所有人都一样，站在某个位置不断循环播放某个动画，只要告诉玩家说我在某个位置进入了站立状态，只要状态不变，我们就知道这个玩家就是一直在原地播放站立动画。&lt;/p&gt;

&lt;p&gt;在状态同步里，人身上每个状态就相当于一个固定的行为模式，这个固定行为模式就像个黑盒，只要给到需要的数据，就能表现出固定的行为，比如攻击，就是播放一个攻击动画，并在某个时间点判定攻击效果，攻击完毕后就进入站立状态，比如打坐休息，就是循环播放一个动画，并每隔一个是时间段加一次血量，又比如行走，就是从某点到某点做A星的寻路操作，并边播放行走动画边跟随路线移动到各个路线节点，最终移动到目的地。&lt;/p&gt;

&lt;p&gt;这些状态只要给予需要的固定数据就能展现出相同画面的个体效果。如果我们要让这些状态连贯起来拼凑成一个可操控的人，我们可以向这个人发送各种各样的指令，告诉它你应该触发这状态，应该触发那状态，指令中包含了状态需要的数据。&lt;/p&gt;

&lt;p&gt;在状态同步中，服务器端扮演了幕后操纵木偶人的那个大老板，而客户端里渲染的对象就是那个木偶人，服务器端发出指令说ID为5的木偶人开始攻击，客户端里那个ID为5的木偶人就开始进入攻击状态并且播放攻击动画。&lt;/p&gt;

&lt;p&gt;当动画播放到一半服务器端又发来指令说，被攻击的那个ID的怪兽受伤了并受到500点伤害，这时客户端就会在指定的怪物头上冒出500点的伤害值并且让怪物进入受伤状态播放受伤动画。&lt;/p&gt;

&lt;p&gt;当攻击动画播放完毕时，服务器又发来指令说继续攻击，ID为5的木偶人就又从站立状态切换到了攻击状态，这次攻击到一半服务器发来指令说，这个怪物受到600点伤害并且死了，于是客户端在怪物头上冒出600点伤害的数字并且让怪物进入死亡状态播放死亡动画。木偶人也在播放完攻击动画后，进入了空闲状态播放站立动画。&lt;/p&gt;

&lt;p&gt;服务器扮演着发送指令操控木偶人的角色，这个木偶人也包括玩家自己的角色，即玩家操控着’我‘自己的在游戏中的人物，也同样需要经过服务器的同意，并发送指令给玩家当前的角色进行状态的切换和模拟。&lt;/p&gt;

&lt;p&gt;有时候也未必要一定要经过服务器同意，为了让玩家能够在网络环境糟糕的时候也能够看起来比较顺畅，玩家可以随意操控自己的角色，并不受限于服务器的延迟指令，但是在稍后的服务器校验时再对玩家进行矫正，比如我们玩传奇世界是状态同步，在网络很卡时我们任然能不停的移动，但是过一段时间，服务器把正确的数据发送到客户端后，客户端进行了位置和状态的矫正。&lt;/p&gt;

&lt;p&gt;状态同步的特点是状态是固定的，除非状态改变，否则相同的状态数据得到的是相同的个体状态结果，人物角色实体的行为都是通过状态切换来表现画面。&lt;/p&gt;

&lt;h3&gt;预测信息同步&lt;/h3&gt;

&lt;p&gt;在一些竞技游戏中，人物的行动速度和旋转速度需要不断的变化，要实时更新这些信息，状态同步不能满足这样需求，因为我们速度和旋转的变化太快，我们无法每帧都同步状态信息来模拟。&lt;/p&gt;

&lt;p&gt;但是状态同步依然可以用于除了移动和旋转意外的同步，因为除了移动和旋转，其他信息都没有这样快速、多样的变化，并且它们仍旧遵守原有的规则，完全可以继续用状态来划分，所以状态同步常常与预测信息同步同时存在。&lt;/p&gt;

&lt;p&gt;预测信息同步方案的主要特点是，位置、旋转信息都是由客户端决定的，客户端将自身的位置、旋转信息发给服务器端，再由服务器端分发给其他玩家，当其他玩家收到位置、旋转信息后根据收到的位置和旋转信息预测其当前的位置，速度，加速度，以及旋转角度，旋转速度，旋转加速度并进行模拟和展示。&lt;/p&gt;

&lt;p&gt;在这种竞技性比较强，移动速度比较快的游戏中，通常都需要玩家不停的改变移动速度和旋转角度来体现其控制角色的灵活性。比较常见为枪战类游戏CS，玩家不停在变化自己的移动和旋转的速度以适应战术的需要。或者跑跑卡丁车中，玩家要在高速移动下，不停的调整自己的方向和速度，让自己能够躲过众多障碍，同时在急弯处要旋转自己的车进行漂移等。还有在类似魔兽世界这种开放世界下的RPG游戏，需要不停的改变自己的速度与旋转角度来让战斗显得更加丰富和灵活。&lt;/p&gt;

&lt;p&gt;为了能更加逼真的同步模拟这种变化频率很高的人物移动和旋转，我们不得不让客户端来决定其位置和旋转角度，牺牲一些数据的安全性来让画面模拟的更加流畅。&lt;/p&gt;

&lt;p&gt;每个玩家的客户端会在1秒内发送15-30次左右自身的移动和旋转数据给服务器端，为的就是能更加顺畅的模拟玩家在游戏中的移动旋转的表现，也只有这样，才能让其他客户端不停的更新玩家的位置和旋转信息。&lt;/p&gt;

&lt;p&gt;不过只是单纯的更新位置和旋转数据，会导致玩家在屏幕中不停的闪跳，而用速度的方式表示则更加流畅，所以计算速度和预测速度，以及加速度，让模拟的对象按速度和加速度的形式在屏幕中运动，而不是只更新位置信息，会让角色在画面中模拟行走的位置和方向会更加流畅。&lt;/p&gt;

&lt;p&gt;预测信息同步的算法和公式并不复杂，首先要取已经收到的该玩家的位置信息前5个除以间隔时间，就能得到一个平均的速度，再取这样5个一组的3-5组，就能得到一个平均的加速度，根据这个速度和加速，就能让角色在屏幕中模拟跑动了。&lt;/p&gt;

&lt;p&gt;但方向还不对，没有方向怎么跑都是错的，在角度的同步上也依然可以按照这种速度和加速度的方式去预测，取最近5个角度的值得到平均旋转速度，再取5个一组的3-5组这样的数据计算得到旋转加速度。&lt;/p&gt;

&lt;p&gt;但是还是有偏差，即使预测和模拟了速度和方向，由于数据的量不够多，网络延迟大且不稳定，所以很容易造成位移的偏差，所以定时的矫正比较是必须的。&lt;/p&gt;

&lt;p&gt;矫正可以在生硬的基础上加入一些当前数据的预测，比如每秒矫正一次，每隔1秒重新计算一次从最近收到一个位置上到现在这个时间点的预测位置，如果网络延迟比较小的时候，由于原本预测的位置和矫正的位置是差不多的，所以角色矫正时的抖动现象完全无法用肉眼看出来，但如果网络延迟比较大的时候，矫正的位置和预测的位置就会偏离的比较远，角色看起来总是一闪一闪的不停抖动甚至飞来飞去。&lt;/p&gt;

&lt;p&gt;这也正是为什么我们在玩CF穿越火线，跑跑卡丁车这类游戏时，假如对方的网络比较卡，就会看到对方角色不停的一闪而过，因为预测数据和矫正数据偏离的太多了，客户端在不断的矫正角色的位置和速度。&lt;/p&gt;

&lt;h3&gt;帧同步&lt;/h3&gt;

&lt;p&gt;状态同步既能控制数据计算的安全性，也能保证所有客户端的同步性，不过在位置和角度变化很快的竞技游戏中，状态同步无法承受这样又多又快的位置和旋转变化，所以就加入了预测信息同步的解决方案，这种解决方案放弃了玩家的位置和旋转角度的强校验，使得各个客户端能更加顺利和准确的模拟其他玩家的位置和旋转角度。&lt;/p&gt;

&lt;p&gt;但是更加严格的同步要求下预测信息同步也无能为力，因为每个玩家的手机和电脑端的设备好坏不一样，网络环境也不同，一台好的机子和手机，同一时间段能位移的距离可能也不一样，预测信息同步解决方案无法在差异性巨大的设备和网络通信之间做到精准的同步，也无法保证数据校验的安全性，帧同步解决方案就很好的解决了预测信息同步解决不了的问题。&lt;/p&gt;

&lt;p&gt;在同步性和安全性要求很高的游戏中，例如王者荣耀，拳皇类格斗游戏，游戏中的每一帧都是非常关键的，一两帧都有可能决定胜负，对于这种类型的游戏，同步的要求性高，安全性也有很高的要求，所以帧同步的解决方案正好契合这种类型游戏。&lt;/p&gt;

&lt;p&gt;与状态同步和预测信息同步不同的是，帧同步的逻辑不再由客户端本身的逻辑帧Update来决定，而是转由从网络收到帧数据包来驱动执行逻辑更新，所有逻辑更新都放在了收到帧数据包时的操作中，包括人物角色的移动，攻击，释放技能等，每收到一个服务器发过来的帧数据包，就更新一帧，如果服务器端发过来的帧数据到达的比较慢，就有可能像放慢动作一样，一帧一帧的播放走路，攻击的慢动作动画。&lt;/p&gt;

&lt;p&gt;帧同步的服务器需要向每个客户端每秒发送20-30个帧数据包，每隔0.033-0.05秒发送一个，即使没有任何信息也会发送空的帧数据，因为客户端要根据这些帧数据包来‘演算’游戏逻辑。&lt;/p&gt;

&lt;p&gt;为什么要说‘演算’呢，一个比较容易理解的比喻是原来在客户端的Update里角色每帧移动xx米的逻辑，转移到放在了从网络收到的帧数据包里，每收到一个帧数据包，角色就移动一步，这样使得每台游戏设备在拥有不同的帧率的情况下，执行了相同数量的逻辑帧，也执行了相同时间点的逻辑指令，因为指令时存在帧数据里的，帧数据的执行顺序一致，则指令执行的时间点也是一致的。&lt;/p&gt;

&lt;p&gt;当玩家有操作指令时，把指令发给服务器，服务器在随后下发的帧数据中，某一帧中带有我们上传的指令数据。因此在帧数据里除了有指令数据外，其他时候都是空的。&lt;/p&gt;

&lt;p&gt;随着客户端不断收到网络数据帧，执行到某一帧带有指令数据时，就执行该指令，比如指令数据表示某角色以每帧1米速度向前移动，那么客户端就开始启动移动状态执行该指令，不过不是在客户端自己的Update中执行，而是从网络中每收到一个帧数据就执行一次，比如后面总共收到20帧的网络空数据帧，那么就执行了20次每帧1米的行走状态，直到玩家再次操作，停止移动指令，并把该停止指令发送给服务器，服务器在再以帧数据的形式发送给所有玩家，当玩家收到这个带有停止指令的帧数据时，才停止移动。&lt;/p&gt;

&lt;p&gt;逻辑在网络数据帧中执行，就相当于服务器控制了所有玩家的播放的帧数，让所有玩家收到的帧数据的数量是相同的，那些需要执行的指令在第几个逻辑帧的位置也是相同的，由于执行帧的时间点，和执行的逻辑的次数是相同的，从而使得所有收到帧数据的客户端做出的表现也是相同的，这就是帧同步的基本原理，由服务器发送的帧数据来完成所有客户端的同步执行操作，在每个客户端设备中所使用来‘演算’的算法是一致的，执行的次数一致，执行的指令数据和时间点一致，执行的算法一致，使得执行的结果一致，那么在画面上所表现的出来的也就是一致的。&lt;/p&gt;

&lt;h3&gt;同步快进&lt;/h3&gt;

&lt;p&gt;不过现实是并不是所有客户端的网络都是流畅的，通常的网络环境都是时好时坏的，客户端在收帧数据时，经常都是不平稳的，偶尔一堆帧数据涌过来，或者又忽然完全没有了帧数据。&lt;/p&gt;

&lt;p&gt;所以如何及时同步落后的客户端画面成了客户端解决同步问题的一个关键。&lt;/p&gt;

&lt;p&gt;最简单的方式是我们可以一下子执行全部堆积在队列里的网络帧，这样我们一下子就能到达画面的最后一帧，然后继续等待网路发送过来的数据帧。&lt;/p&gt;

&lt;p&gt;但是这样一次性执行所有的帧的方式，如果堆积的数据帧太多，会导致游戏卡住很久，画面会停止不动而很久，游戏体验比较差。所以我们可以在渲染帧中每次执行N帧(N大于10)来让画面快速推进，这样一来玩家又能看到动态的画面，又能快速的跟上最后的同步帧数据，同步完所有的帧数据后，再把执行速度降下来，继续按每收到一个网络帧来同步画面。&lt;/p&gt;

&lt;p&gt;不过如果落后太多太多，比如落后了几千几万帧的时候，快进的方法也不管用了，因为执行的帧数落后太多，按普通快进的节奏得要快进很久，如果快进得太快则画面卡住的时间太久，体验太差用户无法接受。&lt;/p&gt;

&lt;p&gt;这时就只能用快照方式做同步操作，快照的意思是把某一帧下面的所有数据，包括玩家，怪物，可破坏的障碍等动态物体的数据像照片一样记录下来存储在服务器，当客户端需要时，打包发给客户端，客户端直接使用该快照数据来渲染画面，因为这一帧的快照离最后需要同步的帧数最近，中间可能跨越了几千几万的帧数，所以如果从快照那一帧数据出发，从该帧数据开始快进到最近的数据帧，相对于从头开始快进来说要快的多，也节省了许多网络流量。&lt;/p&gt;

&lt;p&gt;在同步数据帧时会用以上的快进处理方式，但是如果发送的指令过于频繁也会造成网络数据的灾难，比如玩家控制角色不断释放技能或者不停的旋转奔跑，就会导致客户端以渲染帧的速度每帧大量的向服务器发送指令数据像机关枪一样扫射式的发射，这种数据发送量无法承受。&lt;/p&gt;

&lt;p&gt;在不与帧同步冲突的规则下，我们可以选择把需要发送的指令存起来，等到收到一个网络帧时再发送，如果有很多指令则不断替换未发送的指令直到收到网络帧并发送。这也符合多端帧同步的规则，其实是我们限制了每帧只能有一个操作，就像定制了一个两个规则为‘不能在同一帧有多个操作’的规则。这个规则使得，不能在同一帧中既前进又后退，也不能在同一帧中既释放技能又取消技能。这样的话操作指令的数据包也跟随着同步的数据帧规则一起发送。&lt;/p&gt;

&lt;p&gt;但这里又出现问题了，如果等到有网路数据帧时再发送，那么位移类和旋转的指令就不那么灵活了，因为在实际操作中，旋转和位移的变化是非常快的。&lt;/p&gt;

&lt;p&gt;为了解决这个问题，我们可以加大每秒发送网络数据帧的数量，比如每秒到30帧甚至50帧，但这样网络宽带的消耗量又变的很大了，有时候会得不偿失，因此我们需要优化和权衡一下。由于需要向所有客户端每秒广播数据30-50次的数据，所以发送数据的频率非常高，如果每次广播的数据要足够的小，能在一个MTU以下，这样就能有效的降低底层网络的延迟，既加大了逻辑帧的数量，提高了画面渲染的流畅度，增加了操作的灵活性，网络宽带的占用率也没有这么高。&lt;/p&gt;

&lt;h3&gt;精度问题&lt;/h3&gt;

&lt;p&gt;帧同步的核心战斗的演算算法都是在各自设备的客户端中进行的，前面说了所有设备执行的帧数一致，执行的指令和时间点一致，执行的算法一致，就能得出相同的结果。但是这里又出现一个由于不同设备之间的采用不同的算法来计算浮点数的问题，‘精度’。&lt;/p&gt;

&lt;p&gt;浮点数在各不同设备上的计算结果有细微的差异，导致随着计算的增多，差异变得越来越大，虽然执行次数、时间、算法都一致，最终计算出来的结果还是会由于浮点数计算结果不同而导致不同步的问题。&lt;/p&gt;

&lt;p&gt;所以浮点数的精确计算也是帧同步在同步问题上的一大困难，归根结底，是因为把帧同步方案把计算结果交给不同设备而导致的问题。&lt;/p&gt;

&lt;p&gt;其实也并不是什么难题，市面上有很多用浮点数精度问题的解决方案，比如定点数就是其中之一，所谓定点数，就是把小数部分当整数来计算，这样计算起来就不会有误差了。&lt;/p&gt;

&lt;p&gt;通常的浮点数(即有整数部分和小数部分)在计算机中的表示法是 V = (-1)^s x (1.x) x 2^(E-f) 也就是说浮点数的表达其实是模糊的，它用了另一个数的指数来表示当前的数。而定点数则不同，它把整数部分和小数部分拆分开来，都用整数的形式表示，这样计算和表达都使用整数的方式，整数的计算是确定的，这样就不会存在误差，缺点是占用的字节数多了，计算的范围也缩小了。&lt;/p&gt;

&lt;p&gt;用定点数来替换浮点数计算就能保证在各设备上的计算结果一致性，不过直接使用c#自带的decimal定点数在使用时也存在很多问题，比如无法和浮点数随意的互相转换，所以在计算上也会需要进行一定的封装，又比如无法控制末尾小数点，使得精度还是无法根据项目需求来控制，无法控制内存大小，大量使用使得堆栈内存增加。&lt;/p&gt;

&lt;p&gt;因此大部分项目都是自己实现定点数的，把整数和小数拆开来都用整数表示封装在某个类中，再写一些额外的数学库的编写。其实也没那么恐怖的，就是把定点数与其他类型数字的加减乘除重写一下，如果涉及到更多的数学运算，则再建立一个定点数的数学库，存放一些数学运算的函数。&lt;/p&gt;

&lt;p&gt;最最最快速简单，性价比最高的的方式，其实是将所有数字乘以1000，或者10000，再以整数的方式来计算结果，所有需要计算的数字都以这种方式存储，只有显示的时候才除回来回到浮点数，这样即控制了精度的一致性，也不用这么麻烦去实现定点数的封装，而且浮点数还能继续用，因为在大部分帧同步游戏中，200万的数字，甚至20万都已经是足够大了，所以他们无需劳心费神的去封装一个定点数以及定点数数学库，而且这个定点数还无法与表现层有很好的连接。直接乘一下就能达到一样的效果，大大降低了研发成本。不过两者各有优势利弊，不一定说哪种方式一定好或者坏，按照项目的需求做不同的决策是应该的，也是必须的。​&lt;/p&gt;

&lt;p&gt;这里也了解下同步锁的机制。在更加严格的同步类游戏中，比如星际争霸1中，如果有玩家网络环境不好，希望能够等待该玩家的进度，就会使用同步锁的机制。&lt;/p&gt;

&lt;p&gt;同步锁的机制，要求每个客户端每隔一段时间都发送一个锁帧数据，类似‘心跳’数据包，服务器端在帧数据中嵌入心跳包，告诉其他玩家该玩家仍然在线并正常游戏中，如果客户端在接受帧数据时超过50帧没有收到某个玩家的锁帧数据的话则停止播放网络帧数据，等待该玩家跟上大部队后，再所有客户端同时从最近的一次锁帧数据点开始，以该点为最后一数据帧，一起继续各自演算。&lt;/p&gt;

&lt;p&gt;参考文献：&lt;/p&gt;

&lt;p&gt;《漫谈游戏帧同步》作者：布尔君de二次方&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(二十五) 困境中的中产</title>
   <link href="http://www.luzexi.com/2019/07/06/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A825.html"/>
   <updated>2019-07-06T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/07/06/思路探讨25</id>
   <content type="html">&lt;p&gt;还是聊聊关于钱的事吧，人生哲学聊多了也没什么立竿见影的效果，能理解的瞬间就能懂，理解不了也只能等那灵光一现的时候。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;最近股市很动荡，中国经济很动荡，L型的经济走势一直没有走完，还不断得被破坏和骚扰。我猜大部分人都在痛苦得挣扎，社会经济似乎走上了萧条的环境，周遭的环境和人们的积极性越来查差，埋怨的越来越多，人们开始怀疑中国的是否能崛起，其实我也一样，不过我知道未来总是不确定的，无论崛起与否我们自身都需要保持积极和乐观，即使有余钱的少部分人，手里拿着钱也是不知所措的，投哪都是亏惨的结局，所以现在这个环境，没有赢家。&lt;/p&gt;

&lt;p&gt;想尽快突围，只有一条路，打铁还需自身硬，乘着大环境不好，我们有理由不去追逐名利，那就沉下心来多多自我修行，多多学习，多多看书，多多磨炼。&lt;/p&gt;

&lt;p&gt;我为什么要弄明白经济运作规律，就是想在未来的人生道路上走的更有方向性，并不一定说要变富有，但至少能少走点邪魔歪道。&lt;/p&gt;

&lt;p&gt;其实最惨的就是中产阶级了，中产阶级即想往上冲，又背负着最沉重的债务，真的难。&lt;/p&gt;

&lt;p&gt;在经济不景气的时候大部分人都要面临债务危机。由于在经济繁盛的时候人们的心里装的都是怎么赚到更多的钱，而对大量的债务风险视而不见，当萧条和不景气来临时，就发现当前的债务过大，利息过多，原来在经济繁盛时很容易偿还和导手的资金，变得很艰难，因此债务压力变得越来越沉重。一不小心，几代人的血与泪以及奋斗积攒的财富，在一瞬间里全部消散了。&lt;/p&gt;

&lt;p&gt;这也是为什么中产阶级最难的原因，背负的债务与收入严重不匹配。在萧条期，最先倒下的就是中产，最容易倒下的也是中产，最快倒下的是中产。&lt;/p&gt;

&lt;p&gt;什么原因导致中产总是最先倒下，难道是中产的人笨吗？又为什么偏偏是中产阶级呢，就不能是其他层阶级或者富人阶级吗？&lt;/p&gt;

&lt;h6&gt;中产有许多自己的阶级特征，大部分的这些特征都说明了，这个阶级没有自主权，不够灵活。&lt;/h6&gt;

&lt;p&gt;不够灵活体现在这几个方面：&lt;/p&gt;

&lt;h3&gt;1，资产量不大，却大部分集中在单一投资方向上。&lt;/h3&gt;

&lt;p&gt;中产阶级的资产大部分比较集中房产上，与房地产行业捆绑紧密。并且是某一个市的一处房子上。&lt;/p&gt;

&lt;p&gt;或者有的中产买些股票，基本都是把大量资金集中在某只股票上。&lt;/p&gt;

&lt;p&gt;资产的升降直接与某个标的绑定的很牢固。只要这个标的一旦崩溃，就可能直接破产。&lt;/p&gt;

&lt;h3&gt;2，债务量与自身收入不成比例。&lt;/h3&gt;

&lt;p&gt;中产阶级创业的最多，超负荷负债买房的也最多。&lt;/p&gt;

&lt;p&gt;职场并不是所有中产阶级都能呆到退休的地方，这一点大部分人都没有意识到问题的严重性，年级大了想找份工作都是难事，年轻人的竞争力更强更有活力。只有职场上的赢家才能继续呆到退休，赢家很多种，技能上的，情商智商上的，还有运气上的。&lt;/p&gt;

&lt;p&gt;所以大部分中产阶级都需要通过自主创业的形式来获得更加稳固持久的收入来源，但创业哪有这么容易，基本都是赔钱，很多中产选择借钱维持，利滚利，加上，继续入不敷出，就会陷入一个更加大的泥潭，不止财务上出现大的问题，精神上也会出现大的问题。&lt;/p&gt;

&lt;p&gt;所以债务导致的破产，在中产阶级数不胜数。&lt;/p&gt;

&lt;h3&gt;3，财富迁移难度大。&lt;/h3&gt;

&lt;p&gt;中产阶级虽然有财富，但毕竟是不是富有人家，无法轻易的迈过一些高门槛的迁移动作。&lt;/p&gt;

&lt;p&gt;比如从二三线城市，甚至从三四线城市，向一线城市迁移就很难，这些其他线城市的房价卖掉后，在一线城市也很难买到几平米，更不用说由于迁移引发的一系列的家庭和生活的问题，挡住了大部分家庭的决心。&lt;/p&gt;

&lt;p&gt;其实不管从心里和现实的角度看，迁到一线城市这种动作，都是需要付出沉重代价的。沉重的代价背后，是否值得，对于每个不同家庭情况来说，都是不一样的。&lt;/p&gt;

&lt;p&gt;又比如移民到拥有更好的经济环境的国家去，这种大级别的迁向更好环境的动作非常难,门槛也非常高。迁移到比中国环境更加弱的国家去是毫无意义的，因为经常听到有人迁移到东欧，以及西欧部分不发达国家，甚至东南亚地区，根本就是自找苦吃。&lt;/p&gt;

&lt;p&gt;唯有迁到世界第一的美国，才是所有迁移选择中最值得的，迁移到美国的门槛比较高，要么技术很牛逼，要么钱很多，500w以上是正常的迁移及投资费用，对于囊中羞涩的中产来说希望渺茫。&lt;/p&gt;

&lt;h3&gt;4，急功近利的思想居多。&lt;/h3&gt;

&lt;p&gt;严重缺钱的中产，其实比其他各层阶级都缺钱，这种缺钱的氛围时常影响着中产家庭的整个人生，这很容易滋生暴富思想。&lt;/p&gt;

&lt;p&gt;很多中产的人总是希望通过借用杠杆来达到一夜暴富。坚信，深信，只要机会一来，自己就能暴富。&lt;/p&gt;

&lt;p&gt;所以中产也是最好骗的，错的，假的，危险的机会，中产们很容易受其诱惑，一旦试图抓住这些机会，他们总想着暴富，不顾一切的投入，全部资产还不够，甚至还借用杠杆，试图一夜暴富。最终，醒过来时，一切已晚，财富早已化为乌有，消散而去。&lt;/p&gt;

&lt;p&gt;其实不能说中产素质不够，辨识不了真假和风险的高低，因为即使博士毕业在这样一个氛围的圈子里也同样会被蒙蔽了双眼，学历越高的人对自己做出的选择坚信不疑的程度越高。&lt;/p&gt;

&lt;h6&gt;那么中产就没有办法了吗？&lt;/h6&gt;

&lt;h6&gt;这个世界能突出重围的人毕竟是少数，无论在哪个圈子，哪个层级，都是一样一样的，因为人性不变，金字塔就不会变，中产更是普遍持有其特点的人群。&lt;/h6&gt;

&lt;h6&gt;因为能看清经济发展规律并降低财富抬升期望的人毕竟是少数。&lt;/h6&gt;

&lt;h6&gt;能持续不断分散投资，多维度考察和思考投资思路和角度的人毕竟是少数。&lt;/h6&gt;

&lt;h6&gt;能沉下心来，排除杂音，专心做好事情，以及专心做自己的人毕竟是少数。&lt;/h6&gt;

&lt;h6&gt;能推开暴富机会诱惑的，不嫉妒那几十万分之一概率中赢得财富的人毕竟是少数。&lt;/h6&gt;

&lt;h6&gt;能持之以恒，不为外界纷扰所动的人毕竟是少数。&lt;/h6&gt;

&lt;h6&gt;如果我们能做到这些少数人才能做到的，我相信量变造成质变会在多年后发生在我们身上。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(二十六) 我们真的聪明吗</title>
   <link href="http://www.luzexi.com/2019/06/24/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A826.html"/>
   <updated>2019-06-24T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/06/24/思路探讨26</id>
   <content type="html">&lt;h3&gt;更多时候，我们不是败给了外界，而是败给了自己。&lt;/h3&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h6&gt;我们都是认为自己是聪明的人，没有人会认为自己是那个笨蛋。但聪明真的用在了刀口上吗，不是的，更多时候，聪明被用在刀背上，而愚蠢却常常用在刀口上。&lt;/h6&gt;

&lt;p&gt;“骄傲使人落后”这句话一点都没说错，人很容易没有警惕心理，在没有了谨小慎微的态度后，人总是不自觉的陷入当前环境的假想中，认为当前状况是永远可持续的。&lt;/p&gt;

&lt;p&gt;举个例子，在繁荣时期，人人都有工作的时间，社会上到处都是工作，赚钱也很容易，投个股票，买个基金，放贷给个人，投个P2P，坐等收钱就行了。&lt;/p&gt;

&lt;p&gt;人会不自觉的陷入我不缺工作，我很聪明，我很能赚钱，我很厉害的心理状态和自我认识。&lt;/p&gt;

&lt;p&gt;所以在繁荣时期，人们都会觉得自己很聪明，很能赚钱，我们会认为是因为我们的聪明所以工作很容易找到，赚钱很容易，却从来不认为是繁荣的环境造就了我们。&lt;/p&gt;

&lt;h6&gt;但在萧条时期就不同了，我们会很难找到工作，赚钱也很难，亏钱很容易，原来在繁荣时期浪费的时间，浪费的钱，在萧条时期就开始了对我们的大规模的惩罚。这对人自身的打击不是一点点，能彻底醒悟的人还是不多，能冷静下来一步步脚踏实地积累和沉淀的更少，骄傲没有这么容易败下阵来。&lt;/h6&gt;

&lt;p&gt;那么有人说，我在繁荣时期不去凑这个热闹，自己一步步脚踏实地的积累和沉淀，走自己的路，让别人去赚它自己的钱，不就可以了么。&lt;/p&gt;

&lt;p&gt;其实并没有这么容易，还是同样的话，人很难不受当前环境所影响，在大家都大把大把地赚钱，大把大把的挥霍的时候，我们是很难不受他们影响而不去追随他们的，嫉妒心和贪念的放大致使我们无法控制自己，在贪婪的时刻疯狂的去追求一些虚无缥缈的价值。&lt;/p&gt;

&lt;p&gt;其实退一步说，即使我们能忍住不去嫉妒、不去贪婪，我们周围的亲朋好友肯定没有我们这么好的定力，他们可能会不断得劝我们，骚扰我们，甚至指责我们的无能，指责我们在别人都疯狂的享受盛宴的时候我们却让这么大好的机会错过。&lt;/p&gt;

&lt;p&gt;像这样的假象在生活当中其实有很多。我们年轻的时候，会有股很强烈的意识，认为我们的时间和精力会一直像现在这么多，所以我们在年轻时，时常会大把大把的浪费我们的时间和精力在一些根本毫无意义的事情上，而对于那些需要我们沉下心来学习和积累的事情却认为时间很多以后也能去做。&lt;/p&gt;

&lt;p&gt;随着时间的流逝，精力的下降，年龄的增大，量变成了质变，突然会意识到，我们已经不再年轻，已经不再拥有这么多精力，而原本应该学习和积累的才干却一点都没有做到，原来大把大把的消磨时光和浪费的精力，已经一去不复返了。&lt;/p&gt;

&lt;p&gt;对于青春貌美的年轻人也是同样，几乎所有的年轻人都在这个年轻的姿态下，总是会不自觉的认为我会永远这样年轻貌美，进而无节制的用当下的年轻貌美的优势来享受当下的快乐，等过几年发现年轻貌美一去不复返时，却什么都没有留下。&lt;/p&gt;

&lt;h6&gt;就因为我们并没有意识到当下的我们其实是暂时的，我们的聪明和貌美只是环境造就的，而非我们自己本身的努力，所以总是表现出一副傲人的姿态。&lt;/h6&gt;

&lt;p&gt;我们真的聪明吗，确实不笨，但总是聪明反被聪明误。&lt;/p&gt;

&lt;h6&gt;除了在好环境中无法感知自身的不足外，在辛苦的环境也，也会无法感知自身的进步。&lt;/h6&gt;

&lt;p&gt;人总是无法在当前情景中察觉到自己的位置和状态，就像古诗说的，不识庐山真面目，只缘身在此山中。&lt;/p&gt;

&lt;p&gt;我们在辛苦和充实的日子里，经常会感到乏味、枯燥、苦楚，因为辛苦的日子里天天做着重复的事情，天天面对的自己无法克服的障碍，天天面对从来没有面对过的困难，天天跟自己较劲，天天突破自己的极限，以及天天突破自己的三观和认知。而我们却很难察觉这种辛苦和枯燥对我们的帮助有多大。就因为无法察觉导致我们时常想要摆脱辛苦的状态，总想着早早放弃。&lt;/p&gt;

&lt;p&gt;有时候也要冷静下来，细心想想，这些辛苦的日子里，我到底学到了什么，及时的让自己感受到进步。如果能在辛苦的时候察觉到自己的进步，这种及时的良好的反馈，能让自己不受精神的阻扰，勇往直前。&lt;/p&gt;

&lt;h6&gt;苦中作乐，其实是最好的状态，但关键还是我们要能感受到’乐‘的存在，如果感受不到’乐‘而只感受到’苦‘，那么即使是在一个很好的、很难得的环境下，可能我们也很难坚持下去。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第十章，地图与寻路(一) A星算法及优化</title>
   <link href="http://www.luzexi.com/2019/06/22/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E5%9C%B0%E5%9B%BE%E4%B8%8E%E5%AF%BB%E8%B7%AF1.html"/>
   <updated>2019-06-22T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/06/22/Unity3D高级编程之进阶主程-地图与寻路1</id>
   <content type="html">&lt;p&gt;寻路一直是游戏项目中的热门功能，寻路算法用的最多的就是A星算法，其他也有，比如 Dijkstra算法 与 Floyd 算法，但是他们的在时间和空间上的复杂度都太高，Dijkstra算法时间复杂度为O(N^2)，空间复杂度也是O(N^2)，Floyd的时间复杂度更高有O(N^3)，空间复杂度也在O(N^2)，这种复杂度的算法寻路算法如果应用在游戏中稍微大一点的范围、大面积、稍微高一点的频率的寻路需求是CPU是无法承受的。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;A星算法其实并不是最短路径算法，它找到的路径并不是最短的，它的目标首先是能以最快的速度找到通往目的地的路，它的时间复杂度为O(NLogN)，最差的情况是从起点出发把所有的格子都走了一遍，最后才找到目的地。&lt;/p&gt;

&lt;h6&gt;用一句话概括A星：用最贪婪的方法寻找目的地的路径。&lt;/h6&gt;

&lt;p&gt;怎么个贪婪法呢，我们要拿方格来描述A星算法，因为用方格描述A星寻路的方式很容易理解。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;[][][][][]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[][][][][]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][][][]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[][][][][]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[][][][][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上图中s为start起点(3,2)，e为end终点(5,5)。&lt;/p&gt;

&lt;h6&gt;用最贪婪的方法去找目的地：在所有得到的点中，找到与目的地e距离最短的那个，就是离目的地e最接近的，继续用这个点向前探索，直到找到目的地。&lt;/h6&gt;

&lt;h6&gt;简单来说从s点开始取出它周围的4个点，上，下，左，右，计算下它们与终点e的距离，哪个离e的距离最短，就取那个点的周围4个元素继续进行同样的操作，直到找到目的地e。&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;[-][-][-][-][-]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[-][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][-]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[-][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[-][-][-][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上图中，s开始取到周围的4个点标记为1，计算距离，并推入到一个队列，把这个队列按到e点距离值从小到大排序一下，取出离e点距离最短的点，再从该元素周围取出4个元素标记为2，推入到队列，并对它们计算与e的最短距离，再排序一下，取出离e点距离最近的那个标记为3，依次重复这种操作，直到找到e目的地。所有被标记过的都不能再被重复标记。&lt;/p&gt;

&lt;p&gt;我们来看看复杂点的A星寻路例子：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;[-][-][-][-][-]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][+][+][-][-]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[-][+][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][-][-]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[-][+][-][-][-]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[-][-][-][-][-]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从s出发到e，图中‘+’为障碍物，用贪婪的A星寻路会怎么找到e呢，如下图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][-][-][-][-]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][+][+][-][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][+][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][+][+][+][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;1.先取s周围的点标记1&lt;/h6&gt;

&lt;h6&gt;2.取标记里最近的且没被取过的点，即下面这个1点，取它周围点标记为2&lt;/h6&gt;

&lt;h6&gt;3.取标记里最近的且没被取过的点，即点3也可以是上面的1，但我们定个规则一样的距离以下面为标准，取它周围的点标记为点4&lt;/h6&gt;

&lt;h6&gt;4.离e点最近的还是4，继续取它周围的标记为5&lt;/h6&gt;

&lt;h6&gt;5.离e点最近的还是5，继续取周围点标记为6&lt;/h6&gt;

&lt;h6&gt;6.离e点最近的还是6，取它周围的点标记为7&lt;/h6&gt;

&lt;h6&gt;7.离e点最近的还是7，取它最近的点标记为8&lt;/h6&gt;

&lt;h6&gt;8.离e点最近的是8，取它周围的点标记为9&lt;/h6&gt;

&lt;h6&gt;9.离e点最近的是9，取它周围的点标记为10&lt;/h6&gt;

&lt;h6&gt;10.离e点最近的为左边的10，取它周围的点时发现到达目的地e，结束。&lt;/h6&gt;

&lt;p&gt;上述过程明晰的阐述了A星算法贪婪的全过程，即只选择当前的最优选择，因为只关注当前的最优解，就忽视了对全局的最优解，走‘弯路’是常有的事。&lt;/p&gt;

&lt;p&gt;体现在代码上为如下伪代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;        function find_path(s,e)
        {
            open = new list(); //没有被取到过的点
            close = new list(); //已经被取过的点

            open.add(s); //从s点开始

            for(!open.IsEmpty()) //重复遍历直到没有点可以取
            {
                open.sort(); //排序一下

                p = open.pop(); //把最近的点推出来

                if(p == e)
                {
                    //找到终点
                    break;
                }

                p1 = p.left(); //取左边的点
                p2 = p.right(); //取右边的点
                p3 = p.top(); //取上边的点
                p4 = p.down(); //取下边的点

                //是否已经被取过
                if(p1 != null &amp;amp;&amp;amp; p1.IsNotInClose())
                {
                    //加入到没被取过的列表里
                    open.add(p1);
                }

                //是否已经被取过
                if(p2 != null &amp;amp;&amp;amp; p2.IsNotInClose())
                {
                    //加入到没被取过的列表里
                    open.add(p2);
                }

                //是否已经被取过
                if(p3 != null &amp;amp;&amp;amp; p3.IsNotInClose())
                {
                    //加入到没被取过的列表里
                    open.add(p3);
                }

                //是否已经被取过
                if(p4 != null &amp;amp;&amp;amp; p4.IsNotInClose())
                {
                    //加入到没被取过的列表里
                    open.add(p4);
                }

                //p点已经被取过了
                p.setClose(false);
                close.add(p);
            }
        }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述伪代码完整的诠释了A星寻路的全过程。&lt;/p&gt;

&lt;p&gt;当地图很大的时候，或者使用A星算法的寻路频率很高的时候，普通的A星算法就会消耗大量的CPU性能急剧下降，普通的A星性能还是不过关。接下来我们讲讲A星寻路在遇到性能瓶颈时的优化方案。&lt;/p&gt;

&lt;h3&gt;一、长距离导航&lt;/h3&gt;

&lt;p&gt;当距离很大，中间有很多障碍物时，A星的算法就会遇到瓶颈，不断加入的可行走点使得排序速度越来越慢，最后可能造成CPU阻塞无法动弹。&lt;/p&gt;

&lt;p&gt;当寻路距离太大时怎么办？&lt;/p&gt;

&lt;p&gt;其实路径不是非得实时计算出来才好，我们可以把一些常用的路径，在离线下算好放在数据文件中，游戏开启时放在内存里，当需要寻路到那个节点或者那个节点附近时，就可以取出来直接使用，而不再需要计算。&lt;/p&gt;

&lt;p&gt;比如 A到B 我们已经算法路径并存放在了内存里，当我们在A附近，要寻路到B附近时，就可以先寻路到A，再调出A到B的路径，再计算B到目的的路径。&lt;/p&gt;

&lt;p&gt;以这种方式来规避一些计算量特别大，或者计算频率特别高的寻路算法调用，在大型世界的RPG游戏里特别常用。&lt;/p&gt;

&lt;p&gt;另一种方法为制作导航点的方式。什么是导航点呢？就是去目的地的必经的点位。&lt;/p&gt;

&lt;p&gt;比如在一座城市里，有4个出口点，这个4个出口点就可以称为导航点，去目的地的路上肯定会经过这4个点的其中一个，我们在寻路时可以先寻找到最近的一个出口的导航点，当到达导航点后，再次寻找到目的地去的路径，有可能在这条路径上，还有一些导航点，继续寻找最近的导航点，依次类推，直到没有导航点可寻时，则直接寻路到目的地。&lt;/p&gt;

&lt;h3&gt;二、A星的排序算法优化&lt;/h3&gt;

&lt;p&gt;每次插入open列表的点后，open就不再是有序的队列了，所以每次去拿最小值时都需要重新排序。排序的时间消耗随着队列长度的增大而增大，其实有很大一部分A星的性能消耗都在排序上。&lt;/p&gt;

&lt;p&gt;那么是不是可以不排序，其实可以不排序，而使用找到插入位置并插入的方法，让队列永远保持有序状态。&lt;/p&gt;

&lt;p&gt;因为open队列在插入前是有序的，所以我们可以选用二分查找算法来找到插入的位置。&lt;/p&gt;

&lt;p&gt;每次插入时都使用二分查找算法查找插入点，那么每次的插入复杂度为O(logN)，比快排一次的O(NlogN)要快很多。&lt;/p&gt;

&lt;h3&gt;三、优化排序判断依据的预测值计算方法&lt;/h3&gt;

&lt;p&gt;前面用图所举的例子中，都是以当前点p与终点e之间的距离来作为预测值，这种方法简单但也不科学，导致A星寻找更好的点位时总是要绕很大的弯路。&lt;/p&gt;

&lt;p&gt;我们可以改变一下这个策略，选用一个更科学的方法， F 预测值= G 当前最近步数 + H 预测当前点到终点的步数 的方法。&lt;/p&gt;

&lt;p&gt;F 为预测值，G为起点s到当前点p的最近步数，H为当前点p到终点e的预测值，它们相加为F预测值。&lt;/p&gt;

&lt;p&gt;其中G应该是已经计算好并放入节点中的值，该值就是计算过程中起点s到当前点的步数。我们可以把每步计算好的步数都放入节点中，以待需要计算时使用。&lt;/p&gt;

&lt;p&gt;这个方法相当于，原来只关注当前点到终点的距离，变为关注起点s经过当前点p路径到终点e的距离，虽然还是贪婪的简单预测算法，但比起原来只关注当前点p与终点e的距离，更加科学化，能更快的找到更好更近的点位。&lt;/p&gt;

&lt;p&gt;为什么要改善这个预测值，改善预测值有什么意义呢？&lt;/p&gt;

&lt;p&gt;其实预测值的计算方法代表了在寻路过程中的走法，如果预测值只关注在于终点距离最近的点上，那么在寻路过程中的选择点位的顺序就会偏向于与终点更近的点。而如果预测值计算公式，关注的是整个距离较近的点位上，那么在寻路过程中在选择点位上也就会偏向整条路径短的方向上去靠。&lt;/p&gt;

&lt;h3&gt;四、多次频繁A星寻路的优化&lt;/h3&gt;

&lt;p&gt;多次频繁寻路中，对A星算法中每个运算，每行代码的运算细节都会有比较重大的考验。&lt;/p&gt;

&lt;p&gt;比如我们在查看一个节点是否为被取过的节点，即是否为Close，很多人都会在Close里取寻找该节点是否存在，这个操作明显就没有考虑到性能的消耗，要在Close列表中找节点，就相当于遍历一遍所有已经找过的节点，Close里的节点越多，越浪费CPU，而且是不只一次浪费，每个循环都会浪费一次，性能消耗巨大。&lt;/p&gt;

&lt;p&gt;因此我们通常的做法是把节点作为一个实例，在实例中添加IsClose的变量，来判断是否被取过，或者说是否Close。&lt;/p&gt;

&lt;p&gt;但这种方法还是不够，因为IsClose变量是要初始化的，每次寻路都要将前面寻路过的痕迹抹去才能开始全新的寻路过程。&lt;/p&gt;

&lt;p&gt;这就是又一个被很多人忽视的初始化的性能消耗，每次在A星寻路开始前，需要将IsClose的变量初始化为false，就需要遍历整个数据来初始化。&lt;/p&gt;

&lt;p&gt;每次都要遍历整个数据的话，A星算法无论优化的多快都无济于事了，因为初始化的性能消耗就已经将A星的性能消耗完全盖掉了。如果初始化的性能消耗需要遍历整个数据，那么优化A星算法的意义何在。&lt;/p&gt;

&lt;p&gt;其实可以用一个变量就能判断IsClose的方法，无需初始化。&lt;/p&gt;

&lt;p&gt;我们可以在寻路类中设置一个属性变量FindIndex，或者专门为寻路服务的静态变量也可以，而每个寻路节点中也存有一个变量FindIndex，每次寻路前都对FindIndex++，在判断IsClose时，当节点中的FindIndex与寻路类中FindIndex一致时说明已经被当次寻路算法取出过，否则两者不一样，说明这个节点没有被取出过，当节点被取出时，节点里的FindIndex则设置为当前寻路类中的FindIndex值，以表明该节点已经被这次寻路算法取出过。&lt;/p&gt;

&lt;p&gt;用一个变量和整数的比较就能知道IsClose的结果，省去了巨量的初始化操作。&lt;/p&gt;

&lt;h6&gt;在A星算法这种经常用频繁用的算法中，一个小小的性能消耗就能放大很多倍，特别注意调用的函数的复杂度，公式的复杂度，以及运算的优化，尽量做到能不调用函数的不调用函数，能简化公式的尽量简化公式，能用&amp;amp;|&amp;lt;&amp;gt;位运算符号代替加减乘除的尽量用位运算代替，节省A星算法的性能开销。&lt;/h6&gt;

&lt;h6&gt;我也看过所谓的B星算法过程，其实世上没有B星，所谓的B星其实就是我们A星的优化版本，而且互联网中所阐述的B星算法存在一定几率无法寻到路径的问题，即它只关注所谓的‘前方‘，而忽略了其实’后方‘也有路，如果只有后方有路时，B星就无法找到路径。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第六章，网络层(五) - 剖析数据协议原理</title>
   <link href="http://www.luzexi.com/2019/06/16/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E7%BD%91%E7%BB%9C%E5%B1%825.html"/>
   <updated>2019-06-16T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/06/16/Unity3D高级编程之进阶主程-网络层5</id>
   <content type="html">&lt;h6&gt;协议包的格式，json, msgpack, protobuf 以及自定义格式&lt;/h6&gt;

&lt;p&gt;项目的网路层在建设中，除了选择长短连接TCP，UDP，HTTP方式外，还需要选择在传输过程中使用什么样的协议格式。&lt;/p&gt;

&lt;p&gt;前面分析了TCP，UDP，HTTP的原理与应用，现在我们来了解下在传输层和应用层之上的逻辑层中，信息传递格式的选择与利弊。&lt;/p&gt;

&lt;p&gt;我们将深入剖析JSON，MessagePack，Protobuf的原理，包括它们都是由什么组成的，怎么序列化的，怎么反序列化的，数据格式究竟是由哪些元素构成的，使我们对网络数据协议的理解更加透彻清晰。&lt;/p&gt;

&lt;p&gt;我们以最常见的JSON格式作为切入点，一步步深入了解更加有效却复杂的传递格式。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h6&gt;JSON&lt;/h6&gt;

&lt;p&gt;JSON：JavaScript 对象表示法（JavaScript Object Notation）。它是存储和交换文本信息的语法。类似 XML，但比 XML 更小、更快，更易解析。&lt;/p&gt;

&lt;p&gt;JSON 是轻量级的文本数据交换格式，它独立于语言，具有自我描述性，更易理解。&lt;/p&gt;

&lt;p&gt;JSON 是属于纯文本，具有“自我描述性”（人类可读），具有层级结构（值中存在值）&lt;/p&gt;

&lt;p&gt;JSON与同时纯文本类型格式的XML相比较，JSON不需要结束标签，JSON更短，JSON解析和读写的速度更快，在JavaScript中能够使用内建的 JavaScript eval() 方法进行解析，JSON还可以使用数组，切不使用保留字（&amp;amp;，&amp;lt;，&amp;gt;，&amp;#39;，&amp;quot;）。&lt;/p&gt;

&lt;p&gt;JSON 语法规则：&lt;/p&gt;

&lt;p&gt;JSON 数据的书写格式是：名称/值对。&lt;/p&gt;

&lt;p&gt;名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值：&lt;/p&gt;

&lt;p&gt;&amp;quot;firstName&amp;quot; : &amp;quot;John&amp;quot;&lt;/p&gt;

&lt;p&gt;JSON数据由逗号分隔，它的值可以是：&lt;/p&gt;

&lt;p&gt;数字（整数或浮点数）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;number&amp;quot; : 1,
  &amp;quot;number2&amp;quot; : 11.5
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字符串（在双引号中）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;str1&amp;quot; : &amp;quot;1&amp;quot;,
  &amp;quot;str2&amp;quot; : &amp;quot;11&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;逻辑值（true 或 false）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;logic1&amp;quot; : true,
  &amp;quot;logic2&amp;quot; : false
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数组（在方括号中）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;{
   &amp;quot;array1&amp;quot; : [1,2,3],
   &amp;quot;array2&amp;quot; : [{&amp;quot;str1&amp;quot;,1},{&amp;quot;str2&amp;quot;,2},{33,44}]
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对象（在花括号中）&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;{
  &amp;quot;obj1&amp;quot; : {1, &amp;quot;str1&amp;quot;, true},
  &amp;quot;obj2&amp;quot; : {&amp;quot;str2&amp;quot;, 2, false},
  &amp;quot;obj3&amp;quot; : null
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JSON 对象在花括号中书写：&lt;/p&gt;

&lt;p&gt;对象可以包含多个名称/值对：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;{ &amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JSON 数组在方括号中书写：&lt;/p&gt;

&lt;p&gt;数组可包含多个对象：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;{
    &amp;quot;employees&amp;quot;: [
        { &amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot; },
        { &amp;quot;firstName&amp;quot;:&amp;quot;Anna&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Smith&amp;quot; },
        { &amp;quot;firstName&amp;quot;:&amp;quot;Peter&amp;quot; , &amp;quot;lastName&amp;quot;:&amp;quot;Jones&amp;quot; }
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JSON 文件的文件类型通常是 &amp;quot;xxx.json&amp;quot; 用来扩展名用来说明是json格式的文本文件&lt;/p&gt;

&lt;p&gt;JSON 文本的 MIME 类型是 &amp;quot;application/json&amp;quot; (MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。)&lt;/p&gt;

&lt;p&gt;JSON 解析器可以用些比较常用的，比如simpleJson，MiniJson，DataContractJsonSerializer，JArray，JObject等等，都是非常通用高效的插件。&lt;/p&gt;

&lt;h6&gt;自定义二进制流协议格式&lt;/h6&gt;

&lt;p&gt;大部分的网络协议都具有一定的通用性，JSON是最典型的案例，XML，MessagePack，Protobuf都具有一定的通用性，但自定义二进制流协议格式则不是，它完全不通用，因为它不需要顾及通用性。&lt;/p&gt;

&lt;p&gt;我们在存储一串数据的时候，无论这串数据里包含了哪些数据以及哪些数据类型，当我们拿到这串数据在解析的时候能够知道该怎么解析，这是定义协议格式的目标。&lt;/p&gt;

&lt;p&gt;简单的来说就是，当你传给我一串数据的时候，我是用什么样的规则知道这串数据里的内容的。JSON就制定了这么一个规则，这个规则以字符串KEY-VALUE，以及一些辅助的符号‘{’,&amp;#39;}&amp;#39;,&amp;#39;[&amp;#39;,&amp;#39;]&amp;#39;组合而成，这个规则非常通用，以至于任何人拿到任何JSON数据都能知道里面有什么数据。&lt;/p&gt;

&lt;p&gt;自定义二进制流协议格式则不具有通用性，不是任何人拿到数据都能知道里面装的是什么的，有且只有两端在私下协定的双方才知道该如何解析收到的数据，对于破解自定义二进制流的内容也只有靠猜，虽然猜的难度也不是非常大。&lt;/p&gt;

&lt;p&gt;一个自定义二进制流协议格式，分成三部分：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;数据大小|协议编号|具体数据
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;数据大小、协议编号、具体数据，这三者构成了一个完整的协议内容，这一整个协议内容少了谁都不成，不过有时数据大小和协议编号的前后顺序可以交换。&lt;/p&gt;

&lt;p&gt;我们举例来描述这个协议格式，假设我们客户端有这样一个数据结构需要传输到服务端去：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;struct test
{
  int test1;
  float test2;
  bool test3;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;服务端拿到数据时，其实完全不知道当前拿到的数据是什么，也不知道数据是否完整，有可能只拿到一半的数据，或者一部分的数据。&lt;/p&gt;

&lt;p&gt;首先我们要确定的是，我们收到的数据包它的完整的大小有多大，只有知道完整的包体大小才能确定我当前收到的数据在大小上是否完整，我们是要等待继续接受后面的数据，还是现在就可以进行解析操作了。&lt;/p&gt;

&lt;p&gt;为了确定包的完整性，我们必须先向二进制流中读取4个比特，组合成一个无符号整数，这个整数总共32位，也就是说我们的数据包的大小最大为2的32次减1个byte，然后再用来确定接下来的完整包体大小。&lt;/p&gt;

&lt;p&gt;例如我现在接受到了20个byte，读取前4个，组成一个整数后为24，说明我接受到的后面16个byte是一个不完整的包体，我应该继续等待后续的数据到来。&lt;/p&gt;

&lt;p&gt;其次我们要确定的是收到的数据包是属于哪个格式的协议。&lt;/p&gt;

&lt;p&gt;于是再读取4个byte大小的数据，组成一个无符号整数，用来确定协议号。比如这个无符号整数位为1002，就代表是编号为1002的协议。&lt;/p&gt;

&lt;p&gt;假设我们上面这个test结构的协议号是1002，那么接下来连着这个协议号的所有数据直到包体大小的末尾，都是这个test结构的数据。&lt;/p&gt;

&lt;p&gt;在解析这个具体数据的时候，要根据生成这个数据的顺序来解析。&lt;/p&gt;

&lt;p&gt;假设在生成这个二进制流数据时，我们的顺序是，先推入test1，再推入test2，再推入test3。test1是4个byte的整数，test2是4个byte的浮点数，test3是1个byte的布尔值，于是就有了&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;xxxx|xxxx|x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样一个形状的二进制流，每个‘x’为一个byte，这里4个byte组成一个int或float数据，1个byte组成布尔数据，‘|’只是为了解释说明用的分隔符不存在于数据内，这个数据其实就是由9个byte组成，其中前4个为test1，中间4个为test2，后面1个为test3。&lt;/p&gt;

&lt;p&gt;那么在网络传输过程中整个test结构的数据包格式为如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;13|1002|test1|test2|test3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;13为接下来的数据大小，1002位协议编号，test1|test2|test3为具体数据。&lt;/p&gt;

&lt;p&gt;我们在解析的时候也需要按照生成时的顺序来解析，先读取前4个byte组成一个整数赋值给test1，接着再读取4个byte组成一个浮点数赋值给test2，接着再读取1个byte赋值给test3，完成数据解析。&lt;/p&gt;

&lt;p&gt;对于数组形式的数据则要在原来的基础上多增加一个长度标志，比如 int[]类型数据，在生成时先推入一个长度，再连续推入所有内容，在解析的时候做同样的反向操作，先读取4个byte的长度标志，再对连续读取N个具体数据，这个N为长度标志。&lt;/p&gt;

&lt;p&gt;举例int[]为3个整数数组则二进制为如下效果：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;xxxx|xxxx|xxxx|xxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前4个byte为长度，接着3次4个byte为数组内的整数数据。&lt;/p&gt;

&lt;p&gt;自定义二进制流协议格式为最不通用的格式，但也是最节省流量的协议，因为每个数据都可以用最小的方式进行定义，比如协议号不需要4个byte，2个byte大小2的16次-1就够用了，长度有可能也不需要4个byte，只要2个甚至1个byte就够用了，有些数据不需要4个byte组成int整数，只需要2个byte数组short就够用了，甚至有些可以组合起来使用，比如协议结构中有4个bool，可以拼成一个byte来传递，这些都可以完全由我们来控制包体的大小不受到任何规则的限制，这也是自定义二进制协议格式最吸引人的地方。&lt;/p&gt;

&lt;p&gt;自定义二进制流协议格式最大的缺点是不通用，当我们需要更换一个协议格式的时候，旧的协议格式就无法解析了，特别是当新的协议解析旧的协议时就会报错。我们也可以做些补救这种问题的措施，为了能让旧的协议格式还能继续使用，我们在每个数据头部都加入一个2个byte的整数代表版本号，由版本号来决定该读取哪个版本的协议，这样旧的协议也照样可以兼容新的协议，只是处理起来的时候需要注意些初始化问题，那些旧协议没有的而新协议有的数据则要尽可能的初始化成默认值以免造成逻辑报错。&lt;/p&gt;

&lt;h6&gt;MessagePack&lt;/h6&gt;

&lt;p&gt;MessagePack 是一个介乎于JSON和自定义二进制流之间的协议格式，他的理念是 ‘It’s like JSON. but fast and small.’ 。&lt;/p&gt;

&lt;p&gt;与JSON相同的是MessagePack也有采用Key-Value形式的Map映射类型，不同的是MessagePack用byte形式存储整数、浮点数、布尔值，并且在Map映射类型外加入了更多单独类型（非KEY-VALUE形式）的数据类型，其中也包括了自定义二进制流的数据类型。&lt;/p&gt;

&lt;p&gt;其中map映射类型是比较常用，也是比较通用的存储形式类型，也因为它的通用性被很多程序员所喜爱。&lt;/p&gt;

&lt;p&gt;使用起来能和JSON用起来一样，并且数据大小比JSON小，解析速度又比JSON快，是MessagePack最大的特点。&lt;/p&gt;

&lt;p&gt;非map类型的数据，其实和自定义二进制流的存储方式差不多，只是把原来的‘数据大小|数据’的形式改为了‘类型|数据’，比如存储一个4个byte也就是32位的整数：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;+--------+--------+--------+--------+--------+
|  0xd2  |ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|ZZZZZZZZ|
+--------+--------+--------+--------+--------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个byte的值0xd2代表32位整数类型，它表示后面4个byte组合起来是整数类型的数据。&lt;/p&gt;

&lt;p&gt;再举个列子，32位的浮点数：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;+--------+--------+--------+--------+--------+
|  0xca  |XXXXXXXX|XXXXXXXX|XXXXXXXX|XXXXXXXX|
+--------+--------+--------+--------+--------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个byte的值0xca代表32位浮点数类型，它表示后面4个byte组合起来是浮点数类型的数据。&lt;/p&gt;

&lt;p&gt;以此类推，nil，bool，8位无符号整数，16位无符号整数，32位无符号整数，64位无符号整数，8位有符号整数，16位有符号整数，32位有符号整数，64位有符号整数等，以及32位浮点数，64位浮点数，都用这种类似的方式表示。&lt;/p&gt;

&lt;p&gt;其实用MessagePack并不是冲着这些单独的数据类型去的，因为这些单独的数据类型完全可以用自定义二进制流代替，我们最关心的其实是它的map类型数据。&lt;/p&gt;

&lt;p&gt;我们专门来看看，MessagePack的map类型的存储机制，为什么就比JSON快，为什么就比JSON小，它是如何存储和解析的。&lt;/p&gt;

&lt;p&gt;在map之前我们看看数组类型的格式：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;+--------+--------+--------+~~~~~~~~~~~~~~~~~+
|  0xdc  |YYYYYYYY|YYYYYYYY|    N objects    |
+--------+--------+--------+~~~~~~~~~~~~~~~~~+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个byte的值0xdc代表是个总共可以存储16位长度的数组，也就是最大为2的16次-1个元素的数组，后面2个byte组合起来成为一个无符号的整数代表后面有多少个元素，接着后面N个为相同类型的元素的数据。&lt;/p&gt;

&lt;p&gt;假设说这N个为32位整数类型，那么就是如下格式&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;+--------+--------+--------+~~~~~~~~~~~~~~~~~+
|  0xdc  |00000000|00000011|  0xd2|00001001|0xd2|00001101|...(3 objects)
+--------+--------+--------+~~~~~~~~~~~~~~~~~+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一个数组中指定了数组类型，以及数组元素的个数，接下来的数据就是单个元素的数据了，每个数据都包含了‘类型|数据’格式。&lt;/p&gt;

&lt;p&gt;其实map类型就是Array数组类型的变种，在数组类型上每个元素，多加了个KEY字符串，我们来看下map的格式：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;+--------+--------+--------+~~~~~~~~~~~~~~~~~+
|  0xde  |YYYYYYYY|YYYYYYYY|   N*2 objects   |
+--------+--------+--------+~~~~~~~~~~~~~~~~~+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一个byte的值0xde代表是最大个数为16位的map类型数据，接着2个byte组合起来表示有多少个元素，再接着N乘2个元素为数据元素，其中以2个元素为一个组合，第一元素一定是字符串KEY，第二个元素为单独的任意的数据类型。&lt;/p&gt;

&lt;p&gt;我们用官方的例子来分析下：&lt;/p&gt;

&lt;p&gt;一个JSON类型的数据：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;{&amp;quot;compact&amp;quot;:true, &amp;quot;schema&amp;quot;:0}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在MessagePack中的map格式为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;82|A7|&amp;#39;c&amp;#39;|&amp;#39;o&amp;#39;|&amp;#39;m&amp;#39;|&amp;#39;p&amp;#39;|&amp;#39;a&amp;#39;|&amp;#39;c&amp;#39;|&amp;#39;t&amp;#39;|C3|A6|&amp;#39;s&amp;#39;|&amp;#39;c&amp;#39;|&amp;#39;h&amp;#39;|&amp;#39;e&amp;#39;|&amp;#39;m&amp;#39;|&amp;#39;a&amp;#39;|00|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中8位前半个byte的值代表是个15个以内的map类型数据，8后面的2是后半个byte的值，代表总共有2个元素。&lt;/p&gt;

&lt;p&gt;接着A为前半个byte的值，代表是是个31个以内的字符串，A后面的7代表这个字符串拥有7个字符。&lt;/p&gt;

&lt;p&gt;接着7个元素都是字符。&lt;/p&gt;

&lt;p&gt;接着C3是KEY-VALUE的VALUE，这个VALUE是一个bool型的ture值。&lt;/p&gt;

&lt;p&gt;接着A6，A为前半个byte代表是31个以内的字符串，A后面的6代表这个字符串有6个字符。&lt;/p&gt;

&lt;p&gt;接着6个元素都是字符。&lt;/p&gt;

&lt;p&gt;最后00，前面0为前半个byte，表示类型为7位以内的整数，接着的0位后半个byte，代表数据为0。&lt;/p&gt;

&lt;p&gt;MessagePack整个map就是以这种“类型|数据”或者&amp;quot;类型|大小|数据&amp;quot;的方式存储。由于存储的方式是顺序，所以在解析的时候不需要排序，不需要解析符号和类型，数据的类型直接可以用byte来表示，能用byte存储绝不用字符串形式存储，能减少byte使用个数的尽量减少byte的使用个数，能合并的尽量合并为一个byte。&lt;/p&gt;

&lt;p&gt;因此MessagePack对于JSON来说，比JSON减少了大量的解析，比JSON减少了更多的数据空间，使得MessagePack能比起JSON来更快并且更小，就像它自己所说的那样 ‘It’s like JSON. but fast and small.’。&lt;/p&gt;

&lt;h3&gt;Protocol Buffer&lt;/h3&gt;

&lt;p&gt;虽然Proto3在Proto2之上又做了更多的改进，但我们这里以Proto2为基准来讲解Protocal buffer的内在机制。&lt;/p&gt;

&lt;p&gt;MessagePack在JSON之上做了优化，其实可以看做是，把JSON和自定义二进制的合并做法，既汲取了JSON这种KEY-VALUE(键值对)通用性的优点，又汲取了自定义二进制流格式无需解析和存储空间小的特点。&lt;/p&gt;

&lt;p&gt;不过MessagePack的Map毕竟是kEY-VALUE形式的KEY值还是使用了字符串类型，它的KEY还是逃脱不了字符串string占用太多存储空间的弊端。&lt;/p&gt;

&lt;p&gt;Google Protocol Buffer 的出现就弥补了MessagePack的这个缺点，但是Google Protocol Buffer也有自身不可忽视的缺点，我们来看究竟Google Protocol Buffer是怎么的一种数据协议。&lt;/p&gt;

&lt;p&gt;Google Protocol Buffer( 简称 Protobuf) 是 Google 公司内部的混合语言数据标准，它们用于 RPC 系统和持续数据存储系统。&lt;/p&gt;

&lt;p&gt;Protobuf 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。&lt;/p&gt;

&lt;p&gt;常有人推崇说 Protocol Buffer 比JSON、MessagePack要好，那么它究竟好在哪里呢？我们就来分析下，为什么有这么多人推崇它。&lt;/p&gt;

&lt;p&gt;我们选择数据协议的目的主要关注的点是，它是否能更简单上手，解析数据是否能更快，存储空间是否能更小，通用性是否能更强。对于这些特点，Protocol Buffer 是否能都做到，还是说它只是在部分几个方面做到了，下面我们来透彻的对它剖析。&lt;/p&gt;

&lt;h6&gt;Protocol Buffer消息定义&lt;/h6&gt;

&lt;p&gt;创建扩展名为.proto的文件，如：MyMessage.proto，并将以下内容存入该文件中。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;message LoginReqMessage {
  required int64 acct_id = 1;
  required string passwd = 2;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;message是消息定义的关键字，等同于C#中的struct/class。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LoginReqMessage为消息的名字，等同于结构体名或类名。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;required前缀表示该字段为必要字段。即在序列化和反序列化之前该字段必须已经被赋值。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;与required相似的功能还存在另外两个类似的关键字，optional和repeated。&lt;/p&gt;

&lt;p&gt;optional表示该字段为可选字段，即在序列化和反序列化前可以不进行赋值。&lt;/p&gt;

&lt;p&gt;相比于optional，repeated主要用于表示数组字段。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;int64和string分别表示64位长整型和字符串型的消息字段。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在Protocol Buffer中存在一张类型对照表，既Protocol Buffer中的数据类型与其他编程语言(C#/Java/C++)中所用类型的对照。&lt;/p&gt;

&lt;p&gt;该对照表中还将给出在不同的数据场景下，哪种类型更为高效。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;acct_id 和 passwd 分别表示消息字段名，等同于C#中的域变量名。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;标签数字 1 和 2 表示不同的字段在序列化后的二进制数据中的布局位置。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在该例中，passwd 字段编码后的数据一定位于 acct_id 之后。需要注意的是该值在同一message中不能重复。&lt;/p&gt;

&lt;p&gt;对于Protocol Buffer而言，标签值为 1 到 15 的字段在编码时可以得到优化，即标签值和类型信息仅占有一个byte，标签范围是 16 到 2047 的将占有两个bytes，而Protocol Buffer可以支持的字段数量则为2的29次方减1。有鉴于此，我们在设计消息结构时，可以尽可能考虑让repeated类型的字段标签位于1到15之间，这样便可以有效的节省编码后的字节数量。&lt;/p&gt;

&lt;h6&gt;嵌套Protocol Buffer&lt;/h6&gt;

&lt;p&gt;我们可以在同一个.proto文件中定义多个message，这样便可以很容易的实现嵌套消息的定义。如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhoneType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MOBILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HOME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;WORK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhoneType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;repeated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phones&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;repeated&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight_recent_months&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;packed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AddressBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;repeated&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;AddressBook消息的定义中包含另外一个消息类型作为其字段Person，Person又包含了另一个消息类型作为字段PhoneNumber。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其中的 AddressBook 和 Person 被定义在同一个.proto文件中，也可以被分开来定义在各自的.proto文件中。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Protocol Buffer提供了另外一个关键字import，相当于 C++ 的Include，这样我们便可以将很多通用的message定义在同一个.proto文件中，而其他各模块功能的消息体定义在其他文件中，再通过import的方式将需要的结构体文件中定义的消息包含进来，如：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;import &amp;quot;myproject/CommonMessages.proto&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;限定符 required、optional、repeated 的规则&lt;/h6&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在每个消息中必须至少有一个required类型的字段，保证数据中一定有至少一个数据。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;required限定符表示该字段为必要字段。即在序列化和反序列化之前该字段必须已经被赋值。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个消息中可以包含0个或多个optional类型的字段。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;optional表示该字段为可选字段，即在序列化和反序列化前可以不进行赋值，如果没有赋值则表示该数据为空。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;repeated表示的字段可以包含0个或多个重复的数据。注意，是重复的数据，可以等价于我们常使用的数组和列表，并且可以不赋值，则表示0个数据。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5&gt;Protocol Buffer 原理-序列化和反序列化&lt;/h5&gt;

&lt;p&gt;Protocol Buffer 是怎么识别和存储数据的，是序列化和反序列的关键。&lt;/p&gt;

&lt;p&gt;JSON 和 MessagePack 都使用了字符串的KEY作为映射到程序变量的关键字，变量和字符串用比较字符串的是否相等来判断是否为该变量，避免不了字符串太多而浪费空间。&lt;/p&gt;

&lt;p&gt;Protocol Buffer 则用数字编号来作为KEY的关键字，每个变量都必须有个不能重复的标签号(即数字编号)，用变量后面跟着的数字编号来映射到数据中的数字编号，进而读取数据。&lt;/p&gt;

&lt;p&gt;Protocol Buffer为每个变量都定义了一个标签号(即数字编号)，这个数字编号就代表了程序变量与指定编号数据的映射关系。&lt;/p&gt;

&lt;p&gt;有了这个规则还不够，因为程序在读取的时候，是不知道某个变量到底对应哪个标签号的，比如上面的Person的 name 变量，在程序里的 name 变量是不知道到底该读取哪个编号的数据的，除非在程序里写死。&lt;/p&gt;

&lt;p&gt;Protocol Buffer 就是使用了这种简单粗暴的方法，‘在程序里写死’的这种方式让事情变得更简单。&lt;/p&gt;

&lt;p&gt;‘在程序里写死’这种粗暴的方式最讲究周边工具了，Protocol Buffer就为很多种语言定制了生成序列化和反序列化程序代码的工具。只需要通过提供.proto文件就能生成相应语音的程序代码，在代码中把编号‘写死’，这一切代码都是自动生成的，我们只需要关心.proto文件中的结构。&lt;/p&gt;

&lt;p&gt;以就是说，当Protocol Buffer生成的解析代码在读数据的时候，一旦读取到编号为1的数据时，就把数据解析给 name 这个程序变量，这些都写死在代码中，而代码由Protocol Buffer工具生成。&lt;/p&gt;

&lt;h6&gt;我们使用上面提到的 AddressBook 数据结构来序列化一个 Protocol Buffer 数据。&lt;/h6&gt;

&lt;p&gt;加入数据的伪代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddressBook&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address_book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add_people&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jack&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Jack@qq.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PhoneNumber&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_phones&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;phone_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add_phones&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;234567&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MOBILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_weight_recent_months&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_weight_recent_months&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_weight_recent_months&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;生成出来的二进制数据流如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// (1 &amp;lt;&amp;lt; 3) + 2 = 0a，1为people的标签号,2为嵌入结构对应的类型号&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 0x3c = 60，表示接下来60个字节为Person的数据&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 下面进入到 repeated Person 数组的数据结构&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// (1 &amp;lt;&amp;lt; 3) + 2 = 0a，Person的第一个字段name的标签号为1，2为string(字符串)对应的类型号&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;04&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// name字段的字符串长度为4&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;61&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// &amp;quot;Jack&amp;quot; 的ascii编码&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// (2 &amp;lt;&amp;lt; 3) + 0 = 10，字段id的标签号为2，0为int32对应的类型号&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// id的整型数据为1&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// (3 &amp;lt;&amp;lt; 3) + 2 = 1a，字段email的标签号为3，2为string对应的类型号&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 0x0b = 11 email字段的字符串长度为11&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;61&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;63&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6f&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6d&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// &amp;quot;Jack@qq.com&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//第1个PhoneNumber，嵌套message&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// (4 &amp;lt;&amp;lt; 3) + 2 = 22，phones字段，标签号为4，2为嵌套结构对应的类型号&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 0a = 10，接下来10个字节为PhoneNumber的数据&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// (1 &amp;lt;&amp;lt; 3) + 2 =  0a, PhoneNumber的number，标签号为1，2为string对应的类型号&lt;/span&gt;
    &lt;span class=&quot;mo&quot;&gt;06&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// number字段的字符串长度为6&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// &amp;quot;123456&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// (2 &amp;lt;&amp;lt; 3) + 0 = 10，PhoneType type字段，0为enum对应的类型号&lt;/span&gt;
    &lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// HOME，enum被视为整数&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 第2个PhoneNumber，嵌套message&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;06&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//信息解读同上，最后的00为MOBILE&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a2&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;06&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 1010 0010 0000 0110 varint方式，weight_recent_months的key&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//  010 0010  000 0110 → 000 0110 0100 010 little-endian存储&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (100 &amp;lt;&amp;lt; 3) + 2 = a2 06，100为weight_recent_months的标签号&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//  2为 packed repeated field的类型号&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 0c = 12，后面12个字节为float的数据，每4个字节一个数据&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// float 50&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// float 52&lt;/span&gt;
&lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// float 54&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;整个数据看下来都是遵循了简单的规则，即，标签号 + 类型号，最为头部标识，数据大小标识，作为可选标识，最后放入具体数据：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;标签号 + 类型号|数据大小|具体数据
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体数据中再嵌套不同种类的数据，也同样遵循 ‘标签号 + 类型号|数据大小|具体数据’ 这样的规则。&lt;/p&gt;

&lt;h6&gt;二进制数据流中反序列化为程序对象数据，我们重点看看其中 Person 结构的反序列过程：&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MergeFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CodedInputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ReadTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_unknownFields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnknownFieldSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MergeFieldFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_unknownFields&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ReadString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ReadInt32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ReadString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;phones_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AddEntriesFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_repeated_phones_codec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;weight_recent_months_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AddEntriesFrom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_repeated_weight_recent_months_codec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过上述Protocol Buffer生成的代码我们了解到，所有的对象变量都通过.proto文件中的标签号来识别数据是否与该变量有映射关系的，当拿到具体数据时，先判定属于哪个变量，再针对该变量的类型读取数据。&lt;/p&gt;

&lt;h6&gt;Protocol Buffer 不同版本消息的兼容问题&lt;/h6&gt;

&lt;p&gt;在实际的开发中会存在这样一种应用场景，即消息格式因为某些需求的变化而不得不进行必要的修改或者说升级，但是有些使用原有消息格式的应用程序暂时又不能被立刻升级，这便要求我们在升级消息格式时要遵守一定的规则，从而可以保证基于新老消息格式的新老程序能够同时运行。规则如下：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不要修改已经存在字段的标签号，即变量后面的数字，保证旧数据协议能够继续从数据中读取指定标签号的正确数据。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任何新添加的字段必须是optional和repeated限定符，保证在旧数据无法加入新数据的情况下，新的协议还能够在旧数据协议之下继续顺利解析，否则无法保证新老程序在互相传递消息时的消息兼容性。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在原有的消息中，不能移除已经存在的required字段，虽然optional和repeated类型的字段可以被移除，但是他们之前使用的标签号必须被保留，不能被新的字段重用。因为旧协议在执行时还是会在旧的标签号中加入自己的数据，新协议如果使用了旧的标签号，就会导致新旧协议数据解析错误的问题。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;int32、uint32、int64、uint64和bool等类型之间是兼容的，sint32和sint64是兼容的，string和bytes是兼容的，fixed32和sfixed32，以及fixed64和sfixed64之间是兼容的，这意味着如果想修改原有字段的类型时，为了保证兼容性，只能将其修改为与其原有类型兼容的类型，否则就将打破新老消息格式的兼容性。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;Protocol Buffer 的优点&lt;/h6&gt;

&lt;p&gt;Protobuf 全程使用二进制流形式，用整数代替了KEY来映射变量，比 XML、Json、MessagePack它们更小、更快、也更简单。&lt;/p&gt;

&lt;p&gt;我们可以定义自己的数据结构，然后使用Protobuf代码生成器生成的代码来读写这个数据结构。甚至可以在无需重新部署程序的情况下更新数据结构。只需使用 Protobuf 对数据结构进行一次描述，即可利用各种不同语言或从各种不同数据流中对你的结构化数据轻松读写。&lt;/p&gt;

&lt;p&gt;使用 Protobuf 无需学习复杂的文档对象模型，Protobuf 的编程模式比较友好，简单易学，同时它拥有良好的文档和示例，对于喜欢简单事物的人们而言，Protobuf 比其他的技术更加有吸引力。&lt;/p&gt;

&lt;p&gt;Protobuf 语义更清晰，无需类似 XML，JSON 解析器的东西，简化了解析的操作，减少了解析的消耗。&lt;/p&gt;

&lt;p&gt;Protobuf 数据使用二进制形式，把原来在JSON,XML里用字符串存储的数字换成用byte存储，大量减少了浪费的存储空间。与MessagePack相比，Protobuf减少了Key的存储空间，让原本用字符串来表达Key的方式换成了用整数表达，不但减少了存储空间也加快了反序列化的速度。&lt;/p&gt;

&lt;h6&gt;Protocol Buffer 的不足&lt;/h6&gt;

&lt;p&gt;Protbuf 与 XML 相比也有不足之处。它功能简单无法用来表示复杂的概念。&lt;/p&gt;

&lt;p&gt;XML 已经成为多种行业标准的编写工具，Protobuf 只是运用在数据传输与存储上，在通用性上还差很多。&lt;/p&gt;

&lt;p&gt;由于 XML 具有某种程度上的自解释性，它可以被人直接读取编辑，在这一点上 Protobuf 不行，它以二进制的方式存储，除非你有 .proto 定义，否则你没法直接读出 Protobuf 的任何内容。&lt;/p&gt;

&lt;p&gt;参考文献：&lt;/p&gt;

&lt;p&gt;《Protocol Buffers：阅读一个二进制文件》&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第六章，网络层(四) - 封装HTTP</title>
   <link href="http://www.luzexi.com/2019/06/02/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E7%BD%91%E7%BB%9C%E5%B1%824.html"/>
   <updated>2019-06-02T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/06/02/Unity3D高级编程之进阶主程-网络层4</id>
   <content type="html">&lt;h3&gt;HTTP协议原理&lt;/h3&gt;

&lt;p&gt;HTTP俗称短连接，由于其连接的时间较短，不受前端所控制，所以在互联网开发圈内，通常被以‘短’字开头。&lt;/p&gt;

&lt;p&gt;在Unity3D短连接可以用.NET库来编写，也可以用U3D的内置API的WWW来写。差别不是很大，WWW对.Net做了封装，其功能已经完全够用在游戏开发上了，即使有情况不够用再用.NET补充也是很容易的事。(WWW在2018及以后的版本中都被废弃了，取代它的是UnityWebRequest，应该说封装的更好，但自定义部分则被削弱了。)&lt;/p&gt;

&lt;p&gt;其两者的区别主要还是WWW把.NET库封装后再加了层用协程使得我们开发者在使用时更加的便捷，.NET库则直接用了线程，导致开发者还需要关注主线程与子线程的资源锁。另外WWW里面已经实现了IP6转换，而使用.Net库则还需要自己解析IP6地址，虽然对程序员来说自己用.NET实现更加接近底层实现，但同时也带来了更多需要花精力关注的地方，夺走了程序员些许宝贵的精力。&lt;/p&gt;

&lt;p&gt;不管协程还是线程，其实两边都需要缓存和队列，如果没有缓存和队列，当网络请求量放大时就会出现数据丢失的情况。所以缓存机制在网络层是不可或缺的。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;我们所说的HTTP，最形象的描述就是网页(Web)形式的请求与回调。它被运用在最多的就是网页(Web)请求上，它是网页(Web) 上进行数据交换的基础。&lt;/p&gt;

&lt;p&gt;HTTP是一种 请求/响应式 的协议。也就是说，请求通常是由像浏览器这样的User-
Agent发起的，当像浏览器接收方收到数据后，再通过数据来处理相应的逻辑，每个请求都是一一对应的，一个请求有且最多只能得到一个响应。&lt;/p&gt;

&lt;p&gt;当我们要要展现一个网页时，浏览器首先发送一个请求，目的是从服务器获取页面的HTML文档，再解析文档中的资源信息然后才发送其他请求，例如获取可执行脚本或CSS样式来进行页面布局渲染，以及一些其它页面资源（如图片和视频等）。&lt;/p&gt;

&lt;p&gt;浏览器将这些资源整合到一起，展现出一个完整的网页。浏览器执行的脚本可以在之后的阶段发起更多的请求来获取更多信息和资源，从而可以不断的叠加、更新到当前的网页内容上来。&lt;/p&gt;

&lt;p&gt;我们常常会在游戏项目中把这套 请求/响应式 协议搬到了游戏中运用，那么为什么要用HTTP呢，用HTTP有什么好处呢？&lt;/p&gt;

&lt;p&gt;其最重要的原因是HTTP简单易用，上手成本低，功能扩展难度低，因此被广大互联网程序员所喜爱。&lt;/p&gt;

&lt;p&gt;HTTP是应用层上的协议，它并不需要其底层的传输层协议是面向连接的，只需要它是可靠的，或不丢失消息的（至少返回错误）。因此，HTTP依赖于面向连接的TCP进行消息传递，但HTTP本身对连接的需求并不是必须的，也就是说它本身是无状态的。&lt;/p&gt;

&lt;p&gt;HTTP本身并没有检测是否连接，数据是否传输准确，是否有数据到达等的机制，而是依赖于TCP协议，由TCP协议来做这些传输层的事情。HTTP在TCP之上，制定了自己的规则。&lt;/p&gt;

&lt;p&gt;HTTP在TCP之上制定了自己的规则：&lt;/p&gt;

&lt;p&gt;1.HTTP有自己的协议，HEADS和BODY&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    GET /root1/module?name1=value1&amp;amp;name2=value2 HTTP/1.1
    Host: localhost:8080
    Accept-Language: fr
    //这里HEADS 和 BODY一定是用空行隔开的
    body content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 GET为方式，HTTP有很多种方式，其中GET和POST最为常用。GET方式是把参数值放在地址中，而POST则是把参数值放在协议数据包中，并且POST可以使用二进制作为参数值，而GET则不能。其两者的实质是一样的，都是以Key1=Value1&amp;amp;Key2=Value2的形式作为请求内容，他们两请求的参数都会被写入请求包体中。&lt;/p&gt;

&lt;p&gt;其协议中 HTTP/1.1为HTTP协议的版本号，我们现在常用的协议为1.1，也有少部分还在使用1.0。HTTP1.1兼容了1.0，并且在1.0之上改进了诸多内容，比如同一个地址不同host，增加了cache特性，增加Chunked transfer-coding标志切割数据块等。而2.0由于和1.1差别太大，不能兼容1.0和1.1，因此世界被分成了两块，HTTP2.0主要运用在HTTPS上，而HTTP1.1和1.0则运行在原有的HTTP上。&lt;/p&gt;

&lt;p&gt;body content是主要存储请求内容的，POST内容都放在这里。&lt;/p&gt;

&lt;p&gt;服务器收到请求处理相应逻辑后发送响应数据，其数据格式为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    HTTP/1.1 200
    Date:Mon,31Dec200104:25:57GMT
    Server:Apache/1.3.14(Unix)
    Content-type:text/html
    Last-modified:Tue,17Apr200106:46:28GMT
    Content-length:xxx

    //这里HEADS 和 BODY一定是用空行隔开的
    body content
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中200为响应后代表请求成功的错误码，其他常用的错误码可以简单理解为 404 找不到请求页，500 服务器程序报错，400 访问请求参数错误，403 被拒绝访问。&lt;/p&gt;

&lt;p&gt;2.HTTP是无状态但有会话的，两个执行成功的请求之间是没有关系的。&lt;/p&gt;

&lt;p&gt;无状态，是指对于事务处理没有记忆能力，前后两次的请求并没有任何相关性，可以是不同的连接，也可以是不同的客户端，服务器在处理无状态请求时，只关注当下这个连接请求时的可获取到的数据，不会去关心也没有记忆去关联上一次请求的状态。&lt;/p&gt;

&lt;p&gt;HTTP的访问请求一般都由软硬件做负载均衡来决定访问哪台物理服务器，进而两次同样地址的访问请求，有可能选择的服务器是不同的。&lt;/p&gt;

&lt;p&gt;无状态很好的匹配了这种近乎随机的访问方式，也就是说HTTP客户端可以任意选择一个部署在不同区域的服务器进行访问，得到的结果是相同的。&lt;/p&gt;

&lt;p&gt;3.HTTP每次请求访问结束会断开连接。&lt;/p&gt;

&lt;p&gt;HTTP是依据什么来断开连接的呢？content-length。&lt;/p&gt;

&lt;p&gt;content-length为 heads 上的标记，表示 body 内容长度。&lt;/p&gt;

&lt;p&gt;带content-length，body长度是可知的，客户端在接收body内容时，就可以依据这个长度来接受数据。接受完毕后，就表示这个请求完毕了。客户端主动调用close进入四次挥手断开连接。&lt;/p&gt;

&lt;p&gt;假如没有content-length 标记，那么body内容长度是不可知的，客户端会一直接受数据，直到服务端主动断开。&lt;/p&gt;

&lt;p&gt;HTTP1.1在这个断开规则之上又扩展了一种新规则，即增加了Transfer-encoding标记。如果Transfer-encoding为chunked，则表示body是流式输出，body会被分成多个块，每块的开始会标识出当前块的长度，此时body不需要通过content-length长度来指定了。&lt;/p&gt;

&lt;p&gt;HEADS上带有Transfer-encoding:chunked 就表示body被分成很多块，每块的长度也是可知的，当客户端根据长度接受完毕数据后，就会主动断开连接。&lt;/p&gt;

&lt;p&gt;假如说Transfer-encoding 和 content-length 这两个标记都没有，那么就只能一直接受数据直到服务器主动断开连接。&lt;/p&gt;

&lt;p&gt;那么有没有一种可能，既想使用HTTP协议又不想断开连接的？&lt;/p&gt;

&lt;p&gt;使用keep-alive标识，keep-alive标识会让客户端与服务器的连接保持状态，直到服务器发现空闲时间结束而断开连接，在结束时间内我们仍然能发送数据。也在就是说，可以减少多次的与服务器3次握手建立连接，以及多次与服务器4次握手断开连接，提高了传输效率。&lt;/p&gt;

&lt;p&gt;而在服务器端上，Nginx的 keepalive&lt;em&gt;timeout，和Apache的 KeepAliveTimeout 都能设置 Keep-alive 的空闲时间大小，当httpd守护进程发送完一个响应后，理应马上主动关闭相应的TCP连接，但设置 keepalive&lt;/em&gt;timeout后，httpd守护进程会说：”再等等吧，看看客户端还有没有请求过来”，这一等，便是 keepalive_timeout时间。如果守护进程在这个等待的时间里，一直没有收到客户端发过来HTTP请求，则关闭这个HTTP连接。&lt;/p&gt;

&lt;p&gt;但也不一定说使用keep-alive标识能提高效率，有时也会反而降低了效率。比如经常会没有数据需要发送，导致长时间的Tcp连接保持导致系统资源无效占用，浪费系统资源，巨量的保持连接会浪费巨量的资源。&lt;/p&gt;

&lt;p&gt;如果客户端使用keep-alive，则需要在连续发送数据时，使用同一个HTTP连接实例。并且在发送完毕后要记录空闲时间，以便再次发送时，可以判断是否继续使用该连接，因为通常服务器端主动断开连接后并没有被客户端及时的得知，所以自行判断是否有可能已经被服务器端断开连接为好。还有一个问题是，如果网络环境不好导致发送请求无法到达时，则要尽可能的自己记录和判断，哪些数据是需要重发的。这几个问题增加了HTTP作为keep-alive来保持连接的操作难度，将本来简单便捷的HTTP，推向了有点长连接的味道。&lt;/p&gt;

&lt;h6&gt;在Unity3D中的HTTP封装&lt;/h6&gt;

&lt;p&gt;Unity3D的2018版本中原本经常用的WWW类已经被废弃，取而代之的是UnityWebRequest。&lt;/p&gt;

&lt;p&gt;API改了但功能都是一样的，我们主要还是围绕HTTP的原理来写程序，也只有这样才能真正写出程序的精髓。&lt;/p&gt;

&lt;p&gt;UnityWebRequest里有几个接口对我们来说比较重要，一个是Post(string uri, WWWForm postData)接口用来创建一个带有地址和Post数据的UnityWebRequest实例，一个是SendWebRequest()用来开始发送请求和迭代请求的接口，另一个是SetRequestHeader(string name, string value)用来设置HTTP头的，其中它说下面这些HEAD标记不支持设置：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    These headers cannot be set with custom values on any platform: accept-charset, access-control-request-headers, access-control-request-method, connection, date, dnt, expect, host, keep-alive, origin, referer, te, trailer, transfer-encoding, upgrade, via.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些标记都是什么意思呢，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    accept-charset: 用于告诉服务器，客户机采用的编码格式

    access-control-request-headers: 在预检请求中，用于通知服务器在真正的请求中会采用哪些请求首部

    access-control-request-method: 在预检请求中，用于通知服务器在真正的请求中会采用哪种 HTTP 方法

    connection: 处理完这次请求后是否断开连接还是继续保持连接

    date: 当前时间值

    dnt:  (Do Not Track) 表明了用户对于网站追踪的偏好。

    expect: 是一个请求消息头，包含一个期望条件，表示服务器只有在满足此期望条件的情况下才能妥善地处理请求。服务器开始检查请求消息头，可能会返回一个状态码为 100 (Continue) 的回复来告知客户端继续发送消息体，也可能会返回一个状态码为417 (Expectation Failed) 的回复来告知对方要求不能得到满足。

    host: 请求头指明了服务器的域名(对于虚拟主机来说)，以及服务器监听的TCP端口号。

    keep-alive: 允许消息发送者暗示连接的状态，还可以用来设置超时时长和最大请求数。

    origin: 指示了此次请求发起者来自于哪个站点。

    referer: 表示当前页面是通过此来源页面里的链接进入的，与origin相似。

    te: 指定用户代理希望使用的传输编码类型

    trailer: 允许发送方在分块发送的消息后面添加额外的元信息，这些元信息可能是随着消息主体的发送动态生成的，比如消息的完整性校验，消息的数字签名，或者消息经过处理之后的最终状态等。

    transfer-encoding: 指明了将 entity 安全传递给用户所采用的编码形式。transfer-encoding是一个逐跳传输消息首部，即仅应用于两个节点之间的消息传递，而不是所请求的资源本身。一个多节点连接中的每一段都可以应用不同的Transfer-Encoding 值。

    upgrade: 升级为其他协议

    via: 代理服务器相关的信息
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上这些由HEAD扩展的HTTP功能都不能进行自主的选择，其中包括了我们比较关心的标识 connection 和 keep-alive 保持连接的功能，代表了我们无法用UnityWebRequest来实现一次连接发送多次数据的需求。&lt;/p&gt;

&lt;p&gt;另外我们最关心的content-length也不能被自定义设置，而是由API本身来自动设置。&lt;/p&gt;

&lt;p&gt;与原来WWWW的API不同的是，UnityWebRequest更加简洁方便，但也失去了一些自定义的功能。接下来我们来使用UnityWebRequest封装HTTP网络层。&lt;/p&gt;

&lt;p&gt;我们必须设计一个类，比如建个名称为HTTPRequest的类，每次请求服务器都调用这个类的方法来处理一个请求的操作。把地址，参数，回调传进去，等待服务器相应和回调。&lt;/p&gt;

&lt;p&gt;短连接接口相对较少，其中POST,GET,HEAD,Start，这几个接口最为关键。在UnityWebRequest中对应的是&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    POST: UnityWebRequest UnityWebRequest.Post(string uri, WWWForm postData) (静态函数)

    GET: UnityWebRequest UnityWebRequest.Get(string uri) (静态函数)

    HEAD: UnityWebRequest.SetRequestHeader(string name, string value) (非静态函数)

    Start: UnityWebRequest.SendWebRequest() (非静态函数)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用这四个API就能实现HTTP基本的发送与接收。&lt;/p&gt;

&lt;p&gt;在调用UnityWebRequest发送请求时可以用协程也可以在逻辑更新中进行判断收发过程。&lt;/p&gt;

&lt;p&gt;不过在协程中不太可控，并且每次都起一个携程来发送数据也浪费资源，并且协程结束时随着函数调用结束而结束的，而我们时常会有需要暂停，继续等操作。所以一般都会把HTTP的收发判断移到逻辑更新中的Update里去，这样做更容易理解，也更容易掌控。&lt;/p&gt;

&lt;p&gt;下面我们建立一个类来封装UnityWebRequest的收发过程：&lt;/p&gt;

&lt;p&gt;1.建立实例开始连接和发送请求，设置好这次请求回应的回调句柄。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    void StartRequest(string url, Callback _callback)
    {
        this.web_request = UnityWebRequest.Get(url);
        this.Callback =  _callback;
        this.web_request.SendWebRequest();
    }

    or POST

    void StartRequest(string url, WWWForm wwwform, Callback _callback)
    {
        this.web_request = UnityWebRequest.POST(url, wwwform);
        this.Callback =  _callback;
        this.web_request.SendWebRequest();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.判断是否完成或者说发送请求是否完毕,并且调用回调函数&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    void Update()
    {
        if(web_request != null)
        {
            if(web_request.isDone)
            {
                ProcessResponse(web_request);
                web_request.Dispose();
                web_request = null;
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3.处理数据，先判断有错误存在，如果没有错误则对数据进行处理，HTTP回应的数据格式比较多，比如Json格式的，Xml格式等等。对数据进行解析后变为具体的类实例，再传给相应的函数句柄进行调用。所以这里数据格式协议也是关键。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    void ProcessResponse(UnityWebRequest _WebRequest)
    {
        if(_WebRequest.error != null)
        {
            NetworkErrorReport(_www.error);
            return;
        }
        CallbackResponse(_WebRequest.downloadHandler.text);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上是用UnityWebRequest做HTTP请求的基本步骤。在具体项目中看似简单的连接，发送，接收过程中也有不少事情需要我们做。特别是游戏逻辑中，大量多次，频繁发送HTTP请求的问题的延伸和提出的解决方案。&lt;/p&gt;

&lt;p&gt;多次或者连续发送HTTP请求引起的问题&lt;/p&gt;

&lt;p&gt;多次或者连续请求HTTP在具体项目中比价常见，比如客户端向服务器请求角色信息，并且请求军团信息，并且请求每日任务信息，然后再显示主界面。&lt;/p&gt;

&lt;p&gt;这种连续的多次的请求HTTP，会同时触发多个线程向服务器做请求操作，建立连接，发送请求，关闭连接，而得到服务器返回时，却不知道哪个在先哪个在后，例如军团信息有可能先得到响应，然后再是每日任务信息得到了响应，再是角色信息得到了响应，因为是多个线程发起的多个连接，服务端接受到的数据也是没有顺序的，即使服务器端接受的顺序刚好没有打乱顺序，在处理和回调的时机也是不可知的，导致回调的顺序不可知，所以并不能确定响应的顺序与请求的顺序是一样的。&lt;/p&gt;

&lt;p&gt;当接受数据的顺序无法确定时，如果还用顺序接受数据的方式处理出具则有风险，比如我们在发送，军团，任务，角色数据请求后，希望能够在三者都到齐的情况下执行某个程序逻辑，如果得到的数据是顺序的，则我们可以确定在收到角色数据后表明所有的数据都到齐了，于是我们再执行逻辑程序。&lt;/p&gt;

&lt;h6&gt;解决方案1：多开线程发送请求数据，等待所有数据到齐再调用执行逻辑。&lt;/h6&gt;

&lt;p&gt;每个HTTP(也可以认为是UnityWebRequest)请求都会开一个线程来向服务器请求数据，多个HTTP请求同时开启，相当于多个线程同时工作提高了网络效率。&lt;/p&gt;

&lt;p&gt;我们可以用HTTP这种开线程的方式做，当需要多个请求的回应数据时，开启多个HTTP请求，等到数据全部得到相应后再处理逻辑。&lt;/p&gt;

&lt;p&gt;这里有一个限制，我们需要假设多次请求之间没有且不需要逻辑顺序，则可以使用同时发起多次HTTP请求，并且等待所有请求结束后再做逻辑处理。&lt;/p&gt;

&lt;p&gt;多次请求的响应数据的需求问题，其本质是‘如何判断我们需要的多条数据是否已经都到达’。&lt;/p&gt;

&lt;p&gt;为了能更快的，更高效的得到HTTP请求数据，在同一时间同时向服务器发起多个HTTP请求，并且等待所有请求都得到响应后才执行逻辑程序，即等待并辨认多次请求是否全数收到。&lt;/p&gt;

&lt;p&gt;在Unity3D上伪代码及注释如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    class multiple_request
    {
        void StartRequest( request_list, call_back )
        {
            lst_req = new List&amp;lt;UnityWebRequest&amp;gt;();
            for( url,wwwform in request_list )
            {
                //开启多个HTTP请求
                UnityWebRequest req = UnityWebRequest.Post(url, wwwform);
                req.SendWebRequest();

                //记录请求实例
                lst_req.Add(req);
            }

            //记录回调函数
            Callback = call_back;
        }

        void Update()
        {
            if(lst_req == null || lst_req.Count &amp;lt;= 0) return;

            for( UnityWebRequest req in lst_req)
            {
                //判断是否完成该请求，只要有一个没完成就继续等待
                if(!req.isDone)
                {
                    return;
                }
            }

            //当全部请求都完成时，执行回调
            Callback(lst_req);

            //请求结束并清空
            lst_req.Clear();
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种方式同时开启多个HTTP连接来向服务器请求数据，极大程度地加速了数据的响应速度，最大限度的提高了服务器端的CPU利用率，但请求彼此之间必须没有顺序关系，只有这样服务器端的执行顺序才无序担心。&lt;/p&gt;

&lt;p&gt;如果请求之间是有顺序要求的，服务器端执行顺序无法保障则容易出现逻辑顺序问题，比如会有多个这样的请求，购买物品，出售物品，使用物品，三个请求一起被发起，服务器接受到的请求顺序有可能是，使用物品，出售物品，再购买物品，当顺序不同时就有可能存在逻辑问题，与我们原本设想的逻辑存在偏差，物品可能先被使用或出售，而不是被先购买，导致没有物品可被使用或出售，跟我们的所预期不一致。&lt;/p&gt;

&lt;p&gt;提高了网络效率，服务器的CPU利用率，却无法保证预期的逻辑顺序，在需要顺序的功能上必出现诸多错误。&lt;/p&gt;

&lt;p&gt;因此这种解决方案在需要逻辑顺序的连接请求上无法运作，但在不需要逻辑顺的连接请求上可以极大的提高网络连接利用率。&lt;/p&gt;

&lt;h6&gt;解决方案2：逐个发起请求，保证顺序。&lt;/h6&gt;

&lt;p&gt;逐个发送请求的方式最常见也比较普遍的做法，在网页端，安卓原生端，苹果原生端都使用这种方式来做请求，即每次只处理一个请求，当这个请求结束后再发起下一个请求，即一个请求对应一个功能模块，结束当前功能模块后再发起下一个请求。&lt;/p&gt;

&lt;p&gt;例如前面所描述的例子，请求角色信息，并且请求军团信息，并且请求每日任务信息，每次只做一件事，收到角色信息数据后，再发起请求军团信息，收到军团信息后，再发起请求任务信息，收到任务信息后再显示在界面，每个请求都会被动态的分配一个回调函数，当某个请求的数据需要做别的事情的时候，就分配一个不同回调函数。&lt;/p&gt;

&lt;p&gt;也就是说，当请求角色信息前，我们可以分配一个自定义句柄，当接受到数据后，回调执行这个自定义句柄。在自定义句柄里，可以继续发送我们需要请求的数据或功能，或者执行其他逻辑。&lt;/p&gt;

&lt;p&gt;伪代码为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    void on_button_click()
    {
        //请求角色数据
        function_request_roleinfo( callback_function1 ) 
    }

    void callback_function1( data )
    {
        //记录角色信息
        role_info.Add(data);

        //请求军团信息
        function_request_groupinfo( callback_function2 )
    }

    void callback_function2( data )
    {
        //记录军团信息
        group_info.Add( data );

        //请求任务信息
        function_request_task( callback_funciton3 );
    }

    void callback_function3( data )
    {
        //记录任务信息
        task_info.Add( data);

        //展示UI
        show_ui();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;伪代码展示了发送请求的逻辑顺序，这种逐个发送请求的方式，保证了逻辑顺序，同时也满足了对多样化功能的扩展，同一个请求可以在不同逻辑处拥有自己的自定义回调。&lt;/p&gt;

&lt;p&gt;单个连接的自定义方式确实保证了顺序，但也降低了网络连接效率，多个请求需要发起多个TPC连接，每个连接都需要等待上一个连接请求完毕后才能开始下一个请求，每次收到消息后都需要发起4次握手的断开连接‘仪式’，每次发起请求时又必须进行3次握手的建立连接‘仪式’，消耗网络连接资源降低了收发效率。&lt;/p&gt;

&lt;p&gt;另一种逐个发送请求的方式，为了保证请求的顺序进行，可以使用发送队列和接收队列来做逐个发送的模式。&lt;/p&gt;

&lt;p&gt;队列在请求和响应中起到了缓冲的作用，当连续使用HTTP请求，连续收到HTTP响应的时候，能够依次处理相应的逻辑。&lt;/p&gt;

&lt;p&gt;因为全程是只有1个线程在做请求处理，所以并不需要线程锁之类的操作。发送时，向队列推送请求实例。在逻辑更新上，判断是否有请求在队列里，有的话推出来，做HTTP请求操作，并将请求的相关信息存起来，当得到服务器响应时，调用请求信息中的回调函数，处理回调句柄。&lt;/p&gt;

&lt;p&gt;发送和接收队列的伪代码:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    //将请求推入队列
    void RequestHttp(Request req)
    {
        ListRequest.Push(req);
    }

    //逻辑更新
    void Update()
    {
        //是否完成HTTP
        If( IsHttpFinished() )
        {
            //开始新的请求
            Request  req = ListRequest.Pop();
            mCurrentRequest = req;
            StartHttpRequest(req);
        }
        else
        {
            //是否收到响应
            If(HttpIsDone())
            {
                //根据响应数据处理逻辑
                ProcessResponse(data);

                //完成HTTP
                FinishHttp();
            }
        }
    }

    //根据数据处理逻辑
    void ProcessResponse(Response data)
    {
        If(mCurrentRequest != null
            &amp;amp;&amp;amp; mCurrentRequest.Callback != null)
        {
            //回调句柄
            mCurrentRequest.Callback(data);
            mCurrentRequest = null;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上阐述了，在发送HTTP请求时的推入队列操作和在收到请求后的句柄响应操作，队列使我们做到了逐个请求以及逐个响应。&lt;/p&gt;

&lt;h6&gt;解决方案3：多连接与逐个发送，并行使用。&lt;/h6&gt;

&lt;p&gt;多连接提高网络请求效率但没有一致的响应顺序，逐个发送有一致的响应顺序网络请求效率则不够好。&lt;/p&gt;

&lt;p&gt;两者之间没有排斥关系，可以并行使用，既提高了网络请求效率，又保证了顺序。&lt;/p&gt;

&lt;p&gt;仍然使用前面解决方案1中的类 multiple&lt;em&gt;request ，原本 multiple&lt;/em&gt;request 类可以传入多个请求数据，并等待全部相应结束后再执行回调。然后再在 multiple_request 中回调中执行下一个请求。&lt;/p&gt;

&lt;p&gt;伪代码如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    //界面按钮
    void on_click()
    {
        //新建一个请求对象
        request1 = new request();
        request1.url = url1;
        request1.wwwform = new wwwform();
        request1.wwwform.AddField(&amp;quot;name1&amp;quot;,&amp;quot;value1&amp;quot;);

        //加入请求列表
        lst_request.Add(request1);

        //兴建一个请求对象
        request2 = new request();
        request2.url = url2;
        request2.wwwform = new wwwform();
        request2.wwwform.AddField(&amp;quot;name21&amp;quot;,&amp;quot;value21&amp;quot;);

        //加入请求列表
        lst_request.Add(request2);

        //新建一个请求对象
        request2 = new request();
        request2.url = url3;
        request2.wwwform = new wwwform();
        request2.wwwform.AddField(&amp;quot;name22&amp;quot;,&amp;quot;value22&amp;quot;);

        //加入请求列表
        lst_request.Add(request3);

        //新建多请求实例
        multiple_request req = new multiple_request();

        //开始多个请求对象开启HTTP请求
        req.StartRequest(lst_request, callback_function1);
    }

    void callback_fucntion1(lst_request)
    {
        //做些逻辑
        do_some_function(lst_request);

        //新建一个请求对象
        request1 = new request();
        request1.url = url1;
        request1.wwwform = new wwwform();
        request1.wwwform.AddField(&amp;quot;name1&amp;quot;,&amp;quot;value1&amp;quot;);

        //加入请求列表
        lst_request.Add(request1);

        //兴建一个请求对象
        request2 = new request();
        request2.url = url2;
        request2.wwwform = new wwwform();
        request2.wwwform.AddField(&amp;quot;name21&amp;quot;,&amp;quot;value21&amp;quot;);

        //新建多请求实例
        multiple_request req = new multiple_request();

        //开始多个请求对象开启HTTP请求
        req.StartRequest(lst_request, callback_function2);
    }

    void callback_function2(lst_request)
    {
        //将信息展示到UI
        show_ui(lst_request);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;伪代码中展示了如何多请求与逐个请求的并行使用，将多个请求看成一个请求的变体，将多个请求看成一个完整的功能块，就有了多请求与逐个请求的并行使用过程。&lt;/p&gt;

&lt;p&gt;伪代码中展示的编码过程太过繁琐，展示出每一步的编码是为了让读者能更容易理解，多请求连接与逐个请求并行使用的理念。&lt;/p&gt;

&lt;p&gt;在现实项目中，完全可以为每个网络功能新建一个类，继承 multiple_request 类，并且将所有参数写进子类中，一并发送，并且可以多次使用在多个地方。&lt;/p&gt;

&lt;p&gt;伪代码:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    //新建个父类继承 multiple_request 专门用来做某个功能，这个功能里需要请求多条数据
    class do_something : multiple_request
    {
        void StartRequest( int val1 , int val2, int val3, call_back )
        {
            //新建一个请求对象
            request1 = new request();
            request1.url = url1;
            request1.wwwform = new wwwform();
            request1.wwwform.AddField(&amp;quot;name1&amp;quot;,&amp;quot;value1&amp;quot;);

            //加入请求列表
            request_list.Add(request1);

            //兴建一个请求对象
            request2 = new request();
            request2.url = url2;
            request2.wwwform = new wwwform();
            request2.wwwform.AddField(&amp;quot;name21&amp;quot;,&amp;quot;value21&amp;quot;);

            //加入请求列表
            request_list.Add(request2);

            //新建一个请求对象
            request2 = new request();
            request2.url = url3;
            request2.wwwform = new wwwform();
            request2.wwwform.AddField(&amp;quot;name22&amp;quot;,&amp;quot;value22&amp;quot;);

            base.StartRequest(request_list, call_back);
        }
    }

    //ui上的按钮
    void on_click()
    {
        //实例化功能对象
        do_something = new do_something();

        //开始请求
        do_something.StartRequest(1,2,3, call_back_function1);
    }

    //回调1
    void call_back_function1(lst_request)
    {
        //做点事
        do_something(lst_requset);

        //实例化功能2的对象
        do_something2 = do_something2();

        //开始请求
        do_something2.StartRequest(3,2, call_back_function2);
    }

    //回调2
    void call_back_function2(lst_request)
    {
        //展示UI
        show_ui(lst_request);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上所描述的，在实际项目中可以用子类继承父类功能的方法，复用了请求的步骤，使得需要某个功能时使用起来更加便捷。&lt;/p&gt;

&lt;h6&gt;解决方案4：合并请求，并逐个发送合并后的请求包。&lt;/h6&gt;

&lt;p&gt;多个请求与逐一发送合并的解决方案，确实既提高了发送效率，又保证了顺序，但还是有几个缺点。&lt;/p&gt;

&lt;p&gt;缺点1，多开连接，连接数增多，服务器建立和断开连接的压力增大。&lt;/p&gt;

&lt;p&gt;缺点2，使用操作不方便，必须手动建立新功能类。&lt;/p&gt;

&lt;p&gt;缺点3，多功能间的顺序，必须手动排列顺序。&lt;/p&gt;

&lt;p&gt;客户端更希望的是多次请求能够被同时发出，收到的响应顺序也要按原来请求的顺序响应，并且要可以自定义回调句柄满足多样化的功能扩展。&lt;/p&gt;

&lt;p&gt;合并请求就成了更好的解决方案。合并多个请求的数据进一个请求中，再发起请求，一次打包多个请求，只发一次能全部响应回来，发送这个合并包则可以做到与发起多个连接同样的效果，并且响应也可以做到顺序一致性。&lt;/p&gt;

&lt;p&gt;合并请求，减少了连接数量，提高了网络效率，同时也可以保证顺序的一致性。&lt;/p&gt;

&lt;p&gt;如何实现呢？&lt;/p&gt;

&lt;p&gt;这需要服务端程序员一些配合，服务端需要将原本多个地址，每个地址对应的功能块的模式，改为同一个地址，并且改为用commoand id 字段来对应不同的功能块。&lt;/p&gt;

&lt;p&gt;我们以json为例，HTTP数据使用json格式，服务器响应也是json格式。每次请求，客户端都会发送格式给服务器，服务器收到后解析json格式数据，然后提取变量。&lt;/p&gt;

&lt;p&gt;我们在对多个请求进行合并时，可以将多个json请求格式，推入一个大的json数据中，为每个json数据添加一个序列号，以代表请求顺序，如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    //请求1
    {
        &amp;quot;request-order&amp;quot; : 1,
        &amp;quot;command&amp;quot; : 1001,
        &amp;quot;data1&amp;quot; : &amp;quot;i am text&amp;quot;,
        &amp;quot;data2&amp;quot; : &amp;quot;i am num&amp;quot;,
    }

    //请求2
    {
        &amp;quot;request-order&amp;quot; : 2,
        &amp;quot;command&amp;quot; : 2011,
        &amp;quot;book&amp;quot; : &amp;quot;i am text&amp;quot;,
        &amp;quot;chat&amp;quot; : &amp;quot;i am num&amp;quot;,
        &amp;quot;level&amp;quot; : 1，
    }

    //请求3
    {
        &amp;quot;request-order&amp;quot; : 3,
        &amp;quot;command&amp;quot; : 3105,
        &amp;quot;image&amp;quot; : &amp;quot;i am text&amp;quot;,
        &amp;quot;doc&amp;quot; : &amp;quot;i am num&amp;quot;,
    }

    //将1，2，3合并后的请求数据为
    {
        &amp;quot;data&amp;quot;:
        [
            {
                &amp;quot;request-order&amp;quot; : 1,
                &amp;quot;command&amp;quot; : 1001,
                &amp;quot;data1&amp;quot; : &amp;quot;i am text&amp;quot;,
                &amp;quot;data2&amp;quot; : &amp;quot;i am num&amp;quot;,
            }
            ,
            {
                &amp;quot;request-order&amp;quot; : 2,
                &amp;quot;command&amp;quot; : 2011,
                &amp;quot;book&amp;quot; : &amp;quot;i am text&amp;quot;,
                &amp;quot;chat&amp;quot; : &amp;quot;i am num&amp;quot;,
                &amp;quot;level&amp;quot; : 1;
            }
            ,
            {
                &amp;quot;request-order&amp;quot; : 3,
                &amp;quot;command&amp;quot; : 3105,
                &amp;quot;image&amp;quot; : &amp;quot;i am text&amp;quot;,
                &amp;quot;doc&amp;quot; : &amp;quot;i am num&amp;quot;,
            }
        ],
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;合并后多个json被推入数组中发送给服务器，服务器拿到数据后对data中的数据进行提取和处理，处理顺序按照request-order来做，每个数据块都有一个command字段，用这个字段来判断使用哪个功能模块，将数据传给该功能模块处理。&lt;/p&gt;

&lt;p&gt;每个功能模块处理完毕后，将所有响应数据都推入同一个json实例中，并且附上与请求数据中相同的request-order，再把整个响应数据发送给客户端，当客户端收到数据时，就可以通过request-order知道响应数据的顺序了，按照request-order排序后，再进行解析和回调，得到了与请求顺序一致的响应顺序。&lt;/p&gt;

&lt;p&gt;合并响应后的例子如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    //响应数据1
    {
        &amp;quot;response-order&amp;quot; : 1,
        &amp;quot;command&amp;quot; : 1001,
        &amp;quot;data1&amp;quot; : &amp;quot;response text&amp;quot;,
        &amp;quot;data2&amp;quot; : &amp;quot;response num&amp;quot;,
        &amp;quot;error_code&amp;quot; : &amp;quot;0&amp;quot;, 
    }

    //响应数据2
    {
        &amp;quot;response-order&amp;quot; : 2,
        &amp;quot;command&amp;quot; : 2011,
        &amp;quot;data1&amp;quot; : &amp;quot;response text&amp;quot;,
        &amp;quot;data2&amp;quot; : &amp;quot;response num&amp;quot;,
        &amp;quot;error_code&amp;quot; : &amp;quot;1&amp;quot;,
    }

    //响应数据3
    {
        &amp;quot;response-order&amp;quot; : 3
        &amp;quot;command&amp;quot; : 3105,
        &amp;quot;data1&amp;quot; : &amp;quot;response text&amp;quot;,
        &amp;quot;data2&amp;quot; : &amp;quot;response num&amp;quot;,
        &amp;quot;error_code&amp;quot; : &amp;quot;2&amp;quot;,
    }

    //合并后的响应数据
    {
        &amp;quot;error_code&amp;quot; : 0,
        &amp;quot;data&amp;quot;:
        [
            {
                &amp;quot;response-order&amp;quot; : 1,
                &amp;quot;command&amp;quot; : 1001,
                &amp;quot;data1&amp;quot; : &amp;quot;response text&amp;quot;,
                &amp;quot;data2&amp;quot; : &amp;quot;response num&amp;quot;,
                &amp;quot;error_code&amp;quot; : &amp;quot;0&amp;quot;, 
            }
            ,
            {
                &amp;quot;response-order&amp;quot; : 2,
                &amp;quot;command&amp;quot; : 2011,
                &amp;quot;data1&amp;quot; : &amp;quot;response text&amp;quot;,
                &amp;quot;data2&amp;quot; : &amp;quot;response num&amp;quot;,
                &amp;quot;error_code&amp;quot; : &amp;quot;1&amp;quot;,
            }
            ,
            {
                &amp;quot;response-order&amp;quot; : 3
                &amp;quot;command&amp;quot; : 3105,
                &amp;quot;data1&amp;quot; : &amp;quot;response text&amp;quot;,
                &amp;quot;data2&amp;quot; : &amp;quot;response num&amp;quot;,
                &amp;quot;error_code&amp;quot; : &amp;quot;2&amp;quot;,
            }
        ]
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;得到合并后的响应数据后，客户端要先提取data数据中的所有数据，以respose-order为基准进行排序，头部最小序号的先处理，解析，回调。&lt;/p&gt;

&lt;p&gt;不仅仅是合并，我们还要保证发送的顺序，多个合并请求一同发送则会遇到大麻烦，也就是顺序问题，所以需要用队列来规避。&lt;/p&gt;

&lt;p&gt;用了队列的方式保证请求的有序性，并且在队列之上进行操作请求合并，能更有效更便捷的进行合并。&lt;/p&gt;

&lt;p&gt;队列与合并结合的伪代码如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    //将请求推入队列
    void RequestHttp(Request req)
    {
        ListRequest.Push(req);
    }

    //逻辑更新
    void Update()
    {
        //是否完成HTTP
        If( IsHttpFinished() )
        {
            //推出多个请求进行合并
            lst_combine_req.Clear();
            for(int i = 0 ; i&amp;lt;10 ; i++)
            {
                Request  req = ListRequest.Pop();
                lst_combine_req.Add(req);
            }

            combine_request = CombineRequest(lst_combine_req);
            StartHttpRequest(req);
        }
        else
        {
            //是否收到响应
            If(HttpIsDone())
            {
                //排序
                sort(combine_request.lst_response);

                //循环处理每个响应逻辑
                for(int i = 0 ; i&amp;lt;combine_request.lst_response.count ; i++)
                {
                    //根据响应数据处理逻辑
                    data = combine_request.lst_response[i];
                    ProcessResponse(data);
                }

                //完成HTTP
                FinishHttp();
            }
        }
    }

    //根据数据处理逻辑
    void ProcessResponse(Response data)
    {
        If(mCurrentRequest != null
            &amp;amp;&amp;amp; mCurrentRequest.Callback != null)
        {
            //回调句柄
            mCurrentRequest.Callback(data);
            mCurrentRequest = null;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;具体逻辑中的操作伪代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    //按钮事件
    void on_click()
    {
        //请求玩家数据
        request_roleinfo( call_back_function1 );

        //请求军团数据
        request_groupinfo( call_back_function2 );

        //请求任务数据
        request_taskinfo( call_back_function3 );
    }

    //先回调的是这个句柄
    void call_back_function1( data )
    {
        //保存玩家数据
        save_roleinfo(data);
    }

    //再回调的是这个句柄
    void call_back_function2( data )
    {
        //保存军团数据
        save_groupinfo(data);
    }

    //最后收到任务数据时，表明前面的数据都已经收到了，就可以做一些逻辑处理
    void call_back_function3( data )
    {
        //保存任务数据
        save_taskinfo(data);

        do_something();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述伪代码中表现了，客户端可以随意的发送请求而不需要去关心顺序的问题，大大提高了程序员的网络逻辑编程效率。&lt;/p&gt;

&lt;p&gt;对多个请求进行合并后减少HTTP请求的次数，对速度的提升很有效果，但这里还有一些细节问题，比如多少个开始进行合并，或者多少时间内合并一次。&lt;/p&gt;

&lt;p&gt;为了让HTTP最大效率的得到提升，必须每次请求得到响应后就应该立即进行下一次HTTP请求，如果有等待合并间隔，反而减低了网络效率。不过每次合并数量可以做一些限制，比如有1000个请求，我们不能统统合并了，为了保证发送数据大小和回调数据大小合适，也保证服务器不会为了一下子需要处理1000个数据请求而当机，我们必须限制一次性合并的个数，比如每次最多合并10个请求数据包，来保证减少连接次数减少的情况下，服务器不会在瞬间压力过大。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第五章，3D模型与动画(四) - 3D模型的变与换4</title>
   <link href="http://www.luzexi.com/2019/05/18/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-3D%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8A%A8%E7%94%BB7.html"/>
   <updated>2019-05-18T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/05/18/Unity3D高级编程之进阶主程-3D模型与动画7</id>
   <content type="html">&lt;p&gt;前面讲解了些骨骼动画的基础知识，我们在基础知识上可以理解骨骼动画的原理。在骨骼原理之后，我们又对人物模型动画的换皮换装的原理了剖析一下，因为有了骨骼动画的基础知识支撑，我们在对换装换皮的方法和技巧上理解起来就更加的清晰了。&lt;/p&gt;

&lt;p&gt;其实看一遍是不够的，要看很多遍，而且要边想边看边实践，这样才有效果。要不怎么说理论这东西用处不够大呢，如果只有理论，那么这就是纸上谈兵，解决不了实际问题，反过来也是一样，只有实践则无法彻底了解原理和机制，我们就无法精进，总是觉得有什么东西被蒙在鼓里，运用起来不能得心应手。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h6&gt;有原理和又有实践，其实依然不行，还需要多思考多举一反三。要彻底理解一个知识点，真的难。在这条学习的道路上我们不能放弃，即使放弃了，也要想着什么时候能重新捡回来。人无完人，大家都一样，所有人都要经历失败，放弃，再重新捡起来，再失败，再放弃，再重新捡起来的过程，谁能更快的重新捡起来，就成了取胜的关键了，失败是必然的，就看谁能先重新站起来，再失败也是必然的，就看谁能一次次失败后还能站得住。&lt;/h6&gt;

&lt;p&gt;本篇我们要讲在骨骼动画原理之上，做些更高级的技巧，这些技巧都是基于上篇和上上篇的基础知识之上的。&lt;/p&gt;

&lt;p&gt;网格主要由顶点，三角形索引数组，uv这三个基础数据组成，也可以有顶点的法线和颜色数据。其中uv用于贴图，法线用于展示凹凸效果，顶点颜色则有其他多种用途。&lt;/p&gt;

&lt;p&gt;蒙皮骨骼动画，也就是SkinnedMeshRenderer，除了有这些网格数据外，又多了骨骼点和骨骼权重数据。骨骼点，是以父子或兄弟的关系相连的节点，它在Unity3D里的表象就相当于许多GameObject相互挂载并放在根节点下，除了这些看得见的GameObject节点外，骨骼点还需要旋转矩阵bindPoses，它主要是为了当父节点旋转移位时能更快的计算得到自身位移和旋转的结果矩阵，每个矩阵都是其父节点矩阵相乘所得到的结果。最后每个顶点都有自己的顶点数据，现在在顶点数据之上又多了些数据来表达被哪些骨骼的影响权重值，这就是顶点的骨骼权重数据。&lt;/p&gt;

&lt;p&gt;用最简洁的语言回顾了一下基础的知识。&lt;/p&gt;

&lt;h3&gt;6.捏脸&lt;/h3&gt;

&lt;p&gt;捏脸是一种行为方式，用以表达对对方的喜爱之情或对其某行为作出惩罚。网络游戏中泛指对虚拟角色样貌进行DIY的数据操作。&lt;/p&gt;

&lt;p&gt;捏脸看起来像是很复杂的技巧，在我们剖析一下后就会觉得也没有想象中的困难。&lt;/p&gt;

&lt;h6&gt;首先，捏脸最重要的部分就是换部位。&lt;/h6&gt;

&lt;p&gt;角色身上可以替换的部位有，不同形状的头，不同形状的上身，不同形状的腿，不同形状的脚，不同形状的手，其实还可以细分到更多，比如嘴，耳朵，胸，头发等，这些部件都可以从整体模型中拆分出来，单独成立一个模型，然后再选出来后拼装到整体模型上去。&lt;/p&gt;

&lt;p&gt;拆分出不同部位的模型，有了多个相同部位不同形状的模型后，我们就有了很多个模型部件可以替换，在捏脸时就可以选择不同的形状的部件。&lt;/p&gt;

&lt;p&gt;替换的过程其实就是上篇我们讲到的换装的过程，我们再来简单回顾下。&lt;/p&gt;

&lt;p&gt;我们必须所有模型都使用同一套骨骼，把骨骼以SkinnedMeshRenderer组件的方式实例化出来，我们暂时称它为‘根节点’，并挂上动画组件和动画文件，当播放动画时就可以看到骨骼会跟随每帧动画数据而变动。&lt;/p&gt;

&lt;p&gt;但此时还没有任何模型展示，我们把选中的部件模型也以SkinnedMeshRenderer组件的形式实例化出来，并挂载在‘根节点’下。&lt;/p&gt;

&lt;p&gt;现在挂载在‘根节点’下的部件模型只是静止的不会动的模型，虽然其自身有顶点的骨骼权重数据，但没有骨骼点的数据是无法计算出骨骼变化后的模型变化的。&lt;/p&gt;

&lt;p&gt;因此我们再把‘根节点’里的骨骼点数据赋值给这些模型部件，让他们能在每帧渲染前根据骨骼点的变化结合自身的骨骼权重数据计算出自身的网格变化情况。&lt;/p&gt;

&lt;p&gt;做完这些操作后，我们就算成功合成了一个由自己选择的人体部件并带骨骼动画的角色模型实例。&lt;/p&gt;

&lt;p&gt;当需要更换人体部件时，所需要的操作与合成一个角色模型的步骤一样，只是在这之上有了些小的变化，因为只替换某个部件，所以‘根节点’与其他没有更换的部件不需要被销毁，是可以重复利用的，只需要删除替换的部件实例。&lt;/p&gt;

&lt;p&gt;合成完模型看看这个角色，这么多部件都使用了SkinnedMeshRenderer，每个SkinnedMeshRenderer都有一定计算和drawcall的消耗，怎么办？合并。&lt;/p&gt;

&lt;p&gt;一种简单的办法就是仍然使用多个材质球进行渲染，在合并Mesh时使用子网格(SubMesh)模式，相当于只减少了SkinnedMeshRenderer组件的数量，并没有减少其他的消耗。&lt;/p&gt;

&lt;p&gt;另一种办法稍微复杂点，不使用子网格(SubMesh)模型，而是将所有模型合并成一个Mesh网格，使用同一个材质球。不过我们还是得保证有相同Shader的材质球进行合并，不相同的Shader的材质球不合并的原则，以保证角色渲染效果不变。&lt;/p&gt;

&lt;p&gt;把这么多材质球合并成一个的困难之处在于，贴图怎么办，uv怎么办？贴图我们采用实时合并贴图的方式，为了降低Drawcall，我们的办法实质上就是内存换CPU的方式，每次合成角色、更换部件时都重新合成一遍贴图，同时把uv设置在合并贴图后的某个范围内，因为uv的相对位置是不变的，所以只要整体移动到某个范围内就可以正常显示。&lt;/p&gt;

&lt;p&gt;这样模型的更换与合并，让角色捏脸系统有了基础的功能，而材质球、贴图的合并，优化了性能效果让这个系统更加完美。&lt;/p&gt;

&lt;h6&gt;其次是更换贴图&lt;/h6&gt;

&lt;p&gt;不同颜色的头发，不同颜色的手套，不同颜色相同形状的衣服，不同贴图相同形状的眼睛等，这些可以简单的使用贴图来达到目标的动作，就直接更换材质球里的贴图就可以了，不需要太复杂的操作，如果是采用贴图合并的方式来做的合并，那么就再重新合并一次贴图，uv则不需要任何变化。&lt;/p&gt;

&lt;h6&gt;再者是骨骼移动、旋转、缩放&lt;/h6&gt;

&lt;p&gt;除了更换部件、更换颜色的操作外，捏脸还有一个重要的功能，就是用户可以自由随意的DIY去塑造模型。例如把鼻子抬高点，把嘴巴拉宽点，把腰压细一点，把腿拉长一点等。&lt;/p&gt;

&lt;p&gt;由于模型的网格(Mesh)是根据骨骼点来变化的，每个组成网格的顶点都有自己的骨骼权重数据，所以只要骨骼点移动了，它们也跟着移动，骨骼点旋转了，它们也跟着旋转，骨骼点缩放了，它们也跟着缩放。于是我们可以利用这个特性来做一些操作，来让‘捏泥人’更加容易。&lt;/p&gt;

&lt;p&gt;不过问题也来了，骨骼点是随着动画一起动的，动画数据里的关键帧决定了骨骼点的变化，我们实时改变骨骼点位置是无法达到效果的，因为动画数据会强行恢复骨骼点，致使我们的操作变得无效。&lt;/p&gt;

&lt;p&gt;我们既要整个模型网格仍然依照原来的动画数据去变动，又要用某个骨骼点去影响某些网格怎么办？&lt;/p&gt;

&lt;p&gt;额外增加一些骨骼点，这些骨骼点是专门为用户可操作服务的骨骼点，并且这些骨骼点不加入到动画数据里。&lt;/p&gt;

&lt;p&gt;也就是说动画数据不会影响到这些骨骼点，动画播放时这些骨骼点是不会动的。&lt;/p&gt;

&lt;p&gt;然后为了能让网格随着，操作这些骨骼点儿发生变化，在顶点的骨骼权重数据里给这些骨骼点一些权重，这个权重能达到玩家操作效果就可以了，其他都由动画去决定变化，SkinnedMeshRenderer会在每帧根据骨骼点的变化计算出所有顶点的位置，也就是网格的变化形状。&lt;/p&gt;

&lt;p&gt;这样操作下来，我们就达到了先前说的，既要整个模型网格仍然依照原来的动画数据去变动，又可以让用户自定义操作骨骼点去影响网格变化。&lt;/p&gt;

&lt;h6&gt;最后是改变原始Mesh凹凸形状&lt;/h6&gt;

&lt;p&gt;只操作骨骼点来改变模型的捏脸效果还是不够的，因为毕竟骨骼点数量不能太多，顶点的骨骼权重数据也是有限的，无法通过增加大量的骨骼点来达到模型复杂变化的效果。&lt;/p&gt;

&lt;p&gt;于是，只能再另寻它方，这次我们回到了最基础的网格变化，由于蒙皮网格在每帧都从原始的网格加上骨骼点的变化数据来计算现在网格的形状的，那么改变原始网格的顶点数据，也同样可以改变网格在动画时的模型变化。&lt;/p&gt;

&lt;p&gt;对原始网格数据里的顶点进行变化，例如凹陷，拉伸，偏移等都可以影响整个模型在动画时的变化，因为蒙皮网格每帧的变化是根据原始网格而来的。&lt;/p&gt;

&lt;h6&gt;其实我们一直在围绕着基础知识做技术研究，基础知识和原理是核心，当我们实践时巩固了对基础知识和原理的理解，理论与实践相结合，并且不停地交替学习，逐渐得我们就能得心应手，运用自如，甚至还能厉害到无剑胜有剑的境界。&lt;/h6&gt;

&lt;h3&gt;7.动画优化&lt;/h3&gt;

&lt;p&gt;蒙皮动画太消耗CPU，为什么？&lt;/p&gt;

&lt;p&gt;因为所有蒙皮网格的变化都是由CPU计算得到的，并且无法利用多线程，也无法交给GPU去做，也就是没有谁能分担这项任务。&lt;/p&gt;

&lt;p&gt;更糟糕的是，游戏需要大量的蒙皮动画来达到丰富效果的目的。基本上所有项目都会极致得用尽动画功能，让游戏看起来很生动，很动感，很丰富，很饱满，很火热。&lt;/p&gt;

&lt;p&gt;效果再好，性能不行，只有高端机才能承受渲染压力的游戏，就无法对普罗大众产生吸引力，也就无法开启吸引力效应。所以对每个项目来说，对动画的优化也是迫在眉睫。&lt;/p&gt;

&lt;p&gt;本节就来说说3D模型动画的优化技巧。&lt;/p&gt;

&lt;h6&gt;用着色器代替动画&lt;/h6&gt;

&lt;p&gt;蒙皮动画说到实质处，就是网格顶点的变化，根据骨骼点与权重数据计算网格变化，它只是人们发明的一种每帧改变网格的方法而已，最终的目标都是，怎么让网格每帧发生变化，并且这种变化的形状是我们所期望的。&lt;/p&gt;

&lt;p&gt;只要达到这个目标，无论什么方法都是可行的。&lt;/p&gt;

&lt;p&gt;只要能想到这步，那么我们就有了另一种途径，即着色器(Shader)中的顶点着色器也可以改变网格顶点的位置。&lt;/p&gt;

&lt;p&gt;于是利用顶点着色器，与相应的算法就等得到一个随着时间变化的模型动画。&lt;/p&gt;

&lt;p&gt;利用着色器制造的动画，这种方式已经在许多项目中得到了利用，最常见就是随风摆动的草，会飘动的旗子，飘动的头发，左右摇摆的树，河流的波浪等。&lt;/p&gt;

&lt;p&gt;这些算法不在这里一一讲解了，全部搬到Shader着色器章节中去深入剖析，但大部分这些算法都利用了，游戏时间，噪声算法(noise)，数学公式(sin、cos等)来表达顶点的偏移量。&lt;/p&gt;

&lt;p&gt;除了顶点动画，还可以利用uv来做动画，比如不断流淌的水流就属于uv位移动画，又比如火焰效果中不断更换uv范围达到序列帧动画效果的uv序列帧动画，再比如不停旋转的面片动画，就可以用uv旋转来代替面片旋转，把CPU的消耗转入到GPU去消耗。&lt;/p&gt;

&lt;p&gt;uv动画的具体算法也不再这里一一讲解，都统一挪到Shader着色器章节中去了。&lt;/p&gt;

&lt;p&gt;用着色器代替动画实质上，就是用GPU消耗来分担CPU的效果，让两个芯片能更好的发挥其作用，而不是让某一个闲着没事干(大部分时候都是GPU很空)，另一个则忙的要死(大部分时候都是CPU很忙)。&lt;/p&gt;

&lt;p&gt;但用顶点动画，uv动画的算法来代替动画方式毕竟是有限的复杂度，当需要代替的动画复杂到没有固定算法规律可寻时，则需要寻求其他途径。&lt;/p&gt;

&lt;h6&gt;离线Bake每帧的模型网格，然后用更换网格的方式绘制每一帧，用内存换CPU&lt;/h6&gt;

&lt;p&gt;上面介绍了用着色器算法来动画，从而将CPU的消耗转移到了GPU消耗使得动画性能得以优化，但这样做的动画的复杂度是有限的，因为很多复杂的动画无法用算法来表达。&lt;/p&gt;

&lt;p&gt;这次我们不打算用算法了，即抛弃算法。我们来场无剑胜有剑的战斗，‘没有算法就是最大的算法’。&lt;/p&gt;

&lt;p&gt;我们想，动画的实质是，每帧显示的内容不一样，而每帧显示的内容不一样，就需要每帧都计算出一个不一样的形状。&lt;/p&gt;

&lt;p&gt;那么能不能，不计算？能。&lt;/p&gt;

&lt;p&gt;我们可以每帧都准备一个模型，每帧都展示一个已经准备好的不一样的模型，于是就有了每帧都有不同形状的模型需要展示，这不就是动画么。&lt;/p&gt;

&lt;p&gt;比如这是个5秒的蒙皮动画，每秒30帧，总共需要150个画面，我们需要准备150个模型来依次在每帧中播放。&lt;/p&gt;

&lt;p&gt;是不是代价很大，本来一个模型只要一个网格就够了，现在要准备150个网格，这就是内存换CPU的想法，到底值不值得这么做呢？&lt;/p&gt;

&lt;p&gt;假设这个场景只有2-3个模型在播放这个动画，那么为了这2-3个模型动画，我们就需要额外准备150个模型来播放动画，本来只要一个模型+骨骼就可以办到的事情，我们却要用150个模型来代替，加载这150个模型也是需要时间的，更何况内存额外加大了150倍。确实不值得。&lt;/p&gt;

&lt;p&gt;我们又假设，这个模型同时播放的这个动画的数量很多，比如100个以上，计算机每帧都需要通过模型+骨骼的方式计算出一个模型的变化，而且要重复计算100次，这时我们再用150个模型来代替这每帧持续的CPU消耗，就非常值得了。&lt;/p&gt;

&lt;h6&gt;计算机不再需要大量计算相同模型网格的变化，而只是在读取这150个模型时内存消耗以及加载的消耗，换来的是持续的高效的动画效果，这就是值得的。&lt;/h6&gt;

&lt;h6&gt;将每帧的网格偏移数据导出到图片，在Shader中让GPU通过图片里的数据来偏移顶点。&lt;/h6&gt;

&lt;p&gt;离线Bake每帧的模型网格，再通过直接改变网格数据来实时渲染动画，确实在大量渲染相同动画时起到了非常大的优化作用。&lt;/p&gt;

&lt;p&gt;但毕竟是还是会有大量的Drawcall的，每个模型一个Drawcall，100个模型100个Drawcall，GPU的压力很大。&lt;/p&gt;

&lt;p&gt;那么有没种方法合并这些drawcall？利用GPU Instancing。&lt;/p&gt;

&lt;p&gt;什么是GPU Instancing？这是GPU渲染API提供的一种技术，如果绘制1000个物体，它将一个模型的vbo提交给一次给显卡，至于1000个物体不同的位置，状态，颜色等等将他们整合成一个per instance attribute的Buffer给GPU，在显卡上区别绘制，它大大减少提交次数，这种技术对于绘制大量的相同模型的物体由于有硬件实现，所以效率高，更灵活，也避免了合批而造成内存浪费，并且原则上可以做GPU Skinning来实现骨骼动画的instancing。&lt;/p&gt;

&lt;p&gt;GPU Instancing最重要的一个特点是只要提交一次，就可以绘制1000个物体，把原本要提交1000次的流程，简化成了只需要提交1次，1000个Drawcall瞬间降为了1次。&lt;/p&gt;

&lt;p&gt;当然没那么简单，它是有条件的，首先条件是模型的着色器(Shader)要支持GPU Instancing，其次是这1000个模型他们位置、角度可以不一样，但都使用同一个模型数据，最后他们每帧都使用的是同样的模型数据，这样才能提交一次渲染全部。&lt;/p&gt;

&lt;p&gt;GPU Instancing 的条件有点苛刻，Shader要相同，材质球要相同，模型要相同，还不能有变形(就是不能有动画)。&lt;/p&gt;

&lt;p&gt;对于我们来说，要用GPU Instancing，就不能变模型了，怎么办？&lt;/p&gt;

&lt;p&gt;我们原来的方法是准备150个模型，每帧都渲染一个，现在换成，把这150个模型的顶点数据放入一张贴图里去，这张图总共有150行，每行都写入了所有顶点的坐标，每个像素数据 RGB 都分别代表 xyz 的顶点坐标，比如总共有3000个顶点，那么每行就有3000个像素，总共150行，这张图总共有 3000 * 150 个像素。&lt;/p&gt;

&lt;p&gt;然后把这张图，也相当于是网格的顶点数据传入着色器(Shader)，着色器根据传入的图中的每个像素去设置顶点，让GPU去改变网格而不是CPU，这样每次渲染前，所有模型都使用的是同一个模型，同一个材质球，同一个Shader着色器，符合了开启GPU Instancing的条件，只要提交一次模型数据，就能渲染1000个模型并且有动画，瞬间降低1000个Drawcall到个位数字。&lt;/p&gt;

&lt;p&gt;此时，我们不再需要骨骼了，也不需要SkinnedMeshRenderer了，只需要MeshRenderer来渲染模型就可以了，动画里的顶点变化交给了着色器去做，也可以认为是变相的顶点动画。&lt;/p&gt;

&lt;p&gt;这个着色器并不复杂，只是比普通的顶点着色器在传入参数时，多了个变量‘顶点索引’，根据这个顶点索引，来计算得到传入的贴图中的顶点坐标。&lt;/p&gt;

&lt;p&gt;伪代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    v2f vert(appdata v, uint v_index : SV_VertexID)
    {
            UNITY_SETUP_INSTANCE_ID(v); // gpu instance

            float f = _Time.y / _AnimLength;
            fmod(f, 1.0);

            float animMap_x = (v_index + 0.5) * _AnimWidth;
            float animMap_y = f;

            float4 pos = tex2Dlod(_AnimTexture, float4(animMap_x, animMap_y, 0, 0));

            v2f o;
            o.uv = TRANSFORM_TEX(v.uv, _MainTex);
            o.vertex = UnityObjectToClipPos(pos);
            return o;
    }

    fixed4 frag (v2f i) : SV_Target
    {
            fixed4 col = tex2D(_MainTex, i.uv);
            return col;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;顶点着色器中，用时间和动画长度计算出y的位置，也就是行数，再用顶点索引计算出列数，从而得到动画数据贴图中属于自己位置的像素，也就是顶点的坐标信息。&lt;/p&gt;

&lt;p&gt;取出这个像素后，就是这个顶点的坐标了，与世界坐标轴转换后即可使用。Shader中没有复杂的公式和原理，就是从图片中取出值来作为坐标去传递。&lt;/p&gt;

&lt;h6&gt;我们用这种操作方式，利用GPU Instancing 的功能，达到了合并Drawcall的目的，但同样也有很多缺陷，比如，如果只是使用普通的材质球嵌入Meshrender的方式，就会使得每个人物的动画都是一样的，不会错开来，也就是同一时间，很多模型，做相同的动作。如果这时实用不同的材质球实例来达到不同的动画时差后又会增加了drawcall，达不到减少drawcall的目的，那么就要用U3d的GPU Instance接口来达到目的。&lt;/h6&gt;

&lt;p&gt;即：用Graphics.DrawMeshInstanced 来将需要Instance的Mesh 通过调用Instance接口绘制。并且在绘制前，向材质球中传递动画数据，来实现不同的动画的时差。&lt;/p&gt;

&lt;h6&gt;又比如精度问题，如果要求模型动画有好的表现，就必须提高图片的精度，因为每个像素RGB的颜色就代表了顶点坐标信息，如果要求GPU支持float类型的贴图，一般需要gles3.0以上级别的机器，虽然现在也已经算比较普遍，但毕竟也有部分底端机器无法实现，是否降低动画精度，或者放弃些低端机也需要根据项目不同而深思熟虑下。&lt;/h6&gt;

&lt;h6&gt;LOD，动画LOD，网格LOD&lt;/h6&gt;

&lt;p&gt;借用GPU Instancing 的优势来合并Drawcall有好有坏，最大的坏处就是单个模型无法播放属于自己专有的动画而与其他相同的模型错开来。&lt;/p&gt;

&lt;p&gt;无法错开来播放动画，这个是最糟糕的。想要错开来播放属于自己的动画，那么事情又回来了我们最初的原点，骨骼蒙皮动画。&lt;/p&gt;

&lt;p&gt;对于1000个骨骼动画，并且每个人都必须有属于自己的动画序列，不能合并模型，不能合并材质球，只能用1000个Drawcall来支撑这巨大的消耗。&lt;/p&gt;

&lt;p&gt;也不是没有办法，不过首先我们要‘认命’，这1000个Drawcall是躲不过了，但可以退而求其次，用方法去降低消耗。&lt;/p&gt;

&lt;p&gt;骨骼蒙皮动画的最大消耗是，计算网格变化。那么这个计算网格的变化，究竟有哪些因素决定的？&lt;/p&gt;

&lt;p&gt;我们再一次回到了基础知识的原点，网格的变化是由，骨骼点与顶点的权重数据计算得到的。&lt;/p&gt;

&lt;p&gt;也就是说，有多少顶点，有多少骨骼，有多少权重数据，就有多少CPU要消耗。CPU的消耗与这三者任何一个都成正比。&lt;/p&gt;

&lt;p&gt;也就是说，顶点越少，骨骼数越少，权重数据越少，CPU的消耗就越少。&lt;/p&gt;

&lt;p&gt;但是顶点数少了，模型就不那么精细了，而骨骼数少了，动画就补那么精细了，而权重数据少了，网格变化就不那么精细了。&lt;/p&gt;

&lt;h6&gt;这是要用画面的质量来换取性能啊，伤筋动骨的事情还是少干干，毕竟游戏最重要画面质量不可动摇，这就相当于拿生命换钱一样，不可为。&lt;/h6&gt;

&lt;p&gt;我们还有LOD(Level of Detail)可以用，用远近的视觉差来优化性能开销，用内存来换取CPU。&lt;/p&gt;

&lt;p&gt;LOD的视觉差是利用，离摄像机太远的东西精细不精细无法分辨，精细和粗糙，在距离远的情况下效果是同样的。&lt;/p&gt;

&lt;p&gt;就这个视觉差效果，我们可以这么做LOD：&lt;/p&gt;

&lt;h6&gt;第一，为每个模型准备3-5套简化的模型，这些模型都一定以及肯定要带有骨骼权重数据，否则无法与骨骼关联播放动画，当摄像机与模型的距离拉远时启用较简单的网格，减少顶点数量。当摄像机拉近时则再次启用复杂的网格，加强表现。&lt;/h6&gt;

&lt;h6&gt;第二，同样的手法，准备多套骨骼，当摄像机拉远时启用较为简单的骨骼，减少骨骼数量。当摄像机拉近时则再次启用复杂的骨骼，加强表现。&lt;/h6&gt;

&lt;h6&gt;第三，SkinnedMeshRenderer的 SkinQuality 是决定顶点受多少根骨骼(最多4根)影响的变量，当摄像机拉远时设置为2根或者1根，当摄像机拉近时再恢复过来。&lt;/h6&gt;

&lt;p&gt;LOD也可以用到极致，LOD不只为了静态模型服务的，也同样可以为动画模型服务，虽然我们并没有用LOD降低任何Drawcall，但我们还是同样降低了很大的CPU开销，和降低Drawcall相比也有着异曲同工之妙。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第五章，3D模型与动画(四) - 3D模型的变与换3</title>
   <link href="http://www.luzexi.com/2019/05/12/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-3D%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8A%A8%E7%94%BB6.html"/>
   <updated>2019-05-12T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/05/12/Unity3D高级编程之进阶主程-3D模型与动画6</id>
   <content type="html">&lt;p&gt;简单叙述下上篇的内容。&lt;/p&gt;

&lt;p&gt;上篇我们了解到，一个简化模型的算法，以及普通网格和蒙皮网格的区别。其中蒙皮网格是专门用来制作动画的，它除了普通网格所需要的顶点，三角形，uv数据外，还需要骨骼数据，和每个顶点的骨骼权重数据。&lt;/p&gt;

&lt;p&gt;其中骨骼动画是由骨骼点组成的，每个骨骼点之间的关系，要么是父子关系，要么就是平行的兄弟关系，要么就是没有关系，这些骨骼点在Unity3D中对应到模型上的GameObject点。在这种骨骼结构下，当父节的骨骼点位移，旋转时，子节点的骨骼也同时相对于父节点位移和旋转。所以骨骼点之间的结构就是父子关系或平行结构关系。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;那么骨骼点是怎么影响到顶点的呢，又是如何判断影响哪些顶点的呢？&lt;/p&gt;

&lt;p&gt;骨骼动画中，需要顶点的骨骼权重数据，每个顶点都受到骨骼的影响，一个顶点最多被4个骨骼影响，所以在Unity3D中每个顶点都有一个BoneWeight实例，实例中描述了当前这个顶点对分别4个骨骼有多少权重，因为最多4个，每个顶点一个，所以顶点数组有多长，BoneWeight数组就有多长，当骨骼点移动时，将使用这些顶点权重值来计算顶点的旋转和偏移量。&lt;/p&gt;

&lt;p&gt;简单来说就是，用顶点上的骨骼权重数据，来确定该点会被哪些骨骼点所影响。&lt;/p&gt;

&lt;h6&gt;蒙皮动画分两步：第一步是用3DMax，Maya等3D模型软件在几何模型上建立一系列的骨骼点(bones)，并计算好几何模型的每个顶点受这些骨骼点的影响权重(BoneWeight)；&lt;/h6&gt;

&lt;h6&gt;第二步则是在Unity3D中用户或关键帧动画持续改变一系列骨骼点位置，几何模型随着骨骼点发生相应变形。&lt;/h6&gt;

&lt;p&gt;通常我们使用的都是关键帧动画，就是Unity3D里的Animation动画文件，在某个时间点上对需要改变的骨骼做一个关键帧，而并不是在每帧上都做关键帧的操作。&lt;/p&gt;

&lt;p&gt;使用关键帧作为骨骼的旋转位移点的好处是不需要每帧去设置骨骼点的位置变化，在关键帧与关键帧之间的骨骼位置，是由Animation动画组件做了平滑的插值计算得到，这样可以减少大量的人力劳动，相当于关键帧之间做了‘补间动画’，这些‘补间动画’的目的就是对需要改变的骨骼做平滑的位移或者旋转插值计算，得到相应的位置和旋转角度。&lt;/p&gt;

&lt;h6&gt;’补间动画‘在每帧都只对骨骼动画做了位置和旋转的改变，然后蒙皮网格组件(SkinnedMeshRender)在每帧必须重新计算骨骼与网格的关系，所以最终就有了‘补间动画’每帧改变一些列骨骼点，骨骼点被(SkinnedMeshRender)重新计算得到模型网格变化，于是每帧就呈现出不同的网格变化，于是就有了3D模型网格动画。&lt;/h6&gt;

&lt;p&gt;整个骨骼动画的呈现流程清晰了，我们来用Unity3D的API来整理下，让我们理解的更加透彻。&lt;/p&gt;

&lt;p&gt;举例代码和解释如下，重点在注释的解释：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    //新建个动画组件和蒙皮组件
    gameObject.AddComponent&amp;lt;Animation&amp;gt;();
    gameObject.AddComponent&amp;lt;SkinnedMeshRenderer&amp;gt;();
    SkinnedMeshRenderer rend = GetComponent&amp;lt;SkinnedMeshRenderer&amp;gt;();
    Animation anim = GetComponent&amp;lt;Animation&amp;gt;();

    //新建个网格组件，并编入4个顶点形成一个矩形形状的网格
    Mesh mesh = new Mesh();
    mesh.vertices = new Vector3[] {new Vector3(-1, 0, 0), new Vector3(1, 0, 0), new Vector3(-1, 5, 0), new Vector3(1, 5, 0)};
    mesh.uv = new Vector2[] {new Vector2(0, 0), new Vector2(1, 0), new Vector2(0, 1), new Vector2(1, 1)};
    mesh.triangles = new int[] {0, 1, 2, 1, 3, 2};
    mesh.RecalculateNormals();

    //新建个漫反射的材质球
    rend.material = new Material(Shader.Find(&amp;quot;Diffuse&amp;quot;));

    //为每个顶点定制相应的骨骼权重
    BoneWeight[] weights = new BoneWeight[4];
    weights[0].boneIndex0 = 0;
    weights[0].weight0 = 1;
    weights[1].boneIndex0 = 0;
    weights[1].weight0 = 1;
    weights[2].boneIndex0 = 1;
    weights[2].weight0 = 1;
    weights[3].boneIndex0 = 1;
    weights[3].weight0 = 1;

    //把骨骼权重赋值给网格组件
    mesh.boneWeights = weights;

    //创建新的骨骼点，设置骨骼点的位置，父节点，和位移旋转矩阵
    Transform[] bones = new Transform[2];
    Matrix4x4[] bindPoses = new Matrix4x4[2];

    bones[0] = new GameObject(&amp;quot;Lower&amp;quot;).transform;
    bones[0].parent = transform;
    bones[0].localRotation = Quaternion.identity;
    bones[0].localPosition = Vector3.zero;
    bindPoses[0] = bones[0].worldToLocalMatrix * transform.localToWorldMatrix;

    bones[1] = new GameObject(&amp;quot;Upper&amp;quot;).transform;
    bones[1].parent = transform;
    bones[1].localRotation = Quaternion.identity;
    bones[1].localPosition = new Vector3(0, 5, 0);
    bindPoses[1] = bones[1].worldToLocalMatrix * transform.localToWorldMatrix;

    mesh.bindposes = bindPoses;

    //把骨骼点和网格赋值给蒙皮组件
    rend.bones = bones;
    rend.sharedMesh = mesh;

    //定制几个关键帧
    AnimationCurve curve = new AnimationCurve();
    curve.keys = new Keyframe[] {new Keyframe(0, 0, 0, 0), new Keyframe(1, 3, 0, 0), new Keyframe(2, 0.0F, 0, 0)};

    //创建帧动画
    AnimationClip clip = new AnimationClip();
    clip.SetCurve(&amp;quot;Lower&amp;quot;, typeof(Transform), &amp;quot;m_LocalPosition.z&amp;quot;, curve);

    //把帧动画赋值给动画组件，并播放动画
    anim.AddClip(clip, &amp;quot;test&amp;quot;);
    anim.Play(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上的Unity3D代码就呈现了，几何模型数据，蒙皮动画数据，从无到有的过程。&lt;/p&gt;

&lt;p&gt;我们再返回去看在蒙皮动画第一步中权重的计算决定了蒙皮算法的效果，如果想要几何模型发生自然、高质量的形变，必须得有一种高效准确的权重计算方法。&lt;/p&gt;

&lt;p&gt;这里简单讲一下蒙皮的计算方式，以了解下计算原理。&lt;/p&gt;

&lt;p&gt;线性混合蒙皮（Linear Blending Skinning，LBS)是最最常用的蒙皮计算方式，由于它的计算速度优势使得其成为商业应用中最主要的方法之一。&lt;/p&gt;

&lt;p&gt;什么是线性混合蒙皮计算方式呢？简单说就是，当前顶点位置变化 = 初始位置 + 骨骼点变化1 * 骨骼权重1 + 骨骼点变化2 * 骨骼权重2 ....&lt;/p&gt;

&lt;p&gt;那么直接使用这种线性混合计算蒙皮的方式效果有点粗糙，为了更好的效果。[Jacobson et al. 2011]提出了一种有界双调和权重（Bounded Biharmonic Weights，BBW）的计算方法，该权重能使得几何模型发生平滑变形，这个算法后来就成为了我们现在最常使用的骨骼蒙皮动画的计算方式。&lt;/p&gt;

&lt;p&gt;他大概的意思就是说，既然网格数据的变化计算量大，线性混合计算的速度又是最快的，我们可以在线性计算的基础上加以改进。在线性蒙皮混合计算公式中，初始位位置无法改变，骨骼点的变化也无法改变，所以权重计算骨骼点的变化的量决定了最终效果是否好的关键。&lt;/p&gt;

&lt;p&gt;于是他就提出了，有界双调和权重的计算方法，其数学表达式如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/5/bone-bbw.jpg&quot; alt=&quot;有界双调和权重的计算方法&quot;&gt;&lt;/p&gt;

&lt;h6&gt;由于蒙皮动画是每帧都通过骨骼点来计算网格的变化的，如果骨骼点很多，网格很复杂(顶点或者面数很多)那么消耗的CPU就很多，因为网格里的顶点都需要通过蒙皮算法来算出顶点的变化，这些都是靠CPU来计算的。因此在制作模型动画的时候，特别要注意，同屏里有多少蒙皮动画在播放，以及每个蒙皮动画中，骨骼的数量有多少，网格的面数有多复杂，如果太多太复杂就会巨量的消耗CPU。&lt;/h6&gt;

&lt;h3&gt;5.人物3D模型动画换皮换装&lt;/h3&gt;

&lt;p&gt;有了上面的这些3D模型和骨骼动画的知识，我们在3D模型动画换装这种常见的游戏功能的编码设计上，就显得简单的多了。&lt;/p&gt;

&lt;h6&gt;首先，为了达到模型动画的动态拼接，我们必须一个人物只使用一套骨骼。&lt;/h6&gt;

&lt;h6&gt;其次，把骨骼和模型部件拆分开来，骨骼文件只有骨骼数据，每个部件的模型文件只包含了它自己的模型数据，同时它也必须包含了顶点上的骨骼权重数据。&lt;/h6&gt;

&lt;p&gt;用Unity3D的术语来说就是，把一个人物模型拆分成有很多个Fbx，其中一个Fbx只有骨骼数据，其他Fbx是每个部件的模型数据，它们都带有已经计算好的骨骼权重数据。&lt;/p&gt;

&lt;h6&gt;然后，把骨骼数据和模型动画都动态拼接起来。&lt;/h6&gt;

&lt;p&gt;具体步骤是，用骨骼Fbx模型数据实例化成一个SkinnedMeshRenderer，这样基础的骨骼数据就包含在这个实例里了。再把需要显示的各个部件Fbx模型数据实例化出来，拥有自己的SkinnedMeshRenderer，然后把骨骼信息从前面骨骼SkinnedMeshRenderer里取出来赋值给自己。&lt;/p&gt;

&lt;p&gt;这样每个部件都进行了SkinnedMeshRenderer实例化，SkinnedMeshRenderer可以渲染出自己的模型效果，并且自己的SkinnedMeshRenderer有了自己的骨骼数据，每个部件模型上也都有骨骼的权重数据，使每个模型部件针对骨骼动画是有效的。&lt;/p&gt;

&lt;h6&gt;再然后，在骨骼的SkinnedMeshRenderer上挂上Animator来播放动画文件，动画改变的是骨骼点，当动画播放时骨骼点会针对动画关键帧进行位移和渲染，由于部件模型的骨骼数据都是从骨骼的SkinnedMeshRenderer上映射过来的，所以当骨骼点动起来时就能带动众多的模型部件一起动起来。&lt;/h6&gt;

&lt;p&gt;当骨骼动画的SkinnedMeshRenderer上的动画文件开始播放时，每个部件也会随着骨骼点的变动而不断的计算出网格模型的变动情况，进而在渲染上体现出部件模型的动画效果。&lt;/p&gt;

&lt;h6&gt;最后，当我们需要更换人物上的某个部件模型时，只需要把原有的部件模型实例删除，再实例化出那个我们需要的部件模型，并把骨骼数据赋值给它就完成了操作，更换的操作看上去很简单，在表现上就是更换了人物的某个部件，脸，或腿，或手，或腰，或脚。&lt;/h6&gt;

&lt;p&gt;这种方式虽然是最简单的，但并不是最好的方式，比如人物拆分成了5个部件，头，手，身体，腿，脚，就需要6个SkinnedMeshRenderer来支撑，其中1个为骨骼动画的SkinnedMeshRenderer，其他5个为部件模型的SkinnedMeshRenderer，看上去很不友好，也就是说一个人物要至少5个Drawcall来支撑。&lt;/p&gt;

&lt;p&gt;骨骼动画已经很消耗性能了，还需要5个材质球去消耗5个drawcall，加重了性能消耗的力度。&lt;/p&gt;

&lt;p&gt;我们有更好的办法，我们希望一个人物动画只使用一个drawcall，那么我们就需要把这5个部件合并成一个模型，他们都使用同一个材质球，模型合并好办，使用Unity3D的Mesh.CombineMeshes就可以实现。&lt;/p&gt;

&lt;p&gt;那么贴图怎么办？也同样合并。在每次初始化拼接一个人物模型时，或者更换人物的部件模型时，将5张贴图动态的合并成一张，并在合并贴图的同时需要改变每个模型部件的uv，将他们的uv偏移到这张合并整图的某个范围内。&lt;/p&gt;

&lt;p&gt;这样一来，每个人物模型只需要消耗1个drawcall，减轻了gpu的负担。从CPU消耗来看，拼接的操作只存在于人物初始化，和更换部件模型时才会有消耗，所以合并贴图和模型的消耗并不频繁。&lt;/p&gt;

&lt;p&gt;伪代码为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    function change_role_part( list of part_fbx )
    {
        root = new SkinnedMesh(&amp;#39;role_bone.fbx&amp;#39;);

        combine_mesh = new Mesh();
        combine_tex = new Texture();

        for( item in part_fbx )
        {
            item.mesh.uv = item.uv + offset;

            combine_mesh.combine(item.mesh);

            combine_tex.combine(item.texture);
        }

        root.mesh = combine_mesh;
        root.texture = combine_tex;

        return root;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>思路探讨(二十四) 要勇敢的相信自己</title>
   <link href="http://www.luzexi.com/2019/05/01/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A824.html"/>
   <updated>2019-05-01T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/05/01/思路探讨24</id>
   <content type="html">&lt;p&gt;你是很厉害的人物，就像是无所不能的一样，但凡你接触到的都能成功搞定。&lt;/p&gt;

&lt;p&gt;我很确信的知道所有看我文章的读者都是很聪明的人，我认为你们就应该这么认为自己。&lt;/p&gt;

&lt;p&gt;我为什么要这么认为？&lt;/p&gt;

&lt;p&gt;因为我知道人与人之间的区别就是思想上的区别。你在想什么，怎么想的，决定了你的现在和你的未来。&lt;/p&gt;

&lt;p&gt;就比如现在我就是这么认为，你们是很聪明的，很棒的，很有能力的一群人，我认为读我的文章的人，都是这个世界上很厉害的人，无论你们来自哪个地方，都那个地方的佼佼者。&lt;/p&gt;

&lt;p&gt;这也同时映射出我是很棒的，是聪明的，是厉害的人。&lt;/p&gt;

&lt;p&gt;我不是反夸自己，因为我相信自己是个厉害的人物，是个聪明的人，是个很棒的人，不论现在是不是，未来一定是。在变成未来那个很厉害的人之前，所有阻碍和困哪，都不值得去太在意。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h6&gt;我只关注那个未来画面里的我要成为的那个厉害的人，我只关注我是如何变成那个人的这个过程，只关注我要如何可以更快更好的变成未来那个人的方法，只关注我有没有按照变成未来那个人的方向去行动。&lt;/h6&gt;

&lt;h6&gt;除了上面这些，其他的一切都不值得我在意，因为我很坚信我能成为我心中的那个很棒的人。钱没了就没了，再去赚，下次小心点，贵重物丢了就丢了，再买一个，下次小心点，事情失败了就失败了，再来一次，下次小心点，事情变遭了，尽力修复，下次小心点。&lt;/h6&gt;

&lt;p&gt;你看，我并没有把注意力聚焦在那些阻碍我发展的事情上，而是把所有的注意力都集中在了我相信的那个事情上。其他所有的阻碍、困难、失败，都被我轻描淡写的掠过了，而我则在这些苦难后还在继续向前走。&lt;/p&gt;

&lt;p&gt;这就不就是，我们生活中一直幻想着的那个，聪明的，冷静的，有远见的，不斤斤计较的，充满智慧的人么。我们每天都在期盼有一个这样厉害的家伙成为自己的合作伙伴。&lt;/p&gt;

&lt;p&gt;成为这样的人其实很简单，只要你想，就能成。&lt;/p&gt;

&lt;h6&gt;是的，只要你把注意力集中在你想的那个东西上，其他事物都是次要的。如果我们把注意集中在未来的美好事物上，我们就能在当下成为一个聪明智慧的人，并且在未来成为画面里那个很棒的人。&lt;/h6&gt;

&lt;p&gt;不知道你有没有和我有同样的体会：回忆过去的时候，发现，很多很多事情都是因为我们不相信，所以才没有成，也有很多很多事情只是因为我们相信我们能成才成就的。我们能否做成一件事，全靠我们有多少的相信（即我相信的力度），我‘有点’相信，这个事情成功的概率就有是‘有点’，如果我‘非常’相信，那么这个事情的成功率就有‘非常’高。&lt;/p&gt;

&lt;p&gt;我相信我今天存进银行的钱，明天就能取出来，那么明天确实能取出来。&lt;/p&gt;

&lt;p&gt;如果我不相信我今天存进银行的钱能取出来，那么明天真的有可能取不出来。（如果有一天社会动荡到你完全不相信存进银行的钱是安全的时候，明天银行就会因挤兑而倒闭）&lt;/p&gt;

&lt;p&gt;我不是神棍，而是告诉大家，让人相信某件事是很难的，让人不相信某件事业也同样很难。就比如我如何让你不相信，存进银行的钱，明天取不出来，这件事，很难。因为现在的社会环境让你非常相信，存进银行的钱，明天就能取出来，我是很难改变你的想法的。就像我无法让你相信，你以后会竞选总理并且获胜一样，很难让你有这种相信的想法。但我能让你相信，我的想法是对，并且对你很有用，这个相对容易点，但也不是针对每个人都有效。&lt;/p&gt;

&lt;h3&gt;让一个人相信一件事，或者让一个人不相信一件事都非常难，概括可以说，要改变一个人的想法非常难。&lt;/h3&gt;

&lt;p&gt;我想了很久，关于人与人之间的区别到底在哪里的问题。&lt;/p&gt;

&lt;p&gt;是钱么？&lt;/p&gt;

&lt;p&gt;如果是钱，那么为什么有钱的人也同样迷茫，也同样冲动，也同样不知所措，同样犯与没钱的人一样的错误，也同样无知。&lt;/p&gt;

&lt;p&gt;是知识么？&lt;/p&gt;

&lt;p&gt;如果是知识，那么为什么博士以及博士后不是在掌控世界，理论上说他们的知识量是最大的，为什么依旧与普通人一样，迷茫，冲动，不知所措，也同样表现的无知。&lt;/p&gt;

&lt;p&gt;其实都不是。人与人之间的区别就是思维，和，想法。你怎么想的，决定了你怎么做，你想的是什么，决定了你最终会成为什么样人。&lt;/p&gt;

&lt;p&gt;如果你每天想着，我基因不好，我老是身体不好，我总是生病，我比较笨，我不会运动，我很穷，我被穷困所限制，老是有人和我作对，我的人生是苦难的，我有才但始终没有伯乐，我每次都被别人抛弃，我在变老，我怕我会破产，我总是迟到，我总是经不住诱惑，别人老是来占我便宜。等等等等。&lt;/p&gt;

&lt;p&gt;那么你就会成为你所想的，你的基因一定不好，你的身体肯定会坏，你肯定总是生病，你肯定比较笨，你肯定不擅长运动，你肯定富不起来，你的人生肯定是苦难的，你肯定遇不到伯乐，你肯定每次都被抛弃，你肯定老的很快，你肯定破产，你肯定迟到.....&lt;/p&gt;

&lt;p&gt;你想什么，就是你希望得到的，事情就会往这个方向发展，最终就会实现你所想。&lt;/p&gt;

&lt;p&gt;反之，如果我们的想法能更加积极点，乐观点，美好点，光明点，那么事情就会向更加积极，乐观，美好，光明的方向去走。&lt;/p&gt;

&lt;p&gt;如果我每天都认为，我的人生是完美的，我拥有很好的基因，我身体很棒，我免疫力很好，我很会运动，我总是很幸运，我总能遇到伯乐，我总是能和大家搞好关系，我永远都是那么年轻，我会越来越富有，我总是很准时的赴约，我总是很理智，别人都很喜欢跟我合作，我的知识会越来越渊博，我很智慧，我总是很受人照顾，我会很厉害。等等等等。&lt;/p&gt;

&lt;p&gt;那么事情就会真的向我想象的方向发展，我的基因很完美，我很健康，我很理智，我总是很受欢迎，我总是能遇到伯乐，我变得越来越富有，我很幸运，我看上去一直很年轻。&lt;/p&gt;

&lt;h6&gt;难道说真的有什么外在因素在决定这些事情的发生吗？并没有，原因在人的内心：我怎么想，决定了事情怎么走。&lt;/h6&gt;

&lt;h3&gt;人与人之间最大的区别就在这里，可以用很简单的一句话概括：你相信什么？信则有，不信则无。&lt;/h3&gt;

&lt;h3&gt;你所相信的，就是你能得到的。同样的，你所不相信的，就是你得不到的。&lt;/h3&gt;

&lt;h3&gt;无论你遭遇什么境况，都要勇敢的相信自己，我是健康的人，我是幸运的人，我是厉害的人，我是受欢迎的人，我是幸福的人。&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第五章，3D模型与动画(四) - 3D模型的变与换2</title>
   <link href="http://www.luzexi.com/2019/04/27/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-3D%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8A%A8%E7%94%BB5.html"/>
   <updated>2019-04-27T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/04/27/Unity3D高级编程之进阶主程-3D模型与动画5</id>
   <content type="html">&lt;p&gt;上一篇介绍了一些3D模型的渲染基础知识，并且将这些基础知识运用在了3D模型的切割、拉伸、扭曲当中。&lt;/p&gt;

&lt;h6&gt;技术原理是最重要的核心点，人只要理解了技术原理，就能将技术表象解释清楚，在实际项目中将这种技术运用自如。&lt;/h6&gt;

&lt;h6&gt;实际中并没有这么容易，理解和运用自如之间，还是有一段很大的差距的，在实际项目过程中，理解只是理解，只是能解释这种表象是如何发生的，运用自如，则是熟知了原理的优缺点，不再对这种技术有任何的偏见，能做什么不能做什么，做什么有什么优势，有什么有什么劣势，有了更加深入的理解，当没有了这么多的偏见，运用起来自然得心应手。&lt;/h6&gt;

&lt;h6&gt;理论上说，我们每个人把所有精力先放在理解原理上，然后再去做技术实现不就轻松了吗。理论上是这样的，但人类头脑的进化毕竟还没到那么高级的程度，还不能轻松的把抽象的事物短时间内在脑中有条不紊的整理清楚，这还没把人的情绪影响算进去，人性毕竟是弱点多于优点的，虽然表面上能处理一些看上去相对复杂的事物，但从学习知识的角度看，人类的大脑还是不够高级，说实话应该说是有点低级。&lt;/h6&gt;

&lt;h6&gt;对于这么低级的大脑，我们只能通过反复的学习，然后实践，再学习，再实践，很多遍后才能对原理的理解推进那么一点点，我们也只能依靠长时间的、漫长时间的、很长很长时间的磨练，从有兴趣到放弃，再重新拿起到再放下，再拾取再举起再抛向天空，反反复复但始终不离弃，才能最终到达运用自如的境界。人之间没有聪明与不聪明之分，有的人善于思考，善于举一反三是因为前面很长一段时间他都一直在练习这种多思考和举一反三的方式，当我们看到他时他的思维方式已经成型，这些并不是先天就有，而是通过后天努力得来。天才这东西，不管它是否真的存在，我们都应该忽略它，转而更加专注于自己的努力上。&lt;/h6&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;3.简化模型&lt;/h3&gt;

&lt;p&gt;经常在项目中看到有模型有几万个面，甚至几十万个面的情况，模型面数多的好处是能表现的更加精细，画面更细腻，但坏处却是加重了渲染压力，渲染的面数越多压力越重，帧率越低。所以一般都会对场景中的单个3D模型进行限制，或者对整体场景面数进行限制。&lt;/p&gt;

&lt;p&gt;画面质量和性能需要权衡，通常都是要求模型降低面数而画面质量不变，LOD(Level Of Detail)在这里就可以发挥巨大的作用，随着镜头的靠近逐级更换更细腻的模型很好的解决这种需求。&lt;/p&gt;

&lt;p&gt;简化模型在LOD中用到的最多，有手动用3D模型软件简化的，也有用程序工具式的简化模型，手动简化更加平滑但费时间，时间成本大，而用程序工具去简化则快速，但不平滑。我们可以根据项目的需求，规模，画质等要求来权衡是否使用程序工具去简化模型，或者更加灵活点，一部分不太需要细致的模型使用程序工具简化，而另一部分比较需要细节化的模型使用手动简化，这样即照顾到了画质，又照顾到了工期。&lt;/p&gt;

&lt;p&gt;这里我们来具体讲述下简化模型的算法。虽然市面上简化模型的插件和工具很多，但如果我们对原理有了更深入了解，在实际的项目中运用这些工具会更加自如且得心应手。&lt;/p&gt;

&lt;p&gt;3D模型是由点，线，面组成。面由点和线组成，减面相当于减点和线，单纯的减去点和线容易引起模型变化不受控制，收缩线上的两顶点成为一个顶点则更加靠谱些。[Garland et al. 1997]提出了一种基于二次项误差作为度量代价的边收缩算法，其计算速度快并且简化质量较高。&lt;/p&gt;

&lt;p&gt;该方法是去选择一条合适的边进行收缩时，定义一个边的收缩都是有代价的，每个顶点也有自己的代价，对于网格中的每个顶点v，我们预先定义一个4×4的对称误差矩阵Q，那么顶点v=[x y z 1]的代价为其二次项形式Δ(v)=vQ。&lt;/p&gt;

&lt;p&gt;同时也定义了边收缩的代价公式，假设对于一条收缩边(v1,v2)，其收缩后v1，v2顶点收缩为v3，我们定义顶点v3的误差矩阵Q3为Q3=Q1 + Q2，也就说是v1，v2的这条边的收缩为v3后代价为Δ(v3) = v3(Q1 + Q2)，以此类推每条边都有一个代价。&lt;/p&gt;

&lt;p&gt;有了上面的代价公式，下面的网格简化算法就容易理解多了：&lt;/p&gt;

&lt;p&gt;1，对所有的初始顶点都计算它们各自的Q矩阵.&lt;/p&gt;

&lt;p&gt;2，选择所有有效的边（这里取的是两点有连线的边，也可以将两点有连线且距离小于某个阈值的边归为有效边）&lt;/p&gt;

&lt;p&gt;3，对每一条有效边(v1,v2)，计算最优收缩目标v3.误差(Q1+Q2)是收缩这条边的代价（cost）&lt;/p&gt;

&lt;p&gt;4，将所有的边按照cost的权值都放在队列中从小到大进行排序。&lt;/p&gt;

&lt;p&gt;5，每次移除队列顶部的代价（cost）最小的边，也就是收缩最小代价的边，删除v1，v2，并用v3替换。&lt;/p&gt;

&lt;p&gt;6，重复1-5步骤，直到顶点数少于某个设定的值，或者所有cost代价大于某个值，则停止收缩算法。&lt;/p&gt;

&lt;p&gt;整个算法并不复杂，关键这里有两个核心问题需要解决，一个是每个顶点的初始Q矩阵如何计算，另一个是v1，v2收缩为v3时的坐标位置该怎么计算。&lt;/p&gt;

&lt;p&gt;在原始网格模型中，每个顶点可以认为是其周围三角片所在平面的交集，也就是这些平面的交点就是顶点位置，因此我们定义顶点的误差为顶点到这些平面的距离平方和。&lt;/p&gt;

&lt;p&gt;由此定义我们可以计算出每个顶点的初始误差矩阵Q：Δ(v)为顶点误差值 = vQ = 0，因为初始顶点的误差值为0，因为是它与相交平面的距离平方和为0，那么初始顶点的误差矩阵Q也可以由此计算出来。&lt;/p&gt;

&lt;p&gt;至于v1，v2收缩为v3时如何选择最优的坐标，简单的方法就是取v1，v2，和中点(v1+v2)/2的三个中收缩代价最小的一个为最优选择，另一种策略则是数值计算顶点v3位置使得Δ(v3)最小，由于Δ的表达式是一个二次项形式，因此令一阶导数为0。&lt;/p&gt;

&lt;p&gt;按照这个算法步骤，不停的收缩最小代价的边，直到顶点数量小于某个值时停止，最终将得到一个简化的模型。&lt;/p&gt;

&lt;h3&gt;4.蒙皮骨骼动画&lt;/h3&gt;

&lt;p&gt;有了3D模型，又会有3D模型动画，那么3D模型和3D模型动画之间到底有什么区别，我们先做个了解。&lt;/p&gt;

&lt;p&gt;为了能让读者们更直观的了解模型与模型动画的不同，我们从 Unity3D 的 MeshRenderer 和 SkinnedMeshRenderer 上作为切入点。&lt;/p&gt;

&lt;p&gt;在Unity3D中，MeshRenderer 与 SkinnedMeshRenderer 分别用于渲染 3D模型 和 3D模型动画。&lt;/p&gt;

&lt;p&gt;普通网格(MeshRenderer)渲染的是模型，由3D模型数据组成，蒙皮网格(SkinnedMeshRenderer)渲染的也是模型，也是由3D模型数据组成。&lt;/p&gt;

&lt;p&gt;不过蒙皮网格被创造出来主要是为了动作动画服务的，所以蒙皮网格除了3D模型数据外还有骨骼数据以及顶点权重数据。&lt;/p&gt;

&lt;p&gt;假设说蒙皮网格(SkinnedMeshRenderer)上没放置任何骨骼数据，那么它和普通网格的作用没有任何区别，都只能渲染静止不动的3D模型。&lt;/p&gt;

&lt;p&gt;有很多人并没有理解骨骼动画的原理，所以在实际项目中对3D模型骨骼动画的运用有很多误区，这里我们有必要阐述一下骨骼动画的原理，以及在Unity3D的SkinnedMeshRenderer上骨骼动画是如何组装和组成的。通过对骨骼动画的原理解剖和对 SkinnedMeshRenderer 的解剖，我们能彻底的明白骨骼动画的计算和渲染其实并不复杂，揭开这层薄薄的面纱后是一片平坦的开阔地。&lt;/p&gt;

&lt;p&gt;我们知道3D模型要做动作，首先是模型上的点，线，面要动起来，只有点，线，面动起来了，在每帧渲染的时候才能在每帧渲染时有不同的3D模型形状。&lt;/p&gt;

&lt;p&gt;那么怎么让点，线，面动起来呢？有两种方法，一种是用一个算法来改变顶点位置，叫顶点动画，另一种是用骨骼机制去影响顶点，叫骨骼动画。&lt;/p&gt;

&lt;p&gt;这两种都是通过每一帧改变模型上的各个顶点位置，从而让模型变形，进而形成动画的效果，每一帧模型的形状不一样，播放时形成动画，只是方法不同。&lt;/p&gt;

&lt;p&gt;模型上成千上万的顶点，如果每个都要手动来调整，每一帧都要手动调整一次，这种量级的劳动力，人类无法承受，所以在最初，还没有骨骼动画这个概念的时候，只能用程序写一个顶点走向算法去改变每个顶点的位置，或者用着色器(Shader)在顶点函数中去改变顶点位置成为动画效果，这种动画效果现在很多游戏中都还在使用，这种方法已经成为节省骨骼动画开销的必要手段，比如草、树在风中的左右摆动，丝带或国旗在空中自然飘动等。至于如何在着色器(Shader)中编写顶点动画，我们会在OpenGL渲染章节中讲解。&lt;/p&gt;

&lt;p&gt;骨骼动画的出现让3D模型的动画效果就变得越来越丰富多彩。为什么这么说？因为它是由简单的几个骨骼点组成，一般骨骼动画的骨骼数量都不会超过50个，是人类能够承受的操控范围之内。通过这一些简单的骨骼点操作，加上3DMAX，Maya这样的好用的动画工具，让人类能够创造出许许多多丰富多彩的动画效果。&lt;/p&gt;

&lt;p&gt;首先，骨骼动画由骨骼点组成，每个骨骼动画可以由许多个骨骼，现代手机游戏中每个人物的骨骼动画的数量一般都会在30个左右，PC单机游戏中会更多点到达40-50个左右。骨骼数量越多，表现出来的动画越细腻越有质感，但同时也消耗掉更多的CPU计算。&lt;/p&gt;

&lt;p&gt;其次，一个骨骼可以有很多个子骨骼，每个子骨骼都与父节点拥有相同的功能，只是当父节点移动、旋转、缩放时子节点也随着父节点的一起移动、旋转、缩放，他们的相对位置、相对角度、相对比例不变。这一点与Unity3D中的 GameObject 的节点很相似，父子节点有着相对位置的关系，所以骨骼点在Unity3D中的表现是由类似GameObject的形式存在的，我们可以直观的从带有骨骼的模型中看到骨骼点的挂载结构。&lt;/p&gt;

&lt;p&gt;在 SkinnedMeshRenderer 中就有 bones 这个变量来记录所有骨骼点，骨骼点的表现在 SkinnedMeshRenderer 中就是 Transform 数组，因此 bones 这个变量就是 Transform[] 类型。&lt;/p&gt;

&lt;p&gt;另外，一个骨骼点可以影响周围一定范围内的所有顶点，单一一个顶点，也可以受到多个骨骼的影响。在Unity3D中的 Quality setting 图形质量设置中，我们可以看到关于Blend Weights的设置，就是关于一个顶点能被多少骨骼影响的参数设置。选项中，有1 Bone，2 Bones，4 Bones，意思是一个顶点能被1个骨骼影响，或者被2个骨骼影响，或者被4个骨骼影响，能被影响的骨骼数越多，CPU消耗在骨骼计算蒙皮的时间越长，消耗量越大。&lt;/p&gt;

&lt;p&gt;最后，模型中每个顶点都有对它顶点本身影响的最多4个骨骼的权重值，在Unity3D中这4个骨骼权重被记录在了 BoneWeight 这个类中，每个 Mesh类 都有一个 boneWeights 变量来记录所有顶点的骨骼权重值，而无骨骼动画的 Mesh 是不需要这些数据的。&lt;/p&gt;

&lt;p&gt;每个顶点都有一个BoneWeight 类实例，BoneWeight 中boneIndex0，boneIndex1，boneIndex2，boneIndex3分别代表被影响的骨骼索引值，而weight0，weight1，weight2，weight3则是分别代表被影响的权重值，权重最大为1，最小为0，所有权重分量之和为1。&lt;/p&gt;

&lt;h3&gt;未完，篇幅有限，下篇继续&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第五章，3D模型与动画(四) - 3D模型的变与换1</title>
   <link href="http://www.luzexi.com/2019/04/21/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-3D%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8A%A8%E7%94%BB4.html"/>
   <updated>2019-04-21T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/04/21/Unity3D高级编程之进阶主程-3D模型与动画4</id>
   <content type="html">&lt;p&gt;3D模型是3D游戏中的基础单位，除了在游戏中那些静止的一动不动的3D模型外，还有许许多多动来动去的，这些3D模型除了骨骼动画，顶点动画外，很多时候为了画面效果的表现，我们还需要：切割，简化，变形，捏脸，飘动等等。那么它们是怎么实现的呢？我们今天就来讲讲这蕴含其中的技术与原理。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;一个3D模型是如何显示到屏幕中去的，这整个过程详细讲解下来有点长，所以将它们放在了OpenGL渲染管道章节中，这里我们先来做个不太深入的了解。&lt;/p&gt;

&lt;p&gt;众多的顶点构成了一个3D模型，顶点之间的连线组成了三角形或多边形，其实还是以三角形为主。为什么？因为OpenGL，DirectX都以三角形为单位渲染。至于为什么要以三角形为单位进行渲染，会在OpenGL渲染管道章节中详细讲解。&lt;/p&gt;

&lt;p&gt;这么多的顶点是怎么表达三角形的呢，有很多种方式，例如顶点索引，三角带，三角扇，不过这里我们只说说普遍用的比较多方式，也就是顶点索引方式，其他方式留到渲染管道章节去详细剖析。&lt;/p&gt;

&lt;p&gt;顶点索引是主流的三角形表达方式，其他方式都是为了优化索引这个数组而设计出来的，应用的范围相对小一点。&lt;/p&gt;

&lt;p&gt;顶点索引的方式就是把所有顶点放进一个数组里，然后用另一个数组用来表达三角形的组成（就是用顶点数组里的index下标）。在索引数组里，每3个索引组成一个三角形，也就是说，如果有4个顶点的数组表达了一个正方形的形状，这个正方形相当于有两个三角形组成的，索引的数组就是大小就是6，前3个索引数组表达第一个三角形，后3个数组表达了另一个三角形。&lt;/p&gt;

&lt;p&gt;看数据：(0,0,0), (0,1,0), (1,1,0), (1,0,0) 这个4个顶点构成了正方形。&lt;/p&gt;

&lt;p&gt;那么索引数组就是，0,1,2,2,3,0 ，其中前三个0,1,2构成一个三角形，后三个2,3,0构成另一个三角形。&lt;/p&gt;

&lt;p&gt;依次类推，每三个索引单元描述三角形的三个顶点。&lt;/p&gt;

&lt;p&gt;我们把所有顶点和所有顶点索引都传给显卡驱动，显卡驱动就可以根据这些数据来展示3D模型，这中间并没有这么简单，不过也并没有复杂到不可理解，只是多了些陌生的的流程和步骤而已，熟悉下就可以理解和应对了，这些都将在OpenGL渲染管道章节中，由浅入深的剖析。&lt;/p&gt;

&lt;p&gt;那么图片是怎么贴上去的呢？&lt;/p&gt;

&lt;p&gt;如果把3D的三角形当做一个2D的面片来看就会好理解多了，一个2D的三角形面片为了把图片贴上去，就需要在图片上也指定三个点，图片上的三个点形成了与三角形一样比例大小的形状，就可以贴上去了，如果比例不对称也可以贴，只是会拉伸或缩放而已。这三个在图片上的点坐标就叫u和v，都是2个数字的数组（都是Vector）为什么叫uv而不是传统的xy，因为不想和xy概念混合，而且uv是一个0到1的浮点数，0表示起始位置，1表示最大偏移位置，一听uv二字母就知道说的是图片上的坐标。&lt;/p&gt;

&lt;p&gt;以这种三角形贴图的方式贴到3D模型的每个三角形上，就可以如期的绘制出有’皮‘的3D模型了。&lt;/p&gt;

&lt;p&gt;这样一来，在绘制3D模型时，就多了另一个数组，叫uv数组，这个uv数组是由uv坐标组成的，由于已经有了顶点索引来表达三角形，所以uv数组就不再需要索引来表达了，只需要按照顶点的索引形成的三角形来定制uv的顺序就可以了。&lt;/p&gt;

&lt;p&gt;还是用旧数据举例来说明：&lt;/p&gt;

&lt;p&gt;[(0,0,0), (0,1,0), (1,1,0), (1,0,0)] 这个4个顶点构成了正方形。&lt;/p&gt;

&lt;p&gt;[0,1,2,2,3,0] 组成了顶点索引表达了2个三角形的形成。&lt;/p&gt;

&lt;p&gt;[(0,0), (0,1), (1,1), (1,1), (1,0), (0,0)] 组成了uv数组，表达了两个三角形上贴图的绘制范围。&lt;/p&gt;

&lt;p&gt;别小看这些基础知识，这些基础知识在平时的实践中有很大很大的用途。下面就开始介绍我们在具体实践中，是如何将这些基础知识灵活的运用到项目中去的。&lt;/p&gt;

&lt;h3&gt;1.切割模型&lt;/h3&gt;

&lt;p&gt;模型切割，也可以说模型的分裂，在游戏中也比较常见。我们这里不具体深入不同切割的算法，因为项目的每种切割方式都可以是不同的，可以由不同的算法代替。我们只说如何切割模型，就拿最简单的一刀切割的方式，如’切水果游戏‘那样，横向或纵向切割。&lt;/p&gt;

&lt;p&gt;我们知道一个模型是由一个渲染实例构成的，也就是说一个Render组件（MeshRender或者SkinnedMeshRender,这里统一称为Render组件）只能渲染一个模型。&lt;/p&gt;

&lt;p&gt;那么要把一个Render渲染的模型切割成2个，就相当于把这个渲染组件删掉，生成两个新的Render渲染组件，渲染不同的模型。&lt;/p&gt;

&lt;p&gt;有了这个方向就容易多了。我们可以把原来的Render渲染组件中的顶点数组、顶点索引数组，uv数组，都提取出来，并全部都分成两部分，一部分是切割后的左半部分，另一部分是切割后的右半部分。再把这两部分，分别放入新建的两个新的Render渲染组件实例中去，就得到了切割后的模型。&lt;/p&gt;

&lt;p&gt;假如在切割后再对这两个切割后的模型，加入碰撞体和物理运动组件（或者说重力引擎Rigidbody），就可以让画面表现的像是真实的被切割开来后倒地分成了两半一样。&lt;/p&gt;

&lt;p&gt;这其中，核心的难点是如何拆分成两部分，以什么规则拆分，如何知道这个顶点在左半边还是右半边，切割中如何生成新的切割顶点，如何将这切割顶点缝合。&lt;/p&gt;

&lt;p&gt;首先面临的是怎么区分点在左半边还是右半边，我们不用区分是左边还是右边，只要区分是否是在平面的同一侧就可以了，方法有很多，比如点与平面上任意点组成的线段和平面上任意线的点积来判断是否为相同一侧，也可以通过平面与线段的交点之间的连线与点与交点的连线的点积判断是否为同一侧。&lt;/p&gt;

&lt;p&gt;其次我们用平面与线段是否有交点的图形算法，来判定是否有新交点。把所有三角形的线都与平面做交点碰撞测试，如果有碰撞，则交点就是新切割点。得出的新切割点用处很大，而且要复制两份，一份放在左半部分，一份放在有半部分。&lt;/p&gt;

&lt;p&gt;切割后，原本点与点之间相连的映射关系被打破并转移到了新交割点上，于是旧点与新切割点组成了新的三角形，左右两部分都是同理。&lt;/p&gt;

&lt;p&gt;用数组的方式更容易理解点，还是拿上面的数据来举例。&lt;/p&gt;

&lt;p&gt;[(0,0,0), (0,1,0), (1,1,0), (1,0,0)] 这个4个顶点构成了正方形。&lt;/p&gt;

&lt;p&gt;切割后分成了两个数组，假设切割点为中点对半切开，也就是切割点位(0.5,0.5,0)和(0.5,0,0)。&lt;/p&gt;

&lt;p&gt;此时数据就变成了这样&lt;/p&gt;

&lt;p&gt;[(0,0,0), (0,1,0), (0.5,0.5,0), (0.5,0,0)]&lt;/p&gt;

&lt;p&gt;和&lt;/p&gt;

&lt;p&gt;[(0.5,0.5,0), (0,0.5,0), (1,1,0), (1,0,0)]&lt;/p&gt;

&lt;p&gt;这个举例的例子是相对比较简单的实例，不需要缝合切面。&lt;/p&gt;

&lt;p&gt;如果切割的对象是一个立方体或者更复杂的模型，切割后，就需要缝合切割面。因为缝合的面上所有点是在同一平面的，所以缝合时只需要缝合新生成出来的交点部分就可以了，因为其他部分还是保留原来的样子。&lt;/p&gt;

&lt;p&gt;缝合的算法很多，主要的目的是，将多新生成出来的点，有规则的组成新的三角形，进而形成一整个切割面。&lt;/p&gt;

&lt;p&gt;其中一种算法是，先选一个点，再用这个点与其他点形成的线段算出夹角，用夹角的大小进行排序，排序后的结果，就是顺时针或者逆时针的点位，然后按顺序先将靠最前面的前三个点形成一个三角形，后面的点位与它之前的两个点形成新的三角形，也就是第4个点与前两个点也就是第三个点和第二个点形成三角形，第5个点与第4个和第3个点形成新的三角形，依次类推形成切割面。&lt;/p&gt;

&lt;h3&gt;2.扭曲模型&lt;/h3&gt;

&lt;p&gt;扭曲模型，相当于将3D模型变形，凹进去，凸出来，部分放大，或者部分缩小等。&lt;/p&gt;

&lt;p&gt;有了上面介绍过的3D模型的基础知识，这里在编写模型的变形时就显得更加容易。&lt;/p&gt;

&lt;p&gt;3D模型就是由三角形组成的，三角形是由点组成的，要变形就是移动顶点的位置，不只一个顶点的位置，是一片顶点的位置，或者说一个范围上的点的位置。&lt;/p&gt;

&lt;p&gt;扭曲和变形在实际项目中也有很多应用，比如爆炸后的地面凹陷，击打某墙壁后的墙壁有个凹陷的表现，或者拉某个球时球有个先被拉伸再恢复的过程，或者3D模型表现制陶工艺，将模型从一个罐头转转转，拉拉拉，拉成一个自定义的陶瓷品，也些角色扮演类游戏中，操控的摇杆就是用可拉伸的泡泡糖表现的，这些都是对模型内某个范围或者某些顶点的进行位移后表现出来的。&lt;/p&gt;

&lt;p&gt;顶点的点位的移动相对比较简单，就是取出顶点数组，修改坐标，再放进去，三个步骤。&lt;/p&gt;

&lt;p&gt;难点一是如何正确找出需要修改的顶点，二是不同的点修改的值如何不同，找出修改方向的算法，三是持续修改的算法。&lt;/p&gt;

&lt;p&gt;我们拿爆炸凹陷，球体拉伸反弹，制陶工艺这三个例子来剖析如何扭曲模型的技巧。&lt;/p&gt;

&lt;p&gt;当发生在场景中发出爆炸特效时，首先找出爆照范围的这块地面，并取出这块地面的所有顶点数据，对所有顶点求出在爆炸范围球体内的地面顶点，这些顶点就是需要修改的顶点。&lt;/p&gt;

&lt;p&gt;爆炸需要凹陷，凹陷算法的目的是把顶点位置修改到爆炸球体的球表面上，这个算法相当于，如何把一个点对应到一个球体的面上，计算出来后修改点位置，再装入渲染的实例中，凹陷变形就完成了，顶点索引和uv都不需要任何变化。&lt;/p&gt;

&lt;p&gt;再说说球体拉伸与反弹恢复，第一个动作是拉伸球体，计算所有顶点与要拉的那个点位的距离，距离越大，顶点需要的位移的越小，这个比例肯定不能是个正比关系，一定是一个衰减的曲线，例如距离是d，拉伸的距离为f，结果为res，最简单的衰减公式为 res =  f/(d * d)，用这个公式对每个顶点进行计算，得到一个需要移动的数据res，这个数据是根据距离大小而衰减的，与拉伸点离得越近移动量越大，反之越小。修改完成所有顶点的坐标后，再推入渲染实例中去，就得到了球体拉伸的效果。&lt;/p&gt;

&lt;p&gt;球体的第二个动作是放开后恢复，这里我们假定球体的屁股是被固定的。恢复和拉伸有点相似，拉的最远的反弹的快，也就是与原有的位置距离最大的点反弹的速度最大，也就是说，我们需要记录原来没被拉伸时的顶点的坐标位置，他们与原来的位置相减就是反弹速度的基础变量。&lt;/p&gt;

&lt;p&gt;反弹力度肯定也不是正比关系，肯定也是类似衰减公式的增强公式，或者说是弧线比例，最简单的公式就做个平方，res = d * d，或者为了更平滑点，找个更好的曲线公式res = (d / max) * (d - 2) * k。&lt;/p&gt;

&lt;p&gt;反弹恢复的力度，在不断得计算过程中，会由于顶点与原有的点位的距离缩小而减小，后又由于反弹过度而不断放大，有一个来回反弹的过程，最后恢复到平静不再移动的状态，用这个公式能就很好的体现出来，因为它与原顶点距离有关，力度在不断得衰减，最后形成稳定态。&lt;/p&gt;

&lt;p&gt;最后再说说制陶工艺的模拟，一个罐体模型在转盘上不停的转，当用手（鼠标或者触摸屏）去触摸它的时，在触摸的点会形成凹陷，或者拉伸，人们通过在这样不断的凹陷和拉伸过程中制作出了一个完整的陶瓷的模样，这就是制陶工艺的过程。&lt;/p&gt;

&lt;p&gt;在一个叫做《釉彩》的手机App中有具体的表现，里面你可以用一个很丑的泥罐，通过来回、上下、左右的手指滑动制作出一个你喜欢的陶瓷品，制作出来的陶瓷品可以让别人定做，也可以通过里面的超市直接购买。&lt;/p&gt;

&lt;p&gt;它的原理非常简单，就是在当你触碰时，根据你的手指滑动的方向，把范围内的顶点向手指滑动方向偏移，并且有一个衰减范围，离手指最近的点越近拉伸的距离越大，离得越远拉伸的距离越小。顶点选取的范围的判定可以认为是在一个矩形中的范围，比如认定的手指滑动的矩形范围，从而构建出一个相应的立方体范围，进而选出在立方体内的顶点，再进行衰减式的位移，最终构建出，可上下，左右，对陶瓷罐的拉伸变形操作。&lt;/p&gt;

&lt;p&gt;由于篇幅限制，下篇将继续介绍’3D模型的变与换2‘。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(二十三) 997成就世界</title>
   <link href="http://www.luzexi.com/2019/04/13/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A823.html"/>
   <updated>2019-04-13T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/04/13/思路探讨23</id>
   <content type="html">&lt;p&gt;实际上还是有人不知道996是什么的。996，每天早上9点上班，晚上9点下班，周6加班，一周工作6天。&lt;/p&gt;

&lt;p&gt;似乎所有人都很痛恨这种模式，当所有人都在喊996痛苦的时候。你，就不应该喊了，你是普通人吗，你不是的。普通人每天过着凑合的日子，每天上着凑合的班，做着凑合的工作，什么都凑合。加班对他们来说是种恶毒的迫害，是对他们劳动力的剥削，是对他们娱乐生活的不尊重，所以他们痛恨。他们认为资本家是万恶的，是拥有无限权利的，是可以掌控世界的，是可以无所不能的，所以他们拒绝资本家的‘迫害’。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;那么真的是他们想象的那样吗？是真的为了迫害，是真的为了剥削，是真的不尊重，是真的万恶，是真的拥有无限权利和无所不能，才996的吗？不是的。&lt;/p&gt;

&lt;p&gt;资本家也是人，有一天你也会成为资本家，其实你我都有可能是资本家。资本家是人，也会痛苦，也会被迫害，也会遭遇不幸，也同样受到压迫，只是他们穿的西服比我们贵，但这并不舒服，不如我们的睡袍和卫衣，吃的200块钱一餐的美食，同样有可能用的是地沟油，也不如我们的汉堡包、薯条、鸡块来的可口。&lt;/p&gt;

&lt;p&gt;世界真的是公平的，不会因为你钱多而让你的痛苦少一点，也不会因为你钱少而给你少一点的机会。&lt;/p&gt;

&lt;h3&gt;我不赞成996，但我心中不止996，成年人世界里辛苦点又算的了什么，为了生存，为了更好的生存，为了追求极致的生存，皮肉上痛苦在成年人的世界里已经是最轻量级的痛苦了。&lt;/h3&gt;

&lt;p&gt;普通人依赖环境，没有环境他们无法生存。普通人，任人摆布，他们无法自控只有听从于他人。普通人，委曲求全，没有突出的能力到哪都是求稳定，稳定就要牺牲自我牺牲尊严。普通人，听从命运，你愿意听从你那稀烂的命运吗？！&lt;/p&gt;

&lt;p&gt;世界是残酷的，也是公平的。残酷在，人人都要为生存而斗争，不是你死就是我活。公平在，只有勤奋努力好学的人才配的上成功，机会永远都是给那些积累很多年并且时时刻刻保持勤奋努力好学的人的。&lt;/p&gt;

&lt;p&gt;当面临淘汰时，也同样公平，也同样残酷，那些凑合的人最先被淘汰，然后那些普通人大部分被淘汰，留下的普通人只是幸运儿，下次还会这么幸运么，你死我活的斗争一直没有停歇。&lt;/p&gt;

&lt;h6&gt;996不能赢得世界，但997能(相当于全年无休)。为什么？&lt;/h6&gt;

&lt;p&gt;因为996给自己留了余地，说一周来每天这么辛苦最后一天让自己休息一下。实际上，只要停下来，启动就难了。给了一个停下来的理由，启动的理由却又要再次寻找了。难以维系。&lt;/p&gt;

&lt;p&gt;我们之间有聪明与不聪明的区别吗？没有，（不要以为自己比别人聪明，当这么认为的时候我们就已经输了一半了）。从整个人生来看，到死之前，我们比的都是谁能坚持到最后，比的是都是耐力，是毅力，是勇气。谁能勇敢的坚持到最后谁就能赢得世界，聪不聪明只是人的自以为是的幻想而已，持久战才是人生真正的赛点。&lt;/p&gt;

&lt;p&gt;那么‘坚持’真就这么容易吗？不是的。‘坚持‘超难，难到怀疑人生。&lt;/p&gt;

&lt;h6&gt;为什么997就能成就世界？因为全年无休让你不得不转变观念。&lt;/h6&gt;

&lt;h6&gt;当我们明白自己无法逃脱全年无休的状态时，我们已经彻底放弃了所有试图休息的谋划，转而关注如何提高专注力，如何用更少的精力做好当下的事情，如何加强体力，如何加强免疫力，以及如何平衡工作、学习和娱乐三者之间的关系。&lt;/h6&gt;

&lt;p&gt;我们训练了更多提高专注力的方法，从而提高了专注力，训练了更多做好事情的方法、知识和技巧，从而提高了效率，加强了每天的健身锻炼，从而让自己每天元气满满，免疫力爆棚，抵御外来病毒侵扰，让高效状态保持的更久更有力。&lt;/p&gt;

&lt;p&gt;我们开始主动关注了每天工作的时间，学习的时间，娱乐的时间，不断调整着三者的时间平衡，我们没有时间娱乐，但人又不能没有娱乐活动，所以我们只能在工作中学习，在学习中娱乐，在娱乐中工作，边工作边学习边娱乐，三者混为一体，工作即学习，学习即娱乐，娱乐为了更好的工作，保持平衡和高效，不断主动的调整，因为它们并不是一个固定时间比，每个人每个时间段每个环境下都不一样，需要主动及时调整。&lt;/p&gt;

&lt;h6&gt;997让我们做时间的朋友。&lt;/h6&gt;

&lt;p&gt;全年无休的情况下我们不得不做时间的朋友，只有让时间成为我们最重要的朋友，我们才能减轻无休的痛苦。做时间的朋友最大的好处便是复利，时间就是复利的要素，每天积累一点，一年下来你就比别人多跑一点，5年下来，你就比别人多跑好几个整圈，10年下来你就比别人多跑好几个级别的比赛。&lt;/p&gt;

&lt;p&gt;每天都问下自己，今天和时间这个朋友合作的如何，今天有把时间好好分配吗，能对得起这位默默无闻支持你永不抛弃永不放弃你的朋友吗，如果有明天继续，如果没有明天继续努力。&lt;/p&gt;

&lt;h6&gt;997让我们转念，转念之间，997反而成就了我们，让时间成为了我们最好的朋友，让复利的积累引领我们走向了世界的巅峰。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第八章 AI(3) 非典型性AI</title>
   <link href="http://www.luzexi.com/2019/04/07/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-AI3.html"/>
   <updated>2019-04-07T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/04/07/Unity3D高级编程之进阶主程-AI3</id>
   <content type="html">&lt;p&gt;前面讲了状态机和行为树在AI中的运用，在实际开发过程中，特别是一些在游戏行业做过5-10年左右的很多人似乎似乎已经习惯了用这些固定的工具去写AI逻辑，一想到游戏AI就固定思维的认为，就用状态机去写，或者说就用行为树去写。&lt;/p&gt;

&lt;p&gt;思维跳不出这些‘工具’，我们就成不了大师。大师是什么，是能将‘剑’运用到最高境界的人，手里‘无剑’而心中有剑，是他们的至高境界。万事万物都是同一个道理，‘技术’就像剑术，在练习过程中，都会经过几个阶段，到底具体有哪些阶段每个人都不一样，我能确定的是，‘识剑’是第一个阶段，认识剑是怎么样的，或者说认识‘技术’是个怎样的东西用在哪里。而‘用剑’是另一个阶段，如何用剑或者说如何运用这项‘技术’是大多数人停留的阶段，怎么用剑怎么用好剑，是一个非常漫长而枯燥的阶段。‘无剑’就是最后一个阶段，手里没有剑而心中有剑在剑术的造诣上达到了至高的境界，无剑胜有剑在这个阶段体现的淋漓尽致。&lt;/p&gt;

&lt;p&gt;我们接触的面要尽量的广，接受和包容的东西要尽量的多，才能体验到更多的东西。游戏开发也是，世界上不是只有RPG角色扮演类一种游戏类型，还有SLG策略类游戏，还有休闲娱乐类游戏，还有体育竞技类游戏，还有学习教育类游戏等等等。只有状态机，只有行为树，或者只有状态机和行为树是无法为项目开发出最好最适合的AI的。我们应该尽量包容非典型性AI。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;下面我们来了解下游戏项目中非典型性的AI。&lt;/p&gt;

&lt;h3&gt;1，庄家式AI&lt;/h3&gt;

&lt;p&gt;顾名思义，是庄家统治游戏的一种玩法，玩法中AI就是全局的统治者，它决定了整个游戏的高潮和低谷，AI如何操作成为了至关重要的关键点，玩家是否喜欢这款游戏很大程度上取决于AI的策略。&lt;/p&gt;

&lt;p&gt;这种类型游戏大部分以彩票或赌局的形式存在，比如老虎机，百家乐，21点，以及部分以彩票为形式的游戏。&lt;/p&gt;

&lt;p&gt;AI策略的目的是要让玩家玩的好又不能赢太多而且最终是要输给AI的。玩家喜欢继续玩但从总体上来看却又是输的，让庄家就是游戏运行商有的赚，但又不能太狠，让游戏细水长流。&lt;/p&gt;

&lt;p&gt;这种AI常以输赢的概率为基本控制手段，比如现阶段以玩家欢乐为主，那么胜的概率变得大一点，玩家会认为幸运女神眷顾他了，一段时间后为了让玩家遇到点困难，让玩家有挑战性，这时AI慢慢降低了赢的概率，玩家缓慢觉得赢的次数开始减少，有些玩家会以为幸运女神走了，需要靠自己的‘本事’玩下去了，他们不断得发现和寻找输赢的规律，以及出牌和翻牌的概率，直到输得所剩无几，然后AI开始了缓慢提高胜率的操作，让玩家又看到了希望，找到了自信，认为自己终于不费苦心找到了规律和破解的秘密，于是又开始了一轮有输有赢但赢多输少的旅程。&lt;/p&gt;

&lt;p&gt;如此这般不断得循环往复，AI以一种庄家的形式控制着整个游戏过程。&lt;/p&gt;

&lt;h6&gt;从技术上来看，这种控制概率的过程，就是加法和减法的过程，相对比较简单。其核心是给出一个概率后，如何让它真的起到概率的作用，而且这种概率能让人很舒适的接受，比如当有30%概率赢时能否做到真正的随机值在30%的概率上徘徊，比如10局中有2-4局能中玩家可以得到想要的那个点位或者想要的牌什么的，而不是10局中0-5局能赢，输赢实际结果波动到了不好的体验。&lt;/h6&gt;

&lt;h3&gt;2，可演算式AI&lt;/h3&gt;

&lt;p&gt;可演算式的AI在策略类游戏中非常常见，在页游里的大部分的自动对战，以及现在卡牌手游中的大部分自动战斗都是可演算式的AI，是可以根据两边的阵容数据和一个随机种子来演算出整场战斗的每个细节的。例如，两个军队的各5个英雄，互相间攻击并释放技能，服务器需要在一瞬间把所有需要在客户端演示的内容都计算出来，并以数据的形式发送给客户端，客户端根据演算的数据进行展示人物的动作，位移，技能释放等，客户端并不需要计算任何内容，所有内容都在服务器里已经计算好了，以数据形式代表了整个过程。&lt;/p&gt;

&lt;h6&gt;可演算式AI的特点是逻辑一定是确定性的，不能是模糊的，或者会随机改变的，或者随时间变化而变化的结果，同样的数据第一次计算和多次计算的结果必须是相同的，才能最终体现出可演算的这个特征。&lt;/h6&gt;

&lt;p&gt;其次，可演算式AI大都是根据时间轴来演化游戏的进程，在那里‘时间轴’的概念在可演算式AI中是比较常见的。&lt;/p&gt;

&lt;p&gt;什么是时间轴演算路径？我们用卡牌对战算法来举几个例子。&lt;/p&gt;

&lt;p&gt;首先最简单的时间轴演算路径，例如，先由敏捷度最高的英雄进攻，等待英雄进攻完毕后再由其次高敏捷度的英雄进攻，依次进行下去直到所有的英雄进攻完毕再重新一轮进攻。这种相对比较简单，可以把进攻看成一轮一轮的回合，每个回合都相当于是一次for循环，每次for循环前先对敏捷度进行排序，再在for循环中依次计算进攻了谁受到了多少伤害，以及是否死亡。最后把进攻的数据和伤害的数据用队列的形式存储在数据中发送给客户端，客户端受到数据后再进行演示。&lt;/p&gt;

&lt;p&gt;稍微复杂点的时间轴逻辑，例如，不再由敏捷度来决定进攻的先后次序了，而是由每个英雄的进攻间隔冷却时间来决定进攻次序，对战开始时开始计算每个英雄的进攻冷却时间是否结束，谁的冷却时间先结束谁就最先得到进攻权，进攻完毕后再等待下一个英雄的冷却时间，以此类推。从技术上讲，冷却时间不需要等待，把所有英雄加入一个队列，排序一下就可以得到谁的剩余冷却时间最短，就立马可以开始计算进攻细节，完毕后根据冷却时间插入到队列中去，任然还是一个有序的剩余冷却时间队列，一直这样计算下去直到演算结束一方胜利或失败。这种演算方式就有了更多了时间轴的概念。&lt;/p&gt;

&lt;p&gt;再稍微复杂点，前面所说的进攻逻辑都是在其他英雄都停止的状态下进行的，现在进攻时不再需要其他英雄等待了，一旦冷却时间结束就可以立刻进攻。也就是说，每个英雄都可以在其他英雄还在进攻时进行进攻操作，只要他的冷却时间到位，并且他的进攻时需要花费固定时间的，等到进攻完毕后再判断对方和自己是否死亡。这种方式，不只是多了一个进攻消耗时间这么简单，还多了一个死亡判断时间，在还没有死亡判定前，此英雄虽然是死了但任然可以被进攻。从技术上来看，计算的量从单一的剩余时间量排序，增加了进攻消耗时间排序插入，以及死亡判定排序，我们既要在冷却时间结束时计算进攻，还要在选择进攻对象时计算该英雄是否已经判定死亡，最后在进攻完毕后计算当前的时间并插入到排序队列中。&lt;/p&gt;

&lt;p&gt;再复杂点，英雄在进攻一半时可以被别的英雄打死，也可以被其他英雄的技能打断，也包括了随时被回复血量蓝量，增加状态等等，让战斗更加逼真、更具有实时性。加强了实时性的要求，更加考验可演算式AI的复杂度，由于太多的需要计算的时间内容，所以我们必须有一个能有效管理时间轴的方法。从技术上来看，我们必须定义‘时间节点’这个概念了。&lt;/p&gt;

&lt;h6&gt;什么是‘时间节点’？‘时间节点’就是一个事件在整个过程的时间轴上的发生时的位置。&lt;/h6&gt;

&lt;p&gt;有了时间节点这个概念，我们可以用时间节点为计算标准，把所有人物的下一个事件的时间节点计算出来，比如，移动到达敌方位置，又比如，释放技能，又比如，回到原地，又比如，冷却时间结束，每个人只计算最近的一个时间节点，并把计算出来的结果放进队列中，然后就可以找出时间节点里离我们最近的一次事件的发生节点，也就是时间差最少的节点，执行它。&lt;/p&gt;

&lt;p&gt;由于每个时间点都有可能引起其他时间点的变化，比如把对方打死了，对方的时间节点就消失了，又比如打断了别人技能释放，对方就回到了冷却时间，时间节点就需要重新计算了，又比如加速了友军的攻击速度，因此所有友军正在攻击或打算攻击的时间节点都要重新计算了，等等等等。&lt;/p&gt;

&lt;p&gt;所以每次在执行完一个时间节点后，都要对有可能产生变化的人物的时间节点进行重新计算，并加入队列，然后就可以找出离我们最近的一个时间节点了，当然旧的时间节点数据必须清除掉。&lt;/p&gt;

&lt;p&gt;如此往复的重复这个计算过程，直到没有任何时间节点可计算和执行，最终决出这张战斗的胜利或失败。&lt;/p&gt;

&lt;h6&gt;时间轴贯穿了整个AI过程，人物之间的打斗，移动，释放法术，冷却时间等待，AI每次只计算一个时间节点，因为只有最近的那个时间节点是一定不会被其他节点影响的，这样既照顾到了可演算的根本原则，也照顾到了游戏的实时性，让战斗更加精彩。然后把每个计算的结果都记录下来，就可以在客户端进行演示了，整个过程的事件发生的时间都将准确无误呈现出来。&lt;/h6&gt;

&lt;h3&gt;3，博弈式AI&lt;/h3&gt;

&lt;p&gt;游戏项目中大部分AI的目的都是以娱乐玩家为主，并没有要真正打败玩家，最多也是要与玩家达到一种平衡。而博弈式AI则不同，它的目标就是为了打败玩家，它是为了赢得比赛而生的。&lt;/p&gt;

&lt;h6&gt;博弈AI最大的特点是搜索。通过搜索，将所有下一步可能发生的，以及下几步可能发生的事情都记录在内存中，以此来确定电脑该怎么进行下一步动作，进而获得最大的效益。&lt;/h6&gt;

&lt;p&gt;有的人不理解为什么是搜索，这里稍微做下解释。在AI选择下一步的动作前，下一步要发生的情况有很多，我们需要选择最佳的那个，怎么选择呢？把所有下一步的情况都列出来，再把下一步的后几步的情况也列在下一步的下面，由于cpu计算量的限制后面的几十几百步计算量太大以至于无法计算，假设我们只计算和预测十步的结果，我们需要找到第十步的最好结果，再反推到第一步来确定第一步到第十步是怎么走的。&lt;/p&gt;

&lt;p&gt;把这十步的所有结果都计算出来太耗时CPU负重太大，有些甚至无法承受这样大的计算量，那么我们就要在没有结果的情况下得到最佳选择，怎么做呢？既然我们要从第一步走到第十步，假设第一步有10种情况，第十步有10种情况，每一步之间都有一个结果就相当于一点到另一个点的路径一样，从第一步到第十步就可以视为路径的一种，那么从第一个点到第十个点的最短路径，就是第一步到第十步的最佳结果。把视角一转换后发现事情变得的简单了，用最短路径算法就可以解决搜索问题。&lt;/p&gt;

&lt;p&gt;不过事情远没有这么简单，这里只是举了个简单的例子，情况会复杂到每一步有几百种情况，普通的搜索方式计算机可能完全无法承受。为了能让计算机承受这样大的计算量，我们就需要引入更多的枝剪和优化，比如，存储一些固定技巧，以及拒绝计算一些明显比较差的选择。&lt;/p&gt;

&lt;h6&gt;另一个特点是AI对局势的估值该如何认定。估值表示了当前局势的好坏程度，通常用一个0到100的浮点数来表示估值，估值的好坏是AI一个比较关键的点，只有正确的计算出局势的估值，AI才能知道选择的行动方向是正确的还是错误的。&lt;/h6&gt;

&lt;p&gt;拿最简单的五子棋来说。棋盘上的每一个点都是对手下一步的可能性，通常不会在空白处下一个完全不着边的棋，所以搜索范围缩减到了当前棋盘上有棋子的范围周围的空位。AI对所有这些空位录入并计算当AI把棋子放入该位置上后，对方可能做出的反应以及由此引发的后几步的对弈可能。我们假设AI只搜索和计算后5步的预测，也就是说，计算出来的当前落子的估值，就是所有棋盘中可落子的后5步内最优估值。&lt;/p&gt;

&lt;h6&gt;最后一个特点是数据录入。人类的手法太过高明，欺骗性很强，很容易就能躲过AI的盲点，所以录入特别的人类的想法的是博弈AI的一大关键点。没有数据的录入，AI很难知道人类的想法。&lt;/h6&gt;

&lt;p&gt;96年97年的人机国际象棋大战就是录入了大量的棋局来告诉AI人类的一些固定走法，让AI在对弈中识别人类的套路。&lt;/p&gt;

&lt;p&gt;以前的数据是一些人手动录入的，所以局限性还是很大，不能应付现代这么快更新换代的技巧和想法。为了做出更强大的博弈式AI，我们不得开始让AI拥有自学的能力，所以机器学习，深度学习得到了广泛的关注和应用。它们原理就是数据录入，加，估值判定，给AI不断地喂数据的同时，告诉AI这个数据是对的还是错的，或者说估值能达到多少，通过不断的喂数据（也相当于用数据训练AI）的方式，让AI拥有丰富的‘经验’，从而在对弈中赢得比赛。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(二十二) 人为什么做不出最正确的选择</title>
   <link href="http://www.luzexi.com/2019/03/31/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A822.html"/>
   <updated>2019-03-31T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/03/31/思路探讨22</id>
   <content type="html">&lt;p&gt;人这一生真的能在每个节点都做出最好的决策吗，肯定不能。这个比较理想化的美梦，大多数人都知道是不可能的。&lt;/p&gt;

&lt;p&gt;但人真的能在模棱两可的分岔路面前做出最正确的决策吗？我认为是不可能的。（需要明确一点是，模棱两可的选择是指两种或者几种选择都是朝着光明的方向去的，而不是一黑一白或者两种都是黑。）&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;为什么做不出最正确的选择？&lt;/p&gt;

&lt;p&gt;因为最好的决策通常都是事后分析才会知道，在当下是无法知道事情到底会如何发展，只有当事情变成了历史，我们再回过头来看这件事时才能真正找到最好的决策方向。&lt;/p&gt;

&lt;p&gt;比如，何时买股票，何时卖股票，何时买房，何时卖房，选择什么专业，该不该和这个人结婚，该不该下海去创业，该不该选择这个人合作，该不该送孩子出国，该报考哪所学校，以及该不该跳槽，应该去哪座城市工作和生活等等等。所有这些都会等你做出决策，并执行多年后，再回过头来梳理时，才能真正明白到底我做对了还是错了。&lt;/p&gt;

&lt;p&gt;为什么是要等事情成为了历史才能知道当时该如何决策，我就不能直接洞悉事情的发展方向做出相应的决策？&lt;/p&gt;

&lt;p&gt;不能。因为世界是变化的。&lt;/p&gt;

&lt;p&gt;我们所处的这个世界里每分每秒都在变化，在这个变化的世界里，我们永远无法知道事情会如何发展，永远无法知道别人到底怎么想（你以为你聪明到能知道所有人的想法时就已经代表你错了），他们到底会怎么做，有多少人会这么想并有多少人会那样做，这所有与之有关的人的行为会给这样事情产生多少影响，又有多少人会因为别人的行为而改变自己的行为方式，你认为就凭你聪明的脑袋能计算的过来么，不可能。&lt;/p&gt;

&lt;p&gt;更何况还有那些与事情有关联的人的关联人，以及与之相关联事情的事情，太多太多，甚至我们都无法知道究竟有多少与之相关联的事情在同时发生，何况在同一时刻这所有关联的人和事都在不断得产生着变化。&lt;/p&gt;

&lt;h6&gt;我们不得不敬畏这个世界，我们永远无法估量，到底有多少事情在影响着我们当下关心的这件事情。&lt;/h6&gt;

&lt;h6&gt;在这个变化的世界里，想做出最正确的选择，是不太可能的，正确的选择只有在回顾历史时才存在。而我们只能就自己的理解做出自己认为最正确的选择。&lt;/h6&gt;

&lt;p&gt;那么做出一个正确的选择真的那么重要吗？不是的。为什么？&lt;/p&gt;

&lt;p&gt;我们退一步说，即使从历史的角度看我们做出了正确的选择，就一定能成功吗？不是。&lt;/p&gt;

&lt;p&gt;首先，即使我们很幸运做出的选择，从历史角度看是最正确的选择，我们也不一定能执行到位。&lt;/p&gt;

&lt;p&gt;实际上，大部分时候连我们自己都不太相信自己做出的决策是对是错，总是在摇摆不定，虽然在表面上坚定的支持这种选择，但在心里还是持有一定的怀疑的态度。这种怀疑的态度，导致我们无法完全百分百的执行我们做出的决策。&lt;/p&gt;

&lt;p&gt;知行合一的难度就在这里，我们到底相信多少我们所知道的。由于人类思维的灵活性以及人性的弱点，我们很难百分百相信我们所知道的一切，永远都在怀疑是否有更好的我们所不知道的存在，所以很难做到相信即行动。&lt;/p&gt;

&lt;p&gt;其次，即使我们很幸运做出了正确的选择，并且很坚决的执行了决策，但成功并不是一个决策而导致的结果，而是由几百几千个决策共同组成的决策群，和，所有为之努力的执行方式的集合组合而成的结果。&lt;/p&gt;

&lt;p&gt;成功的难度就在这里，一个决策并不能决定一个人或一件事的成功与否，成功是由一群决策方向和一群行动方向组合而成，并经过多年累月得到的最终结果。&lt;/p&gt;

&lt;h6&gt;抢到门票就能赢吗？不是的，门票只是一个赛跑的起步优势点并不能决定整场比赛的输赢，别忘了拼命抢到的门票也有可能是一场灾难的开始。&lt;/h6&gt;

&lt;h6&gt;做出‘一个’正确的选择并没有那么重要。重要的是做出选择后的所有其他的选择，以及接下来的所有行动。我们共勉。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第八章 AI(2)-用行为树构建AI</title>
   <link href="http://www.luzexi.com/2019/03/28/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-AI2.html"/>
   <updated>2019-03-28T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/03/28/Unity3D高级编程之进阶主程-AI2</id>
   <content type="html">&lt;p&gt;前面讲了用状态机来构建游戏中的怪物AI，由于它易于理解，容易被人类接受，扩展性和耦合性都很好，所以状态机的用途很广泛。但是状态机也有很大的缺点，就是不能处理和模仿太复杂的智能行为，比如模拟一个人类奔赴一场大型战役中，对战场中的各种繁多的突发事件做出符合人类模式的处理，这种方式状态机就无能为力，由于突发情况太多，组合起来的突发情况更多，做出反应的方式也变化多端，用人类思维逻辑去编写每个状态，状态的数量就会如指数级攀升无法应付，说的直白点就是人类大脑无法应付这么复杂的逻辑编写。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;行为树很好的弥补了状态机的缺点，它简化了逻辑拼凑的方式，让简单头脑的人类能更容易编写和控制机器人的智能行为。这其实也是AI架构的关键点，能够让简单头脑的人类制作复杂的人工智能的行为方式，化繁为简。&lt;/p&gt;

&lt;p&gt;化繁为简是我们的重点，人工智能的行为方式，都是由人类头脑指定的行为方式，是人类头脑所预期的，而非不可控的。制作出人类所预期的AI行为逻辑，制作的方式和过程又在人类大脑的承受范围内的，才是我们需要的。状态机的方式制作AI理论上可以实现任何AI，但复杂到一定程度人脑无法承受，其实就是无效的，或者说失败的。&lt;/p&gt;

&lt;p&gt;行为树的优势就在这里，能够通过一些简单的人类能够应付的操作，制作出达到人类所预期的足够复杂的机器人行为方式。&lt;/p&gt;

&lt;p&gt;下面我们来详细介绍行为树的组成。&lt;/p&gt;

&lt;p&gt;行为树(Behavior Tree)具有如下的特性：&lt;/p&gt;

&lt;p&gt;它有4大类型的N节点：&lt;/p&gt;

&lt;h6&gt;1，Composite Node 复合节点&lt;/h6&gt;

&lt;p&gt;复合节点可详细的分为3种：&lt;/p&gt;

&lt;p&gt;一种是Selector Node，选择节点。当执行本类型节点时，它将从头到尾迭代执行自己的子节点，如果遇到一个子节点执行后返回True则停止迭代，本Node向自己的上层的父节点也返回True，否则所有子节点都返回False，那么本Node向自己的父节点返回False。&lt;/p&gt;

&lt;p&gt;一种是Sequence Node，顺序节点。当执行本类型Node时，它将从头到尾依次迭代执行自己的子节点，如遇到一个Child Node 子节点执行后返回False，那停止迭代，本Node向自己的Parent Node父节点也返回False；否则所有Child Node都返回True，那本Node向自己的Parent Node返回True。&lt;/p&gt;

&lt;p&gt;还有一种是Parallel Node，并发节点，并发执行它的所有Child Node子节点。&lt;/p&gt;

&lt;p&gt;向Parent Node父节点返回的值和Parallel Node所采取的具体策略相关：&lt;/p&gt;

&lt;p&gt;Parallel Selector Node: 执行完所有子节点，有一个False则返回False，全True才返回True。&lt;/p&gt;

&lt;p&gt;Parallel Sequence Node: 执行完所有子节点，有一个True则返回True，全False才返回False。&lt;/p&gt;

&lt;p&gt;Parallel Hybird Node: 执行完所有子节点，指定数量的Child Node返回True或False后才决定结果。&lt;/p&gt;

&lt;p&gt;并行节点提供了并发性，由于它可以在线程或协程级别提供并发操作，所以在性能上面有能够充分利用CPU提高性能。&lt;/p&gt;

&lt;p&gt;通常情况下，Parallel Node下会并行挂多个Action子树，或者挂多个Condition Node以提供实时性。&lt;/p&gt;

&lt;p&gt;Parallel Node增加性能和方便性的同时，也增加实现和维护复杂度。&lt;/p&gt;

&lt;p&gt;除此以外为了进一步提高AI的复杂度和随机性，Selector 和 Sequence可以进一步提供非线性迭代的加权随机变种。比如，Weight Random Selector，每次执行不同的起点，提供了每次执行不同的First True Child Node的可能。而Weight Random Sequence则每次执行顺序不同，提供了不同的迭代顺序的方式。这在AI术语中称为partial-order，能使AI避免总出现可预期的结果，让结果更加的随机化。&lt;/p&gt;

&lt;h6&gt;2，Decorator Node 修饰节点&lt;/h6&gt;

&lt;p&gt;Decorator Node，它的功能正如它的字面意思：它将它的Child Node执行后返回的结果值做额外修饰处理后，再返回给它的Parent Node。比如反向修饰Decorator Not：将结果反置后返回上级处理，失败修饰Decorator FailUtil：将失败修改后返回上级处理，计数修饰Decorator Counter：将结果计数后返回上级处理，时间修饰Decorator Time：将时间修改后返回上级处理。也可以作为日志处理Decorator Log，动画修饰处理Decorator Animation，甚至Decorator Nothing什么都不干。&lt;/p&gt;

&lt;h6&gt;3，Condition Node 条件节点&lt;/h6&gt;

&lt;p&gt;Condition Node相对比较简单，条件满足则返回Ture，否则返回False。&lt;/p&gt;

&lt;p&gt;各式各样的条件节点，都继承基础条件节点并且返回Ture或False。&lt;/p&gt;

&lt;p&gt;比较常用的条件节点例如，血量判断条件，距离判断条件，状态判断条件，时间间隔判断条件等。&lt;/p&gt;

&lt;h6&gt;4，Action Node 行动节点&lt;/h6&gt;

&lt;p&gt;Action Node，通常都是最后的叶子节点，它完成具体的一次(或一个step)的行为，视需求返回值。&lt;/p&gt;

&lt;p&gt;Action Node可以是执行一次的，也可以视为分步执行很多次的行为。例如，向前进这个行为，可以一直被执行，直到条件不满足。&lt;/p&gt;

&lt;p&gt;也就是说，通过扩展Action Node完全可以不需要借助外在程序或接口，自主定义角色行为。&lt;/p&gt;

&lt;p&gt;常用的Action Node节点的例如，行走到目标地点Action，跟踪目标Action，转换角色方向Action，撤退Action，攻击Action，防御Action，释放技能Action等等。&lt;/p&gt;

&lt;h6&gt;在行为树中任何Node被执行后，必须向其上层的父节点报告执行结果：成功True或失败False。这简单的成功或失败汇报原则被很巧妙地用于控制整棵树的决策方向。&lt;/h6&gt;

&lt;p&gt;行为树能够支撑起对复杂逻辑的AI的原因就是由于使用了这些简单的节点去搭建整个AI模型。由于人脑可以很容易的写出这些简单的单个节点的逻辑，使得节点的功能性扩展变得非常容易，而拼装这些节点，就像是一个搭积木的过程，人脑能搭建多复杂的积木，就能搭建起多复杂的AI。&lt;/p&gt;

&lt;p&gt;整棵行为树中，只有Condition Node和Action Node才能成为Leaf Node叶子节点，而也只有Leaf Node才是需要特别定制的Node。而Composite Node和Decorator Node均用于控制行为树中的决策走向。所以有些资料中也统称Condition Node和Action Node为Behavior Node行为节点，而Composite Node和Decorator Node为Decider Node决策节点。&lt;/p&gt;

&lt;p&gt;在行为树之前，还有决策树这个被遗忘了的AI解决方案。决策树和行为树一样都是树形结构，都是由节点构成。决策的构成是由树形结构的头部开始，从上往下一路判断该往哪走，最后一定会执行到叶子节点，在决策树中只有叶子节点才决定了如何行动，而且在决定后的行动中，无法中途退出，要等到档次行为执行完毕或者被打断后才能开始下一次决策。&lt;/p&gt;

&lt;p&gt;从理念上讲，决策树就是为了制定决策，而行为树是为了控制行为，是两个不同的理念，行为树更加注重变化，而决策树则注重选择。因此行为树可以定制比决策树更加复杂的AI逻辑，而实现的难易程度行为树并没有增加多少，所以决策树被冷落也是情理之中。&lt;/p&gt;

&lt;h6&gt;行为树比状态机更容易编写复杂的AI逻辑就是由于单一节点的易扩展性，以及整个AI树的可搭建能力都是在人脑的可及范围内。但是，再厉害的人脑也有搭建复杂度的极限，无论你对搭建行为树这项技能有多么精通，都有到一个极限的状态，也就是搭建的复杂度超出人类大脑的时候，人类就完全无法继续搭建了，或者说无法完成。例如，如果想完全模拟人类的思维判断逻辑，对不同的人，对不同的事，对不同的景色，对不同的物体，不同的路面，以及以上混合组合的不同组合，就完全超出了人类大脑搭建的极限。像这种特别复杂，完全不能由人类大脑自主搭建的方式形成的AI，就需要引入‘机器学习’这个概念了。由于情况太多，太复杂，唯有‘机器自主学习’才能适应这些复杂的情况时，‘Machine learning机器学习’，‘Deep learning深度学习’，‘Artificial Neural Network神经网络’，就成了解决这些问题的方案。&lt;/h6&gt;

&lt;p&gt;参考:&lt;/p&gt;

&lt;p&gt;《使用行为树(Behavior Tree)实现游戏AI》by AKara 2010&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(二十一) 生存之战</title>
   <link href="http://www.luzexi.com/2019/03/17/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A821.html"/>
   <updated>2019-03-17T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/03/17/思路探讨21</id>
   <content type="html">&lt;p&gt;22周岁毕业，在杭州工作了4年，26岁带着不甘的心独自去了上海，27岁结了婚，28岁有了第一个孩子，29岁第二个孩子降临，今年要32周岁了。从毕业到现在过去了10个年头，有时偶尔回头望去觉得是精彩的，不过精彩的并不是结果，而是这10年里拼搏的过程，那种奋力前行用尽全力突破自我的精神和逆流而上明知山有虎偏向虎山行的勇气。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;这种勇气和精神，来自于我的内心，不甘心成为一个平庸的人的意识形态，我不愿意自己每天妥协过着看不到尽头的无奈日子，我希望自己改变自己，改变成为自己心中的那个非常强大的人。&lt;/p&gt;

&lt;h6&gt;还没有孩子前我只为我自己奋斗，那时我觉得这样的动力已经很足够了，但我还是too young too naive，在有了孩子后，特别是有第二个孩子之后，我彻底清醒的认识到我过去的行动和能力都是小儿科级别的。&lt;/h6&gt;

&lt;p&gt;特别是最近我读了《富兰克林自传》、《居里夫人自传》、《稻盛和夫自传》、《韩信传》、《林肯传》这些名人传记后，生存的严肃性再次深刻的、深切的、深不见底的印在我记忆的肌肉里。&lt;/p&gt;

&lt;h6&gt;他们都是严肃生活的典范，他们专心，专业，努力，奋力，认真得经营着自己，包括身体、知识、思想、家庭。他们并不埋怨环境，而是改变自己，他们知道环境无法改变，只有改变自己。因此在恶劣的环境下他们任然保持自己前进的节奏，虽然偶尔被环境所打断，甚至被迫害，但他们依然能够不断调整自己回到最初的状态，尽管时常也陷入巨大的瓶颈，但多大的苦难和瓶颈都没能挡得住他们突破自己的步伐。&lt;/h6&gt;

&lt;p&gt;对比我自己，我还是太稚嫩，严肃的不够严肃，认真得不够认真，对生活没有一个清醒的彻底的完全的认识，时常有’休息一下也没事‘、’一天不努力也可以‘、’明天再学也不迟‘的行为和想法，导致原本制定的计划，或者良好的生活习惯，或者良好的学习习惯被一点点侵蚀，最终导致自律能力彻底丧失，彻底沦为浪费时间浪费生命的大懒虫。&lt;/p&gt;

&lt;p&gt;我再次回忆我这年轻的岁月里，浪费了有多少的时日时，时常感叹如果我能早点知道该有多好。&lt;/p&gt;

&lt;h6&gt;不过幸好，每次有这种’早点知道该有多好‘的感叹时，我明白为时还不晚，因为有很多智者都提醒过我，任何时候只要你意识到正确道路的方向时为时都不晚。虽然这些智者我都没见过，他们都存在于书中，广播中，视频中，但却时常能够起到提醒我的作用。&lt;/h6&gt;

&lt;p&gt;正确的道路确实难走，所以人才会跟随人性弱点去选择舒适的但错误的道路。&lt;/p&gt;

&lt;h6&gt;生存之战就是谁能长时间的、长期的、长久的、更长时间的、更长期的、更长久的走在正确道路上的无形的战争。&lt;/h6&gt;

&lt;p&gt;每个人在战争中都走的是自己的路并平行于他人，从来都不跟别人碰撞，但每一步都有好有坏，而每个步都有他们自己来决策。&lt;/p&gt;

&lt;p&gt;让人感到意外又不十分惊奇的是，很多人并不知道他们已经决策了自己的路，他们甚至以为生活的决策是有个缓冲期的，会给到具体的问题和正确的答案。&lt;/p&gt;

&lt;h6&gt;生存之战的残酷性就在这里，它的决策之路很少有具体的标志性的事件或者缓冲期，甚至连问题和答案都没有，所有的人生道路的决策都是由生活中的一言一行，一举一动拼凑而成的。&lt;/h6&gt;

&lt;p&gt;你是怎么生活的，你就是怎么决策着你的道路，容不得我们半点侥幸。根本不会出现，例如有个决策能一下子完全彻底的改变你的人生道路的东西出来，所有你走出来的道路都是由你生活的点滴组合而成，所有导致事件发生的都是由你先前的生活中一举一动的积累导致的量变引起的质变。&lt;/p&gt;

&lt;p&gt;人们口中时常说的残酷是由于人多或者需求多而供应少导致的，我觉得生存之战的残酷比它这种残酷要残酷一百倍。&lt;/p&gt;

&lt;p&gt;生存之战的残酷是没有硝烟的，是看不见摸不着的，但却时时刻刻在战斗，更残酷的是，并不是战斗一年两年就结束的，而是10年，20年，30年，40年，50年，一辈子。直接说一辈子太突兀，所以用前面的数字来做铺垫会让人好受些。&lt;/p&gt;

&lt;p&gt;一辈子持久战的残酷性，我想是我们这个和平年代下最最残酷的残酷战争了吧。&lt;/p&gt;

&lt;h6&gt;我希望能用这篇文章来告知同僚们，提高警惕并且奋斗，这是场最长的持久战，记得身体是第一关键因素，谁在持久战中身体先垮掉谁就第一个败下阵，因此每天运动保持身体免疫系统正常工作是第一要素。有了身体还不够，还要有知识、有技能、有多维度的思维方式、有育人的技巧、有沟通能力、有经验等等等，要我们去征服。&lt;/h6&gt;

&lt;h6&gt;面对生存之战，我们需要严肃生活，并且在严肃的生活中，别放弃，别太多沮丧，哭完了我们继续上！&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第八章 AI(1)-状态机构架机器人行为</title>
   <link href="http://www.luzexi.com/2019/03/10/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-AI1.html"/>
   <updated>2019-03-10T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/03/10/Unity3D高级编程之进阶主程-AI1</id>
   <content type="html">&lt;p&gt;AI机器人在游戏中非常普遍，它们常以模仿人类的行为在游戏中活动。游戏中的怪物的自动行为比较普遍，这种简单的人工智能方式可以用几种不同的方式进行编写，这里我们介绍两种方式，一种为容易被人类思维接受的状态机，另一种是为机器人策略型思考方式编写的行为树。其它还有很多方式来编写AI，比如与行为树差不多的决策树，以及相对比较复杂的神经网络，以及现在比较流行的机器学习，由于作者接触的只是皮毛在此不多做介绍，它们的复杂度也超过了项目的周期，研发和维护成本暂时比较高，所以在游戏项目中的AI方面应用还不太多，大家也一直在往这方面靠拢，因为神经网络和机器学习是人工智能的趋势。&lt;/p&gt;

&lt;p&gt;888&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;AI-状态机&lt;/h3&gt;

&lt;p&gt;状态机虽然是个比较简单的概念，但在实际编程中花样也是繁多的，不过最终都是围绕着状态这个基础变量来做变化的。&lt;/p&gt;

&lt;p&gt;状态机最符合人类思考的方式，我们喜欢把事物以状态形式进行拆分成：当前状态，前置状态，下一个状态，状态变化需要的条件等。其中每个状态都有自己定义，比如行走，蹲下，躺下，攻击，防守，三连击，俯冲，左移，右移等。&lt;/p&gt;

&lt;p&gt;人们习惯把人或动物的某些连贯的行为定义为状态，所以状态其实不只是一个动作，它可以是好几个动作，或者好几段位移，也就是好几段执行程序。&lt;/p&gt;

&lt;p&gt;这种好几个动作和好几段位移一起组成的组合，在程序中用状态来表示最符合逻辑。每种状态下不只是一个动作或一种位移，而是由很多个动作多段位移组合而成。&lt;/p&gt;

&lt;p&gt;在游戏里，智能的机器人由于都是人设计出来的，行为方式也最符合人类的逻辑，所以状态机的方式制作AI最符合人类思维，也最容易被接受。&lt;/p&gt;

&lt;p&gt;从面向程序的角度来看，状态可以从父类构建开始，并且向不同的方向继承并衍生，最终再把所有的状态类集中到控制状态的状态控制器中。&lt;/p&gt;

&lt;p&gt;下面我们就以图和文的方式构建一个 AI 状态机：&lt;/p&gt;

&lt;p&gt;我们以 AIStateBase 为状态基础类，基础类中有一个识别状态类的变量，可以是整数，也可以是枚举，和三个必要的接口，更新函数 Update() ，进入状态事件引发的事件函数 OnEnter()，退出状态事件引发的事件函数 OnExit()。这三个函数足以概括状态的出、入、以及自我循环更新三个动作，状态机定义下也只有这三个动作可以做。&lt;/p&gt;

&lt;p&gt;接下来，我们开始扩展状态机的功能，以跑步动作状态为例：&lt;/p&gt;

&lt;p&gt;在进入跑步动作状态时，表现为，机器人有跑步动画，并且向前移动。&lt;/p&gt;

&lt;p&gt;实现跑步状态，首先继承父类 AIStateBase 并且把跑步状态类命名为 AIRunState。然后再对 AIRunState 进行编写，在进入状态时也就是 OnEnter 函数中编写机器人播放跑步的动画并让动画不断循环播放，然后在更新函数 Update 中开启不断向前移动的位置变化。当不再需要移动时，也就是退出跑步状态事件中，OnExit 里调用停止播放动画，也可以不停止播放，因为下一个状态肯定会播放其他动画，不如让他们插值过度下动画看起来会更顺滑。&lt;/p&gt;

&lt;p&gt;实现了跑步状态，可以引申出其他和它基本相同的状态，它们可以完全按照跑步状态的方式实现，比如后退，侧移，漫步，打坐，跳跃，攻击等，它们都是只用到播放自身动画和持续位移组合的方式完成状态。对其他复杂状态来说，算是比较基本的状态。&lt;/p&gt;

&lt;p&gt;现在我们来实现稍微复杂点的状态‘追击’状态。追击中有两个动作，一个是追，一个是攻击，不止是这些，我们还必须首先锁定目标，然后寻找追击的路径。当怪物进入‘追击’状态时，会锁定目标，然后不断向目标跑去，当跑到攻击范围内时，进行攻击。&lt;/p&gt;

&lt;p&gt;我们定义一个‘追击’状态类，AIAttackState 类同样继承 AIStateBase。当‘追击’状态开始时，进入 OnEnter 函数时先锁定目标，把目标保存下来，并且寻找追击目标的路径 Path Find，寻路解决方案会在地图与寻路章节中详细介绍。接下来就是‘追击状态’的更新函数，每帧都会调用更新函数 Update，在Update中，检查目标是否已在攻击范围内，如果是则立刻播放攻击动画，并且调用目标的伤害接口使目标受伤，如果不在范围内则检查锁定目标是否移动，如果有移动就重新寻找路径，并且根据路径来进行位移。整个追击状态，在追击中都是在 Update 函数中不断判断和位移的。&lt;/p&gt;

&lt;p&gt;追击状态以追和攻击为主要行为。与追击状态类似的，也比较常用的还有‘巡逻状态’，当怪物进入这个‘巡逻状态’时，怪物会在一个范围内到处行走以查看敌人是否在周围，如果在视野范围内查看到敌人，则退出巡逻状态，进而进入追击状态。&lt;/p&gt;

&lt;p&gt;我们来看看编写‘巡逻状态’的步骤。当进入‘巡逻状态’时，状态进入 OnEnter 函数，在 OnEnter 里找到最近的一个巡逻点，然后在更新函数 Update 中持续循环走向最近的巡逻点，当走到第一个最近的巡逻点后继续按照巡逻点的布置顺序继续往下一个巡逻点走，如此不断循环往复。同时更新每次移动时，都检查一下敌人是否在范围内，如果有敌人在检查范围内，当前‘巡逻状态’就结束，OnExit 被调用，转而进入‘追击状态’。&lt;/p&gt;

&lt;p&gt;至于‘追击状态’返回‘巡逻状态’的条件可以设置为，当追击太远时重新转入’巡逻状态‘，比如在进入’追击状态‘ OnEnter 函数里记录起始追击位置，每次移动时都判断下，与起始位置的距离是否太远，如果太远则退出当前的’追击状态‘转而进入’巡逻状态‘。&lt;/p&gt;

&lt;p&gt;游戏策划常设计Boss怪物进入‘疯狂状态’，例如，这个怪物突然变身，然后开始疯狂得从天空里召唤火球，这些火球像流星一般撞向地面，爆炸，并在爆炸范围内敌人受到伤害，结束后怪物又回到了普通的’追击状态‘。&lt;/p&gt;

&lt;p&gt;我们来分析下这个’疯狂状态‘如何编写。当进入’疯狂状态‘时，状态类被调用进入状态事件函数 OnEnter ，函数里播放立刻Boss怪物的变身动画，因为 OnEnter 只调用一次，所以所有检查都在更新函数 Update 里进行，Update 中检查变身动画结束时更换怪物的模型为变身后的新模型，因为需要新模型播放自己的动画所以必须更换。紧接着更换完变身后的模型后，就用新的模型播放施法动画，同时不断按次序调让火球出现在上空的某个位置，并持续移动向地面，当火球的物理引擎检测碰撞到地面时，销毁火球并生成爆炸特效，同时在爆炸位置范围内，查找到是否与爆炸位置距离小于某个值的敌人，如果有则调用敌人的受伤接口使其受伤。当检测到所有火球都已经爆炸完毕，则完成了此次’疯狂状态‘，退出并转向’追击状态‘。&lt;/p&gt;

&lt;p&gt;无论多少复杂的技能或者行为，都能在一个状态中体现出来，以状态形式的编写好用就在这里。有了众多复杂的状态还不够，我们还需要有控制这些状态的状态控制器。&lt;/p&gt;

&lt;p&gt;状态控制器就是记录，这些状态的状态管理类，我们可以命名为 StateControl类，所有状态都在 StateControl 里有一份实例，而且状态控制器记录了一个变量是当前是什么状态，由于所有状态都是继承与 AIStateBase，所以这个当前状态变量可以为 AIStateBase 以支持所有类型的状态类。又由于所有的状态类的对外接口都是统一，所以只需要基类就能操作所有状态，而且状态的转换也完全可以各自状态的本身来决定。状态控制器，只是起到了对状态实例管理和转换的工具，所以状态控制器没有太多了的逻辑，所有AI逻辑都放在了每个状态类里面，由每个从 AIStateBase 父类继承而来的AI子类来决定如何行动，这种做法大大降低了逻辑的耦合，让代码逻辑更加清晰，维护性强，扩展性强。&lt;/p&gt;

&lt;h6&gt;用状态机编写AI有诸多优点，诸如可维护性强，可扩展性强，逻辑耦合清晰，符合人类思维逻辑易上手。但缺点也很大，由于每个状态都必须由设计人亲自制定，所以在每个状态时编写时要考虑到所有情况，每种情况都要有自己的处理方式，这样就导致当需要设计的AI行为过于复杂的时候，编写的逻辑复杂度和工期长度也呈现指数级的增长，到最后有可能无法承受太复杂的AI行为逻辑，比如人类在战场中的随机应变能力，对于各种各样的爆炸，攻击，冲锋，防御的应变能力需要表现出各种不一样的行为方式时，如果任然用状态机来编写，就会很容易陷入超出人类逻辑的复杂度。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>YOU CAN LIVE YOUR DREAM!</title>
   <link href="http://www.luzexi.com/2019/02/19/you-can-live-your-dream.html"/>
   <updated>2019-02-19T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/02/19/you-can-live-your-dream</id>
   <content type="html">&lt;p&gt;I don’t know what that dream is that you have.&lt;/p&gt;

&lt;p&gt;I don’t care how disappointing it might have been, as you’ve been working towards that dream.&lt;/p&gt;

&lt;p&gt;That the dream that you’re holding in your mind … that it’s possible.&lt;/p&gt;

&lt;p&gt;That some of you already know that its hard… it’s not easy. Its hard changing your life.&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;That in the process of working on your dreams you are going to incur a lot of disappointment … a lot of failure … a lot of pain … there are moments when you’re going to doubt yourself … and say “ God why? why is this happening to me? I’m just trying to take care of my children and my mother I’m not trying to steal or rob from anybody. How did this have to happen to me ?”&lt;/p&gt;

&lt;p&gt;For those of you that have experienced some hardships, don’t give up on your dream.&lt;/p&gt;

&lt;p&gt;There are rough times that are gonna come but they have not come to stay, they have come to pass.&lt;/p&gt;

&lt;p&gt;Greatness is not this wonderful esoteric, elusive, god like feature that only the special among us will ever taste … it’s something that truly exists in all of us.&lt;/p&gt;

&lt;p&gt;It’s very important for you to believe, that you are the one.&lt;/p&gt;

&lt;p&gt;Most people, they raise a family, they earn a living and then they die.&lt;/p&gt;

&lt;p&gt;They stop growing… they stop working on themselves, they stop stretching, they stop pushing themselves.&lt;/p&gt;

&lt;p&gt;And a lot of people like to complain but they don’t want to do anything about their situation, and most people don’t work on their dreams.&lt;/p&gt;

&lt;p&gt;why? One is because of fear, the fear of failure… “what if things don’t work out?” And the fear of success… “what if they do and I can’t handle it?”. These are not risk takers.&lt;/p&gt;

&lt;p&gt;You spend so much time with other people, you spend so much time trying to get people to like you, you know other people more than you know yourself, you study them… you know about them, you wanna hang out with them, you wanna be just like them.&lt;/p&gt;

&lt;p&gt;And you know what you’ve invested so much time into being like them you don’t know who you are, I challenge you to spend time by yourself.&lt;/p&gt;

&lt;p&gt;It’s necessary that you get the losers out of your life, if you want to live your dream.&lt;/p&gt;

&lt;p&gt;For people who are running towards their dreams, life has a special kind of meaning.&lt;/p&gt;

&lt;p&gt;When you become the right person, what you do is you start separating yourself from other people, you begin to have a certain uniqueness.&lt;/p&gt;

&lt;p&gt;As long as you follow other people and as long as you’re being a copy cat you will never ever be the best copy cat in the world. But you will be the best you can be.&lt;/p&gt;

&lt;p&gt;I challenge you to find your value. That everybody won’t see it, that everybody won’t join you, that everybody won’t have the vision, it’s necessary to know that. That you are an uncommon breed.&lt;/p&gt;

&lt;p&gt;It’s necessary that you align yourself with people and attract people into your business who are hungry.&lt;/p&gt;

&lt;p&gt;People who are unstoppable and unreasonable, people who are refusing to live life just as it is and who want more.&lt;/p&gt;

&lt;p&gt;The people that are living their dream are finding winners to attach themselves to. The people that are living their dreams, are the people that know that if it’s gonna happen it’s up to them.&lt;/p&gt;

&lt;p&gt;If you wanna be more successful, if you wanna do and have stuff that you have never had before, I’m asking you to invest in you.&lt;/p&gt;

&lt;p&gt;Someone’s opinion of you does not have to become your reality … that you don’t have to go through life being a victim. And even if you have to face disappointment, you have to know within yourself, I can do this even if no one else sees this in me I must see it for myself.&lt;/p&gt;

&lt;p&gt;Because you’re still talking about your dream … you’re still talking about your goal …you’ve not done anything … just take the first step … you can touch millions of peoples ‘ lives … and the world will never be the same again … because you came this way.&lt;/p&gt;

&lt;p&gt;Don’t let nobody steal your dreams. If you face a rejection or a no, if you hold a meeting and nobody shows up, if someone says ” you can count on me ” and they don’t come through.&lt;/p&gt;

&lt;p&gt;What if we have that kind of attitude, a cause repossessed, nobody believes in you … you’ve lost again, and again, and again, the lights are cut off … but you’re still looking at your dream, renewing it every day and saying to yourself it’s not over… UNTIL I WIN !&lt;/p&gt;

&lt;p&gt;YOU CAN LIVE YOUR DREAM!&lt;/p&gt;

&lt;h3&gt;Copy from google&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第一章，C#要点技术(六) 搜索算法</title>
   <link href="http://www.luzexi.com/2019/02/17/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-CSharp%E8%A6%81%E7%82%B9%E6%8A%80%E6%9C%AF6.html"/>
   <updated>2019-02-17T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/02/17/Unity3D高级编程之进阶主程-CSharp要点技术6</id>
   <content type="html">&lt;h3&gt;搜索算法&lt;/h3&gt;

&lt;p&gt;广度优先搜索和深度优先搜索是最常见的搜索算法，如果不进行些枝剪的话效率是比较差的，直接使用不加修饰的广度和深度算法，会消耗比较多的CPU以至于整体效率比较差。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;其实搜索算法不只广度和深度优先算法，他们只是明面上看上去比较直接的搜索算法。搜索算法的目的就是找东西，找出各种类型的东西，动态规划，图论，也能帮助我们很好的找到东西。好的搜索算法，大部分需要有数据结构的支撑，在数据结构里记录了信息的特征，前人的搜索的记录，和当前的内容环境，用于枝剪和优化。&lt;/p&gt;

&lt;p&gt;搜索的目的一般有，一组元素中找出某元素，一组元素中找出某个特征的所有元素，一个2D或3D空间中找出某元素，2D或3D空间中找出某一个特征的所有元素，以及一堆相互连接的结构中找出两点的最短路径等等等。&lt;/p&gt;

&lt;h6&gt;二分查找算法&lt;/h6&gt;

&lt;p&gt;二分查找算法是搜索中用的最多的，也是最简单易用的，效率也比较好的搜索算法。不过它有个前提条件，即查找所用的数组必须是有序的数组。也就是说，在使用二分算法查找前，必须对数组进行排序。而且在每次更改，插入，删除后都要进行排序以保证数组的有序状态。&lt;/p&gt;

&lt;p&gt;二分查找算法的步骤是：&lt;/p&gt;

&lt;p&gt;1，将数组分为三块，分别是前半部分区域，中间位元素，后半部分区域。&lt;/p&gt;

&lt;p&gt;2，将要查找的值和数组的中间位进行比较，若小于中间位则在前半部分查找，若大于中间位则在后半部分查找，如果等于中值时直接返回。&lt;/p&gt;

&lt;p&gt;3，继续在选择的查找范围中查找，跳入1步骤，依次进行递归过程，将当前选择的范围继续拆分成前半部分，后半部分，和中间位三部分，直到范围缩小到最小，如果还是没有找到匹配的元素，就说明元素并不在数组里面。&lt;/p&gt;

&lt;p&gt;二分查找的平均时间复杂度为O(logN)，是一个效率比较好的查找算法，这也是它常被使用到的原因，不过前提是数组是有序的，可能这对于一些情况下的搜索问题的门槛会比较高，它们可能需要不停得插入或删除元素，这种情况下可以使用二分先查找到插入的位置，再做插入操作，但是插入的操作本身就是O(N)的平均时间复杂度，导致查找无论多快都还是抵不过插入带来的消耗，删除也是同样的道理，数组的拷贝操作已经成了算法中的瓶颈。我们来看看其他搜索算法是怎么做的。&lt;/p&gt;

&lt;h6&gt;二叉树、二叉查找树、平衡二叉树、红黑树、B树&lt;/h6&gt;

&lt;p&gt;二叉树及其衍生的所有算法都是以父节点有且只有至多两个子节点为规则。二叉查找树就是在二叉树之上建立的查找树，主要目标是快速查找，它在构造时的特点为，左边的子节点一定比父节点小，右边的子节点一定比父节点大。算法的方式与二分查找算法有点类似，不一样在于二分查找树构建出来的树形结构，由于原始数据的排列不同有可能导致深度很大的二叉树犹如直线连接的节点，因此它也被称为是个不稳定的查找方式，搜索的速度由原始数据的排列方式决定，排列的顺序不好则速度就不佳，因此二叉树的稳定性并不高。&lt;/p&gt;

&lt;p&gt;平衡二叉树很好的解决了查找二叉树的二叉树不平衡问题，它的规则是父节点的左右两棵树的深度差的绝对值不能超过1，所有节点都遵循这个规则包括节点下的左右两棵子树叶同样遵循这个规则。二叉树的深度问题解决了，在查找时的效率就更加稳定，如果能一直保持O(logN)的时间复杂度那将是很好的算法效率。&lt;/p&gt;

&lt;p&gt;红黑树就是实现平衡二叉树的算法，都是在插入和删除节点操作时通过特定的操作保持二叉查找树的平衡，从而使二叉查找时获得较高的查找效率。它虽然是复杂的，但它的最坏情况运行时间也是非常良好的，并且在实践中是高效的，它能够在O(logN)时间复杂度内做查找，插入和删除操作，这里的N为二叉树中元素的数目。&lt;/p&gt;

&lt;p&gt;红黑树的数据结构特点是各节点上多了一个颜色值，颜色为红色或黑色。通过对任何一条从根到叶子的路径上各个节点着色方式的限制，红黑树确保没有一条路径会比其他路径长出两倍，因而是接近平衡的。具体红黑树是怎样的算法和程序步骤不在这里介绍，有很多书本和资料可供参考。&lt;/p&gt;

&lt;p&gt;红黑树虽然高效稳定，但实际项目中运用的稍微少了点，一方面它通常会封装在自定义的底层容器算法中，例如我们通常会重新封装Map、Dictionary容器，把红黑树放入容器中使得写业务逻辑的同学能够不需要关心底层的算法的情况下高效的使用容器。另一方面它的算法复杂度高，一般程序员需要费点心思去研究，因此通常也不会方在明显的位置上使用，这也是红黑树一般都会放入容器里使用的原因之一，它也更适合容器类外壳。还有一方面，查找可以用“快速排序”+“二分查找”代替，效率稍差一些但简单实用，使用优化后的快速排序效率在查找效率上会优于红黑树，如果逻辑中查找的次数远远大于插入与删除的次数，则可以考虑用“快速排序”+“二分查找”代替这种方式进行替代。&lt;/p&gt;

&lt;p&gt;B树大家听的也比较多，其实它主要是为磁盘存储设备而设计的一种平衡查找树。它与红黑树主要不同在于，B树是建立在查找树之上的多叉树，它的一个节点上有多个值且父节点可以拥有2个以上的节点，同时还必须保持平衡树的层次结构，即树的深度值不得超过logN的深度(N为节点个数)。这种数据结构犹如在红黑树之上建立多叉的方式，其比较方式由单一值比较改为了多值比较。在B树结构里一个节点里的信息是个数组，它们是有序的，因此可用二分查找法查找数据，若没有找到准确值，则继续往下搜索子节点的数据。B树在游戏项目中里很少用到，不过它在文件信息存储结构上能发挥巨大作用，这也是它被开发出来的原因之一，其他包括B+和B*树都是从B树衍生而来。&lt;/p&gt;

&lt;h6&gt;四叉树搜索算法&lt;/h6&gt;

&lt;p&gt;四叉树搜索算法，有点像二叉树的多维度版本，有点类似一维数组上数组分成4块进行查找，但也仅限于此。四叉树的最重要的理念是空间划分，把一个二维空间划分成多个块来存放，它的数据结构也与二叉树一样只是扩展了子节点的个数，每个点有四个子节点，这四个子节点代表父节点的四个象限区块，四个子节点加起来代表整个完整的父节点，以此类推下去，每个节点可以有子节点，一旦有就得四个一起有，除非是末尾的叶子节点，这就相当于是个完美二叉树的变形即完美四叉树，我们可以用一个数组来完美表示完美四叉树的结构情况。&lt;/p&gt;

&lt;p&gt;在实际运用中，四叉树主要在2D平面空间上的搜索用的比较多，虽然其他领域也有用到，但平面上空间划分更适合它。我们可以把一个2D矩形平面想象成一个分成相等四个大小的矩形，共有4个子节点共四块矩形方块，其中子节点中即这4块中每块又再次分成相等大小的四块，一直分直到分到定义的最小块为止，最小块大小可自定义，这样的划分将一个大的平面矩形划分成都能用四叉树表示的结构，每一块都有自己的父节点和子节点。&lt;/p&gt;

&lt;p&gt;用这样的数据结构表示一个平面里的所有方块内容好处是能牢牢掌控每个小平面内的内容变化。当有元素加入这个平面时，即加入到了这个四叉树的数据结构中去时，会先计算它的坐标在树中的索引，这就相当于在四叉树中搜索某个节点那样，从最大的四块的x、y大小范围开始依次往下推导，一直推导到最小区块的节点上，就能得到该坐标所在的节点。&lt;/p&gt;

&lt;p&gt;形成四叉树数据结构后，就可以根据这个数据结构进行查找节点上的元素了。比如在某个位置上可以查找到与它在相同块内的所有其他元素，即给出某个坐标后就能根据四叉树依次推下去最终找到最小块的那个节点，这样就可以获取该块上的所有其他元素的信息。我们可以想象用这种四叉树的方式把地图分成3级，每1级四块矩形图上都存有相关元素的信息，这样就可以快速从1、2、3级地图上得到某块方块内的所有元素的信息。&lt;/p&gt;

&lt;p&gt;四叉树在游戏项目中的用法包括，二维平面上的有效碰撞检测搜索范围，地形的有效展示范围，在地图上找某块方块上的人或事，以及包括二维平面的寻路网格构建等。&lt;/p&gt;

&lt;h6&gt;八叉树搜索算法&lt;/h6&gt;

&lt;p&gt;八叉树与四叉树类似，但在理念上更关注三维空间上的划分。八叉树把一个立方体从纵向和横向各切一刀，分割成八个相同大小的立方体。每个小立方体也就相当于子节点，也可以再分割成八个相同大小的更小的立方体，用树形结构表示每个大大小小的立方体形成了八叉树。经过树形结构构造八叉树就很容易用在3D空间中的场景管理，可以很快地获取3D场景中的某范围物体，或测试与其它物体是否有碰撞以及是否在可视范围内。八叉树在实际游戏中用到的包括，渲染中的渲染裁切，和物理引擎中的碰撞检测。&lt;/p&gt;

&lt;h6&gt;优秀的算法都是能找到事物特征并且利用好事物特征的算法，不同种类的算法有其自身的理念，混用或合用几个算法也是常有的事，理解和知晓是第一步，灵活运用真的不是一朝一夕的事。&lt;/h6&gt;

&lt;p&gt;参考资料&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;《算法导论》
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>思路探讨(二十) 如何将你的家庭与普通人拉开差距</title>
   <link href="http://www.luzexi.com/2019/02/04/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A820.html"/>
   <updated>2019-02-04T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/02/04/思路探讨20</id>
   <content type="html">&lt;h6&gt;其实上大部分人都知道怎么拉开差距，但知易行难啊，知道和执行是两码事。&lt;/h6&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;办法是，努力学习，努力工作，努力做人，努力保持健康。不可能是偷懒，投机，作弊，暴力，反社会。&lt;/p&gt;

&lt;p&gt;这属于正常思路的范畴。可是大部分人都不信啊，为什么不信，效果太慢，太枯燥乏味，需要5-10年甚至20年。于是他们一定要寻找另外一条路，从此踏上了寻找捷径的旅途。&lt;/p&gt;

&lt;p&gt;他们相信世界上有这么一条捷径，他们一定能找到，比别人用的时间少花的精力少就能夺得世界，不能夺得世界也能拥有自己一块领土，颐养天年。他们对这种想法的意志非常坚定。&lt;/p&gt;

&lt;p&gt;可是真的有么？弯弯绕，最后都要回到原地，回来后发现还是要按部就班得走，这时才发现差距已经拉开了。&lt;/p&gt;

&lt;p&gt;不可否认，有些人还真的是运气好到爆炸，真的被他找到一条路，通往世界的宝藏中心，财富和权利的交集处。&lt;/p&gt;

&lt;p&gt;但故事只是个开头，后面故事怎么发展，不能下定论，虽然我的观点是99%最后都灰飞烟灭了，但世界不会因为我怎么想而怎么走。&lt;/p&gt;

&lt;p&gt;无论如何，这个概率也是几十亿到几百亿分之一以下的概率，基本可以忽略不计，但人就是这样，永远认为自己会是那个幸运儿。&lt;/p&gt;

&lt;h6&gt;啊哈，看到没有，只要按正常人的正常思路走，就能击败大部分人，与普通人拉开差距。&lt;/h6&gt;

&lt;p&gt;为什么？因为普通人耐不住寂寞，受不了枯燥，行动不下去。&lt;/p&gt;

&lt;p&gt;那么真的有人能耐得住寂寞，受的了枯燥，沉着冷静吗？&lt;/p&gt;

&lt;p&gt;当然没有，别骗自己了，我们都是人，都是恒温动物，都有血有肉，都有感情，贪嗔痴慢疑一样不能少。&lt;/p&gt;

&lt;p&gt;每个人都是一样的，拥有完整的人性的弱点，谁都躲不过。&lt;/p&gt;

&lt;p&gt;一个拥有完整人性弱点的人，是不可能完完全全、彻彻底底反人性的。&lt;/p&gt;

&lt;p&gt;那什么样的人能够完完全全、彻彻底底反人性？疯子，神经病。无论什么原因病态彻底扰乱了人性的特点。&lt;/p&gt;

&lt;p&gt;我肯定不想成为疯子，我也意识到人性的弱点无法改变，但我又想抗拒人性弱点，怎么办？&lt;/p&gt;

&lt;h6&gt;1，在枯燥中寻找乐趣。不惜一切方式、方法，围绕目标消除枯燥，即使会暂时的退步，也是以退为进的一种战略战术。&lt;/h6&gt;

&lt;h6&gt;2，在痛苦中寻找欢乐。痛苦是必然的，疲惫也是必然的，要在痛苦中找到欢乐，在疲惫中找到精神支柱。就不会像表面上看起来那么苦了，虽然表面上还是苦的累的，但当事人心里却是甜的是兴奋的。&lt;/h6&gt;

&lt;h6&gt;3，迷茫时给自己打精神麻醉剂，告诉自己是金子总会发光的。不要忘了事业，财富，并不是直线向上的，而是一个波动的曲线。无论有多强大的心，生命中充斥着大部分的，都是失败。因此迷茫是必然的，而且大部分时候都在迷茫，真正看清前方道路的时间没几分钟，不一会又会再次陷入迷茫。不要在迷茫上浪费太多的时间，告诉自己是金子总会发光的，不要犹豫了，先冲上去拨开云雾。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第一章，C#要点技术(五) 排序算法</title>
   <link href="http://www.luzexi.com/2019/02/03/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-CSharp%E8%A6%81%E7%82%B9%E6%8A%80%E6%9C%AF5.html"/>
   <updated>2019-02-03T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/02/03/Unity3D高级编程之进阶主程-CSharp要点技术5</id>
   <content type="html">&lt;p&gt;年纪越大写程序写的越多，时间越长就越觉得算法的重要性，基础能力决定你到底能走多远。我们不是写一两年程序就完事了，从毕业算起，我们可能要写20-30年的程序，这段漫长的长跑路程中，最终比的不是谁熟悉API比较多，也不是谁用插件用的有多熟练，更不是比谁更熟悉某软件，而是比谁的基础能力强，比谁的算法效率高，比谁对底层原理更加熟知于心，比谁能够解决更复杂的系统和需求。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;这其中算法能力比较重要，在程序员生涯中算法能力是基础能力的一种，很多时候程序的好坏，一方面看的是写程序的经验，另一方面看的是对计算机原理的理解程度，还有一方面看的是对算法的理解和运用熟练度。&lt;/p&gt;

&lt;p&gt;算法能力不仅仅代表的是表面的算法熟知度，也是一种追求卓越的精神高度，即对所有经过自己手的程序效率负责的精神高度。在平时工作中某一处的算法有可能运用的很好，其他地方却依然用了很烂的算法或者算法运用的不太妥当，其对于整体程序效率来说效率依然很糟糕。因此在平时的编程习惯中，做到时刻关注算法效率是区分中、高水平的一个大的关键点。&lt;/p&gt;

&lt;p&gt;在平时的编程工作中，排序和搜索算法最为常用。毫不夸张的说一个项目中有90%的算法都是排序和搜索算法，如果说我们把这90%的算法提高到一个很高效的程度，那么剩下的10%算法处理起来压力会小很多。我们这节就来讲讲排序的各种算法，以及运用到具体项目中去时的优劣程度。&lt;/p&gt;

&lt;h3&gt;快速排序算法&lt;/h3&gt;

&lt;p&gt;快速排序，是种最坏情况为O(n^2)的排序算法，虽然这个最坏情况比较差但快速排序通常是用于排序的最佳的实用选择，这是因为它的平均性能比较好，其排序期望运行时间为 O(nlogn) 且 O(nlogn)记号中隐含的常数因子很小，另外还不消耗额外的内存空间，在嵌入式虚存环境中也能很好工作，因此广受人们欢迎是最常用最好用用的最多的排序算法。&lt;/p&gt;

&lt;p&gt;快速排序算法的排序步骤很简单：&lt;/p&gt;

&lt;p&gt;1.从序列中选一个元素作为基准元素&lt;/p&gt;

&lt;p&gt;2.把所有比基准元素小的元素移到基准元素的左边，把基准元素大的移到右边。&lt;/p&gt;

&lt;p&gt;3.对分开来的二个一大一小的区块进行递归再筛选，对两个区块同样进行1、2的两个步骤处理。&lt;/p&gt;

&lt;p&gt;简单来说就是选取一个区域里的数字，把这个区域按这个数字分成两半，一半小一半大，然后继续对这两半做同样的操作，直到所有筛选都完成就完成了排序。&lt;/p&gt;

&lt;p&gt;排序算法最差的情况是，每次都选到一个最小的或最大的数字，这样每次筛选大小时都要充分移动，这种概率比较低。快速排序是最常用的排序方法，所以我们要着重优化此算法，对大量使用的算法和程序我们需要格外的重视。&lt;/p&gt;

&lt;h3&gt;优化：&lt;/h3&gt;

&lt;h6&gt;1.随机选择中轴数&lt;/h6&gt;

&lt;p&gt;在快速排序中为了选择哪个元素作为中位数是比较关键的，这影响了算法排序效率，如果选中的数字不是中间的数字，而是一个比较偏小或者比较偏大的数字，那么排序的速度就会大大降低。如果选中的刚好是最大的或者最小的数字则更加糟糕，左边或右边完全没有数字可以排，相当于一次完整的遍历只排序了一个元素。&lt;/p&gt;

&lt;p&gt;如果我们去找到区间的那个准确的中位数会增加更多消耗，所以我们只能减少得到最坏情况的概率，我们可以随机一个列表上的元素来作为基准元素，随机是为了减小选到最大和最小值的概率，但随机也时常会选到坏的基准元素，实际上随机数并没有对排序提供多大的帮助。&lt;/p&gt;

&lt;h6&gt;2.三数取中&lt;/h6&gt;

&lt;p&gt;为了让选择的中轴数更加接近中位数，可以先选择头、中点、尾，三个数字先来次排序，把最小的放在头，中间的放在中，最大的放在尾，用三个数字去提高有效接近中位数的中轴元素。&lt;/p&gt;

&lt;p&gt;每次每个区间的头、中、尾的排序前都做这个操作，也就是说每次排序前，中轴数数都不可能是最小的，起码是区间里第2小的或者第2大的，这样选出来的中轴数靠近中位数的概率就很大了。&lt;/p&gt;

&lt;p&gt;那么是否可以把三个数扩大到4个或M个数，其实过多数字的选择就相当于多出了个一个排序算法，减慢的二分排序的效果，实际效果不如3个数字来的快。虽然可以用随机选取3个数字的方式来替代做选择，但实际上随机选择并没有什么帮助，况且伪随机数的计算和冲突的解决也是需要消耗cpu的，因此最终还是使用三数取中的做法是选择接近中位数的比较有效的办法。&lt;/p&gt;

&lt;h6&gt;3，小区间使用插入排序&lt;/h6&gt;

&lt;p&gt;排序算法都有各自的使用量级，当量级不同时则排序效率可能不一样，插入排序就依赖于序列的有序性和排序元素数量，即排序的效率由排序列表的有序程度决定，也与排序的元素数量多少有关，如果序列的排序刚好是反序的则排序时效率最差，反之如果是有序序列则效率最快。&lt;/p&gt;

&lt;p&gt;插入排序有一个特点，排序序列越长效率越差，对于短序列的排序效果则很好，高效排序序列长度在8左右。于是我们可以用这个特点来改善我们在快速排序中的效率，即在排序中，当切分的区块小于等于8个时，就采用插入排序来替代快速排序，因为8个以下的元素排序时，插入排序能发挥出更好的效率，我们就混合它与快速排序的逻辑关系，这样使得排序效率更高，其他时候任然采用快速排序算法。&lt;/p&gt;

&lt;h6&gt;4，缩小分割范围，与中轴数相同的合并在一起&lt;/h6&gt;

&lt;p&gt;除了选择更加靠近中位数的数字作为中轴数，以及小范围时使用更快的排序方式外，我们还可以通过缩小排序范围来提高排序效率。&lt;/p&gt;

&lt;p&gt;我们可以把与中轴数相同的数可以合并到中轴数左右的位置，这样使得分割后的两边范围缩小，范围越小排序的速度就越快，刨去了更多不需要排序的元素。具体操作步骤为，每次在分割比较中，当元素与中轴数相等时则直接移动到中轴数身边，移动完毕后划分范围从中轴数变为最边上的相同元素的位置，用这种方式来缩小范围，让后续的排序减少排序元素。&lt;/p&gt;

&lt;h6&gt;快速排序是最常用也是使用范围最广的排序算法，铭记于心是有必要的。&lt;/h6&gt;

&lt;h6&gt;除了快速排序，堆排序也是相对比较常用的，特别是堆排序的优先级队列&lt;/h6&gt;

&lt;p&gt;堆排序本身结构是由完全二叉树这样的结构支撑的，普通的堆排序比快速排序更低效一点，但堆排序中的最大最小堆的优先级队列异常用有，即只关注最大或最小值，在不断增加和删除根节点元素的情况下获取最大或最小值。优先级队列在排序完成后，数据堆就成了一个头顶着一个最大值或最小值的数据结构，这种数据结构更有利于获取根节点的最大最小值节点，在后面程序逻辑中当需要插入新元素、修改旧元素、以及推出最大最小值时效率比较高。优先级队列在实时获取最大最小值时高效的特点，导致它在寻路系统的A星算法中特别有用，因此最大最小堆排序常常用于A星算法。&lt;/p&gt;

&lt;p&gt;由于堆排序是一种完全二叉树结构，所以这种结构可以用一维数组表示，这样则会让效率更加高一些因为内存是连续的。一维数组在表示二叉树时，通常都是以完全二叉树形式表示每个节点与其子节点，每个节点都一一对应数组上的索引规则，即如果 i 为节点索引时，则i&lt;em&gt;2 和 i&lt;/em&gt;2+1 就是它的两个子节点，而索引 i 的父节点位置可以用 i/2 来表示，数组中任何节点都以遵循这种规则。以此类推到子节点，即 (i&lt;em&gt;2)&lt;/em&gt;2 和 (i&lt;em&gt;2)&lt;/em&gt;2+1 就是 i&lt;em&gt;2 这个索引的两个字节点，所有子节点自身的索引直接除以2就是父节点的索引，即 i&lt;/em&gt;2 和 i*2+1 的除以2后取整就是他们的父节点索引 i 。&lt;/p&gt;

&lt;p&gt;最大最小堆的优先级队列的操作分为，插入元素，返回最大或最小值，返回并删除最大最小值，查找并修改某个元素，其中关键的算法在于插入新元素和删除最大最小元素。其基本思想是利用完全二叉树的特性将新元素放入二叉树的叶子节点上，然后比较它与父节点的大小，如果它比父节点大(最小堆的情况)则结束，否则就与父节点交换一下，继续比较直到没有父节点或者父节点比它小。删除根节点则反过来，把叶子节点放入根节点，然后找到这个新根节点的实际位置，即比较它与两个子节点大小，如果比它们小(最小堆的情况)则结束，否则取最小值(最小堆的情况)替换节点位置，然后再继续向下比较和替换，直到停止或者替换到叶子节点时再没有子节点可比较就算完成操作。&lt;/p&gt;

&lt;p&gt;我们来看两幅图就能很好的理解插入与删除的步骤：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;缺图1

缺图2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;图1为插入时的堆排序步骤，不断与父节点比较并交换，直到到根节点或者无法交换。图2为删除根节点的情况，把根节点与叶子节点交换后，叶子节点再从根部不断比较并下移到应有的位置。&lt;/p&gt;

&lt;h3&gt;其他排序算法简要概括&lt;/h3&gt;

&lt;p&gt;其他排序虽然使用频率没有快速排序来的多，但也会在很多特定的系统上出现。&lt;/p&gt;

&lt;p&gt;桶排序，把所有的元素按一定大小范围分成N个组，对每个组进行快速排序，最终得到有序的数组，并且得到N个桶的记录，虽然第一次排序的速度不怎么样，但这N个桶的信息记录下来后对于后面的程序逻辑有非常大的帮助。比如我们需要进行模糊排序或模糊搜索，这种桶信息就会有很大帮助。&lt;/p&gt;

&lt;p&gt;基数排序，是针对元素的特性来实时的‘分配式排序’，利用数字的特性按个位数，十位数，百位数的性质放入0-9的桶中不用排序，几次合并后就有了序数组，利用元素特性排序的速度比任何其他排序方式都要快速。这种算法思路教会我们在运用算法时，可以从元素的特性着手，找到它的特点就有可能找到更合适更快的算法。&lt;/p&gt;

&lt;h6&gt;基本的、常用的几种排序算法是我们必须了解的，面对比较复杂难解决的难题，我们就需要更为广阔的思路，算法在实际运用中并不是固定的，适合的才是最好的，我们应该随着问题环境的变化而变化，找到最佳的突破口。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第一章，C#要点技术(四) 委托、事件、装箱、拆箱</title>
   <link href="http://www.luzexi.com/2019/01/26/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-CSharp%E8%A6%81%E7%82%B9%E6%8A%80%E6%9C%AF4.html"/>
   <updated>2019-01-26T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/01/26/Unity3D高级编程之进阶主程-CSharp要点技术4</id>
   <content type="html">&lt;h3&gt;委托(delegate)与事件(Event)的实质&lt;/h3&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;使用过C或C++的同学都对指针很清楚，指针是个需要谨慎对待的东西，它不仅仅可以指向变量的地址，还可以指向函数的地址，本质上它是指向内存的地址。&lt;/p&gt;

&lt;p&gt;在C#中万物皆是类，大部分时间里都没有指针的身影，最多也只是引用，因为指针被封装在内部函数当中。不过回调函数却依然存在，于是C#多了一个委托(delegate)的概念，所有函数指针都以委托的方式来完成的。委托可以被视为一个更高级的函数指针，它不仅仅能把地址指向另一个函数，而且还能传递参数、获得返回值等多个信息。系统还为委托对象自动生成了同步、异步的调用方式，开发人员使用 BeginInvoke、EndInvoke 方法就可以避开 Thread类 从而直接使用多线程调用。&lt;/p&gt;

&lt;h6&gt;那么究竟委托(delegate)在C#中是如何实现的呢？我们来一探究竟。&lt;/h6&gt;

&lt;p&gt;首先不要错误的认为委托是一个语言的基本类型，我们在创建委托delegate时其实就是创建了一个delegate类实例，这个delegate委托类继承了System.MulticastDelegate类，类实例里有，BeginInvoke、EndInvoke、Invoke三个函数，分别表示，异步开始调用，结束异步调用，以及直接调用。&lt;/p&gt;

&lt;p&gt;不过我们不能直接写个类来继承 System.MulticastDelegate类，因为它不允许被继承在明文上，它的父类Delegate类也同样有这个规则，官方文档中写的就是这么个规则：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    MulticastDelegate is a special class. Compilers and other tools can derive from this class, but you cannot derive from it explicitly. The same is true of the Delegate class.

    MulticastDelegate是一个特殊的类，编译器或其他工具可以从它这里继承，但你却不能直接继承它。Delegate类也有同样的规则。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Delegate类中有个变量是用来存储函数地址的，当变量操作 =(等号) 时，把函数地址赋值给变量存起来。不过这个存储函数地址的变量是个可变数组，你可以认为是个链表，每次直接赋值时会换一个链表。&lt;/p&gt;

&lt;p&gt;Delegate委托类还重写了 +=，-= 这两个操作符，其实就是对应 MulticastDelegate 的 Combine 和 Remove 方法，当对函数操作 += 和 -= 时，相当于把函数地址推入了链表尾部，或者移出了链表。&lt;/p&gt;

&lt;p&gt;当委托被调用时，委托实例会把所有链表里的函数依次按顺序用传进来的参数调用一遍。官方文档中写的就是如上述所说：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;A MulticastDelegate has a linked list of delegates, called an invocation list, consisting of one or more elements. When a multicast delegate is invoked, the delegates in the invocation list are called synchronously in the order in which they appear. If an error occurs during execution of the list then an exception is thrown.

MulticastDelegate 中有一个已经连接好delegate的列表，被称为调用列表，它由一个或者更多的元素组成。当一个multicast delegate被启动调用时，所有在调用列表里的 delegate 都会被按照它们出现的顺序调用。如果一个错误在执行列表期间遇到就会立马抛出异常并停止调用。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;看到这里我们彻底明白了原来 delegate 关键字其实只是个修饰用词，背后是由C#编译器来重写的代码，我们可以认为是编译时把delegate这一句换成了Delegate，从而变成了一个class它继承System.MulticastDelegate类。&lt;/p&gt;

&lt;h6&gt;那么什么是event，它和delegate又有什么关系？&lt;/h6&gt;

&lt;p&gt;event 很简单，它在委托delegate上，又做了一次封装，这次封装的意义是，限制用户直接操作delegate委托实例中变量的权限。&lt;/p&gt;

&lt;p&gt;封装后，用户不再能够直接用赋值(即使用 = 等号操作符)操作来改变委托变量了，只能通过注册或者注销委托的方法来增减委托函数的数量。也就是说被 event 声明的委托不再提供 ‘=’ 的操作符，但仍然有 ‘+=’ 和 ‘-=’ 的操作符可供操作。&lt;/p&gt;

&lt;p&gt;为什么要限制呢？因为在平时的编程中，由于项目太过庞大，经手的人员数量太多，导致我们常常无法得知其他人在编写的代码是什么有什么意图，这样公开的delegate委托会直接暴露在外，随时会被‘=’赋值而清空了前面累积起来的委托链表，委托的操作权限范围太大导致问题会比较严重。申明 event 后，编译器内部重新封装了委托，让暴露在外面的委托不再担心随时被清空和重置的危险。因为经过 event 封装后不再提供赋值操作来清空前面的累加，只能一个个注册或者一个个注销委托(或者说函数地址)，这样就保证了谁注册就必须谁负责销毁的目的，更好的维护了delegate的秩序。&lt;/p&gt;

&lt;h3&gt;装箱和拆箱&lt;/h3&gt;

&lt;p&gt;什么是装箱和拆箱。它其实很简单，把值类型实例转换为引用类型实例，就是装箱。相反，把引用类型实例转换为值类型实例，就是拆箱。&lt;/p&gt;

&lt;p&gt;针对这个解释继而又发出了疑问，什么是值类型，什么是引用类型。值类型的变量会直接存储数据，如byte，short，int，long，float，double，decimal，char，bool 和 struct 统称为值类型，而引用类型的变量持有的是数据的引用，其真实数据存储在数据堆中，如所有的class实例的变量，string 和 class统称为引用类型。当声明一个类时，只在堆栈(堆或栈)中分配一小片内存用于容纳一个地址，而此时并没有为其分配堆上的内存空间，因此它是空的为null，直到使用 new 创建一个类的实例时，分配了一个堆上的空间，并把堆上空间的地址保存给这个引用变量，这时这个引用变量才有真正指向内存空间。&lt;/p&gt;

&lt;p&gt;我们可以解释的再通俗点，举个例子来说明：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就是装箱，因为a 是值类型是直接有数据的变量，obj为引用类型是指针与内存是拆分开来的，把 a 赋值给 b 实际上就是 b 为自己创建了一个指针并指向了a的数据空间，然后继续上面代码:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就是拆箱，相当于把 obj 指向的内存空间复制一份交给了a，因为 a 是值类型，它不允许指向某个内存空间只能靠复制数据来传递数据。&lt;/p&gt;

&lt;h6&gt;为何需要装箱。&lt;/h6&gt;

&lt;p&gt;值类型是在声明时就初始化了，因为它一旦声明就有了自己的空间因此它不可能为null，也不能为null。 而引用类型在分配内存后，它其实只是一个空壳子，可以认为是指针，初始化后不指向任何空间，因此默认为null。 &lt;/p&gt;

&lt;p&gt;值类型有，所有整数，浮点数，bool，以及 Struct 申明的结构，这里要注意 Struct 部分，它是经常我们犯错误的地方，常常很多人会把它当作类来使用是很错误的行为。因为它是值类型，在复制操作时是通过直接拷贝数据完成操作的，所以常常会有a、b同是结构的实例，a赋值给了b，当 b 更改了数据后发现 a 的数据却没有同步的疑问出现，事实上根本就是两个数据空间，当 a 赋值给 b 时其实并不是引用拷贝，而是整个数据空间拷贝，相当于有了a、b为两个不同西瓜，只是长得差不多而已。&lt;/p&gt;

&lt;p&gt;引用类型包括，类，接口，委托(委托也是类)，数组以及内置的object与string。前面说了delegate也是类，类都是引用类型，虽然有点问题也不妨碍它是一个比较好记的口号。虽然 int 等值类型也都是类，只不过它们是特殊的类，是值类型的类，因为在C#里万物皆是类。&lt;/p&gt;

&lt;p&gt;话锋一转这里稍微阐述下堆和栈内存，因为很多人都错误的认识了堆栈内存，为什么要分栈内存和堆内存，用简短的语言阐述下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    栈是本着先进后出的数据结构(LIFO)原则的存储机制，它是一段连续的内存，所以对栈数据的定位比较快速, 而堆则是随机分配的空间, 处理的数据比较多, 无论如何, 至少要两次定位。堆内存的创建和删除节点的时间复杂度是O(logn)。栈创建和删除的时间复杂度则是O(1)，栈速度更快。

    那么既然栈速度这么快，全部用栈不就好了。这又涉及到生命周期问题，由于栈中的生命周期是必须确定的，销毁时必须按次序销毁，从最后分配的块部分开始销毁，创建后什么时候销毁必须是一个定量，所以在分配和销毁时不灵活，基本都用于函数调用和递归调用中，这些生命周期比较确定的地方。相反堆内存可以存放生命周期不确定的内存块，满足当需要删除时再删除的需求，所以堆内存相对于全局类型的内存块更适合，分配和销毁更灵活。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很多人把值类型与引用类型归类为栈和堆内存分配的区别是错误的，栈内存主要为确定性生命周期的内存服务，堆内存则更多的是无序的随时可以释放的内存。因此值类型可以在堆内也可以在栈内，引用类型的指针部分也一样可以在栈和堆内，区别在于引用类型指向的内存块都在堆内，一般这些内存块都在委托堆内，这样便于内存回收和控制，我们平时说的GC就会做些回收和整理的事。也有非委托堆内存不归委托堆管理的部分，是需要自行管理的，比如C++写了个接口生成一个内存块，将指针返回给了C#程序，这个非委托堆内存需要我们自行管理，C#也可以自己生成非委托堆内存块。&lt;/p&gt;

&lt;p&gt;大部分时候只有当程序、逻辑或接口需要更加通用的时候才会需要装箱。比如调用一个含类型为object的参数的方法，该object可支持任意为型，以便通用。当你需要将一个值类型(如Int32)传入时，就需要装箱。又比如一个非泛型的容器为了保证通用，而将元素类型定义为object，当值类型数据加入容器时需要装箱。&lt;/p&gt;

&lt;p&gt;我们来看看装箱的内部操作：&lt;/p&gt;

&lt;p&gt;装箱： 根据相应的值类型在堆中分配一个值类型内存块，再将数据拷贝给它。按三步进行。 &lt;/p&gt;

&lt;p&gt;第一步：在堆内存中新分配一个内存块(大小为值类型实例大小加上一个方法表指针和一个SyncBlockIndex)。 &lt;/p&gt;

&lt;p&gt;第二步：将值类型的实例字段拷贝到新分配的内存块中。 &lt;/p&gt;

&lt;p&gt;第三步：返回内存堆中新分配对象的地址。这个地址就是一个指向对象的引用了。 &lt;/p&gt;

&lt;p&gt;拆箱则更为简单点，先检查对象实例，确保它是给定值类型的一个装箱值，再将该值从实例复制到值类型变量的内存块中。&lt;/p&gt;

&lt;h6&gt;装箱、拆箱对执行效率有哪些影响，如何优化。&lt;/h6&gt;

&lt;p&gt;由于装箱、拆箱时生成的是全新的对象，不断得分配和销毁内存会不但大量消耗CPU，也同时增加了内存碎片，降低了性能。 那该如何做呢？&lt;/p&gt;

&lt;p&gt;最需要我们做的就是减少装箱、拆箱的操作，在我们编程规范中要牢记这种比较浪费CPU的操作，在平时编程要特别注意。&lt;/p&gt;

&lt;p&gt;整数、浮点数、布尔等数值型变量的变化手段很少，变不出什么花样来，主要靠加强规范减少装拆箱的情况来提高性能。Struct 有点不一样，它既是值类型，又可以像类一样继承，用途多转换的途径多可变的花样多，稍不留神花样就变成了麻烦，所以这里讲讲 Struct 变化后的优化方法。&lt;/p&gt;

&lt;p&gt;1、Struct 通过重载函数来避免拆箱、装箱。&lt;/p&gt;

&lt;p&gt;比如常用的ToString()，GetType()方法，如果 Struct 没有写重载ToString()和GetType()的方法，就会在 Struct 实例调用它们时先装箱再调用，导致内存块重新分配性能损耗，所以对于那些需要调用的引用方法，必须重载。&lt;/p&gt;

&lt;p&gt;2、通过泛型来避免拆箱、装箱。&lt;/p&gt;

&lt;p&gt;不要忘了 Struct 也是可以继承的，在不同的、相似的、父子关系的 Struct 之间可以用泛型来传递参数，这样就不用装箱后再传递了。&lt;/p&gt;

&lt;p&gt;比如B,C继承A，就可以有这个泛型方法 void Test&lt;T&gt;(T t) where T:A，以避免使用object引用类型形式传递参数。&lt;/p&gt;

&lt;p&gt;3、通过继承统一的接口提前拆箱、装箱，避免多次重复拆箱、装箱。&lt;/p&gt;

&lt;p&gt;很多时候拆装箱不可避免，那么我们就让多种 Struct 继承某个统一的接口，不同的 Struct 就可以有相同的接口。把 Struct 传递到其他方法里去时就相当于提前进行了装箱操作，在方法中得到的是引用类型的值，并且有它需要的接口，避免了在方法中重复多次的拆装箱操作。&lt;/p&gt;

&lt;p&gt;比如 Struct A 和 Struct B 都继承接口 I，我们调用的方法是 void Test(I i)。当调用Test方法时传进去的 Struct A 或 Struct B 的实例都相当于提前做了装箱操作，Test里拿到的参数后就不用再担心内部再次装箱拆箱问题了。&lt;/p&gt;

&lt;p&gt;最后我依然要提醒大家 struct 值类型数据结构如果没有理解它的原理用起来可能会引起很多麻烦，切记盲目认为使用结构体会让性能提升，在没有完全彻底理解之前就冒然大量使用可能会对你的程序性能带来重创。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第一章，C#要点技术(三) 浮点数的精度问题</title>
   <link href="http://www.luzexi.com/2019/01/19/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-CSharp%E8%A6%81%E7%82%B9%E6%8A%80%E6%9C%AF3.html"/>
   <updated>2019-01-19T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/01/19/Unity3D高级编程之进阶主程-CSharp要点技术3</id>
   <content type="html">&lt;h3&gt;浮点数的精度问题&lt;/h3&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;很多同学在平时的项目中会用double类型来替代float来提高精度，错误的认为double可以解决精度问题。其实平常我在编程中极少使用double类型，浮点数计算在我们大多数项目中并没有使用到特别的科学计算部分，所以float基本都够用，其实double也同样有精度问题，无论怎么样都是无法避免精度导致的在逻辑中的不一致的问题。&lt;/p&gt;

&lt;p&gt;我们不妨比较下float 与 double 来来看看它们有什么不同。float和double所占用的比特位数不同会导致精度不同，float是32个位占用4字节而double是64个位占用了8个字节，因此它们在计算时也会引起计算效率的不同。&lt;/p&gt;

&lt;p&gt;实际工作中我们很多时候想试图通过使用double替换float来解决精度问题，最后基本都会以失败告终。因此我们要认清精度这个问题的根源，才能真正解决问题，我们先来看下浮点数在内存中到底是如何存储的。&lt;/p&gt;

&lt;p&gt;计算机只认识 0 和 1，无论什么形式的数字都是一样的，无论是整数还是小数在计算机中都以二进制的方式储存在内存中的，那么浮点数是以怎样的方式来存储的呢我们来看下。根据 IEEE 754 标准，任意一个二进制浮点数 F 均可表示为：F = (-1 ^ s) * (1.M) * (2 ^ e)。&lt;/p&gt;

&lt;p&gt;从公式中可以看出，它被分为了3个部分，符号部分即 s部分 和 尾数部分即 M部分 和 阶码部分即 e部分，s为sign符号位0或1，M为尾数指具体的小数用二进制表示，它完整的表示为1.xxx中的1后面的尾数部分因为称它为尾数，e是比例因子的指数是浮点数的指数。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;(float1.png)

(float2.png)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上图所示的是32位和64位的浮点数存储结构，即float和double的存储结构。不论是32位浮点数还是64位浮点数，它们都由S、E、M三部分组成并以相同的公式来计算得到最终值。&lt;/p&gt;

&lt;p&gt;其中E的阶符采用隐含方式，即采用移码方法来表示正负指数。移码方法对两个指数大小的比较和对阶操作比较方便，因为阶码的值大时其指向的数值也是大的，这样更容易计算和辨认。移码（又叫增码）是符号位取反的补码，例如float的8位价码，应将指数e加上一个固定的偏移值127（01111111），即 e 加上 127才是存储在二进制中的数据。&lt;/p&gt;

&lt;p&gt;尾数M则更为简单点，它只表示1后面的小数部分，而且是二进制直译的那种，然后再根据阶码来平移小数点，最后根据小数点的左右部分得出整数部分和小数部分的数据。&lt;/p&gt;

&lt;p&gt;以9.625 为例，转换为二进制为 1001.101 可以表达为 1.001101×(2^3)，因此M尾数部分为 00110100000000000000000 去掉了小数点左侧的 1，并用 0 在右侧补齐。&lt;/p&gt;

&lt;p&gt;其中表示9.625时的 1001.101 的小数部分为什么是“101”，因为整数部分采用 &amp;quot;除2取余法&amp;quot;来得到从10进制转换到2进制的数字，而小数部分则采用 &amp;quot;乘2取整法&amp;quot;得到二进制。因此这里的小数部分 0.625 乘 2 为 1.25 取整得到 1，继续 0.25 乘以 2 为 0.5 取整得到 0，再继续 0.5 乘以 2 为 1 取整为 1，后面都是 0 不再计算，因此得到 0.101 这个小数点后面的二进制。&lt;/p&gt;

&lt;p&gt;再以 198903.19 这个数字为例，先形象直接的转成二进制的数值为，整数部分采用 &amp;quot;除2取余法&amp;quot;，小数部分采用 &amp;quot;乘2取整法&amp;quot;，并把整数和小数部分用点号隔开的到&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    110000100011110111.0011000010100011（截取 16 位小数）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以1为首平移小数点后得到 1.100001000111101110011000010100011 * (2 ^ 17)（平移17位）即&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    198903.19(10) = (-1 ^ 0) * 1.100001000111101110011000010100011 * (2 ^ 17)。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从结果可以看出，小数部分 0.19 转为二进制后，小数位数超过 16 位（已经手算到小数点后 32 位都还没算完，其实这个位数是无穷尽的），因此这里导致浮点数有诸多精度的问题，它很多时候无法准确的表示数字，甚至非常不准确。&lt;/p&gt;

&lt;h6&gt;浮点数的精度问题可不只是小数点的精度问题，随着数值越来越大，即使是整数也开始会有相同的问题，因为浮点数本身是一个 1.M * (2 ^ e) 公式形式得到的数字，当数字放大时，M的尾数的存储位数没有变化，能表达的位数有限，自然越来越难以准确表达，特别是数字的末尾部分越来越难以准确表达。&lt;/h6&gt;

&lt;p&gt;人们总是觉得精度问题看起来好像很难碰到，但其实并非如此，实际开发中常常碰到而且确实很头疼，如果没有这部分的知识结构很容易在查看问题时陷入无尽的问号。那么我们来看看哪些情况会碰到这类问题。&lt;/p&gt;

&lt;h6&gt;1.数值比较不相等&lt;/h6&gt;

&lt;p&gt;我们在写程序时经常会遇到到阀值触发某逻辑的情景，比如某个变量，需要从0开始加，每次加某个小于0.01的数，加到刚好0.23时做某事，到0.34时做另外一件事，到0.56时再做另一件。&lt;/p&gt;

&lt;p&gt;这种精确定位的问题，就会遇到麻烦。因为浮点数在加减乘数时无法完全准确定位到某个值，就会在出现，要么比0.23小，要么比0.23大，永远不会刚刚与0.23相等的时候，这时我们不得不放弃 ‘==’ 这个等于号而选择‘&amp;gt;’大于号或者‘&amp;lt;’小于号来解决这种问题的出现。&lt;/p&gt;

&lt;p&gt;如果一定要用等于来做比较，则需要有一个微小的浮动区间，即 ABS(X-Y) &amp;lt; 0.00001 时认为 X 和 Y 是相等的。&lt;/p&gt;

&lt;h6&gt;2.数值计算不确定&lt;/h6&gt;

&lt;p&gt;比如 x = 1f，y = 2f，z = 1f /5555f * 11110f，如果 x / y &amp;lt;= 0.5f 时做某事，那么理论上说 x / z 也能通过这个if，因为在我们看来z 就等于 2 和 y是一样，但实际上未必是这样的。浮点数在计算时由于位数的限制无法得到精确的数值而是一个被截断的数值，因此 z 的计算结果有可能是0.4999999999991，当x / z 时，结果有可能得到大于0.5。&lt;/p&gt;

&lt;p&gt;这让我们很头疼，在实际编码中，我们经常会遇到这样的情况，在外圈的if判断成立，理论上同样的结果只是公式不同，它们在内圈的if判断却可能不成立，使得程序就出现异常行为，因为看起来应该是得到同样的数值，但结果却不一样。&lt;/p&gt;

&lt;h6&gt;3.不同设备计算结果不同&lt;/h6&gt;

&lt;p&gt;不同平台上的浮点数计算也有所偏差，由于不同设备上CPU的计算方式不同，导致相同的公式在不同的设备上计算出来的结果有略微的偏差。&lt;/p&gt;

&lt;p&gt;面对这些精度上的问题我们该怎么办，下面就来看看我们有哪些解决方案。&lt;/p&gt;

&lt;h6&gt;我们可以简单点，只计算一次，认定这个值为准确值，只用这个变量结果做判断，也省去了多次计算浪费的CPU。&lt;/h6&gt;

&lt;p&gt;由于多次计算相同的结果可能造成精度问题，不如只计算一次，只用一次计算的结果把它当做唯一确定性结果，而不使用多次计算得到的结果。排除了多次结果不同导致的问题。&lt;/p&gt;

&lt;p&gt;由于多次看似相等的计算其实得到的结果有可能不同，使得问题变得更复杂，比如上面所说的，1f / 2f 的结果，用 1f / (1f / 5555f * 11110f ) 来表示得到的结果不一样导致问题变得不可控。不如只使用一次计算，不再进行多次计算，认定这次的结果的数值为准确数值，只用这个浮点数值当做判断的标准。&lt;/p&gt;

&lt;p&gt;我在编程中也常用这种方法，多次计算同样的结果也浪费了不少CPU，这种方法简单实用，当前其他方法由于复杂度高，项目需要快速推进，当前遗留的不是很重要的问题的话，可以推延到整体架构演变时再一步步细化。&lt;/p&gt;

&lt;p&gt;当然这种方法使用范围比较小，可能不适用你所在的项目我们可以继续看看其他的解决方案。&lt;/p&gt;

&lt;h6&gt;我们可以改用int或long型来替代浮点数。&lt;/h6&gt;

&lt;p&gt;浮点数和整数的计算方式都是一样的，只是小数点部分不同而已，那么完全可以把浮点数乘以10的幂次得到更准确的精度部分的数字，把自己需要的精度提上来用整数表示。&lt;/p&gt;

&lt;p&gt;比如保留3位精度，所有浮点数都乘以1万来存储(因为第四位不是很准确了)，1.5变成了15000的整数，9.9变成了99000整数存储。&lt;/p&gt;

&lt;p&gt;这样整数 15000 乘以 99000 得到的结果，与，整数30000 除以 2 再乘以 99000 得到的结果是完完全全相等的。&lt;/p&gt;

&lt;p&gt;再复杂点 原来 2.5 / 3.1 * 5.1 与 0.8064 * 5.1，两者都约等于 4.1126，用整数替代，2500 / 31 * 51 与 80 * 51，等于 4080，把4080看作 4.08 虽然精度出现问题，但是前两者结果不一致，而后两者结果完全相同，使用整数来代替小数使得一致性得到了保证。&lt;/p&gt;

&lt;p&gt;如果你觉得用整数做计算精度问题比较大，我们可以再扩大数值上10的幂次，来看看扩大后如果是 250000 / 31 * 51 就等于 411290，是不是发现精度提高了。但问题又来了，乘以10的幂次来提高精度时，当浮点数值比较大时就会超出了整数的最大上限2 ^ 32 - 1或者2 ^ 64 - 1 的问题。&lt;/p&gt;

&lt;p&gt;如果你觉得精度可以接受，并且数值计算的范围肯定会被确定在32位或64位整数范围内，则可以用这种int和long的方式来代替浮点数。&lt;/p&gt;

&lt;h6&gt;用定点数保持一致性并缩小精度问题&lt;/h6&gt;

&lt;p&gt;浮点数在计算机中的表示方法是用 V = (-1)^s x (1.M) x 2^(e) 这样的公式表示的，也就是说浮点数的表达其实是模糊的，它用了另一个数乘以2的幂次来表示当前的数。&lt;/p&gt;

&lt;p&gt;定点数则不同，它把整数部分和小数部分拆分开来，都用整数的形式表示，这样一来计算和表达都使用整数的方式。由于整数的计算是确定的，这样就不会存在误差，缺点是由于拆分了整数和小数，两个部分都要占用空间，所以受到存储位数的限制，占用字节多了通常使用64位的long型整数结构来存储定点数，计算的范围也会相对缩小些。&lt;/p&gt;

&lt;p&gt;与浮点数不同的，用定点数来做计算就能保证在各设备上的计算结果一致性，C# 有种整数类型叫 decimal 它并非基础类型，是基础类型的补充类型，是C# 额外造出来的一种类型，可以认为是造了一个类作为数字实例并重载了操作符，它拥有更高的精度却比float范围还要小。它的内部实现就是定点数的实现方式，我们完全可以把它看作定点数来操作。&lt;/p&gt;

&lt;p&gt;C# 的 decimal 类型数值有几个特点需要我们重点关注一下，它占用128位的存储空间即一个decimal变量占用16个字节，相当于4个int整数大小，或2个long型长整数大小，比double还要大1倍。它的数值范围在 ±1.0 × 10^28 到 ±7.9 × 10^28之间，这么大的的占用空间却比float的取值范围还小。decimal 精度比较大，精度范围在 28 个有效位，另外任何与它一起计算的数值都必须先转化为 decimal 类型否则就会编译报错，数值不会隐式的自动转换成 decimal。&lt;/p&gt;

&lt;p&gt;看起来好用的 decimal 却不是大部分游戏开发者的首选选择。使用 C# 自带的 decimal 定点数在使用时存在诸多问题，最大的问题是无法和浮点数随意的互相转换，因此在计算上也会需要进行一定的封装，要么提前对float处理，要么在 decimal 基础上封装一层外壳(类)以适应所有数值的计算。精度过大导致CPU 计算消耗量大，128位的变量28位的精度范围，计算起来实在是比较大的负荷，如果大量用于程序内的逻辑计算则CPU就会不堪重负。内存也是同样的，大量使用时会使得堆栈内存直线飙升，这也间接的增大了CPU的消耗。因此它只适用于财务和金融领域的软件，对于游戏和其他普通应用来说实在不太合适，其根源是不需要这么高的精度浪费了诸多设备资源。&lt;/p&gt;

&lt;p&gt;实际上大部分项目都是自己实现定点数的，具体实现如前面所说的那样：把整数和小数拆开来存储，用两个int整数分别表示整数部分和小数部分，或者用long长整型存储(前32位存储整数，后32位存储浮点数)，long型存储会更好因为这样就确保定点数的内存就是连续的。这样无论整数还是小数部分都用整数表示，并封装在类中，继而我们需要重载(override)所有的基本计算和比较符号，包括+、-、*、/、==、!=、&amp;gt;、&amp;lt;、&amp;gt;=、&amp;lt;=、这些符号都需要重载，重载范围包括 float浮点数、double双精度、int整数、long长整数等。除了以上这些，为了能更好的融合定点数与外部数据的逻辑计算，我们还需要为此写一些额外的定点库，包括定点数坐标类，定点数Quaternion类等用于定点数的扩展。&lt;/p&gt;

&lt;p&gt;看起来比较困难其实并不复杂，只要耐下心来写都会发现不是难事，把定点数与其他类型数字的加减乘除重写一下，如果涉及到更多的数学运算，则再建立一个定点数的数学库，存放一些数学运算的函数，再用写好的定点数类去写些用于扩展的逻辑类仅此而已，都是只要花点时间就能搞定的事，github上也有很多定点数开源的代码，大可以下载下来参考着写，或者把它从头到尾看一遍，把它改成适合自己项目的。&lt;/p&gt;

&lt;h6&gt;最耗的办法，用字符串替代浮点数。&lt;/h6&gt;

&lt;p&gt;如果想要精确度很高很高，那么就可以用字符串代替浮点数来计算结果。但它的缺点是CPU和内存的消耗特别大，如果只是少量使用高精度计算还是可以的。&lt;/p&gt;

&lt;p&gt;我记得以前在大学里做ACM题目时，就有这种方式来检验程序员的逻辑能力和考虑问题的全面性的题目，题目很简单A * B 或 A - B 或 A + B 或 A / B 输出结果，精度要求在小数点后100位。我们把中小学算术的笔算方式写入到程序里去，把字符串转化为整数，并用整数计算当前位置，接着再用字符串形式存储数字，这样的计算方式就完全不需要担心越界问题，还能自由的控制精度。&lt;/p&gt;

&lt;p&gt;缺点是很消耗CPU和内存，比如123456.78912345 * 456789.2345678，这种类型的计算使用字符串代替浮点数，计算一次相当于计算好几万次的普通浮点数计算量。所以如果程序中对精度要求很高，且计算的次数不大，这种方式可以放在考虑范围内。&lt;/p&gt;

&lt;h6&gt;最差的办法，提高期望值。&lt;/h6&gt;

&lt;p&gt;如果 1.55f / 2f 有可能等于 0.7749999 而无法达到 0.775 的目标值时，我们不妨在计算前多加个0.01，使得 1.56f / 2f，这样就大概率保证超出 0.775 的结果目标了。&lt;/p&gt;

&lt;h6&gt;怎么想的？为什么能这么做？因为我们做了假设。&lt;/h6&gt;

&lt;p&gt;我们脑袋中假设结果是模糊的，这个结果范围就是有可能是 0.7751，也有可能是 0.7749。正常情况下，由计算机的寄存器和CPU决定到底会得到什么结果，但我们不想由它来决定。我们的期望是，宁愿高一点点，跨过这道门槛，也不要少一点点，被门槛拦在外面。&lt;/p&gt;

&lt;p&gt;如果正常浮点数的精度不能给我们安全感，那么我们就自己给自己安全感。提高自己的数值一点点，从而降低门槛跨过去的门槛，差不多的就差一点点的都当做是跨过门槛的。于是就有了 (X + 1) / Y 或者 (X + 0.001) * Y 的写法来度过&amp;#39;精度危机&amp;#39;。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(十九) 机会</title>
   <link href="http://www.luzexi.com/2019/01/12/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A819.html"/>
   <updated>2019-01-12T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/01/12/思路探讨19</id>
   <content type="html">&lt;p&gt;谈了很久的人生和哲学，灌了很多人生鸡汤，多了也有负效果，因为没有付诸于行动效果等于没有，天天空想哲学问题时间长了也等于在浪费时间。&lt;/p&gt;

&lt;p&gt;以前有段时间很不明白为什么有人说鸡汤多了副作用也大，明明是好的文章，讲得道理也很有意义，对自身的激励也很好，为什么就会有副作用呢。&lt;/p&gt;

&lt;p&gt;后来才渐渐明白，看多了没有在实际中体现出其具体价值也属于浪费时间，浪费生命，纸上谈兵。天天畅想着未来，嘴上说着坚持，脑袋里想着高科技，手里却什么都不干，干不了，不敢干，其实也没什么用，境界再高，也是假境界，说的再牛，也是打肿脸充胖子，迟早是要露馅的。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;接下去日子的文章中，尽量会在专业知识，实际技能，技巧上多做分析和研究。这能在实际生活和工作中，立刻见效。&lt;/p&gt;

&lt;p&gt;眼界和视野虽然有用，但毕竟要很长时间才能体现出来的东西，而且分摊到每件事情的处理上都是很细微的东西。过分关注眼界和视野就会忘记实际生活中需要面对的困难，没有对生活工作小事的解决手法，技巧，知识体系，就会陷入另一种烦恼：看起来很厉害，实际却没什么用。&lt;/p&gt;

&lt;p&gt;视野越大，眼界越宽，长远方向越正确，做当下的事时就越觉得吃力，因为预期太高，看到了未来的美好，却要收拾现在的烂摊子，而且要收拾的时间要按‘年’计算，反差太大，期望容易落空，最终很容易导致：有视野，有眼界，却是个废物。&lt;/p&gt;

&lt;p&gt;回主题：&lt;/p&gt;

&lt;p&gt;从宏观的角度看世界，这个世界有非常多的机会可以升迁，致富。在全世界范围内每个月都差不多有1次在全世界发生的，每个月都有可能在不同的国家发生不同的机会，只要参与进去就有可能致富。&lt;/p&gt;

&lt;p&gt;即使在一个国家内，比如我们国家中国，我认为每年至少有一次这样的机会，比如，前年的千年计划雄安新区，以及粤港澳大湾区计划，去年的海南岛自由港规划，以及今年的5G发展规划，只要你参与其中，我想有很大的可能是可以达到快速致富的效果的。&lt;/p&gt;

&lt;p&gt;人说只要你抓住一次机会，就能翻身了。但我们真的能抓的住吗？真的能赢得吗？输了会如何？&lt;/p&gt;

&lt;p&gt;我们且不说输了会如何。如果说机会这么容易抓住，我们就不用工作了，天天等着就行了，机会来了参与下，就有可能赢得全世界。那岂不是太容易了，照这个理论，每个人都可以这么做，等着，然后时间到了进去参与下就可以了，然后就财务自由了。&lt;/p&gt;

&lt;p&gt;不可能，因为实际情况中，首先你无法辨认是否是‘机会’，辨认‘机会’需要庞大的知识库和信息量，包括人工脑袋的分析以及收集情报。即使最专业的人士在机会辨认率面前也仅有51%概率，比抛筛子的概率多了1%而已。因为其中还涉及到信息的真假，逻辑的判断与分析对错问题。普通人就更不用说了，有30%已经大师级很厉害了。&lt;/p&gt;

&lt;p&gt;其次，参与的时间点也能决定是否能抓住机会，5年前早就爆发了新能源汽车的概念，现在还是不温不火，到底什么时候是个头，新能源汽车最终能否全面进入家庭和社会，到现在还是个未知数。即使是现在回头看已经确定的智能手机的机会，在6年前的那时，电池续航能力，彩屏像素和手机系统都未完善的当时，能否最终全面被社会所接受，是否能全面替换旧式的好用牢固的黑白手机都是个未知数，如果不是苹果一家公司坚持突破新技术，新创意，诺基亚手机可能到现在还是全球销量第一，在当时就能那么确定苹果能突破这个瓶颈吗，现在看来当然会回答‘是’，但是在当时，谁知道呢。&lt;/p&gt;

&lt;p&gt;事情都是随着时间的变化而变化的，我们永远不会知道事情如何变化，什么时间点是最好的参与时间点。如果一旦参与，剩余的就是等待，时间也是金钱，假如5年后亏损退出，损失的不只是金钱，更宝贵的是时间成本和机会成本。&lt;/p&gt;

&lt;p&gt;最后是输赢概率背后的损失比。如果一个机会，输的时候要全部损失，那么一辈子也就只能输一次，一旦输了，就什么都没有了。这种拿命赌的游戏，根本不值得参与，因为人生最宝贵的是时间和精力，只要有时间有精力，慢慢积累，总能积累到很大的时候，但如果一次机会要全部输掉，就相当于损失掉了以前所有的时间和精力，完全不值得参与。&lt;/p&gt;

&lt;p&gt;你看，其实机会没那么好抓，而且很容易受重伤，一旦受重伤就很难恢复。&lt;/p&gt;

&lt;p&gt;为什么那么难，我也一直在想，人类这个世界其实已经存在了好几千年，人类群体生存的规则早就是很完善了，不可能随意的让你一个人破坏或者跳过的。一个存在几千年的人类社会，就像一道围城一圈的又厚又高的城墙，岂是我们一个人敲几下就能破个洞的，全力撞过去都是纹丝不动的，即使撞到头破血流它都不会有任何反应。&lt;/p&gt;

&lt;p&gt;这道墙、这个人类的世界本身就是由人性构成的，人性的弱点也好，优点也好，大大小小的人性特点，以及一个个不同个性的个体，构成了整个社会和世界。&lt;/p&gt;

&lt;p&gt;如果能从这个角度思考，我们就能发现，不要去试图改变世界是对的，因为世界由人性构成，人性无法改变。我们能做的就只是利用人性，弱点也好，优点也好，让我们能在这个世界里，活的更好点。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(十八) 所有不确定都是机会</title>
   <link href="http://www.luzexi.com/2019/01/05/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A818.html"/>
   <updated>2019-01-05T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/01/05/思路探讨18</id>
   <content type="html">&lt;p&gt;以前不明白为什么，不确定是机会，随着自己经历的丰富，渐渐明白了。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;每次回头看那些当时不确定的事物进展到后来，事情明朗化后都没有那么可怕，可以说当时的自己完全被不确定和未知所蒙蔽。&lt;/p&gt;

&lt;p&gt;是我无知，是我笨吗，每次回头看都这样怀疑自己，后来才慢慢发现，其实每个人都和我一样，对那些自己没有经历过的事物都由于缺乏经验而感到迷茫或害怕。人还是需要对同一种事物进行多次练习的，熟能生巧才能沉着冷静的应对。&lt;/p&gt;

&lt;p&gt;回头看我自己所经历的不确定事物，包括，改变红利方向转变导致父母失意，父母离异，中考失利，高考失利，计算机专业遇冷，端游遭遇冷却期，页游遭遇白热化竞争，手游不确定期，手游进入白热化竞争，整个游戏行业被冰封，以及职业生涯中，公司起步艰难，经营困难，公司倒闭，团队解散等一系列危机与困难导致的不确定。&lt;/p&gt;

&lt;p&gt;回头看看，当时的危机导致的不确定也并不会让天塌下来，但由于都是我生命中前所未有的，从来没有遇到过的，所以以往每次的不确定时期当时都感到非常迷茫和害怕。&lt;/p&gt;

&lt;h6&gt;人在迷茫和害怕中，最容易做出错误的决定。这就是，’所有不确定都是机会‘的最根本原因：由于，大部分人对不确定的恐惧而导致做出了错误的决定，最终使得只有少数人得利的最终结局。这种事屡试不爽，人性脆弱的一面无法改变。&lt;/h6&gt;

&lt;p&gt;我们当下就是出于一种不确定的时期，我观察到不仅仅是一个行业处于低谷，很多行业都在低谷和正奔向低谷的状态，房地产，媒体娱乐，金融大部分行业都处于低谷或者正在迈向低谷，甚至有人喊出中国崩盘的论调。&lt;/p&gt;

&lt;p&gt;面对当下的不确定性，我们不必惊慌，中国会起来吗，不知道。但积极的面对工作，学习，生活，总是不会错的。&lt;/p&gt;

&lt;p&gt;当所有人都在担心害怕的时候，不确定带来的机会就来了，他们像热锅上的蚂蚁乱窜，事情还没有确定下来，自己被自己吓个半死，而我们由于故意减少担心和害怕，专心做好自己的事，就等于比别人更早的走出萧条的阴霾，更好的活出自己，更好的锻炼了自我，更早的走在时代的前列。&lt;/p&gt;

&lt;h6&gt;机会就在这里，人性的反向一面：平静替代恐惧，勤劳替代懒惰，知足替代贪婪，强壮替代瘦弱，坚定替代迷茫。&lt;/h6&gt;

&lt;h6&gt;题外话：&lt;/h6&gt;

&lt;p&gt;什么是机会？怎样才能抓住机会？&lt;/p&gt;

&lt;p&gt;难道坚持就能抓住机会吗？不是的。有可能放弃现在的，重新开始才是机会。&lt;/p&gt;

&lt;p&gt;由于情况永远是不同的，没有永恒不变的统一答案。&lt;/p&gt;

&lt;p&gt;很多人接受不了这个理念：“答案是变化的”。说，为什么会有变化的答案？&lt;/p&gt;

&lt;p&gt;由于我们的思维总是固定在某个角度上，其实跟应试教育也没什么关系，世界上所有的人类都是一样的更加倾向于固定思维，人毕竟是动物，狭隘的观念是比较舒适的观念，谁都不想折磨自己不是么，所以我们很多时候都用固定的答案在处理问题，要么对，要么错，要么A，要么B，要么C，要么D。其实这个世界上还有一种答案是不固定，可以错，也可以对。&lt;/p&gt;

&lt;p&gt;这个答案可以在今天的早上7点05分时，是对的，到了晚上的7点05分时就不对了。&lt;/p&gt;

&lt;p&gt;拿股票的涨跌来说，最容易说的清楚。很多人都有固定思维，比如，回调思维，大部分人认为涨高了回调下，然后会再涨。于是他在回调时倾家荡产的买入，但是事情并没有像他想象的那样发展，在回调结束K线走平时，这家公司发出了业绩亏损的报告，股价随即一泻千里，这时此人一辈子积累的财富，瞬间灰飞烟灭。还有人有抄底思维，认为跌太多，就会回升，其实回头看他抄的底，其实是半山腰，下面还有万丈深渊在等待。&lt;/p&gt;

&lt;p&gt;（买短线股票最厉害的思维模式要属变化思维模式，错了就撤，对了就攻。不过我不想引导大家到这种短线思维误区。因为这种短线股票思维，在短线里是对的，在长线里却是错的。这也应验了我们前面说的，答案在某个范围或时期是对的，在另外一个范围和时期是错的。）&lt;/p&gt;

&lt;p&gt;用这种固定思维模式的方法来处理人生大事，即使这次被你侥幸赌赢，也有下次赌输的时候吧，只要赌输一次，就是万丈深渊吧。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(十七) 2018形势和心态</title>
   <link href="http://www.luzexi.com/2019/01/01/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A817.html"/>
   <updated>2019-01-01T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2019/01/01/思路探讨17</id>
   <content type="html">&lt;p&gt;2018开年感觉还是不错的，虽然没有红红火火，但平淡中带点小火花还是有的，现在看来当时还是偏乐观的。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;最典型的例子就是房地产了，年初三四线的销售楼盘还是精神劲十足的在叫卖，年末却感觉到整个房地产要崩了。&lt;/p&gt;

&lt;p&gt;时隔只有不到1年，却反差如此巨大，看来我们都对形式错误的估算了。&lt;/p&gt;

&lt;p&gt;‘贸易战’什么的其实只是借口罢了，从形式上看，大的趋势一直在做回调，从2016开始，整体经济都在不断下滑中，到了2018年已经是节点了，如果不是贸易战这个借口，可能大家还沉浸在‘还可以’这个幻觉中，‘贸易战’给了借口，该展现的真实面目都浮出了水面。美国也好不到哪里去，只是在全球资金的掩护下，皮比较厚，要多磨几下而已。&lt;/p&gt;

&lt;p&gt;很多人还一直在崇拜美国经济厉害，政策厉害，其实美国也快撑不住了，如果不是撑不住，他们有必要收紧贸易吗，有必要出减税这招吗？收紧贸易会伤到自己，如果经济真的向好为什么要害自己，美国的智囊团也不傻，减税这招明显是在经济不好的情况下使用效果会更好，如果他们经济向好，为什么还要用减税来加热经济，最后经济过热这不是自讨苦吃么。&lt;/p&gt;

&lt;p&gt;所以，形势其实很明显，大家都不好过，大家都在收缩，只是2018年由于量变导致质变，整体急速下滑。&lt;/p&gt;

&lt;p&gt;其实我们一直都低估了趋势的力量，如果说我们确实重视了它，那我敢肯定的是，我们还不够重视。如果我们知道了顺势而为的重要性，我想我们以前还不够深刻的理解它的真正含义。&lt;/p&gt;

&lt;h6&gt;2018对我个人而言是很神奇的一年。&lt;/h6&gt;

&lt;p&gt;我能很明显的感觉到我自己能完全控制自己了，不知是因为心智又被打开还是怎么的，我开始了我自己的理论，我开始故意不去将别人的理论掺杂进来，和故意不去评论别人对我的看法，而专注自己的理论体系，更加专注做自己挑战自己。&lt;/p&gt;

&lt;p&gt;我开始明白为什么一些很明显很简单的道理，大部分人一辈子都无法参透，因为他们不信，他们认为肯定有更好的方法和更短的路，于是他们不信，找了一辈子最后发现无法回头，或回头的时间太长，劣势太大，只能继续下去，希望下辈子自己早点明白。其实会去找路还是好的，最后还可能折腾回来，大部分人还是像咸鱼思想，坐等天上掉馅饼。&lt;/p&gt;

&lt;p&gt;我也开始明白了，为什么说人到中年时‘无奈’占据了大半壁江山，因为人到中年，大部分事情都由于前十几和几十年的积累导致事情到了现在这个地步而难以改变，如果想要改变也同样需要花去十几和几十年的时间，但这么多时间对于他们来说太长了，他们需要立刻解决，那是不可能的事情，只能选择‘无奈’接受。&lt;/p&gt;

&lt;p&gt;我也开始彻底明白，积极向上的重要性，任何事情没有积极的态度，是无法完成的，如果面对的是比较棘手的，甚至比较糟糕的情况，那么积极向上态度的持续的时间和程度更是重中之重，核心中的核心。没有了积极的态度，万事皆悲，任何事的发展都会向下跌落深渊。&lt;/p&gt;

&lt;p&gt;我也开始深刻理解，什么是‘活在当下’，以及‘活在当下’的重要性，从而引出了，不积跬步无以至千里的行动模式，每日都努力，日日皆重要，天天是机会的‘活在当下’的自我理论体系。&lt;/p&gt;

&lt;h6&gt;我每天都在努力的多积累一点，期望在长远的未来，能更好一点。&lt;/h6&gt;

&lt;h6&gt;要是说我学习和观察经济形势是我开阔视野的工具，那么每天的努力工作和努力学习是我在现实中对长远展望的积累。&lt;/h6&gt;

&lt;h6&gt;2018年最后1天的最后一句话：现在的所作所为，将是10年后的自己生活的模样，10年后的自己也会为现在自己努力的每一天而感到高兴。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(十六) 感官动物</title>
   <link href="http://www.luzexi.com/2018/12/26/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A816.html"/>
   <updated>2018-12-26T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/12/26/思路探讨16</id>
   <content type="html">&lt;p&gt;最近半年的写思路文章的经历让自己学到很多东西。工作非常的繁忙，纵使我降低了书写的频率，还是很难抽出时间来专心写作，只能靠每天的碎片时间来思考这周的主题，并在印象笔记里记录我的思考过程和结论。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;我的印象笔记里记录了很多很多我的思考过程，包括看书时，看文章时，放空时得到的思路和感悟，不过大部分都无法发表出来，因为过于零碎，没有形成整体的思路和整体的思路框架，无法从各角度论证思路的有效性，所以记录下平时的想法有时候也无济于事，这是最糟糕的也最让我难受的。&lt;/p&gt;

&lt;p&gt;本想着平时利用每天零碎的时间可以记录些东西，在发表文章时可以用上，但并没有起到决定性的作用，最终还是要靠积累。这种积累不是说一两天就能搞定的，而是靠长期，几年，十几年，几十年的积累才能建立起巨量的经验和知识，以淡定自若的应对各种情况。于是我更加注重平时每日的积累过程，比如每日看书3页，每日学英语半小时，每日健身半小时，每日听书10分钟，每日设计产品半小时等等，其实总体加起来也不超过2个小时，在一天的除去睡觉后的16个小时里，只占了12.5%的时间，但每日坚持做一遍却是非常厉害的也非常困难的事情，这样积跬步至千里的感觉是非常棒的做法，大家一起来加油。&lt;/p&gt;

&lt;h3&gt;感官动物&lt;/h3&gt;

&lt;p&gt;感官动物其实是人类最大的弱点之一，很容易被表面化的事物所迷惑，最终导致犯错。&lt;/p&gt;

&lt;p&gt;这种弱点很容易被利用，比如美女，帅哥，美景，绚丽的颜色，缤纷的烟火，很容易迷惑我们，让我们沉醉。相声，歌曲，柔和的声音，激情的演讲，也同样会迷惑我们，让我们的意志放松警惕。&lt;/p&gt;

&lt;p&gt;其实这种感官上的刺激，在很多情况下都是对我们人本身的发展是有害的，因为过于留恋于表面化的和感官上的事物，导致无法透析深层次的根源，也容易陷入感官陷阱，比如沉迷于美色，沉迷于电影电视剧，沉迷于喝酒，沉迷于刷微博，沉迷于刷微视频，沉迷于购物，沉迷于相声笑话，沉迷于虚荣心，这种留恋于表面化的行为其实就完全是在浪费自己的生命，因为沉迷它们是相对容易的，只要你‘看’，‘听’，‘感受’就可以了，不需要用脑袋思考。&lt;/p&gt;

&lt;p&gt;我发现这些表面化的事物不断吸引我注意力的事物，同时也浪费了我大量的时间。我们人的注意力是有限，而我又想把有限的注意力放到自己想要做的事情上去。好难。偶尔享受下感官盛宴放松一下不小心就会被吸引去忘记了时间。放松一下却常常过了头。&lt;/p&gt;

&lt;p&gt;这种人性的弱点是无法抹除的，既然这样，我们为何不好好利用它。比如在打造产品上，从视觉，听觉和感觉上大大加强感官的效果，让自己的产品更加吸引人，在视觉和听觉盛宴上下更大的功夫去满足人性弱点，让产品，看着漂亮的，听着舒服的，摆弄起来顺畅，这样才能利用人性的弱点来创造吸引人的产品。&lt;/p&gt;

&lt;p&gt;不只是产品。其实我们自己人本身也是产品的一种，如果你想让自己更加吸引世界关注，我想你可能得从这三个方面来改造自己，视觉，听觉，感觉。比如每日健身让自己身材更加棒，人看起来更加精神，加上衣着干净整洁视觉上的效果会更好。比如在讲话时更加注重逻辑清晰条理清晰语气更加缓和，让人听着更加舒适并且容易理解。又比如在学习和补充知识上花更多的时间，让别人能感受到你是个爱学习的人，并且知识渊博经验丰富，让人对你有种靠谱的感觉。从三方面打造自己，不断完善自己，年复一年的改造改进翻新，终有一天你会成为世界的焦点。&lt;/p&gt;

&lt;h6&gt;感官动物的实质是留恋于表象，而我们却要反过来，不留恋于他人的表象，而更加注重自己的内在知识和经验，并且把自己的优秀的表象展现给别人看，因为人只看我们的表象看不到我们的内在。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(十五) 中产阶层的天花板</title>
   <link href="http://www.luzexi.com/2018/12/15/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A815.html"/>
   <updated>2018-12-15T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/12/15/思路探讨15</id>
   <content type="html">&lt;p&gt;很多人应该跟我一样，曾有段时间一直怀疑社会阶层是否真的存在，或者幻想着它是以何种形式存在的。&lt;/p&gt;

&lt;p&gt;社会阶层确实存在是事实不可否认的，它到底以何种形式存在，是很多人包括我自己所迷惑的。&lt;/p&gt;

&lt;p&gt;大部分人还是把阶层的概念停留在’钱‘上，这种不假思索的观念只能说只对了一小部分。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h6&gt;阶层的划分不只是’钱‘，因为大部分界限的划分是由无形资产构成的，比如知识，技能，观念，成就，荣誉，权利，职业，人际圈。&lt;/h6&gt;

&lt;p&gt;这些无形资产和’金钱‘是相互关联的，有了知识，有了技能，有了良好的观念，有了一定的成就，有了权利，有了好的职业，就有了源源不断的’金钱‘，有了高等的人际圈，就有了更多的交流思路开阔了眼界。&lt;/p&gt;

&lt;p&gt;源源不断的’金钱‘和开阔的视野又支撑了，我们得到更好的教育资源，得到更多的成就感，得到更多的自信，从而对目标更加坚定，对职业计划更加长远，对成功更加有信心。&lt;/p&gt;

&lt;p&gt;很多人的误区就在于，认为有’金钱‘就一定能得到知识，技能，观念，成就，荣誉，权利，职业，人际圈。不是的，如果世界上可以只用’钱‘就能解决任何问题，那么我们也不用这么痛苦了。&lt;/p&gt;

&lt;p&gt;我们人生的困难就在于，看起来似乎很重要的’钱‘，只是各种因素的中的一个，并不是最重要的，而且很多时候有可能它是最不重要的，也很多时候可能它只是个结果的表象，并不意味着任何意义，只是它在我们生活中充当着生存的基本底线。&lt;/p&gt;

&lt;h6&gt;对’金钱‘的过分关注，是中产阶层的天花板之一。&lt;/h6&gt;

&lt;p&gt;学校中接受学习和教育时，对考试成绩的过分关注，是同一个道理。当我对’考试成绩‘过于关注，就会导致自己迷失在成绩上，任何一次低于预期的成绩都会让我感到愧疚，忧郁，苦闷，自责。无论我的成绩排在第几名，我对成绩的过分关注，都导致我在知识深度和宽度这个层级上无法越过当前这个台阶，达到更高的层级。&lt;/p&gt;

&lt;p&gt;中产的天花板里还包括：只关注短期效果，不执行长期目标；以及不愿主动跳出自己的这口井，去看看世界；不想尝试，和不愿冒险；等&lt;/p&gt;

&lt;p&gt;阶层的天花板毕竟是坚硬无比的，无论什么时候，无论哪个年代，突破阶层都是非常艰难的事情，这需要的已经不仅仅是一个人的努力了，更需要几代人的共同努力。&lt;/p&gt;

&lt;h6&gt;抛开阶层不说，人与人之间都是一样的，都是人类，并且所有人的烦恼都是相同的，我相信我所烦恼的事情，习见平主席也有同样的烦恼，我很确信这一点。如果我们能从这个角度来看我们自己的人生的话，实际上已经解决一个根本性的大问题，“自信问题”，你我都是人，我并不惧怕你，也不羡慕你，我相信我十年如一日的努力能让我受益无穷，我也希望你能像我一样天天努力。&lt;/h6&gt;

&lt;p&gt;题外话：&lt;/p&gt;

&lt;p&gt;阶层的突破还有假突破和真突破的表象，这可能需要几代人时间的适应和努力。&lt;/p&gt;

&lt;p&gt;当你面对你所拥有的一切，平静，安详时，就属于真突破，因为对当前阶层的生活习惯，思维习惯，行为习惯，习以为常。而不是拿一些东西来向自己心中认为的下层的阶层炫耀。由于整个人生几十年都浸泡在当前阶层中而，习惯了这一切，任何发生在当前阶层的事物，并不觉得有什么特别。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(十四) 要行动，不要焦虑</title>
   <link href="http://www.luzexi.com/2018/12/08/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A814.html"/>
   <updated>2018-12-08T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/12/08/思路探讨14</id>
   <content type="html">&lt;p&gt;人生大多数遇到的难题都不是能单靠几个小时或者几天就能解决的。很多人不愿意接受这个事实，总是试图靠短时间内的突击行动来试图解决长期的问题，那是不可能的事，而且大概率会让事情变得越来越糟糕，身体坏了，健康没了，事情没成，问题没解决，一切变得愈发糟糕。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;焦虑的根源其实是希望立刻解决问题而不得，或者想短时间内解决自己面临的问题而不行。&lt;/p&gt;

&lt;p&gt;焦虑最大的坏处是扰乱我们的节奏，让我们迷失方向，思想更加混沌不堪。焦虑虽然可以使我们居安思危，但比起坏处，这个好处有点弱。&lt;/p&gt;

&lt;p&gt;“我要”的欲望越多，焦虑就会越多。有些人选择逃避欲望，焦虑也相对少了，但生活品质就随之下降了，没有了钱，没有了房，没有了车，生活在底层又没有欲望，人生就少了很多意义。&lt;/p&gt;

&lt;p&gt;更多的人选择“追逐欲望”，但他们想要的太多，积累的太少，不给自己时间去坚持，失去了自己的节奏，被”欲望“所控制，被焦虑所恐吓。&lt;/p&gt;

&lt;h6&gt;相反的。”追逐欲望“的人群中，也有另一种人，他们追逐欲望而不奢望短时间得到，他们懂得积累，深信不积跬步无以至千里的道理，他们拥有自己的节奏，任何扰乱他们节奏的人和事都一概闭屏，他们就是那些保持长期积极的心态，长期坚持努力奋斗，长期斗志昂扬的人。&lt;/h6&gt;

&lt;p&gt;积累多的人之所以稳健，是因为对他来说，”我要“的欲望可以用”我有“的来满足。即使”我有“的暂时不够满足，他也能借助已经拥有的足够的努力和勤奋（或者已经熟练的技能和技巧或方法），只需假以时日，定能如愿以偿。一旦得偿所愿，不仅”我有“的更多，”我要“的也更容易获得，如此形成良性循环。&lt;/p&gt;

&lt;h6&gt;其中保持长期的，足够的努力，和足够的勤奋，最为关键。&lt;/h6&gt;

&lt;p&gt;从某种意义上理解，“逆境造就成功”，“磨难令人成熟”之类的话纯属胡说八道。显然，在顺境中更容易成功，而且很多磨难本身没有不要—这更可能是失败者对他们自己一生都未曾有机会体验的成功及成功者意淫式的猜想而已。失败者很难有机会了解到成功的真相，因为人最容易受自身经验的限制，而不曾有哪怕一点点成功经验的人无从摆脱自身局限。&lt;/p&gt;

&lt;h6&gt;从长期来看，如果我们的心态是要精进我们自身的能力而不是要达成某个绩效目标，我们更有可能长期坚持下去并保持积极性。&lt;/h6&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;专注于提升你的编程技术和你的能力来创造有意义的影响，而不是专注于想要被公司晋升为主管工程师&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;训练自己成为一个更好的选手或运动员，而不是为了赢得某项运动，不论是跑步，打球还是瑜伽。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加入一家创业公司，不是为了发财暴富，而是因为你对将要面对的问题充满热情，并且激动地想要从这个旅程中学习。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你将会意识到基于绩效的长期目标依赖于很多你无法控制的外界因素（你的经理是否会提拔你，你是否比你的竞争对手强或是你的创业公司是否成功）。&lt;/p&gt;

&lt;p&gt;你让环境因素在你的成功中扮演如此重要的角色，当你遇到障碍时，你很难保持积极性。相反如果你专注于自我学习和能力提升，你更有可能克服困难获得实际上的成功。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(十三) 三十而立四十不惑</title>
   <link href="http://www.luzexi.com/2018/12/01/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A813.html"/>
   <updated>2018-12-01T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/12/01/思路探讨13</id>
   <content type="html">&lt;h6&gt;三十立什么？&lt;/h6&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;三十岁的人，应该能依靠自己的本领独立承担起自己应承受的责任，并已经确定自己的人生目标与发展方向。简单说，三十岁的人应该能坦然地面对一切了。&lt;/p&gt;

&lt;p&gt;三十岁后对社会和自己都有比较明确的认识和理解，在这基础上的一种自觉的或者是说是一种自我人格独立的意识。&lt;/p&gt;

&lt;p&gt;三十岁后确立了我们自己的品格和修养，包括：思想的修养，道德的涵养，能力的培养。&lt;/p&gt;

&lt;p&gt;三十岁后不再把自己的需求寄托在父母的资助上，寄托在别人的帮助上，有了自己完全独立的生存和发展的能力。&lt;/p&gt;

&lt;p&gt;三十岁后确立了自己所从事的事业，应该有比较固定的职业了。从事每项事业都要有本领，按现代话讲就是有一技之长。这是为生的必备，随着现代科技的发展，对每个人的各方面要求都会越来越高。&lt;/p&gt;

&lt;p&gt;三十岁后陆续组建了自己的家庭，对家庭和团体的观念开始关注，甚至会开始上升到国家的大团体，为团体尽心做出自己的贡献的意识越来越强烈，同时也越来越清楚的意识到，没有团体就没有自己的事实。&lt;/p&gt;

&lt;p&gt;三十而立是对年轻人的起码要求，不过现实和我们所期望的有很大的距离，这也是三十岁后的10年内要用勤劳和智慧要解决的问题。&lt;/p&gt;

&lt;h6&gt;四十而不惑，明白了什么？&lt;/h6&gt;

&lt;p&gt;&amp;quot;四十而不惑&amp;quot;，到了四十岁，才不怀疑。人到了四十岁，咀嚼了事态的冷暖，感怀了岁月的无情，往事悠悠，四十年弹指一挥间，在经历了许多疑惑、彷徨、振奋、欣喜之后，是沉思，是恍然大悟……少了激情，多了沉稳；少了冲动，多了冷静；少了烦恼，多了理智；少了放任，多了责任；少了盲从，多了自我……四十岁的人是十分理智和清醒的，对外，他明白了社会；对内，他明白了自己；对自己，他明白了责任。&lt;/p&gt;

&lt;p&gt;对外，他明白了社会。人是生活在社会之中，离不开社会，社会越进步，人们对社会的依赖度就会越高。四十岁的人，不再年轻，缺少了对社会那种幻想和迫切投身于社会中的激情，生活的经历多少磨去了些激情，多了沉稳，挫折让他明白了，人和社会的关系就是个体和群体的关系，个体是群体中的一分子，个体左右不了群体，那就必须正视它，个人的理想和愿望必须建立在现实社会的基础之上，否则就是空想。他内心会有一种淡定的力量去应对外界。&lt;/p&gt;

&lt;p&gt;对内，他明白了自己。所以，所谓成长是内心在历练中的逐渐强大，所谓人生的归位是把外在的东西变成内心的能量。有理想，而不是妄想；有愿望，而不奢望；有作为，而不妄为。有理想是应该的，但关键在打理，去实践；有愿望也可以，关键在于切合实际；有作为，关键在适度。四十岁的人，是最讲实际的年龄段的人，人生走过一半，机会和机遇少了，不应该再犯过错而走迂回的路了。&lt;/p&gt;

&lt;p&gt;对自己，他明白了责任。四十岁的人最大特点是明白了自己的责任。他必须承担社会责任、家庭责任和抚养子女责任。首先，他必须做好自己的工作，这不单是生存的需要，也是为社会所做的贡献，是必须尽到的社会责任，只有每个社会成员的辛勤工作，才换来整个社会的进步；其次，四十岁的人，其父母年龄都大了，做为四十岁的人，必须承担起赡养老人的家庭责任，尽心尽力尽早去尽孝；还有，四十岁的人，子女都处在学习阶段，培养教育好自己的子女，即是父母的责任，也是为社会延续和发展所应尽的社会责任。&lt;/p&gt;

&lt;p&gt;四十岁的人，是人生辉煌时期，也是为社会和家庭贡献最大的时期。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(十二) 思维突破</title>
   <link href="http://www.luzexi.com/2018/11/22/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A812.html"/>
   <updated>2018-11-22T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/11/22/思路探讨12</id>
   <content type="html">&lt;p&gt;人很难突破自己的思维，因为我们自己很难知道自己的思维是否固化，也很难从其他人口中了解到。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;我们都认为他人对我们的评价是片面的不合理的评价，所以即使收到批评或指正的信息时也很难有效认识到自己的问题。&lt;/p&gt;

&lt;p&gt;即使认识到自己的问题，也无法改正。有趣的人类，明知道错误，想改也改不过来。&lt;/p&gt;

&lt;p&gt;这种问题通常是长年累月积累的结果，习惯成了自然。所有习惯性的动作，思考方式，语调，语句，都进了肌肉记忆里，在肌肉记忆里根本不需要思考，一到某个相似情景的点，自然而然的触发。形成良好的肌肉记忆很难，想去掉恶劣的肌肉记忆也同样很难，这把双刃剑弄得我很受伤。&lt;/p&gt;

&lt;p&gt;另一方面，思维的突破需要自己主动折腾（受虐）。这种受虐是精神上的，通常我们去接触一些自己不喜欢的事物，去接触一些自己从来没有接触过的人和事，能形成有效的突破。&lt;/p&gt;

&lt;p&gt;未知的事物，令我们恐惧的事物，我们讨厌的事物，这些对我们来说，难以理解的事物，都是绝佳的突破点。&lt;/p&gt;

&lt;p&gt;越害怕，越恐惧，越不知道，越讨厌的事物，越是思维固化的关键点，通常这些事物的真实情况完全和我们理解的不一样。&lt;/p&gt;

&lt;p&gt;让自己主动陷入这样的“困境”，大部分人都会望而怯步，人都是向着舒服的一个方向走的，自己怎么舒服怎么走，让自己主动去陷入“困境”这种事，人类很难接受。&lt;/p&gt;

&lt;p&gt;不过我们要明白，主动陷入“困境”，比被动陷入“困境”要好的多，被动承受“困境”会把人摧毁，而主动挑战“困境”却能成就自己。看起来差不多的“困境”情景，其实在人内心的状态是完全两个样子的。&lt;/p&gt;

&lt;p&gt;不只是主动折腾，还要主动吃亏，舍小取大。&lt;/p&gt;

&lt;p&gt;大多数人也很难想明白，自己付出的努力为什么要和别人共享结果，我赚到的钱为什么要和别人分享，我建立的公司为什么要分给别人股份，我做出来的项目为什么要和别人分成。这种主动丢掉当前的小利益而寻求更长远的利益，以及宏观意义上的大格局，少数几个人才能做得到，通常这种人都是人中龙凤，短时间是体现不出价值来的，只有从长时间来看才能懂得其精华所在。人毕竟是短视的动物，能理解舍小取大的就不多，就更别说共赢和分享了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(十一) 活在当下</title>
   <link href="http://www.luzexi.com/2018/11/18/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A811.html"/>
   <updated>2018-11-18T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/11/18/思路探讨11</id>
   <content type="html">&lt;p&gt;人在不同的阶层，不同的位置思考的内容不同，所以屁股决定脑袋，你坐什么位置站在什么阶层决定了你担忧什么内容，想的是什么事。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;不仅仅是职位，更是人生的位置，20-25岁的人担心的事情和25-30岁的不同，25-30岁的人担心的事情和30-35岁的人不同，30-35岁的人担心的事和35-40岁的人不同，以此类推，每隔5年都会有一些大的不同点，隔10年的人思考的问题大不相同了。&lt;/p&gt;

&lt;p&gt;人生每个位置都要经历那个阶段的痛苦与欢乐。并不一定说，25岁的人去担心35岁该担心的事有多厉害，不是的，那没什么用，你并不在35岁那个点上，其实大部分都是你自己在杞人忧天，因为实际情况是你好好过完25岁到35岁这个阶段，在25岁担心35岁的那个问题已经迎刃而解了。&lt;/p&gt;

&lt;p&gt;就好像我们没必要去担心总统总理该担心的事情一样，他们在那里思考的制度，权利，经济，民生问题，我们就完全不需要去担心和忧愁，因为我们并不在那个位置，担心完全就是浪费时间和精力。&lt;/p&gt;

&lt;p&gt;为什么说浪费时间和精力呢，因为我们根本不在那个位置上，无法体会到当事人的环境，压力，困难。我们所创造出来的点子或想法都是很空的，无法跟实际匹配。当我们实实在在的坐到那个位置上时才能真正切切的体会到，以前坐在这个位置上的人的感受。&lt;/p&gt;

&lt;p&gt;所以做好当下是关键的关键，下一个阶段到来时，自然会根据上一个阶段的情况发生变化，上一个阶段优秀或良好，这个阶段就会更好一点，如果上一个阶段比较糟糕，那么这个阶段如果不努力可能会更糟。&lt;/p&gt;

&lt;h6&gt;活在当下，就是告诉我们这个道理，它并不是说在当下要及时享乐，而是，把更多的精力关注在当下的发展和努力上，未来下一个阶段就会变得更加美好。&lt;/h6&gt;

&lt;h6&gt;以前还讲究策略，什么好坏啦，什么有前景啦，什么蓝海红海啦什么的，现在已经不管了，有兴趣就上，好好干，一天天积累，没兴趣即使是天上掉馅饼我也不去捡，什么馅饼还是陷阱的，不再考虑范围内。&lt;/h6&gt;

&lt;h6&gt;由于下一个阶段的状况，是当下这个阶段的好坏来影响的，我为什么要天天忧心下一个阶段发生的事，不如做好当下这个阶段的事情，到下一个阶段来临时问题自然会迎刃而解。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(十) 成与败，得与失</title>
   <link href="http://www.luzexi.com/2018/11/11/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A810.html"/>
   <updated>2018-11-11T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/11/11/思路探讨10</id>
   <content type="html">&lt;h3&gt;成与败，得与失&lt;/h3&gt;

&lt;p&gt;人生海海，都是起起落落的，失意时给别人捧捧场，得意时听听别人掌声，这样很好也很正常，激励了自己也鼓励了别人。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;失败和成功都是一个陷阱的开始，失败的人容易陷入更多的困惑，成功的人容易陷入自我陶醉与傲慢，最后都将发生更多的失败和更大的挫折。&lt;/p&gt;

&lt;h6&gt;这是人性弱点的体现，失落中难以站起来，高兴时却想要飞起来。&lt;/h6&gt;

&lt;p&gt;所以，我们要反人性操作，失败时不要太在意，相信努力最终会成功，黎明终会到来，而成功时不要太骄傲，要明白如果没有大趋势的推动着整个事件发生，我们是不可能成功的，敬畏大自然大世界大趋势。&lt;/p&gt;

&lt;p&gt;实际生活中失败的困惑最常发生，我们每天都发生着不同级别的失败。&lt;/p&gt;

&lt;p&gt;在失败面前不要太在意，因为，从整个人生70年寿命角度来看，当下所发生的事情都是一时的得与失，结果并不是我们唯一追求的东西，努力拼搏奋斗的过程才是。&lt;/p&gt;

&lt;p&gt;面对失败，就是不要在意它，就是要从中提取总结后忘记失败这件事，继续向前进。&lt;/p&gt;

&lt;p&gt;要明白，杀不死我的，终将使我更加强大。秉持这个理念时就会明白，失败的好处，大大的有。&lt;/p&gt;

&lt;h6&gt;偶尔回头看看，这些拼搏的过程和痕迹，觉得精彩才是真的精彩。至于得与失，太在意，就太短视了，太不在意，就太无知了，我们追求的应该是常反思得与失，又常故意忘记得与失，对困境无谓无惧，对荣耀又不留恋，从而形成大视野，长远见，短目标，立刻做的行为习惯和思维逻辑。&lt;/h6&gt;

&lt;p&gt;题外话。&lt;/p&gt;

&lt;p&gt;积极乐观的心态带给我光明的世界，主动出击掌握主动权，以攻为守。主动进攻虽然代价大，但被动的代价可能更大，取舍之间不如奋勇向前。&lt;/p&gt;

&lt;p&gt;我曾经以为我懂得越多就能赚到越多钱，就能坐拥金字塔顶尖。错了，认知度和财富和权力是极难匹配，财富靠的是年复年的积累，而不是爆发，权力也是，爆发其实就是运气，无其他原因。&lt;/p&gt;

&lt;p&gt;那些一直梦想着暴富的人，通常一生都没有任何建树，郁郁寡欢，认为自己不得志，上天不给我恩赐，其实上天凭什么就给我恩赐，世界上60亿人，没有理由给我恩赐，我又懒又黑暗，还见不得别人成功，一辈子在底层被压迫那是理所当然，顺理成章的事。&lt;/p&gt;

&lt;p&gt;现实中很多人认为因为自己聪明才赚到了钱，殊不知没有大趋势刚好在那个点推动了他，他什么都不是。如果没有认清这个现实问题，后面将很大概率遭遇危机。不敬畏世界和大自然，总会吃亏的.&lt;/p&gt;

&lt;h6&gt;成功并不是一个人的事，而是一个看不见的&amp;quot;集体&amp;quot;日积月累的综合性事件。&lt;/h6&gt;

&lt;h6&gt;说到底，这个世界是辩证的世界，没有绝对的对，也没有绝对的错，在不同环境下就会产生不同的效果或结果。&lt;/h6&gt;

&lt;p&gt;我要做的是把自己变成，辩证的人，从不同角度，不同世界观，不同级别的视野中看当下的问题。&lt;/p&gt;

&lt;p&gt;随着时间的推移，演变出不同的情况，用不同的方法应对，做最合适的选择，虽然外在的变化多但心中要保持一颗纯洁的信仰，牢牢记住，是金子总会发光的，光明总会战胜黑暗的，良币总会驱逐劣币的，黎明总会到来的，努力总会有回报。&lt;/p&gt;

&lt;p&gt;说的这么复杂，人似乎要记住很多东西才能有效的行走江湖似的？&lt;/p&gt;

&lt;p&gt;不，人毕竟是人，有效记忆是非常少的，就如一个人只能跟周围3-5个人合作一样，一旦加大数量，精力和脑袋就完全无法承受。这也是为什么我要强调做减法的原因。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(九) 实业，和，金融业</title>
   <link href="http://www.luzexi.com/2018/11/03/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A89.html"/>
   <updated>2018-11-03T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/11/03/思路探讨9</id>
   <content type="html">&lt;h3&gt;实业，和，金融业&lt;/h3&gt;

&lt;p&gt;金融业虽然整体金钱的量大，但赚钱的比例最少，翻个几倍已经不得了要上天了，上涨百分之几就有几十亿甚至几百亿的升值幅度。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;因为它的量大，所以看起来好赚钱，其实不是的。金融业本身就是，靠着，金钱堆积起来的，量大是正常的事，我们砸进去的钱只是茫茫大海中的一滴水，完全跟整体赚多少钱没有关系。&lt;/p&gt;

&lt;p&gt;而实业潜力多的多，翻个十几倍都是平常的，几十倍，几百倍也不是不可能，最多翻到几千倍的也是有的。&lt;/p&gt;

&lt;p&gt;说到底还是，实业兴家，金融败家。&lt;/p&gt;

&lt;p&gt;打工赚钱也是条很好的路子，用技能夺得世界也未尝不可，收入从几千到几万，到几十万，再到几百万，根据你的努力程度和良好心态也是顺理成章的事情，这中间其实也翻了几百倍了，比起金融也是多出很多的倍的翻翻。&lt;/p&gt;

&lt;p&gt;说到我自己其实这几年的认知都错误的将金融排在了第一位。现在明白过来也不迟。起码我知道了一些，这个世界的运作规律，掌握了规律后，用行之有效的方法就能有好的成绩。&lt;/p&gt;

&lt;p&gt;这些年交了些看起来无用的‘学费’，但其实我自己知道，自己领悟到的东西巨大，完全突破了自己以前陈旧的思想，也大幅度转变了自己的思维模式，并且，在整个过程中也了解了自己很多，其实是人性的丑与恶。&lt;/p&gt;

&lt;p&gt;如果再让我重来一次，我依然会选择再折腾一次，学到的东西绝不是能用钱来衡量的，至少我知道了：&lt;/p&gt;

&lt;p&gt;1，知识改变命运，奋斗成就人生，科技成就世界。&lt;/p&gt;

&lt;p&gt;2，人都是随着时间而成长的，要跟随时间去经历，去磨练，去学习，尽量不要停下来。&lt;/p&gt;

&lt;p&gt;3，没有我，世界照样转得很好，有了我，世界该怎么转还是怎么转。不会因为我的到来而改变什么，也不会因为我的离开而缺少什么。&lt;/p&gt;

&lt;p&gt;4，我对世界来说就是个蚂蚁，不起眼，但是我的想法对于我个人来说非常重要，我想什么，怎么想决定了我，怎么做怎么走，对自己的前途命运非常重要。&lt;/p&gt;

&lt;p&gt;5，世界上，没有绝对的苦，也没有绝对的甜。苦中有甜，甜中有苦。苦中做乐是最佳状态，我们要在苦中找到甜。&lt;/p&gt;

&lt;p&gt;6，虽然这个世界永远都有，劣币驱逐良币的过程，但要明白，要相信，良币会获得最终胜利，光明最终会战胜黑暗，努力的人最终会比懒惰人更幸福。&lt;/p&gt;

&lt;p&gt;7，对于个人来说，最重要的是突破自我，挑战自我，唯有突破和挑战才能得到进阶，最终成就自我。&lt;/p&gt;

&lt;p&gt;8，真理都是很简单的一句话，简单的道理里，蕴含着复杂的思考过程和诸多的体验经历。&lt;/p&gt;

&lt;p&gt;9，漫长的人生长跑路上，健康和免疫力第一，努力，拼搏，学习第二，两者又缺一不可，两手都要抓两手都要硬。&lt;/p&gt;

&lt;p&gt;10，自律使我自由。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>思路探讨(八) 谁在掌控世界</title>
   <link href="http://www.luzexi.com/2018/10/20/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A88.html"/>
   <updated>2018-10-20T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/10/20/思路探讨8</id>
   <content type="html">&lt;h2&gt;一直尝试了解世界，总是被世界的真相震撼，Real world 是真的残酷，但我们同样有希望逆袭，不要怕，我们能赢。&lt;/h2&gt;

&lt;h6&gt;为什么整个世界是由40岁，50岁的人在掌控的，我们该如何思考?&lt;/h6&gt;

&lt;p&gt;现实生活中，40，50岁的人占据了大部分的重要的位置，各种管理岗位，各种Top position，大量的人脉，以及大量的财富，甚至各类尖端技术都是由他们掌控的。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;40岁，50岁的人，在他们成年后经历了20，30十年的磨练，不管在技能上，生活经验上，社会经验上都已经基本到达了最巅峰的状态。&lt;/p&gt;

&lt;p&gt;在交际圈里，他们的朋友也是40，50岁的人为主，所以朋友圈里，基本都是各色大佬，有什么需要了解打个电话基本都能打听到。&lt;/p&gt;

&lt;p&gt;他们已经不再惧怕大部分的事物，以及困难。他们知道如何面对未知，如何处理恐惧。甚至情绪的自我调节也已经达到了一个相当熟练的程度。&lt;/p&gt;

&lt;p&gt;与20，30岁的人比较，他们精力相当，经验却更丰富，从根源上就更胜一筹。&lt;/p&gt;

&lt;p&gt;而与60，70岁的人比较，他们具备更好的体力和精力，经验也没有差很多，因为从60岁开始，学习速度由于体力和精力的下降而变得缓慢。&lt;/p&gt;

&lt;p&gt;因此从整个人类年龄的宏观分布来看，40，50岁的人占据了绝对的优势。他们统治世界是无可厚非的。&lt;/p&gt;

&lt;p&gt;20多岁的时候我知道这件事时，比较不满和愤慨，总是觉得凭什么20多岁的人就不能拥有世界。&lt;/p&gt;

&lt;p&gt;现在30多岁了，更多的是慌张，想着自己40岁的时候，如何能在这个统治者的世界里立足一个位置。&lt;/p&gt;

&lt;p&gt;越接近40岁越感受到来自世界的真正压力。我真切的体会到这是个 Real world 容不得半点玩笑。&lt;/p&gt;

&lt;p&gt;难道40，50岁的人就没有人压着他们吗，还有60，70岁的人压着他们，60，70岁的人已经奋斗了大半身，掌握了大部分的财富和权利。他们已经不需要亲自出面了，派30，40，50岁的人出去干活就可以了。&lt;/p&gt;

&lt;p&gt;他们已经完全成了幕后的操纵者。从表面上很难看到有60，70岁人的身影，因为他们已经完全懂得了如何低调如何归隐，以及为什么一定要低调一定要归隐的道理。&lt;/p&gt;

&lt;h3&gt;世界无法改变，我们要改变的是自己&lt;/h3&gt;

&lt;p&gt;世界是无法改变的，40，50岁的人统治世界，60，70岁的操纵世界，20，30岁的了解世界，这种布局是不可能改变的。&lt;/p&gt;

&lt;p&gt;同时，我们也会随着时间的推移，被推入到40，50岁或者60，70岁的人群中去。&lt;/p&gt;

&lt;p&gt;我们幻想下，到那个时候，当你站在40，50岁的圈子中时，是在底层，还是在中层，还是在上层呢？&lt;/p&gt;

&lt;p&gt;到那个时候，你是否有足够的能力统治这个世界，是否有足够的大的眼界，是否有足够大的视野，是否有足够强壮的身体。&lt;/p&gt;

&lt;p&gt;这是我们需要在40，50岁前做好的准备。是否锻炼了足够多的能力，经历了足够多的困境，完善了足够多的知识体系，储备了足够多的经验。&lt;/p&gt;

&lt;p&gt;准备工作的充分程度决定了，当我们被推入40，50岁的世界时，是依然被世界统治，还是统治世界。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>白领投资探讨(七) 实干方法</title>
   <link href="http://www.luzexi.com/2018/10/14/%E7%99%BD%E9%A2%86%E6%8A%95%E8%B5%84%E6%8E%A2%E8%AE%A87.html"/>
   <updated>2018-10-14T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/10/14/白领投资探讨7</id>
   <content type="html">&lt;p&gt;金融冰冻三尺，没什么可聊的，我们来聊聊学习和工作的方法论。&lt;/p&gt;

&lt;p&gt;我如何看待日常的学习，工作中的方法。&lt;/p&gt;

&lt;p&gt;有效利用每天有限的时间，不强行超出13个小时工作时间，并保持每天12个小时高强度工作，坚持每天运动健身，要在有限的时间范围内做出最大的效率。&lt;/p&gt;

&lt;h3&gt;时间对于每个人都是一样的，区别就是在于如何在每天的时间里，将学习和工作效率最大化。&lt;/h3&gt;

&lt;p&gt;每天比别人多学习到一点，每天的积累，一个月就能比别人多学到30点，一季度就是90点，一年是365点，3年是1095点，5年就是1825点，10年就是3650点。&lt;/p&gt;

&lt;p&gt;5年的时间，能将你与普通人的差距完完全全拉开一个档次，10年的时间，你将成为完全不同层级的人。&lt;/p&gt;

&lt;p&gt;积跬步至千里，坚持奋斗坚持努力的力量会让震撼。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;毛泽东同志曾强调，“我们不但要提出任务，而且要解决完成任务的方法问题。我们的任务是过河，但是没有桥或没有船就不能过。不解决桥或船的问题，过河就是一句空话。不解决方法问题，任务也只是瞎说一顿。”可见方法十分重要，方法得当事半功倍，方法失当事倍功半。&lt;/h3&gt;

&lt;h2&gt;一，文经我手无差错、事交我办请放心&lt;/h2&gt;

&lt;p&gt;不要差不多，盯住最完美。别人对你的工作期望是100分，我们就要努力盯住如何给出200分的目标来做。&lt;/p&gt;

&lt;p&gt;超出别人对你的期望，达到最完美的状态。&lt;/p&gt;

&lt;h2&gt;二，长计划、短安排、立即做&lt;/h2&gt;

&lt;p&gt;长计划，就是说要着眼明天、着眼未来、着眼长远。凡事预则立，不预则废。&lt;/p&gt;

&lt;p&gt;一个对人生和工作有计划的人，他就能胸怀大局、放眼长远，不为一时一地的不利所困。&lt;/p&gt;

&lt;p&gt;俗话说得好，愚者赚今朝，智者赚明天。切忌贪一时之功、图一时之名，而要脚踏实地、从长计议。&lt;/p&gt;

&lt;p&gt;长计划还不够，没有短期安排，就如迷路的蚂蚁，到处乱撞。&lt;/p&gt;

&lt;p&gt;每天给自己制定一个小的目标，制定1星期，1个月的目标。这样不仅可以知道每天要做些什么、做了些什么，还可以对工作进行有效控制，让每一个小目标、短安排的成绩，都成为成功路上的阶梯和里程碑。&lt;/p&gt;

&lt;p&gt;不管是长计划还是短安排，都要立即行动、马上就办，将学习和工作落到实处，否则都只是一句空话。&lt;/p&gt;

&lt;p&gt;只有做到了长计划、短安排，才能真正实现有序、有效；也只有把“立即做”当成自己的座右铭，并形成习惯，才能不断进步。&lt;/p&gt;

&lt;h2&gt;三，周周总结，月月反思&lt;/h2&gt;

&lt;p&gt;每过一段时间就及时“回头看”，检查审视一下自己的工作，确保任务不拖延、事情不遗漏，效率不低下。&lt;/p&gt;

&lt;p&gt;要保持稳健，高速，健康的发展。太快不行，身体吃不消，不可持续，太慢不行，跟不上潮流，被时代落在后面，坐吃山空。&lt;/p&gt;

&lt;p&gt;所以要稳健，要有自己的节奏，节奏时快时慢，要学会调整，让状态尽量稳定，偏离时尽自己最大努力拉回原点。&lt;/p&gt;

&lt;p&gt;“回头看”让人了解自己，了解过去的自己，了解现在的自己，计划未来的自己。&lt;/p&gt;

&lt;p&gt;了解到了自己的缺陷和优势，才能够做到有效突破。&lt;/p&gt;

&lt;h2&gt;四，学习工作化，工作学习化&lt;/h2&gt;

&lt;p&gt;事实反复告诉我们，学习力的高低是人与人之间拉开距离的重要因素。一个人只要做到坚持学习、善于学习、快速地学习，就一定会有所成就。&lt;/p&gt;

&lt;p&gt;大家应该把学习作为一种精神追求、一种工作状态、一种生活方式，下得苦功夫，求得真学问。&lt;/p&gt;

&lt;p&gt;要树立“不学习无以立”的意识，坚持向书本学习、向实践学习，边学边用，边用边学。&lt;/p&gt;

&lt;p&gt;在学习与工作的良性互动中不断增强本领，超越自我。&lt;/p&gt;

&lt;p&gt;工作就是学习，学习就是工作，要融会贯通。&lt;/p&gt;

&lt;h2&gt;五，信息要对称，善于沟通&lt;/h2&gt;

&lt;p&gt;团体的力量比你想象的强大，但溃散的团体不如个体。沟通是团结整个力量最好方法。&lt;/p&gt;

&lt;p&gt;及时有效的沟通，才能达成协调一致的意见、形成步调统一的行动。&lt;/p&gt;

&lt;p&gt;对自己所从事的工作，要了解上面的要求、左右的情况、下面的进展，就要增强主动沟通的意识，确保上情准确下达、下情及时上传，着力构建上下贯通、左右衔接、内外一体、立体交叉的运转体系，实现各方面工作无缝对接，形成“整体一盘棋，同唱一台戏”的良好格局。&lt;/p&gt;

&lt;h2&gt;六，跳出自身看自身，立足自己看自己&lt;/h2&gt;

&lt;p&gt;人生是一个不断认识自我、完善自我的过程，一个人不可能用自己的眼睛完全看清自己，不识庐山真面目，只缘身在此山中。&lt;/p&gt;

&lt;p&gt;要学会登高望远，放开视野去比较，在一览众山小中看清自己的位置、自己的渺小，看到别人看不到的；&lt;/p&gt;

&lt;p&gt;要学会用宏观的视野看自身，不以自我为中心，用旁观者的心态，高出事物的一两个层次来审视自己；&lt;/p&gt;

&lt;p&gt;要学会以人为镜，见有才能的人要敢于和他比较，照出自己的差距和不足，明确方向和目标。&lt;/p&gt;

&lt;h2&gt;七，始终保持适度的紧张感&lt;/h2&gt;

&lt;p&gt;对每一个人来说，压力太大会崩溃，但没有一定的压力，不保持适度的紧张感，对身体、对生命、对工作都是负能量。&lt;/p&gt;

&lt;p&gt;人无压力轻飘飘，有压力不一定是坏事，适度的紧张感对于一个单位、一个团队、一个组织、一个人的健康等方方面面都有好处。&lt;/p&gt;

&lt;p&gt;它能使我们不忘“初心”，远离职业倦怠，激发工作热情，始终让思维和行动保持在平均水准以上，甚至可以迸发出超出想象的能力。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3d高级编程之进阶主程 地图与寻路5</title>
   <link href="http://www.luzexi.com/2018/09/30/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E5%9C%B0%E5%9B%BE%E4%B8%8E%E5%AF%BB%E8%B7%AF5.html"/>
   <updated>2018-09-30T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/09/30/Unity3D高级编程之进阶主程-地图与寻路5</id>
   <content type="html">&lt;hr&gt;

&lt;p&gt;layout: post
status: publish
published: false
title: 《Unity3D高级编程之进阶主程》第十章，地图与寻路(五) 烘培，阴影，及其优化
description: &amp;quot;unity3d 高级编程 主程 地图 navmesh 寻路&amp;quot;
excerpt_separator: ===
tags:
- 书籍著作
- Unity3D&lt;/p&gt;

&lt;h2&gt;- 前端技术&lt;/h2&gt;

&lt;h3&gt;烘培&lt;/h3&gt;

&lt;h3&gt;Overdraw&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; 阴影与优化。 -- 假阴影面片，阴影绘制区域管理&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;6.动态障碍下的寻路&lt;/h3&gt;

&lt;p&gt;动态障碍在多人RPG在线游戏的上运用的比较多，因为多人同时在同屏玩游戏时有挤压的效果会有更多的竞技感。那么在各种类型的网格模式下，是怎么做到呢？&lt;/p&gt;

&lt;p&gt;二维数组中的寻路最容易做动态障碍，因为每个格子都代表了一个寻路点，只要填上一个障碍数据就能&lt;/p&gt;

&lt;p&gt;三角网格寻路则使用物理检测碰撞辅助寻路。&lt;/p&gt;

&lt;p&gt;RecastNavigation-NavMesh生成原理
https://blog.csdn.net/you&lt;em&gt;lan&lt;/em&gt;hai/article/details/77428858&lt;/p&gt;

&lt;p&gt;navmesh高度结构
http://critterai.org/projects/cainav/doc/html/6fb3041b-e9be-4f03-868b-dcac944df19b.htm&lt;/p&gt;

&lt;p&gt;关于 Unity NavMesh 数据的导出和使用
http://www.cnblogs.com/yaukey/p/3585226.html&lt;/p&gt;

&lt;p&gt;可以用路点+navmesh的形式做图。因为路点消耗少，在城市道路上，在没有怪物的情况下可以做到很少的消耗。而在战斗中则需要整个地面有寻路路线，就需要navmesh的作用。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>白领投资探讨(六) 为什么不要做逆向投资，和，为什么坚决要做逆向投资的探讨</title>
   <link href="http://www.luzexi.com/2018/09/23/%E7%99%BD%E9%A2%86%E6%8A%95%E8%B5%84%E6%8E%A2%E8%AE%A86.html"/>
   <updated>2018-09-23T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/09/23/白领投资探讨6</id>
   <content type="html">&lt;h3&gt;为什么不要做逆向投资，和，为什么坚决要做逆向投资的探讨&lt;/h3&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;一直没明白这个世界，也一直不断地在找这个世界的方向。这个世界，这么多的变化的，这么多的故事，这个多的人，我们要学习的太多太多。&lt;/p&gt;

&lt;p&gt;很久前就知道这个世界是变化的道理，不过这个道理始终都没有落在心里，直到今天才有点醒悟。&lt;/p&gt;

&lt;p&gt;我们不知道明年会怎样，明天会如何，甚至都无法确定下一秒会发生什么，一切都在变。&lt;/p&gt;

&lt;p&gt;我记得有一天工作到中午忘了吃饭，肚子很饿，于是穿上衣服去吃饭，然而这么一件大概率确定的事，却在出门后快进餐厅那一瞬间因为跟同事聊了几句，就跟着同事去了他的办公室，一个下午没有吃上饭。&lt;/p&gt;

&lt;p&gt;如果世界上有一个确定的事情，那就是，“这个世界是永恒变化的”这个道理。&lt;/p&gt;

&lt;h6&gt;这就是我们今天要探讨的话题的基础，在“变化下投资”。&lt;/h6&gt;

&lt;h3&gt;1，为什么不要做逆向投资。&lt;/h3&gt;

&lt;p&gt;最常见的是在逆向投资中容易迷失自己。不要忘了，我们是时代下的蚂蚁，时代的浪潮推我们去哪，我们就得去哪，谁都逃不过，越挣扎越痛苦。&lt;/p&gt;

&lt;p&gt;这就是趋势，最大浪潮的趋势，最宏观的浪潮趋势，拍动着整个国家，或者整个地区，甚至是整个全球的去向。我们这种蚂蚁级别的小颗粒，做再大的挣扎都无济于事。&lt;/p&gt;

&lt;p&gt;因此逆向投资最容易受伤，它是在对抗时代，拒绝被推动，最后反而被时代撕裂。&lt;/p&gt;

&lt;p&gt;在逆向投资中，富豪变穷光蛋的例子遍地是，眼看他起高楼，眼看他宴宾客，眼看他楼坍塌，亿万富豪破产不是梦。&lt;/p&gt;

&lt;p&gt;不要试图对抗时代的趋势，越挣扎越痛苦，我们要做的就是做好自己，其他的交给时代和浪潮去选择。&lt;/p&gt;

&lt;h3&gt;2，又为什么要坚持做逆向投资。&lt;/h3&gt;

&lt;p&gt;先把教条拿出来，巴菲特说过：别人贪婪我恐惧，别人恐惧我贪婪。&lt;/p&gt;

&lt;p&gt;要反着做，是在这个社会生存的更好的基本要素。当所有人都悲观绝望卖出时，你就应该与众不同拿出积极乐观的态度坚决买入。&lt;/p&gt;

&lt;p&gt;大的盈利，大的利润基本上都是在逆向投资中获得的，因为低谷越低，高峰越高，上下幅度足够大时，利润能高的吓人。&lt;/p&gt;

&lt;p&gt;另外一点，是赔率，如果1%的概率1块钱，能赢10000块，为何不做，投100次也才100块，却能获得10000块的收入。&lt;/p&gt;

&lt;p&gt;足够大的赔率，是投资的最佳机会。这种机会，也就只会在逆势中才会出现。当发生恐慌，踩踏，挤兑，所有人都撤退时，这种绝佳的赔率机会才会浮出水面。&lt;/p&gt;

&lt;p&gt;等大多数人清醒过来，好的赔率早就没了。&lt;/p&gt;

&lt;p&gt;最后一点，要学会乐观面对世界。倒下了要学会站起来，只有站起来，才能继续往前进，躺在那里，只有死路一条。&lt;/p&gt;

&lt;h3&gt;3，如何理解两个方法。&lt;/h3&gt;

&lt;p&gt;其实这两个方法不矛盾，完全可以一起进行，同时操作。&lt;/p&gt;

&lt;p&gt;比如，在还没出现大面积资金撤退，并且还没出现撤退完毕迹象的情况下，坚决不做逆向投资。&lt;/p&gt;

&lt;p&gt;又比如，在大面积资金撤退完毕，并出现明显踩踏，恐慌现象后，以3年为期，把打算投资的资金分为36份，每个月投一份，而且这一份资金中，进行分散投资，降低踩雷概率，以防一次性亏损过大。&lt;/p&gt;

&lt;p&gt;再比如，不对没有实际业绩支撑的公司进行投资，在逆势中，这种公司雷暴概率最大，资金链断裂最快。&lt;/p&gt;

&lt;p&gt;还比如，坚决分批买入，那些自己熟悉的行业，自己擅长的行业。行业有起，有伏，有最冰冷时，也会有最火热时，自己擅长的行业，自己最清楚，什么时候最冷，什么时候最热。&lt;/p&gt;

&lt;p&gt;题外话：&lt;/p&gt;

&lt;h6&gt;还记得跟一位友人聊天，他说：每次在人生的十字路口，都知道哪条路是正确的，但他每次都不选择那条路，他说因为他知道那条路实在太难走了。&lt;/h6&gt;

&lt;h6&gt;正确的路当然难走，即使选择了正确的路，也不是每个人都能坚持走完的，大多数人都在中途放弃了，有些甚至一开始就没有选择这条难走的路。&lt;/h6&gt;

&lt;h6&gt;所以这个社会的层级才是金字塔形状，而不是扁平形状。少数人赢得了胜利，统治了世界。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>白领投资探讨(五) 金融知识到底带给我了什么？</title>
   <link href="http://www.luzexi.com/2018/09/08/%E7%99%BD%E9%A2%86%E6%8A%95%E8%B5%84%E6%8E%A2%E8%AE%A85.html"/>
   <updated>2018-09-08T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/09/08/白领投资探讨5</id>
   <content type="html">&lt;h3&gt;金融知识到底带给我了什么？&lt;/h3&gt;

&lt;p&gt;刚开始学习金融知识时候，对各类信息都非常关注，小到商品的的价格波动起伏，大到全球的政治格局。&lt;/p&gt;

&lt;p&gt;一开始不懂，认为牛人肯定是对信息把握和预测能力很强，包括对政策的洞察力等等。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;后来明白了点，价格是无序波动的，是无法预测的，价格的根源是交易，交易由两个人类相互作用，一个乐观的买入，一个悲观的卖出，而人类无序紊乱的情绪导致了整个波动的无需的。越短的周期内的价格波动的表象越是无法捕捉到规律，这就是几亿人情绪共同作用导致的。倘若是交易由机器发起，就会变得有规律可循，因为机器是无情绪化的。&lt;/p&gt;

&lt;p&gt;再后来又明白了点，价值才真正的王道，人的价值，知识的价值，市场的价值，技术的价值，那些无法用金钱换来的才是真正意义上的价值体现。&lt;/p&gt;

&lt;p&gt;不过价值可并不等于金钱，在一段很长时间里，价值在金钱上是无法体现出来的。就像那些死后才出名的画家，诗人，政治家，科学家一样，在生前，在还没有等到价值体现的那一刻，他们就去世了，一辈子都没能等到价值体现的那一刻。&lt;/p&gt;

&lt;p&gt;再后来，终于懂了这个世界上没有大神，即使巴菲特也不是绝对的，大家都是被时代的浪潮推着走的人，时代推我们到哪我们就在哪。&lt;/p&gt;

&lt;p&gt;在这个过程中，淘汰了许多人，留下来的活下来的得到了最终的胜利。于是就有人说这些人是大神，殊不知这个世界上有幸存者偏差的存在，所有有利信息都指向胜者的优势，忽略了失败者的能力。其实换个环境换个趋势，那些所谓的优胜者，有可能分分钟被秒杀。说白了就是运气好。&lt;/p&gt;

&lt;h3&gt;那么难道说这个世界就是靠运气的？可以说是，也可以说完全不是！&lt;/h3&gt;

&lt;h3&gt;因为人！可！以！制！造！运！气！&lt;/h3&gt;

&lt;p&gt;努力的人创造价值，坚持努力的人创造更多的价值，十年如一日坚持努力的人创造巨量的价值，巨量的价值吸引了很多人来关注，关注的人越来越多，量变积累导致了质变，巨量的价值给我们带来了机会和运气。&lt;/p&gt;

&lt;p&gt;价值是人类社会的基础，没有价值的人，没有价值的事，是不会有人愿意去关心的，没有人关心的事才没有价值和意义。&lt;/p&gt;

&lt;p&gt;想要制造运气，就要坚持努力，特别是十年如一日的坚持，将带给你颠覆性的变化。&lt;/p&gt;

&lt;h3&gt;胜者，败者，都很努力，为什么还是分出了胜负？&lt;/h3&gt;

&lt;p&gt;这个问题本身就有问题，因为这个问题太关注当前的胜负结果。&lt;/p&gt;

&lt;p&gt;胜，和，负，只是我们在整个坚持努力的过程中的一个结果。如果我们太关注胜负，很容易被胜负心理吞没，无法自拔。&lt;/p&gt;

&lt;p&gt;试问大家，谁就能够保证，一辈子赢？首富都有倾家荡产流落街头的例子，何况是其他人。&lt;/p&gt;

&lt;p&gt;“眼看他起高楼，眼看他宴宾客，眼看他楼坍塌”，这种事时时刻刻都在发生，万事万物一直在变，只有努力价值从而创造运气不会变。&lt;/p&gt;

&lt;h3&gt;我们在生活中，事业中，学习中，最怕不是失败，而是害怕失败。&lt;/h3&gt;

&lt;h3&gt;失败不可怕，最怕的是害怕失败。&lt;/h3&gt;

&lt;p&gt;当遭遇重大挫折或是迷茫后，有些人一蹶不振，从此得过且过混日子，再也抬不起头。这样的人是大多数，这样的公司也是绝大多数。&lt;/p&gt;

&lt;p&gt;但总有那么些人和公司，他们会在痛苦中思索，反省，成长，蜕变，直到进化出第二曲线，重回新一阶段的成长。&lt;/p&gt;

&lt;p&gt;经历过挫折的打磨，可能他们的成长不如过去锋利、迅猛，但更加沉稳坚定。&lt;/p&gt;

&lt;h3&gt;在黑暗中保持乐观，在狂热中保持理性最难。&lt;/h3&gt;

&lt;p&gt;在失业下，没有收入来源时，甚至饥寒交迫时，你还能保持每天规律的作息，坚持运动，坚持学习，沉稳的心态，积极主动的态度吗？大多数人就像只发疯的苍蝇一般到处乱串，只有少数人冷静的对待，保持平稳心态，排除悲观情绪，积极乐观，主动出击。&lt;/p&gt;

&lt;p&gt;最黑暗的时候，最需要鼓起勇气面对，积极乐观向上，而大多数人即使明白这个道理也做不到，所以只有少部分人突出重围，从下层突围到中层，或者从中层突围到上层，甚至从上层突围到顶层。&lt;/p&gt;

&lt;p&gt;反过来说，如果现在社会安定，每个人都很有钱，工作机会很多，工资都很高，股价房价涨涨涨，并没有多少需要担心的事，大家只需要掏出钱来买买买，尽情享受躺着赚钱就行的时候，我们是否还能做到居安思危，让未来更加有保障吗？可以说，大多数人都沉浸在享受中，而并没有对未来有可能发生的灾难提高警惕。&lt;/p&gt;

&lt;p&gt;对狂热的不理性，才会有这么多倾家荡产的悲剧发生。&lt;/p&gt;

&lt;h3&gt;大多数人，还是逃不过遭难的，只有少部分人可以。&lt;/h3&gt;

&lt;h3&gt;大多数人都会沦为平庸平凡的一生，而只有少部分人才真正为自己创造了“运气”，成为新一代的领导者。&lt;/h3&gt;

&lt;h3&gt;这些少部分人，就是那些，自律，努力，积极，勇敢的家伙们。&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>中国，顶住！！</title>
   <link href="http://www.luzexi.com/2018/08/17/%E4%B8%AD%E5%9B%BD%E9%A1%B6%E4%BD%8F.html"/>
   <updated>2018-08-17T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/08/17/中国顶住</id>
   <content type="html">&lt;h6&gt;在美国主导的加息和减税的政策下，美元强势回流，全球汇率大幅度波动，很多新兴国家混乱不堪，陷入经济危机，金融危机中，国家经济陷入倒退。&lt;/h6&gt;

&lt;h6&gt;中国也没能幸免，今年股，汇，商品，三杀，经济数据糟糕。&lt;/h6&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;确实中国存在很多问题，但美国难道问题不大吗，美国也存在诸多问题，甚至比中国还要多还要大。只是现在它的霸主地位，很多问题被掩盖了。&lt;/p&gt;

&lt;p&gt;而现在在中国，太多人崇洋媚外，特别是这个时候，中国经济最困难的时候，出汉奸的概率很大。&lt;/p&gt;

&lt;p&gt;说实话，美国确实强大，他的霸主地位无人能撼动，这是由历史原因造成的，但也不至于去投靠，连尊严都不要吧。&lt;/p&gt;

&lt;p&gt;我们可以学习，可以借鉴，但不可以放弃尊严选择去无脑膜拜。中国现在是世界经济第2大国，难道这还不足以说明中国的强大吗？！&lt;/p&gt;

&lt;p&gt;中国只需要一个机会就能颠覆美国。只要美国犯一个致命错误，比如次贷危机，内乱内战，或者陷入全面对外战争那种就可以。但这个机会一直没有出现，可能需要等上4，5十年。&lt;/p&gt;

&lt;p&gt;在两国都没有陷入危机的情况下，就会始终保持这种被压制的局面。打破平衡，需要大事件。&lt;/p&gt;

&lt;p&gt;现在最严重的问题是，境内外势力正在合力搞垮中国。那些近几年没赚到钱或者亏钱的人都站在欧美势力上了，汉奸会越来越多。&lt;/p&gt;

&lt;p&gt;真的要当心啊，每个新兴国家，在没达到霸主地位前，任然在发展中的情况下，一直都会有这种问题，不断有崇洋媚外的人冒出来，不顾国家利益的鼓动人民投靠他国。那些无法冷静的，没有独立思考的人民，就会像热锅上的蚂蚁一样乱了阵脚。&lt;/p&gt;

&lt;p&gt;我们任然是新兴国家，被美国收割是正常的，这场风暴是美国一手主导的，目的就是收割新兴国家。但太多人投靠美国，导致信心挫败。&lt;/p&gt;

&lt;p&gt;这几年中国肯定艰难痛苦，反转只能靠政府自己，人民群众是靠不住的。&lt;/p&gt;

&lt;h6&gt;人民只会关心自己的利益，而不顾国家的利益，幸好国家是一党专政制度，否则后果不堪设想：政变，大规模示威游行，甚至军变，内战都有可能。&lt;/h6&gt;

&lt;h6&gt;美国就希望看到中国内乱，内战，这样他的目的就达到了。一旦内乱，经济地位，全球地位就不保，错失了这个地位，未来再重返，将难上加难。&lt;/h6&gt;

&lt;h3&gt;中国千万要顶住！！！！&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>白领投资探讨(四) 流动性探讨</title>
   <link href="http://www.luzexi.com/2018/08/13/%E7%99%BD%E9%A2%86%E6%8A%95%E8%B5%84%E6%8E%A2%E8%AE%A84.html"/>
   <updated>2018-08-13T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/08/13/白领投资探讨4</id>
   <content type="html">&lt;h1&gt;白领投资探讨(四)&lt;/h1&gt;

&lt;p&gt;流动性探讨&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;从交易流动性谈起，在股票和期货市场上做交易，交易量就是流动性，如果没有流动性，就相当于买卖的人少，从而导致少数人决定大多数人价格的情况。&lt;/p&gt;

&lt;p&gt;打个比方一个市值100亿的企业股票，每天的交易量为100万，今天涨5%，那么就是说，这100万导致了100亿的资金躺着赚了5个亿。一个区区100万，却能影响100亿的资金，是不是很不正常。流动性缺失导致的，因为没人交易所以才会使得100万影响100亿。今天会因为这100万的交易涨5%，明天也会因为这100万的交易量而跌10%，甚至20%，这种可能性很大。&lt;/p&gt;

&lt;p&gt;流动性可以比喻为人流，交易的标的可以比作为一座城市，一座城市如果没有人流那就是个空城，如果有人在一座人烟稀少的城市做生意会如何，一个面包卖1块钱也会可能没人要。即使因为空城导致的供给短缺价格上涨，有人卖100块一个面包，那又怎样，每个月就那么1-2个人来买你这个100块的面包，你永远赚不到大钱，而且随时有亏本的风险，因为这1-2个人随时可能离开，你随时会因为没人来买而亏本破产。在这种城市里做生意是十分危险的，即便你垄断了货物，也有可能破产亏本，因为趋势是空城越来越空，人越来越少，交易越来越少。&lt;/p&gt;

&lt;p&gt;因此流动性差得地方价格特别容易有特别大的起伏，今年1块钱一个，明年100块钱一个，但买卖交易的人永远都只会是那么一两个。大的资金是绝对不会去那种地方的，因为即使在1块钱买进仓库的面包，在价格涨到100块的时候卖出，也卖不了几个，没人来接盘，大量的面包堆积在仓库卖不出去。&lt;/p&gt;

&lt;h3&gt;聪明的富人远离流动性差的投资产品是有道理的，他们知道倘若没人做他们的对手盘，没人愿意接盘怎么做都是死永远赚不到钱，而且随时有把所有钱都亏完的风险，他们何必要冒这么大的风险做这种愚蠢的事。只有没有钱的穷人，眼里只看到价格的穷人，才会冲进去交易厮杀，最终的结果是没人能赢，因为交易本身就是个负和游戏，买卖双方在交易完成时就要交一笔费用，交易税。&lt;/h3&gt;

&lt;p&gt;那么流动性大，到底有什么好处呢？&lt;/p&gt;

&lt;h3&gt;1，当参与者众多的时候，能平摊风险。要明白，交易是人创造出来，人的思维具有多样，有人看多就有人空，否则，怎么会有成交，就因为有人卖有人买才能成交。卖的人看空，买的人看多，人越多，多样性越复杂，随时随地有看空的转为看多，看多的转为看空，多空一直在随着时间的推移不断得变化，人越多这种多样性就越多，变化也就越复杂。&lt;/h3&gt;

&lt;p&gt;所以我们说股价是不可控的，无论你精通多少数学方法，AI计算，宏观经济，企业财报都无法知道股价的走势。这不仅仅是在流动性大的地方不可控，在流动性少的地方也一样不可控，因为交易本身就是由人创造出来的，人这种生物本身就是不可控的，虽然我们因为这种不可控导致获得了很多好处，比如发明新的理论，发现新的大陆等。&lt;/p&gt;

&lt;p&gt;那么越多的多样性怎么就能平摊风险了呢？就因为多样性才能平摊风险，不至于预期一致性，比如一致看空无人看多的情况，一个几百亿市值的公司，一夜市值归零，就是一致看空导致的结果，所有人都不看好，没人看好的结果就是踩踏，挤兑，巨幅下跌。&lt;/p&gt;

&lt;p&gt;但是如果有足够多的多样性会如何？即使再大的坏消息，依然有人看多，那些人认为坏消息固然不好，但是跌的太过，完全超出了坏消息的影响幅度，或者有人认为利空消息是有人恶意编造，或者有人认为利空消息有可能会转折，甚至会有人认为利空消息并不一定是坏消息也有利于管理层认清现实在今后的工作中更加有效对待现有的漏洞。&lt;/p&gt;

&lt;p&gt;这些多样性导致大量的买入操作，从而让更多人相信跌的太多，或者有希望将利空消息转为利好消息，从而随着时间的推移，看空转看好的人越来越多，致使不至于导致非常糟糕的一致性预期，踩踏，挤兑等。&lt;/p&gt;

&lt;p&gt;这就是流动性的好处，让更多的多样性来平摊风险，而不至于让预期一致性发生而导致一瞬间破产。&lt;/p&gt;

&lt;h3&gt;2，吸引更多资金参与，有更多接盘可能的选择。流动性好的地方，因为交易的频繁，导致交易量大，比如1天几十亿资金的交易量，待在里面的1个亿体量的基金会很放心，随时都可以在几天之内把自己手上的股票抛完，也可以在几天之内买进几亿的股票而不让股票大幅上升而增加自己的持仓成本。&lt;/h3&gt;

&lt;p&gt;所以更多的资金愿意参与进来，因为大家知道，自己随时都能套现走人，而不用顾忌被埋，他们更多的专注是企业的内在，企业的核心资产，核心技术，技术壁垒，管理层人员，行业供给等。&lt;/p&gt;

&lt;p&gt;当资金认为这个企业有美好未来时候，它可以毫不犹豫的买入而不影响股价上涨带来的持仓成本抬高，相反，当他们认为美好未来不再，可以随时卖出而不影响股价下跌导致成交价下跌，因为接盘的人随时都有。&lt;/p&gt;

&lt;p&gt;流动性大导致，资金持有人可以不用考虑自己想卖的时候没人要。作为一个投资持有者，无论是你持有股票，还是期货，还是房产，都是一样的，最怕的不是卖的价格太低，而是卖不出去，没人愿意接盘，再低的价格都没人要的情况，因为那时候就相当于你手里持有的是一张废纸。&lt;/p&gt;

&lt;h3&gt;简单的来说，流动性差的地方更容易破产，一瞬间破产的概率较大，流动性大的地方虽然不能保证价格上升但可以保证不会一夜破产，并且会因为多样性多而得到有更多机会。&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第六章，网络层(三) - 实现UDP</title>
   <link href="http://www.luzexi.com/2018/08/07/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E7%BD%91%E7%BB%9C%E5%B1%823.html"/>
   <updated>2018-08-07T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/08/07/Unity3D高级编程之进阶主程-网络层3</id>
   <content type="html">&lt;h3&gt;实现UDP&lt;/h3&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;在前面介绍了如何实现TCP socket，下面要介绍下UDP的实现方式。其实两者都是长链接的方式，很多地方都有相识之处，比如两者都需要连接和断开事件支撑，都需要做发送和接收队列缓存，都需要定义数据包协议格式，都需要加密和校验。&lt;/p&gt;

&lt;p&gt;我们先来说说TCP有而UDP没有的部分，再看看需要我们在UDP上实现的有哪些功能。和TCP相比，UDP基本就是TCP的阉割版本，很多TCP本身自带有的功能UDP都没有，虽然它们最大的区别是数据传输的方式，但在接口和逻辑层上很难感觉到它们的区别，不过至少我们得知道它们传输的不同方式。相同的地方包括，大都以异步发送和接收的方式进行，以及都需要理解多线程同步的操作机制，还有发送和接收都需要缓冲队列，并且发送数据时都需要合并数据包(其实TCP可以不用，因为它本身就有确认和重发机制)。TCP有而UDP没有的地方包括，UDP不会自己校验重发，由于是数据报的发送模式丢包概率大，数据包接收顺序不确定，而且UDP本身没有连接状态导致没有连接断开这个机制，也没有连接确认机制。&lt;/p&gt;

&lt;p&gt;前面说了这么多关于TCP和UDP在程序上的区别就是要大家明白，直接使用UDP来做网络发送和接收会遇到诸多问题，可以说如果直接使用而不加修饰，使得不确定性太大，导致基本用不了UDP。因此这节我们来说说应该怎么封装才能让UDP顺利的使用在我们的项目上。&lt;/p&gt;

&lt;h6&gt;连接确认机制&lt;/h6&gt;

&lt;p&gt;TCP有连接的三次握手协议，相当于在连接过程中跟服务器端协商后敲定我们已经建立了连接这个一致预期，而UDP是无状态链接，它并没有三次握手的协议，所以可以说UDP的连接其实是一厢情愿的，客户端并不知道是否真正连接成功了，如果由于网络异常原因没有连接上，就会导致收发失败。其实怎么确认UDP连接上了服务器，这才是我们想要得到的反馈，我们需要准确的得知UDP连接是否已经成功连接上服务器，因此这个连接确认机制必不可少。&lt;/p&gt;

&lt;p&gt;发送和接收如果建立在连接确认的基础上则会更加牢靠，因此我们必须先确认知道我们是否连接成功。能够判断连接是否成功是整个实现UDP的第一步，只有这样才能顺利得进行下面的数据包收发操作。&lt;/p&gt;

&lt;h6&gt;我们应该怎么确认连接成功&lt;/h6&gt;

&lt;p&gt;很简单我们可以模仿TCP的确认连接机制，我们来看看TCP连接的三次握手在数据包上是怎么做的。&lt;/p&gt;

&lt;p&gt;1.首先客户端向服务器端发送一个数据包，里面包含了Seq=0的变量，表示当前发送数据包的序列号为0，也就是第一个数据包。&lt;/p&gt;

&lt;p&gt;2.务器端收到客户端的数据包后，发现Seq=0，说明是第一个包是用来确认连接的，于是给客户端也发送了一个数据包，包含了Seq=0，和Ack=1，表示服务器端已经收到客户端的连接确认包了，并且回应包Ack序列标记为1。&lt;/p&gt;

&lt;p&gt;3.当客户端收到服务器端给的回应数据包后，知道了服务器端已经知道我们想要并对方已经建立连接，于是向服务器端发送了一个数据包，里面包含了Seq=1，Ack=1，表示确认数据包已经收到，连接已经确认，开始发送数据。&lt;/p&gt;

&lt;p&gt;以上就是TCP的三次握手来确认连接的流程在数据包中的体现。&lt;/p&gt;

&lt;p&gt;在UDP下它自身并没有三次握手机制，为了建立更好的确认连接机制，我们可以模仿TCP三次握手的形式来确认连接。不过第3次握手稍微有点多余，我们可以省去最后一次握手的数据包，改为2次握手。步骤如下：&lt;/p&gt;

&lt;p&gt;首先在UDP打开连接后，在确认连接前不进行任何的其他类型的数据发送和接收，我们将这种发送数据包以确认连接成功与否的数据包称为握手包。&lt;/p&gt;

&lt;p&gt;在打开连接后，客户端先向服务器端发送一个握手数据包，代表客户端向服务器端请求连接确认信号的数据包，包内的数据仅仅是一个序列号Seq=0，或者不是序列号也行，它可以是一个特殊的字段。只要当服务器端收到这个握手数据包后能够识别该数据包为连接确认的握手包，也就是实现了第一次握手。&lt;/p&gt;

&lt;p&gt;服务器端在收到第一次握手数据包后，需要向客户端反馈一个握手数据包，里面同样带有客户端能识别的连接确认信号。当客户端接收握手数据包时说明发出去给服务器端的连接确认数据包有了反馈，并且收到了服务器握手数据包的反馈，也就是说第二次握手成功。在接收到了这个第二次握手连接确认数据包时，双方都可以认为是连接已经成功建立。&lt;/p&gt;

&lt;p&gt;整个UDP确认连接的握手过程，就相当于客户端和服务器端的一次交流，相互认识一下并且示意双方后面的交流即将开始。&lt;/p&gt;

&lt;p&gt;实现UDP连接确认具体步骤（伪代码）：&lt;/p&gt;

&lt;p&gt;1.首先使用API建立UDP连接：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SvrEndPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPEndPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UdpClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UdpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UdpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SvrEndPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码为使用C#的UDP接口对指定的IP和端口打开链接。&lt;/p&gt;

&lt;p&gt;2.启动接收数据线程：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UdpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BeginReceive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiveCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ReceiveCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAsyncResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mIPEndPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UdpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Receive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mIPEndPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UdpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EndReceive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mIPEndPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;OnData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUdpClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// try to receive again.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mUdpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BeginReceive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReceiveCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;UPD是无状态连接，打开连接就相当于只是一厢情愿的自我意识，因此可以立刻开始接收数据的接口并开启线程。&lt;/p&gt;

&lt;p&gt;3.发送连接确认数据包，并屏蔽其他发送和接收功能。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendConnectRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;StopSendNormalPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;StopReceiveNormalPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这三个函数是自定义的，第一个表示发送握手包，可以认为是为握手包特意定制的数据装载函数，第二个和第三个只是把普通的接收数据包的开关给关了，在连接还没确认前不接收任何其他形式的数据包，实际上接收数据包仍在继续，只是不加入到数据处理队列且也不处理数据的具体句柄。&lt;/p&gt;

&lt;p&gt;4.等待接收连接确认数据包：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsConnected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IsConnectResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;OnEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ConnectSuccess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IsConnected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ProcessNormalData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这是接收到数据的处理过程，先判断是否当前是否已经处于连接状态，再判断该数据包是否为握手数据包，如果确认是握手数据包的话，那意味着服务器收到了握手数据包并且做出了回应，连接可以确认了。因此在这里发出了连接确认事件，并且标记连接为确认状态。&lt;/p&gt;

&lt;p&gt;5.连接握手数据包收到后，说明确认连接已经成功建立，于是就可以开启正常发送和接收数据包的功能。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProcessNormalData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsConnected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;DealNetworkData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经过与服务器端数据包的来回，UDP完成了2次握手的确认机制，已经可以认定为连接已经成功建立，这里是正常数据包处理过程，包括识别，装载，推入队列，检测是否丢失，是否需要重发等。&lt;/p&gt;

&lt;h6&gt;检测连接是否依旧存在&lt;/h6&gt;

&lt;p&gt;UDP自己不能判断连接是否断开，因为它是无状态的连接，打开即完成连接关闭即完成断开，因此需要我们自己来做断线检测，检测的方式也与我们前面说的如何主动检测TCP连接状态的心跳包类似，因为这种方式是花费最小的代价并且能够及时准确的确认连接的方式。因此UDP检测连接的判定机制，也可以用数据包来回的形式，不过这次不像握手数据包那样只是单一一个数据包，而是持续的心跳包的形式来做持续的判断连接状态。&lt;/p&gt;

&lt;p&gt;首先，我们要与服务器端有个协定，每隔X秒（比如5秒）发送一个心跳数据包给服务器端，这个客户端发送的心跳数据包里包含了一些客户端信息，包括ID，角色状态，设备信息等，包体不能太大，否则会就加重了宽带负担。&lt;/p&gt;

&lt;p&gt;当服务器端收到心跳数据包时，也立刻回复一个心跳数据回应包，里面包含了，服务器端当前时间，服务器端当前状态等信息。客户端收到此数据包时，说明连接尚在，也能同时同步服务器端的时间和一些基础的信息。&lt;/p&gt;

&lt;p&gt;如果客户端很久没有收到心跳数据回应包时，就表明，连接已经断开了，比如30秒没收到心跳包，可以判断连接已经断开。服务器端也是一样操作，当没有收到心跳包很久，就表明客户端的连接已经断开。这时客户端就可以开启相应的重连程序，或重连提示以及步骤。&lt;/p&gt;

&lt;p&gt;步骤可以分为如下4步：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1.每隔X秒向服务器端发送心跳数据包。

    2.服务器端收到心跳数据包后回复心跳响应数据包。

    3.如果客户端和服务器端都很久没有收到心跳数据包，比如30秒，则判定连接断开。

    4.当判定为连接断开，则主动断开连接并发起断开连接事件，通知客户端提示用户，或者重新创建连接，服务器端则是处理与之相关的数据处理操作。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里不只是客户端主动发送数据包给服务器，也可以反过来服务器主动发送数据包给客户端的形式检测连接是否断开。&lt;/p&gt;

&lt;h6&gt;数据包校验与重发机制&lt;/h6&gt;

&lt;p&gt;我们前面说UDP相当于是TCP的阉割版，其中UDP最关键的阉割部分就是校验和重发机制。没有校验和重发机制，意味着发送端无法知道数据包的发送是否到达，丢失了也无法重新发送的机制来补充丢失的数据包，因此我们需要自己编写增加对数据的校验和重发机制来确保数据的可靠性。&lt;/p&gt;

&lt;p&gt;TCP已经有校验和重发机制，我们可以模仿它的校验和重发机制，把它搬到UDP上，并在此基础上加以改进，这样我们即有了UDP的速度，又有了TCP的可靠性。&lt;/p&gt;

&lt;p&gt;我们先来看看TCP是如何做数据包的校验和重发的：&lt;/p&gt;

&lt;p&gt;先解释几个英文名词Seq和Ack。Seq即Sequence Number，为源端（source）的发送序列号；Ack即Acknowledgment Number，为目的端（destination）的接收确认序列号。&lt;/p&gt;

&lt;p&gt;1.首先A端向B端发送数据包，TCP的包头中里面包含了字段Seq(sequence number)序列号值为1(即已经发送的数据包的累计大小)，比如这次A向B发送的数据包大小为264，则size大小为264。&lt;/p&gt;

&lt;p&gt;2.B端收到传过来的数据包后，知道了当前连接的这个数据包的序号为1，也就是连接后第一个数据包。于是向A端发送了一个确认包，确认包中包含了的Ack=264(接收到的数据包的累计大小)，告诉A端我B端已经收到了数据包，现在累计接收大小为264的数据包。&lt;/p&gt;

&lt;p&gt;3.A端收到B端发来的确认数据包时，会检测累计发送大小和累计接收大小是否一致，如果发现累计接收大小与累积发送大小不一致则认为传输错误启动重传机制，退回到最后一次正确的的数据包位置进行重传，以保证可靠性。&lt;/p&gt;

&lt;p&gt;4.如果大小比较一致，则认为B端准确收到了数据包，A端可以继续发送其他数据包，当再次发送时里面包含的Seq序列号更改为了265，意思为累计发送数据大小，假如这次发送的数据包大小为100，则size字段填写100，B端接收到后再向A端发送确认包，确认包中包含了Ack=365，意思是已经累计收到数据包大小为365。当A端收到确认包时会先对比一致性，如果累计大小错误，请启动重传机制，确保可靠性。以此类推&lt;/p&gt;

&lt;p&gt;5.如果是由B端向A端发送数据也是同样的步骤。B端向A端发送数据也是同样的方法和步骤。数据包中包含了B端的Seq(已经发送的数据包大小)，比如累计发送了1，seq=1，这次数据包大小为585，A端接收到B端的数据包后，向B端发送确认包，包中包含了B端发过来的Ack  =586，B端收到确认包后，就知道了累计接收的数据包大小已经到了585，也就是说当前的数据包已经发送成功。如果累积发送和累积接收数据不一致则启动重发机制，从最近的正确确认点开始发送数据。&lt;/p&gt;

&lt;p&gt;序列号确认机制是TCP可靠性传输的保障，除了累积接收大小和累积发送大小的比较外，若在规定的时间内收到确认数据包就表明该报文发送成功，可以发送下一个报文，如果超过时间则启动重传（TCP Retransmitssion）。&lt;/p&gt;

&lt;p&gt;我们可以借鉴TCP的方法，UDP也可以用此方法来做检测和重传。不过TCP接收和发送累积大小的检测方式使得重传量比较大，一旦会导致失败重传整个数据，重传内容太多。因此它不能准确快速的定位重传的数据包，由于中间数据包的丢包，导致已经到达的数据也需要重传，这种类型的可靠性保证的依赖于消耗大量的带宽消耗。&lt;/p&gt;

&lt;p&gt;因此我们在实现UDP的检测和重传时，我们可以进行如下的改进。&lt;/p&gt;

&lt;p&gt;1.A端向B端发送数据包，数据包中包含Seq=1(表示数据包的发送序列)，发送后将此数据包推入到已经发送但还没有确认的队列里。&lt;/p&gt;

&lt;p&gt;如果B端接收到Seq=1的数据包，就回应客户端一个确认包，包中Ack=1，表示Seq=1的包已经确认收到。&lt;/p&gt;

&lt;p&gt;如果B端没有接收到数据，客户端X秒后发现仍然没有收到Seq为1的确认包，判定为Seq=1的数据包传输失败，从已经发送但未确认的数据包队列中取出Seq=1的数据包，重新发送。&lt;/p&gt;

&lt;p&gt;2.例如A端向B端发送了10个数据包，分别是Seq=1，2，3，4，5，6，7，8，9，10，服务器收到的序列是，1，3，4，5，7，8，9，10，其中有2，6，没有收到数据包。&lt;/p&gt;

&lt;p&gt;A端在等待确认包超时后，对2，6进行重传。在B端接收到数据包后，处理数据包时，如果数据包顺序有跳跃的现象就表明数据包丢失，就等待A端重传，这时就在断开的序列处停止处理数据包，等待重传数据包的到来。&lt;/p&gt;

&lt;p&gt;3.B端也可以做加快重传确认时间的处理。A端向B端发送5个数据包，分别是Seq=1，2，3，4，5，B端收到的包的序列是1，3，4，5，当收到3时，发现2被跳过1次，当收到4时发现2被跳过2次，立刻向A端发送确认包要求启动2的重传，这样就加快了丢包重传的确认速度。&lt;/p&gt;

&lt;h6&gt;丢包问题分析&lt;/h6&gt;

&lt;p&gt;UDP丢包多是很正常现象，这是UDP牺牲质量而提高速度的代价。UDP丢包的原因很多，我们这里做个分析。&lt;/p&gt;

&lt;p&gt;1.接收端处理时间过长导致丢包：&lt;/p&gt;

&lt;p&gt;当调用异步接收数据方法接收到数据后，处理数据会花去一些时间，处理完后再次调用接收方法，在这二次调用间隔里发过来的包可能会丢失。&lt;/p&gt;

&lt;p&gt;要解决接收方丢包的问题其实很简单，首先保证程序执行后马上开始监听（如果数据包不确定什么时候发过来的话），其次要在收到一个数据包后最短的时间内重新回到监听状态，其间要尽量避免复杂的操作。&lt;/p&gt;

&lt;p&gt;对于这种情况可以修改接收端，将包接收后存入一个缓冲区，然后迅速返回继续开启接收线程。或者使用前面提到的双队列机制，来缩短锁队列的时间从而解放了处理包的时间和接收数据包的线程之间的冲突，让两个线程能迅速回到自己的‘岗位’上做自己的事。&lt;/p&gt;

&lt;p&gt;2.发送的包巨大导致丢包概率加大：&lt;/p&gt;

&lt;p&gt;虽然Send方法会帮我们做大包切割成小包发送的事情，但包太大也不行。例如超过50K的一个udp包，不切割直接通过send方法发送也会导致这个包丢失。&lt;/p&gt;

&lt;p&gt;发送的数据包较大是个危险的行为，如果超过接收者缓存将大概率导致丢包，一般当包超过MTU大小的数倍就会增大丢包的概率。&lt;/p&gt;

&lt;p&gt;什么是MTU，即Maximum Transmission Unit的缩写，意思是网络上传送的最大数据包。大部分网络设备的MTU都是1500，如果本机的MTU比网关的MTU大，大的数据包就会被拆开来传送，这样会产生很多数据包碎片增加丢包率，从而增加重发概率导致降低网络速度。&lt;/p&gt;

&lt;p&gt;报文过大的问题可以通过控制报文大小来解决，使得每个报文的长度小于MTU。以太网的MTU通常是1500 bytes，其他一些诸如拨号连接的网络MTU值为1280 bytes，如果使用speaking这样很难得到MTU的网络，那么最好将报文长度控制在1280 bytes以下，这些都是经验之谈。&lt;/p&gt;

&lt;p&gt;3.发送的包频率太快：&lt;/p&gt;

&lt;p&gt;虽然每个包的大小都小于MTU大小但是频率太快，例如40多个MTU大小的包连续发送中间不休眠，也有可能导致丢包。&lt;/p&gt;

&lt;p&gt;这种情况可以通过建立Socket接收缓冲队列解决，以及通过建立发送缓冲队列来解决，并且在发送频率过快的时候考虑线程Sleep休眠一下作为时间间隔。&lt;/p&gt;

&lt;p&gt;这里有些人会不理解发送速度过快为什么会产生丢包，原因是UDP的发送数据是不会造成线程阻塞的，也就是说UDP的发送不会像TCP中的发送数据那样直到数据完全发送才会返回回调用函数，UDP并不保证当执行下一条语句时前面的数据是否被发送，它的发送接口是异步的。&lt;/p&gt;

&lt;p&gt;如果要发送的数据过多或者过大，那么在缓冲区满的那个瞬间要发送的报文就很有可能被丢失，一般一秒钟几个数据包不算什么，但是一秒钟成百上千的数据包就不好办了。&lt;/p&gt;

&lt;p&gt;以上是UDP的实现细节，同时阐述了UDP的实现难点和注意点。&lt;/p&gt;

&lt;p&gt;参考文献：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1， 基于TCp的数据包传输过程
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第六章，网络层(二) - 实现TCP</title>
   <link href="http://www.luzexi.com/2018/08/07/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E7%BD%91%E7%BB%9C%E5%B1%822.html"/>
   <updated>2018-08-07T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/08/07/Unity3D高级编程之进阶主程-网络层2</id>
   <content type="html">&lt;h3&gt;程序实现TCP长连接。&lt;/h3&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;前面讲了很多关于协议的介绍和一些底层的知识，这节我们从原理出发在程序上实现协议的通信。我们先从整体出发，列一下实现TCP连接需要的考虑哪些方面：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1， 建立连接

    2， 断线检测

    3， 网络协议

    4， 发送和接收队列缓冲

    5， 发送数据合并

    6， 线程死锁策略
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面6个方面是程序在建立和实现连接的必备要素，我们下文将依次讲解如何来对此作出程序上的实现。&lt;/p&gt;

&lt;p&gt;TCP本身已经具备有数据包可靠性确认，以及丢包重发机制，数据包的大小也没有做限时，从TCP那里我们可以把免费得到的这些功能。所以在实现TCP的连接中不需要我们再做包括：包体的校验、包体的拆分，以及重发数据包，省掉了很大一部分麻烦。我们只需要做的就是建立连接，发送，以及接收，三个步骤，以及这三个步骤引起的一系列问题的对策。不过如果不对发送数据进行合并，就会有很多小的数据分批发送，导致发送效率降低。所以我们下文中会提到关于发送合并的问题。&lt;/p&gt;

&lt;h6&gt;介绍下TCP的API库&lt;/h6&gt;

&lt;p&gt;c#的.net库提供了 TCP 的 Socket连接API，我们来看看c#的.net库中的这些API的用法。&lt;/p&gt;

&lt;p&gt;一般情况下我们不会去用阻塞方式连接和接收，因为我们不会让你的游戏卡住不动来等待连接，因为这有可能导致崩溃，所以连接，接收，断开都是异步的线程操作。同步阻塞的操作可能会在周边工具中会用到，比如编辑器的工具，回放工具，GM的工具等，但其他大部分时候都会更加平滑的异步操作作为网络连接和收发操作。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    BeginConnect，开始连接

    BeginReceive，开始接收信息

    BeginSend，开始发送数据

    BeginDisconnect，开始断开

    Disconnect(Boolean)，立刻断开连接
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上锁接口中前四个都是异步的，调用后会开启一个线程来工作，最后一个为同步阻塞方式的断开连接接口。最后一个阻塞式大都在游戏退出时调用，但问题是APP没有退出事件，因此一般Disconnect都会用在Unity3D Eitor下或者windows版本上调用，以保证在开发时强制退出后编辑器不会奔溃。&lt;/p&gt;

&lt;h6&gt;线程锁&lt;/h6&gt;

&lt;p&gt;实际项目中网络模块中所有的操作都会以线程级的形式对待，而Unity3D的渲染和逻辑都是在主线程上运作的，这里就涉及到了主线程和子线程对资源抢占冲突导致我们需要做线程锁的问题。&lt;/p&gt;

&lt;p&gt;当主线程与子线程一起工作到某时间点都需要某个内存块或者资源时，就会同时去读取或者写入资源，这就会造成资源读写混乱的情况。因此在所有线程上，在调用有冲突的资源时，都需要做锁的操作，以防止线程们在读取或写入操作时对资源错误的争夺。&lt;/p&gt;

&lt;p&gt;我们拿网络接收数据的线程来举例，接收线程在接收到网络数据后将数据推入到队列里，在push操作上就需要做锁的操作：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Push&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;另一边当主线程在读取网络数据时，当需要推出一个数据时，在推出元素操作上也需要加一个锁的操作。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Pop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由于两边的线程都需要对队列进行操作，所以每次对线程共享的资源进行操作时，都需要先进行锁确认的操作，以避免线程争夺资源而造成混乱。我们拿在海上航行的运输船来做比喻，每个线程都是一条船，每条船都在各自做着自己的事，直到两条船都要进港口卸货，港口几条卸货的通道，它们不得不排队等待前面的船只卸完才能轮到自己，每次它们(可以认为是线程)都会去查看是否有空出来的航线，如果有则先按下标记说我先占了，其他船只在查看时则会看到已被占用的标记则继续等待。&lt;/p&gt;

&lt;h6&gt;缓冲队列&lt;/h6&gt;

&lt;p&gt;在网络收发时，数据会远远不断进行发送和接收，很多时候程序还没处理好当前的数据包，就已经有许许多多的数据包从服务器已经传送到达了客户端。发送数据也是一样，会瞬间积累很多的需要发送的数据包，这些数据包如果没有保存好则无法进行重发甚至丢失，所以我们需要用一个队列来进行存储和缓冲，它就被称为缓冲队列。&lt;/p&gt;

&lt;p&gt;一般我们会让负责接收的子线程把接收好的网络数据包放入接收缓冲队列，再由主线程通过Update轮训去检查接收队列里是否有数据，有的话则一个个取出来处理，没有的话继续轮训等待。&lt;/p&gt;

&lt;p&gt;下面伪代码表达了，主线程每帧检查一下是否有收到信息，检测到就立刻处理，没有的话下一帧继续轮训检测。如果没有信息接收来时，子线程上会阻塞等待直到有消息接收到才会调用接收消息接口，将数据包解析后推入接收队列。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;/////////////////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//接收线程等待接收数据并推入队列&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BeginReceive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Receive_Callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogerType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;StackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;DisConnect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Receive_Callback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAsyncResult&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PushNetworkData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//将数据推入队列&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Receive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//继续接收数据消息&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;///////////////////////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//主线程处理数据队列里的数据&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;While&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PopNetworkData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DealNetworkData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的伪代码中，首先有子线程的等待接收数据，接收到数据以后就立即将数据推入队列。另一面，主线程一直在轮询是否有已经接收到的网络数据，如果有就立即逐个处理全部数据。&lt;/p&gt;

&lt;p&gt;其中接收数据时会有些细节在里面，因为数据包并不会按照我们希望的大小发送，所以它或多或少的都会拆分一些数据或者粘粘了其他的数据，导致我们需要识别是否是一个完整的数据包，然后再从中解析出正确的数据包。这部分的数据包格式定义我们把它挪到了后面的章节中，在网络协议格式章节中进行详细的讲解。&lt;/p&gt;

&lt;h6&gt;双队列结构&lt;/h6&gt;

&lt;p&gt;前面提到的缓冲队列是在多线程编程中常用的手段之一，不过它的效率还不够高，因为多个线程的锁的效率影响会被锁点卡住导致其他线程无法继续工作。双队列数据结构就能很好解决这个问题，它能增强多线程中队列的读写效率。&lt;/p&gt;

&lt;h6&gt;双队列是一种高效的内存数据结构，在多线程编程中能保证生产者线程的写入和消费者的读出尽量做到最低的影响，避免了共享队列的锁开销。&lt;/h6&gt;

&lt;p&gt;在大多数多线程工作时都需要对缓冲队列读写，其中接收数据的网络线程会将数据写入队列，而处理数据的主线程则会读取队列头部并删除(即我们所说的弹出)，两者都会读写队列导致资源争夺，因此通常会增加锁机制来规范它们的行为。但是锁机制导致线程会常常处于等待状态，因为占用的线程需要处理些复杂的逻辑导致其他线程需要暂停很久才能继续工作，因此加入了线程锁的机制后，仍然没能很好的解决两个线程顺畅操作一个队列的问题。实际项目中处理响应数据逻辑的主线程需要花很久的时间去处理网络数据使之反应到画面上，这时接收数据的线程因为接收队列被主线程锁住而不能继续自己的工作去接收数据，所以子线程只能等待资源使用完毕后才能使用资源，当这个接收到数据所需要处理的逻辑很多很复杂时，那么子线程就要等很少时间，大大降低了线程了效率。&lt;/p&gt;

&lt;p&gt;用双队列的形式就能让线程处理队列时解放出来，让线程的效率大大增加，使得各线程能够各自处理调用各自的队列处理而不用因为资源锁而等待。双队列与普通的缓冲队列在接收数据包部分的逻辑操作都是一样的，即接收数据线程接收到数据时直接推入接收数据的队列，不一样的地方在当处理数据的线程轮询时，先将接收数据的队列拷贝到处理数据的队列中并清空接收数据的队列，然后主线再对拷贝后的数据队列进行处理，这时子线程无需等待主线程的逻辑处理时间就能够顺利的继续接收数据。这样就解放了两个线程各自工作的冲突时间，即两个队列分别理解为了接收数据队列和处理数据队列，当主线程需要处理数据时，先把接收到的数据队列中的数据置换为处理数据队列上，最后各自继续处理自己的工作因为队列已经分开。&lt;/p&gt;

&lt;p&gt;我把最关键部分提取出来用伪代码描述，如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;/////////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//子线程中，接收数据线程&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Receive_CallBack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Pushdata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/////////////////////////////////////////&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//处理数据的主线程&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SwitchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receiveQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produceQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SwitchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PopQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Deal_with_network_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述伪代码中，首先是对子线程的接收部分描述，当接收到数据包时与普通的接收一样只需将数据推送到接收队列中即可，当主线程需要处理数据时，先切换队列防止对队列占用过多时间，切换完毕后，再对队列中的全部数据进行处理。&lt;/p&gt;

&lt;p&gt;这样一来两个线程在锁上的时间变短了，原本要在处理期间全程上锁导致其他线程无法使用，现在只在切换那一瞬间锁上资源即可，其他时间各线程都能顺畅得各自做自己的工作，这样大大提高了多线程的工作效率。&lt;/p&gt;

&lt;h6&gt;发送数据&lt;/h6&gt;

&lt;p&gt;我们前面说的都是接收时的队列，发送数据时也需要队列来做缓冲。当发送的数据包会很多时，也有可能很短时间内会积累过多数据包导致发送池溢出。如果发送时大多数的数据包都是很小很小的数据包，如果每个数据包都发送一次等待接受后再发送就会导致发送效率过低，发送太慢导致延迟过大。而如果一下子把全部数据都发送的话，发送的数据可能会太大，导致发送效率很差，因为数据包越大越容易发送失败或丢包，TCP就会全盘否定这次发送的内容，并将整个包都重新发送一次，效率极其糟糕。&lt;/p&gt;

&lt;p&gt;因此我们需要自己建立发送缓冲来保证发送的有序和高效，发送队列以及对发送数据的合并就是很好的策略。其具体步骤如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1，每次当你调用发送接口时先把数据包推入发送队列，发送程序就开始轮训是否有需要发送的信息在队列里，有的话就发送，没有的话就继续轮训等待。

    2，发送时合并队列里的一部分数据包，这样可以一次性发送多个数据包以提高效率。

    3，对这种合并操作做个限制，如果因为合并而导致数据包太大，也会导致效率差。发送过程中，只要丢失一个数据就要全盘重新发送，数据包很大的话，发送本来就很缓慢的情况下，又重新整体重新发送，就会使得发送效率大大降低，合并的数据的大小限制在窗口大小的范围内(2的16次字节内)。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们既要合并数据包，又不能让数据包太大，这样才能保证发送的效率比较高。比如我们做个合并后的数据包大小限制不得超过10K。这样每个数据包大小都处于10K以下的大小，除非单个包大于10K就让他单独发送，且每次发送包含了多个数据包，这样发送效率就有了一定的保证。&lt;/p&gt;

&lt;h6&gt;协议数据定义标准&lt;/h6&gt;

&lt;p&gt;在网络数据传输中协议是比较重要的一个关键点，它是客户端与服务器交流的语言。&lt;/p&gt;

&lt;p&gt;协议简单来说就是客户端和服务器端商讨后达成一个对数据格式的协定，是客户端与服务器进行交流的语言，假如两边都用Json格式的协议来传输数据，两边都能用根据协议的格式来知道对方传达了什么信息，以及我的信息如何传达给对方。这样两边在发送和收到数据时，都能够按照一定的规则识别数据了。&lt;/p&gt;

&lt;p&gt;我们在实现TCP的程序里需要对协议进行商讨，下面讲一下在制定协议过程中的几个关键点：&lt;/p&gt;

&lt;h6&gt;1.选择客户端和服务器都能接受的格式。&lt;/h6&gt;

&lt;p&gt;并不是所有的格式都适合，我们最好选择前后端都能接受的协议格式是最重要的，因为合作最重要，个人力量和一个协议格式的力量与团体来说都是渺小的。在团队都理解和一致的情况下，再对协议进行精进，选择更好更高效的协议。&lt;/p&gt;

&lt;h6&gt;2.数据包体大小最小化。&lt;/h6&gt;

&lt;p&gt;为了尽可能的减少包体的大小，我们应该选择一些能节省包大小空间的格式，比如google protocol buffer 或者其他变种，具体还是要看团队和项目的情况。也可以对已经确定的协议格式，对其协议包的主体部分使用压缩算法，我不建议只加入压缩算法而不改变协议本身，因为这样会导致对压缩算法过度依赖进而省略了协议本身的浪费空间，比如你用了压缩算法后发现xml或json格式的协议也还过得去就不再更改协议本身了，这样就会导致后期数据量大时数据包变得很大很沉重，传输效率降低。但很多老旧的项目和一些为了加快速度而不去更换更好的改协议的项目情况也时常发生，它们只启用压缩算法而不改变协议本身很多时候也是无奈之举。&lt;/p&gt;

&lt;h6&gt;3.要有一定的校验能力。&lt;/h6&gt;

&lt;p&gt;当数据包体不完整时或者本身包体后面连接着另外的数据包时(即粘包情况)，我们要能识别。很多时候我们在传输数据的时候，收到的并不是一个完整的包体，或者因为网络关系，收到了错误的，甚至被攥改过的数据，我们要有能力去校验他们。因此在数据包完整性上，我们要能有校验能力和识别完整包体范围的能力。&lt;/p&gt;

&lt;h6&gt;我们这里主要聊一下网络数据包的校验能力，各种包体的协议格式会在后面章节中详细讲解。&lt;/h6&gt;

&lt;p&gt;在接收数据的时候，有时候会是一个不完整的包或者一个包后面跟着另一段不完整的包，我们怎么识别哪里是头部数据，并且数据块是哪些？为了解决这些问题就有了数据格式的意义，通常两端通信的协议数据格式，分为包头和数据块两部分组成，这和我们前面介绍的TCP和UDP的包头数据一样，我们自己定义的格式也需要包头用来作为我们业务层的协议格式。&lt;/p&gt;

&lt;p&gt;通常头部数据由4-8个字节组成，里面通常包含了数据包大小，加密方式，广播方式等数据位。其中比较重要的是数据包大小，一般数据大小为4个字节，这4个字节代表的是数据块得大小size，有了这个数据后面数据块得大小就能知道了。因为每次拿到网络数据的时候我们先取头部规定好的几个字节，这样就知道了后面数据块的大小，接着再读取size大小的数据块，这样就拿到了数据信息，如果接收到的数据块大小部满足size大小，则需要继续等待。&lt;/p&gt;

&lt;p&gt;比如再做的复杂点，把数据块的标示也融入头重，每个标示为一个2字节的正整数，为了确定调用的是哪个逻辑具柄的，我们可以把数据包分成，头、固定标识信息、数据块，三个部分。头部存储包体大小、加密位、广播方式等信息，标识信息则存储例如句柄编号、序列号、特殊命令编号、校验码等的标识信息；数据块则存储具体的数据信息。&lt;/p&gt;

&lt;p&gt;TCP本身有做一些校验的工作，为了防止数据被人为攥改、以及逻辑本身的错误检测，我们有时也需要做额外的校验工作。通常的校验方法有几种：&lt;/p&gt;

&lt;h6&gt;MD5校验。&lt;/h6&gt;

&lt;p&gt;这种校验方式比较直接，将数据块整个用MD5散列函数生成一个校验字符串，将校验字符串保存在数据包中。当服务器收到数据包时，也对整个数据块做同样的MD5操作，将数据块用MD5散列函数生成一个校验字符串，与数据包中的校验字符串进行比较，如果一致，则认为校验通过，否则就认为被人为修改过。&lt;/p&gt;

&lt;p&gt;算法可以用下面的代码表示：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CheckData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_md5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str_md5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MD5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str_md5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_md5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码中data和data&lt;em&gt;md5来自数据包中是由发送方计算的值，收到数据后对数据块进行md5操作并与传过来的data&lt;/em&gt;md5字符串进行比较，如果相同则认为校验一致。&lt;/p&gt;

&lt;h6&gt;奇偶校验。&lt;/h6&gt;

&lt;p&gt;奇偶校验与MD5有点类似，只是所用的函数方法不同。对每个数据进行异或赋值成一个变量，将这个变量保存在数据包中。当服务器收到数据包时，也对整个数据块做同样的操作，将数据快中的数据进行异或操作并转换成一个变量，然后将这个变量值与数据包中的校验值进行比较，如果数据一致则认为校验正确，否则则认为数据被人攥改过。&lt;/p&gt;

&lt;p&gt;这种方式校验相对于MD5比较简单快速，但重复性也比较高，这个校验算法如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uCRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//校验初始值&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataLenth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uCRC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码中，每个Data中的数据都会与前面操作过的数据进行异或，最终得出一个值就是校验值，客户端与服务器都做同样的操作，如果得出的值时相等的则认为是正确的数据。&lt;/p&gt;

&lt;h6&gt;CRC循环冗余校验。&lt;/h6&gt;

&lt;p&gt;循环冗余校验是利用除法及余数的原理来进行错误检测的.将接收到的数据组进行除法运算，如果能除尽则说明数据校验正确，如果未除尽，则表明数据被认为攥改过。&lt;/p&gt;

&lt;p&gt;该算法步骤如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1，    前后端约定一个除数。

    2，    将数据块用除数取余。

    3，    将余数保存在数据包中。

    4，    服务器收到数据后，将余数和数据块相加，并进行取余操作。

    5，    余数为0则认为校验正确，否则则认为数据被攥改过。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在数据数组中，对每4个字节的数据合并后除余，得到一个1个字节以内的余数，每4个字节得到1个字节的余数，最终得到一组余数数组。校验时反向操作，先取4个字节的数据组成一个正整数加上对应的余数，再除余操作，如果不为零则校验失败，如果全部为零则校验成功。&lt;/p&gt;

&lt;h6&gt;4.加密。&lt;/h6&gt;

&lt;p&gt;为了保证网络数据包不被篡改和查看，导致外挂破坏整个游戏平衡，我们需要对发送的网络数据包中的主体部分进行加密。加密算法很多，包括RSA，公钥私钥，以及非对称加密等，其中最简单也是最快的加密方式就是对数据做异或处理，由于数据两次异或处理就能使得数据回到原形，所以算法中常使用异或的操作来做加密。通常做法是发送时对数据做异或处理一次，收到时再做一次异或处理，这样就能简单快速加密解密数据。&lt;/p&gt;

&lt;p&gt;前面说的这种方式密钥Key是同一个，通常大多数加密都使用秘钥的概念，秘钥的Key常常会暴露在外界导致一些不怀好意的人会在客户端上破解并查看秘钥从而知道网络数据协议的格式进而可以进行一些捣乱，所以前后端同使用一个秘钥Key会比较危险，于是非对称加密是加密会比较安全，这样前后端两边的密钥Key不同且各自保存，即使当前端密钥泄漏了也可以随时替换。但仍然无法避免前端的秘钥暴露在外面被人破解，于是如何隐藏这个秘钥键值成了重要关键，很多人写入代码中编译进程序里，如果是C#代码由于它是先翻译为IL语言的，因此很容易用IL翻译的方式反向得出代码内容，也有人把秘钥用c或c++编译放入额外的so文件中，这种确实加大了破解的难度但也不是没有办法破解。所以我们仍然需要不断加大破解的门槛，比如把秘钥分为几段分别用几种方式隐藏在项目文件中，用多种加密方式对秘钥加密，让关键秘钥在获取前再做加密等等，我们应该详尽办法用各种手段达到通常人能想到的解密思路，加大了破解的门槛最好能让黑客望而生畏。&lt;/p&gt;

&lt;p&gt;最后还是要关注下加密导致的性能损耗问题，如果加密的性能损耗过大那就得不偿失了，所以我们仍然希望加密的过程是快速的，在不损耗大量CPU前提下，不影响项目性能的情况下对协议数据做最大化的加密工作。&lt;/p&gt;

&lt;h6&gt;断线检测&lt;/h6&gt;

&lt;p&gt;TCP本身就是强连接，所以自身就有断线的检测机制，但是它本身的检测机制还不够好，时常会因为网络问题导致断线的判断不够及时，所以我们在编写TCP长连接的程序时需要加强断线检测机制，让断线判断变的更加准确及时。&lt;/p&gt;

&lt;p&gt;为了能有效检测TCP连接是否正常，我们需要服务器和客户端共同达成一个协议来检测连接，我们把这个共同达成的协议取名叫心跳包协议。在心跳包协议中，每几秒服务器向客户端发送一个心跳包，包内包含了服务器时间、服务器状态等少量信息，然后由接收到这个心跳协议的客户端做反馈，发送给服务器一个心跳回应包，包内也包含客户端的少量信息例如客户端状态、用户信息等。两边的终端上的逻辑可以就此达成共识，认为当收到心跳信息时认为连接时存在的，当服务器30秒没有收到任何反馈心跳包的信息则认为客户端已经断线，这时主动断开客户端的连接。客户端这边也是同样的协定，当客户端30秒内没有接收到任何数据包时则认为网络已经断开，客户端最好主动退出游戏重新登陆重新连接服务器。&lt;/p&gt;

&lt;p&gt;通常当网络异常时，客户端和服务器都很难断定连接是否依然存在，因此需要用这种机制来加以判定，例如在ios中APP可以随时切出屏幕并不关闭游戏，或者直接关闭应用不给服务器任何解释，服务器自然收不到断开连接的请求。面对各种异常的情况，我们制定的心跳包和心跳回应来判定是否仍处于连接的状态，倘若没有收到心跳包和心跳回应包，就表示连接存在问题了，有可能已经断开。为了规避一些时候网络的波动，我们可以设置一个有效判断断开连接的时间间隔，比如，10秒内没有收到心跳包和心跳回应包，就表示连接已经断开，这时服务器和客户端主动断开连接，客户端可以根据游戏的逻辑先退出游戏再重新登陆寻求再次与服务器连接。&lt;/p&gt;

&lt;p&gt;心跳协议在TCP之上，加强了断线检测的准确性，能更有效快速的检测到断线问题。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第六章，网络层(一) - TCP还是UDP</title>
   <link href="http://www.luzexi.com/2018/08/06/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E7%BD%91%E7%BB%9C%E5%B1%821.html"/>
   <updated>2018-08-06T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/08/06/Unity3D高级编程之进阶主程-网络层1</id>
   <content type="html">&lt;h3&gt;TCP和UDP的简介&lt;/h3&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;我们日常使用的网络协议通常只有TCP和UDP两种，但事实上还有其他类型的协议，它们使用的范围比较特殊，TCP和UDP是比较通用网络协议使用范围比较广，下面我们来着重介绍TCP和UDP。&lt;/p&gt;

&lt;h6&gt;TCP（Transmission Control Protocol，传输控制协议）是面向连接的协议，也就是说在收发数据前，必须和对方建立可靠的连接。&lt;/h6&gt;

&lt;p&gt;一个TCP连接必须要经过三次“对话”才能建立起来，这里我们描述下这三次对话的形象过程：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    主机A向主机B发出连接请求数据包：“我想给你发数据，可以吗？”，这是第一次对话；

    主机B向主机A发送同意连接并要求同步的数据包（同步就是两台主机一个在发送，一个在接收的协调工作）：“可以，你什么时候发？”，这是第二次对话；

    主机A再发出一个数据包确认主机B的要求同步：“我现在就发，你接着吧！”，这是第三次对话。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;三次“对话”的目的是使数据包的发送和接收同步，经过三次“对话”之后，主机A才向主机B正式发送数据。&lt;/p&gt;

&lt;p&gt;TCP建立连接要进行3次握手,而断开连接却要进行4次，我们来看看它是怎样的一个过程：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1，当主机A完成数据传输后,将控制位FIN置1，提出停止TCP连接的请求

    2，主机B收到FIN位置上的1信息后对其作出响应，确认这一方向上的TCP连接将关闭，将ACK置1

    3，B主机再提出反方向的关闭请求，并将控制位FIN置1，发送给A主机，并关闭连接

    4，主机A对主机B的请求进行确认，将ACK置1，并关闭连接，至此双方向的关闭结束.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;由TCP的三次握手和四次断开可以看出，TCP使用面向连接的通信方式，大大提高了数据通信的可靠性，使发送数据端和接收端在数据正式传输前就有了交互，为数据正式传输打下了可靠的基础。&lt;/p&gt;

&lt;p&gt;名词解释：
        ACK  TCP报头的控制位之一,对数据进行确认.确认由目的端发出,用它来告诉发送端这个序列号之前的数据段都收到了。比如,确认号为X,则表示前X-1个数据段都收到了,只有当ACK=1时,确认号才有效,当ACK=0时,确认号无效,这时会要求重传数据,保证数据的完整性.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    SYN  同步序列号,TCP建立连接时将这个位置1

    FIN  发送端完成发送任务位,当TCP完成数据传输需要断开时,提出断开连接的一方将这位置1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们来看看TCP的包头结构：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    源端口(source port) 16位

    目标端口(target port) 16位

    序列号(SYN) 32位

    回应序号(ACK) 32位

    TCP头长度(head size) 4位

    reserved 6位

    控制代码 6位

    窗口大小(size) 16位

    偏移量 16位

    校验和 16位

    选项  32位(可选)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样我们把它们需要的空间位数都加起来得出了TCP包头的最小长度总共为：192-32位，最后32位的选项位可没有，所以最小长度为 160/8=20 字节。&lt;/p&gt;

&lt;p&gt;上面描述的只是包头，也就是所有TCP数据包收到时的头部数据格式，头部数据后面跟着的才是真正的数据，后面具体跟着多少空间大小的数据由窗口大小(size)位置上的数据决定，也就是单个数据包最大能承受2^16-1=65535字节的容量。&lt;/p&gt;

&lt;p&gt;这里有个有趣的概念，即TCP通过滑动窗口的概念来进行流量控制。由于在发送端发送数据的速度很快而接收端接收速度却很慢的时就很难保证数据不丢失，所以需要进行流量控制， 协调好通信双方的工作节奏。所谓滑动窗口概念，可以理解成接收端所能提供的缓冲区大小是有限的且是变化的。TCP利用一个滑动的窗口值来告诉发送端对它所发送的数据能提供多大的缓 冲区，以此来协调控制两边的传送节奏和速率。由于窗口只有16个比特的大小，所以接收端TCP 能最大提供65535个字节的缓冲。&lt;/p&gt;

&lt;h6&gt;UDP（User Data Protocol，用户数据报协议）&lt;/h6&gt;

&lt;p&gt;下面我们来介绍下UDP，它最大的特点可以分6部分：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    （1）UDP是一个非连接的协议，传输数据之前源端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上。在发送端，UDP传送数据的速度仅仅是受应用程序生成数据的速度、计算机的能力和传输带宽的限制；在接收端，UDP把每个消息段放在队列中，应用程序每次从队列中读一个消息段。

    （2）由于传输数据不建立连接，因此也就不需要维护连接状态，包括收发状态等，因此一台服务机可同时向多个客户机传输相同的消息。

    （3）UDP信息包的包头很短，只有8个字节相对于TCP的20个字节包头信息，UDP的包头开销很小。

    （4）吞吐量不受拥挤控制算法的调节，只受应用软件生成数据的速率、传输带宽、源端和终端主机性能的限制。

    （5）UDP会尽最大努力去传输和接受数据且没有限制但并不保证可靠的数据交付，主机也不需要维持复杂的链接状态表（这里面有许多参数）。

    （6）UDP是面向报文的。发送方的UDP对应用程序传过来的报文，在添加包头后就向下交付给IP层。既不拆分，也不合并，而只是保留这些报文的边界，因此应用程序需要自己限制合适的报文大小，以免报文太大丢失率高。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常，其实“ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包，如果数据包到达的消息及时反馈回来，那么网络就是通的，并且可以通过返回回来的数据包计算响应时间。&lt;/p&gt;

&lt;p&gt;其中UDP的包头结构为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    源端口 16位

    目的端口 16位

    长度 16位

    校验和 16位
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;包头总共64位8个字节就足以。与TCP同样包头只是数据的头部，其真正数据是跟随在包头后面，具体长度由长度这个字段来决定，最大为2^16-1=65535字节的容量。&lt;/p&gt;

&lt;h3&gt;用TCP，还是用UDP？&lt;/h3&gt;

&lt;p&gt;前面介绍了TCP和UDP，我们来看看TCP与UDP的它们的不同之处：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1，TCP是基于连接的，UDP则是无连接；

    2，对系统资源开销，TCP开销较多，UDP开销少；

    3，TCP包头大各类状态多程序结构稍显复杂，UDP包头小没有状态程序结构较简单；

    4，TCP为流模式，UDP为数据报模式，相当于TCP是自来水那样需要管子以便把书举不断流入盆中，而UDP则不需要管子连接两端只要像机关枪一样不停扫射到目的地就可以。

    5，TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从原理上，TCP的优势有，简单直接的长连接，可靠的信息传输，能确保数据到达有确认机制，并且数据到达后是有序的，数据包的大小没有限制，不需要自己切分数据包，TCP的底层程序本身就已经帮助我们做了数据包切分。UDP是基于数据包构建，这意味着在某些方面需要我们完全颠覆在TCP下的观念。&lt;/p&gt;

&lt;p&gt;由于UDP只使用一个socket进行通信，不像TCP需要为每一个客户端建立一个socket连接，这虽然是UDP还不错的地方，但是大多数情况下我们需要的仅仅是一些连接的概念罢了，一些基本的数据包先后次序功能，以及传输时的可靠性。可惜的是这些功能UDP都没有办法简单的提供给你，而我们使用TCP却都可以免费得到。这也是人们为什么经常推荐TCP的原因之一，在用TCP的时候你可以不考虑这些问题。&lt;/p&gt;

&lt;p&gt;UDP没有提供所有的解决方法，但这也正是UDP有巨大潜力的地方，它的吞吐量可以巨大但需要我们去控制它丢失率和可靠性。在某种意义上来说，TCP对UDP就好比是自动档汽车和手动挡汽车的区别，驾驶者需要掌握的技巧和关注度比自动档要多很多，但在效率上的潜力却是巨大的。&lt;/p&gt;

&lt;p&gt;容易造成巨大的延迟问题是TCP的性质决定的，在发生丢包的时候，会产生巨大的延迟，因为TCP首先会去检测哪些包发生了丢失，然后重发所有丢失的包，直到他们都被接收到。虽然UDP也是有延迟的，但是由于它是在UDP的基础之上建立的通信协议，所以可以通过多种方式来减少延迟，不像TCP，所有的东西都要依赖于TCP协议本身而无法被更改。&lt;/p&gt;

&lt;p&gt;那么为什么魔兽世界采用TCP呢？首先我们需要解释这个问题。这个问题其实是“为什么魔兽世界有的时候1000毫秒以上的延迟还能够运行？”魔兽世界以及其他的一些游戏是怎么处理延迟问题的呢？方法也很简单，他们能够隐藏掉延迟带来的影响。&lt;/p&gt;

&lt;p&gt;我们看一下魔兽世界的战斗就会发现，玩家的攻击指令发送给服务器的操作，一些类似发起攻击动作和释放技能特效就能够在没有收到服务器确认的情况下就直接执行，比如展现冰冻技能的效果就可以在服务器没有返回数据前在客户端就做出来。客户端直接开始进行计算而不等待服务端确认是一种典型的隐藏延迟的技术。这也意味着，我们到底是使用TCP还是UDP取决于我们能否隐藏延迟。&lt;/p&gt;

&lt;p&gt;那么到底是用UDP还是TCP呢？提供如下参考：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    如果是由客户端间歇性的发起无状态的查询，并且偶尔发生延迟是可以容忍，那么使用HTTP/HTTPS吧。

    如果客户端和服务器都可以独立发包，但是偶尔发生延迟可以容忍（比如：在线的纸牌游戏，许多MMO类的游戏），那么使用TCP长连接吧。

    如果客户端和服务器都可以独立发包，而且无法忍受延迟（比如：大多数的多人动作类游戏，以及少部分MMO类游戏），那么使用UDP吧。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了保证作者理解的正确性，部分参考来自知乎问答。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第五章，3D模型与动画(三) - 状态机</title>
   <link href="http://www.luzexi.com/2018/08/06/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-3D%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8A%A8%E7%94%BB3.html"/>
   <updated>2018-08-06T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/08/06/Unity3D高级编程之进阶主程-3D模型与动画3</id>
   <content type="html">&lt;h2&gt;如何用状态机模拟人物行为动作。&lt;/h2&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;什么是状态机？状态机有两种，一种是有限状态机，一种是无限状态机。有限状态机运用的地方比较多，而无限状态机由于状态是无限的所以也有无限多的映射因此只是理论上的模型，我们主要来讲讲有限状态机的使用。&lt;/p&gt;

&lt;p&gt;有限状态机可以简单描述为，实例本身有很多种状态，实例从一种状态切换到另一种状态的动作就是状态机转换，而转换是有条件的，这个转换条件就是状态机之间的连线。&lt;/p&gt;

&lt;p&gt;打个比方，人有三个状态：健康，感冒，康复中。触发的条件有淋雨（t1），吃药（t2），打针（t3），休息（t4）。状态机的连接图可以是这样：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    健康-（t4休息）-&amp;gt;健康；

    健康-（t1淋雨）-&amp;gt;感冒；

    感冒-（t3打针）-&amp;gt;健康；

    感冒-（t2吃药）-&amp;gt;康复中；

    康复中-（t4休息）-&amp;gt;健康
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;状态在不同的条件下跳转到不同状态中去，每个状态要转移到其他状态都必须有他们之间的连线条件，而且不一定状态与状态之间有连线，因为有可能是不允许转换的，例如‘健康’就不允许转换到‘康复’。&lt;/p&gt;

&lt;p&gt;状态机可归纳为4个要素，即现态、条件、动作、次态。这样的归纳主要是出于对状态机的内在因果关系的考虑。“现态”和“条件”是因，“动作”和“次态”是果。详解如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;现态：是指当前所处的状态。

条件：又称为“事件”，当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。

动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。

次态：条件满足后要迁往的新状态。“次态”是相对于“现态”而言的，“次态”一旦被激活，就转变成新的“现态”了。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;游戏中人物行为动作中使用状态机&lt;/h3&gt;

&lt;p&gt;游戏项目中状态机的关键是事件机制和控制状态的控制类。状态机的数量和作用都会因系统的不同而不同，触发条件也各异的，唯有事件机制和控制类是状态机的不变的功能。&lt;/p&gt;

&lt;p&gt;事件机制使得状态在切换时，在进入状态和退出状态时触发了进入事件和退出事件，这个是状态启动运作和停止运作的关键点。&lt;/p&gt;

&lt;p&gt;当状态在满足转换条件时，在即将退出状态前向当前状态发起退出事件，告诉当前状态机你将停止运行，停止运行前需要处理什么逻辑请赶快处理，等待退出逻辑处理完毕后，再向新状态发起进入事件，告诉新状态你将要开始运作，运作前的有什么逻辑或者准备工作请尽快处理。这样每次状态的切换都能合理的告诉当前状态和将要切换的状态进行事件的调用处理。&lt;/p&gt;

&lt;h6&gt;状态机在游戏项目中哪些地方会使用到呢？&lt;/h6&gt;

&lt;p&gt;所有能够构成独立状态的系统或者功能都能使用状态机来表现，我们来举例看看：&lt;/p&gt;

&lt;p&gt;1，场景切换。&lt;/p&gt;

&lt;p&gt;场景是独立的，而且只能有一个场景展示在游戏中，因此场景的切换可以用状态机来表示。例如当前为登录场景，点击登录后切换到游戏场景，这时需要把登录场景的UI销毁，UI的销毁工作是登录场景状态在退出时触发的退出事件中做的事。同样的，在之后进入到游戏场景状态时，要先把游戏场景的UI创建出来，这个操作是游戏场景状态在触发启动事件时要做的事。&lt;/p&gt;

&lt;p&gt;2，人物行为状态切换。&lt;/p&gt;

&lt;p&gt;人物一般只能有一个动作状态，比如攻击状态，比如防守状态，比如死亡状态，又比如人物跑步状态，这些行为都只能用单独的一个状态来表示，但也有人物边跑步边吃东西的时候，这时我们也会有几种方式去实现，比如我们把人物跑步且吃东西另外创建一个新的状态来运行，也可以把跑步状态里加一个吃东西的参数，让跑步这个状态机来运行不一样的跑步动作。&lt;/p&gt;

&lt;p&gt;3，宝箱，机关等具有多动画的元素都可以构成独立的状态。&lt;/p&gt;

&lt;p&gt;可以把宝箱或机关的每个动画都看成一个状态，比如打开状态的宝箱和关闭状态的宝箱，以及打开时的机关状态以及关闭时的机关状态。&lt;/p&gt;

&lt;p&gt;4，    AI。&lt;/p&gt;

&lt;p&gt;用状态机来做AI是比较常见到的方式，每个AI状态都可以看成一个独立运行的状态。比如AI状态中的激怒状态，一般来说怪物在此状态中会不断向周围的敌人发起攻击，如果20秒后恢复到平静状态后就不再攻击则认为AI状态由激怒状态转换到了空闲状态，又比如AI巡逻状态，在某个点周围或者按一定路线进行走动，如果5米内发现敌人就会激活条件转换到AI激怒状态。&lt;/p&gt;

&lt;p&gt;以上都是状态机在游戏项目各个逻辑模块中的运用，下面我们重点来介绍下人物行为的状态机结构，我们先按常见的需求把人物行为动作划分一下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1，    休息状态。原地不动，并且重复做一个休息的动画。

    2，    攻击状态。播放攻击动画，并且对目标或前方进行攻击。

    3，    技能状态。技能稍微复杂点，因为每个技能都不一样，所以技能状态里面的逻辑可以由不同的技能类来实现。比如建个技能基类class SkillBase，里面有几个统一的接口，然后子类对基类进行继承后，细化技能的细节。

    4，    防御状态。播放防御动画，当受到攻击时，不切换受伤状态。

    5，    受伤状态。播放受伤动画，完毕后自动进入休息状态。

    6，    行走与跑步状态。播放行走或跑步动画，并根据操作输入移动方向。

    7，    跳跃状态。播放跳跃动画，并上下移动人物进行跳跃，下落时底部受到碰撞就进入休息状态。

    8，    死亡状态。播放死亡动画，并且不再受到任何指令而转入任何状态。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里我们对每个状态编写一些伪代码来描述状态机在人物行为中的运作，如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseState&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnEnter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnExit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IdleState&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnEnter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idle&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HurtState&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnEnter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hurt&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsPlayingAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hurt&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;HurtFinish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnExit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GotoIdleState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AttackState&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnEnter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsPlayingAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attack&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;AttackStateFinish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnExit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GotoIdleState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MoveState&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnEnter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;playAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnExit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GotoIdleState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码表达了对状态机中的状态的描述，其中空闲状态，在没有收到任何指令时只是循环播放Idle动画其他什么都不做。攻击状态，进入状态时播放攻击动画，并在动画结束后返回到Idle状态并等待指令。移动状态在进入时播放walk动画并移动，当移动行为结束时就退出，在退出时进入空闲状态。&lt;/p&gt;

&lt;p&gt;状态机中除了事件接口对状态起了关键的作用外，控制状态的控制类也是关键，它其实就是状态的管理类，用于管理状态的入口和出口。&lt;/p&gt;

&lt;p&gt;我们也同样用伪代码的形式来描述状态管理类是如何运作的，以下是伪代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RoleStateController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IdleState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idleState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MoveState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AttackState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attackState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HurtState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hurtState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnHurt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ReduceHP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hurtState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ChangeToHurtState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InputAttack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentState&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hurtState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//受伤状态下不可攻击&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;If&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attackState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//攻击状态还没结束时不可重新开始攻击&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ChangeToAttackState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InputMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在状态机控制类中，存储了各个状态，并且提供了输入的接口，这种输入的事件是由状态机外部提供的，比如发起攻击，比如受到伤害，比如向前向后移动等等，在外部需要状态机触发状态改变时，发起了对状态机的输入事件。这就是状态机控制类需要做的事，简单来说就是存储状态，并提供输入事件接口。&lt;/p&gt;

&lt;p&gt;更大规模的状态机可能还需要稍微改进下，比如业务逻辑都会转移到状态内去做，状态之间的转换则更为简单。如果状态很多则需要用数组的形式来存储，因为那样才能时内存连续提高CPU内存读取效率。&lt;/p&gt;

&lt;p&gt;有了状态机的控制类就有了对状态机的管理，就可以对各种逻辑的控制，比如硬值，受伤中不可行走和攻击，攻击中不可移动等，这些当状态在切换时的条件限制，是阻挡还是通过，该切换什么状态，都可以由控制类来决定的，它是状态机系统的大脑。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>被封纪念帖</title>
   <link href="http://www.luzexi.com/2018/08/03/%E8%A2%AB%E5%B0%81%E7%BA%AA%E5%BF%B5%E5%B8%96.html"/>
   <updated>2018-08-03T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/08/03/被封纪念帖</id>
   <content type="html">&lt;p&gt;www.luzexi.com 博客 被关小黑屋了，原因是自己架了梯子，还写文章教别人怎么架梯子。被冠以双重罪，直接封服务器了，不仅仅是域名，服务器也不给用了。&lt;/p&gt;

&lt;p&gt;这是不给程序员活路么，不学习外来技术怎么振兴中华。&lt;/p&gt;

&lt;p&gt;但是我想通了，生活在中国就要按照中国的规矩办事，政治觉悟要有。&lt;/p&gt;

&lt;p&gt;被封让我彻底放弃了阿里云，也放弃了国外的服务器，转而用国内，也同时放弃了自建某些服务器，感觉也轻松了很多，并且又多了一个域名，luzexi.cn 因为原来的域名不知道什么时候恢复，暂时用这个吧。&lt;/p&gt;

&lt;p&gt;我想明白了在中国还是需要按中国的套路走，如果你移民在国外也一样，要拼劲全力融入当地的风俗民习，都不容易。&lt;/p&gt;

&lt;p&gt;所以那些在国外的说国内不好的，或者在国内说国外不好的，都是井底之蛙，过于偏见纠结问题的表面。&lt;/p&gt;

&lt;p&gt;做好自己，在规矩下办事，在规则下取胜才是关键，不要去秀下限，而是要努力去突破上限。&lt;/p&gt;

&lt;p&gt;放个连接吧，总不至于白写。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/luzexi/blog/blob/master/luzexi.com/hyde-master/_posts/2018-08-01-%E8%A2%AB%E5%B0%81%E7%9A%84%E5%B8%96%E5%AD%90.md&quot;&gt;被封的说明书&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>git同步多个repository仓库</title>
   <link href="http://www.luzexi.com/2018/08/03/git%E5%90%8C%E6%AD%A5%E5%A4%9A%E4%B8%AArepository%E4%BB%93%E5%BA%93.html"/>
   <updated>2018-08-03T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/08/03/git同步多个repository仓库</id>
   <content type="html">&lt;p&gt;由于国内服务器访问GitHub奇慢，所以把仓库复制一份放在了国内。但是苦于要同步两边，所以想有没有办法，同步多个git仓库，是否有办法，只维护一份就可以了。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;网上搜了一下，大都说的是&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git remote add 

    和 git remote set-url --add ，

    以及 git push origin --all 的用法。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是自己用了一下，完全用不了。总是拒绝push，说需要先pull，但pull了又说需要merge，我感觉这个坑巨大，于是想找其他法子。自己想了想最土的办法或许可以。试验了下，果然可行。步骤如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1， 两个文件夹，分别装两个仓库，或者多个文件夹装多个仓库，每个不同的仓库一个文件夹。

    2， 把其中一个作为主要维护的仓库，维护完毕后，执行以下步骤。

    3， 写一个shell程序。首先把所有内容全部都复制粘贴到其他仓库去，直接替换掉旧的文件。然后每个仓库一个个的执行

        git add .

        git commit -m &amp;#39;sync&amp;#39;

        git push origin master

        每个仓库都执行完毕后，同步完成。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;也就是，用shell程序把人工手动需要做的事情，让程序去完成，省时省力，一键搞定。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;h6&gt;举例代码为同步三个仓库，具体的 shell 如下：&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    cp -r ../* /Users/luzexi/Desktop/work/gitee/blog/
    cd /Users/luzexi/Desktop/work/gitee/blog/
    git add .
    git commit -m &amp;#39;sync&amp;#39;
    git push origin master

    cp -r ../* /Users/luzexi/Desktop/work/github/blog/
    cd /Users/luzexi/Desktop/work/github/blog/
    git add .
    git commit -m &amp;#39;sync&amp;#39;
    git push origin master

    cp -r ../* /Users/luzexi/Desktop/work/gitlab/blog/
    cd /Users/luzexi/Desktop/work/gitlab/blog/
    git add .
    git commit -m &amp;#39;sync&amp;#39;
    git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第五章，3D模型与动画(二) - 合并3D模型</title>
   <link href="http://www.luzexi.com/2018/08/03/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-3D%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8A%A8%E7%94%BB2.html"/>
   <updated>2018-08-03T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/08/03/Unity3D高级编程之进阶主程-3D模型与动画2</id>
   <content type="html">&lt;h3&gt;Animation 和 Animator的选择。&lt;/h3&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;首先说明Unity3D引擎已经不再对Animation动画系统进行维护。但不维护也并不是说一定不能用，很多旧的项目任然在用，只是在老版本中使用。新动画系统 Mecanim 中有了新的动画组件 Animator，为什么要用新系统 Mecanim 呢？&lt;/p&gt;

&lt;p&gt;原因如下几个方面：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Mecanim 系统使用多线程计算，比Animation的单线程性能要高出一点。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unity3D本身就自带对 Mecanim 系统的优化选项“Optimize GameObject”。开启该选项，Animator.Update和MeshSkinning.Update的CPU占用均会一定程度的降低。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Animator的功能更加多，Retargeting功能让不同角色使用同一套动画资源，比如游戏中的角色的空闲动画，就可以使用同一个动画文件省去了动画资源内存的开销。Animator状态机的接入，让动画可以在不同的条件下可以自动的切换。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Animation因为Unity3D引擎不再维护了，大多数人选择Animator这是正确的做法。其实就我而言我更喜欢Animation，但现实是也不得不抛弃它去投奔新‘主子’(Animator)，因为不再维护意味着从长远来看它会越来越糟糕。&lt;/p&gt;

&lt;h3&gt;Unity3D 3D模型中SubMesh的意义&lt;/h3&gt;

&lt;p&gt;在模型中可以有很多网格，一个模型可以由很多个网格构成。因此在Unity3D中一个Mesh网格的构成可以由多个子Mesh组成也就是SubMesh，即一个Mesh里可以有多个SubMesh。&lt;/p&gt;

&lt;p&gt;引擎在渲染的时候，每个SubMesh都需要对应一个Material材质球来匹配做渲染，说白了一个SubMesh本身就是普通的模型有很多个三角形构成它也需要材质球支持以达成渲染。在美术人员制作3D模型过程中，可以将SubMesh拆分成独立的Mesh，也可以并成多个子模型即SubMesh。&lt;/p&gt;

&lt;p&gt;这里可能大家有个疑问，为什么美术人员在制作3D模型时不把网格都编成一个而要制作成多个SubMesh？这是有原因：&lt;/p&gt;

&lt;p&gt;一种情况是，3D模型制作人员在制作模型的时候，希望一个模型中一部分Mesh用一种材质球来表现效果，另一部分Mesh则用另一种材质球来表现效果，这时就需要将模型拆分开来。因为一个Mesh只能对应一个材质球做渲染，一个材质球只能表现一种效果，当他们需要表现两种完全不同的效果时就需要拆分。&lt;/p&gt;

&lt;p&gt;第二种情况是，模型中的某部分的贴图，在众多模型中共同使用的频率比较高，为了不重复制作以及减少重复劳动，那么就会让原本可以整体的模型单独拆分出来一部分公共材质的部分让它们都使用同一个材质球。&lt;/p&gt;

&lt;p&gt;第三种情况是，在制作动画时，由于动画过于复杂导致如果使用同一个模型去表现的话，骨骼数量就会成倍增加。为了能更好的表现动画，也为了能更节省骨骼的使用量，拆分出一部分模型让他们单独成为模型动画的一部分。&lt;/p&gt;

&lt;p&gt;以上三种情况都是我们在制作模型过程中需要着重考虑的问题，通常情况下都会用拆分模型的方式来解决这些问题。&lt;/p&gt;

&lt;p&gt;其实SubMesh有诸多好处，与没有SubMesh的Mesh相比，拥有多个SubMesh一样可以有动画，另外它还能针对不同部分的Mesh选择有个性化的材质球来表现效果，从功能上来看比单个Mesh要灵活的多。但它也有些许缺点，由于每个SubMesh都多出了材质球，导致SubMesh越多，增加的Drawcall也越多。Mesh中存在多个SubMesh，在动作和拆分材质球渲染上确实有很好的优势，但无法与其他Mesh合并，导致优化的一个重要环节被阻断。&lt;/p&gt;

&lt;p&gt;SubMesh虽然功能很强大，但对性能的开销也需要注意，需要我们慎重使用。有时我们也可以选择用完全拆分Mesh为其他Mesh的形式来代替SubMesh，这样在合并Mesh时就有更多的选择了。下面我们就来深入浅出的聊聊合并模型的方法和途径。&lt;/p&gt;

&lt;h3&gt;动态合并3D模型。&lt;/h3&gt;

&lt;p&gt;我们制作的场景中的3D的物体很多，每个3D物体都需要有一个材质球支持，导致每个模型都会产生一个Drawcall（渲染管线的调用），众多的3D模型会产生很多Drawcall，CPU在等待渲染GPU在忙于处理Drawcall，使得帧率下降画面卡顿感强烈。&lt;/p&gt;

&lt;p&gt;实际中的项目都会遇到这样的问题，场景中要摆放的3D物体很多，包括人物，建筑，路标，景观，树木，石头，碎块，花朵等。这些3D物体都有自己的材质球，相同模型的物体使用相同的材质球，不一样的物体使用不同的材质球，有时不一样的物体也有相同的材质球。如果不做任何优化处理就会产生很多Drawcall，导致帧率下降。于是我们就会想这么多的材质球引起这么多Drawcall，是否能合并合并成一个，这就是合并3D模型发挥作用的时候。&lt;/p&gt;

&lt;p&gt;合并3D模型主要的目的就是为了减少Drawcall，它是通过减少材质球的提交数量来完成优化手段的，说的简单点就是把拥有相同材质球的模型合并起来成为一个模型和一个材质球，从而减少向GPU提交的Drawcall数量。&lt;/p&gt;

&lt;p&gt;Unity3D引擎在合并模型从而优化Drawcall上有自己的功能，即 动态批处理 和 静态批处理 两种，它们的前提条件都是模型物体必须是相同材质球的模型，除了这个必要条件外还有其他条件也需要符合。下面我们就来介绍下Unity3D中动态批处理和静态批处理：&lt;/p&gt;

&lt;h6&gt;动态批处理&lt;/h6&gt;

&lt;p&gt;动态批处理即意味着随时都在做的模型合并批量处理，当我们把 Dynamic Batch 动态批处理开启时，Unity3D可以自动批处理场景中某些物体成为同一个Drawcall，如果是他们使用的是同一个材质球并且满足一些条件的话动态批处理会自动完成的，我们不需要增加额外的操作。&lt;/p&gt;

&lt;p&gt;其中需要满足的动态批处理的条件是，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;1，动态批处理的物体的顶点数目要在一定范围之内，动态批处理只能应用在少于900个顶点的Mesh中。

    如果你的Shader使用顶点坐标，法线，单独的UV，那么只能动态批处理300个顶点内的网格，

    如果你的Shader使用顶点坐标，法线，UV0，UV1和切线，则只能有180个顶点了。

2，两个物体的缩放比例一定是相同，假如两个物体不在同一个缩放单位上，它们将不会进行动态批处理（例如物体A的缩放比例是(1,1,1)，物体B的缩放比例是是(1,1,2)，他们的缩放比例不同则不会被合并处理，除非A的缩放比例改为(1,1,2)，或者B的缩放比例改为(1,1,1)）

3，使用相同的材质球的模型才会被合并，使用不同的材质球是不会被动态批处理的，即使他们模型是同一个或者看起来像是同一个。

4，多管线(Pipeline)Shader会中断动态批处理。

    很多Unity3D里的Shader支持多个灯光的前置渲染增加了多个渲染通道，这些多个通道的材质球是无法用于动态批处理渲染的。

    Legacy Deferred(灯光前置通道)传统延迟渲染路径已经被动态处理关闭，因为它必须绘制物体两次。

    所有多个pass的Shader增加了渲染管道，不会被动态批处理。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;动态批处理的条件是很苛刻的，在项目中很多模型是不符合动态批处理的。另外动态批处理要消耗CPU转换所有物体的顶点到世界空间的操作，所以它唯一的优势是如果它的工作能让Drawcall变少。&lt;/p&gt;

&lt;p&gt;最后我们需要理解一味的减少Drawcall不是万能，它的资源需求取决于很多因素，主要被图形API使用。例如一个控制台或流行的API像Apple Metal这样的，Drawcall的开销会普遍很低，因此动态批处理时常在优化方面的优势并不是很大。&lt;/p&gt;

&lt;h6&gt;静态批处理&lt;/h6&gt;

&lt;p&gt;静态批处理允许引擎在离线的情况下去做模型合并的批处理以降低Drawcall，无论模型多大只要使用同一个材质球都会被静态批处理优化。他通常比动态批处理有用（因为它不需要实时转换顶点来消耗CPU），但也消耗了更多的内存。&lt;/p&gt;

&lt;p&gt;为了让静态批处理起作用，我们需要将物体置为静态不同的，即我们需要去确认指定的物体是否是静态的不能动，不能移动、不能旋转或者缩放。因此我们需要给这物体在面板上标记一个静态的标记以确定性的告诉Unity3D引擎，此物体是不能动不能缩放的，可以对该物体做静态批处理的预处理。&lt;/p&gt;

&lt;p&gt;使用静态批处理需要增加额外的内存来存储合并的模型。在静态批处理下如果一些物体在静态批处理前共用一个模型，那么Unity3D会复制每个物体的模型以用来合并，在Editor里或者在实时运行状态下都会做这个操作。这可能不总是有益的，因为这样做会带来大量的内存增加，因此有时我们需要减少对物体的静态处理来减少内存的使用量，虽然这样做会牺牲了渲染性能，不过我觉得内存换CPU是值得的，但是如果100兆的内存来换1%的CPu效率任然是不划算的，所以我们还是应该谨慎。&lt;/p&gt;

&lt;p&gt;静态批处理的具体做法是，将所有静态物体放入世界空间，并且把他们以材质球为分类标准分别合并起来，并构建一个大的顶点集合和索引缓存，所有可见的同类物体就会被同一批的Drawcall处理，这就会让一系列的Drawcall减少从而实现优化的效果。&lt;/p&gt;

&lt;p&gt;技术上来说静态批处理并没有节省3D API Drawcall数量，但他节省了他们之间的状态改变导致的消耗。在大多数平台上，批处理被限制在6万4千个顶点和6万4千个索引(OpenGLES上为48k，macOS上为32k)，所以倘若我们超过这个数量需要取消一些静态批处理对象。&lt;/p&gt;

&lt;p&gt;现在我们知道动态批处理 和 静态批处理是什么了，我们来做个简单总结：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1，    动态批处理条件是，使用同一材质球，顶点数量不超过900个，有法线的不超过300个顶点，有两个UV的不超过150个顶点，缩放大小要一致，Shader不能有多通道。

    2，    静态批处理条件是，必须是点上静态标记的物体，不能动，不能旋转，不能缩放，不能有动画。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;动态批处理的规则是极其严格的，在具体的场景中能用到的模型是相对简单的，它对顶点限制太紧，而且缩放比例还要相同，渲染管道也只能有一个。&lt;/p&gt;

&lt;p&gt;静态批处理的使用范围更广一些，但要求物体是静态不能移动，旋转，缩放。这个限制太固定，用到的地方只有完全不动的场景中的固定物体。&lt;/p&gt;

&lt;p&gt;动态批处理限制太大，静态批处理又不满足我们的需求，所以有时我们也只能自己手动合并模型来替代Unity3D的批处理。也只有用自己程序合并的模型才能体现自定义动态批处理的用途。比如构建场景后的动态建筑，动态小件合并，人物模型更换装备，发型，首饰，衣裤等导致多个模型挂载的需要合并模型来优化渲染。&lt;/p&gt;

&lt;h3&gt;自己来编写合并3D模型的程序&lt;/h3&gt;

&lt;p&gt;为了编写自己的合并3D模型程序需要调用些Unity3D的API，我们来了解下Unity3D的几个类和接口：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Mesh类有个CombineMeshes的接口提供了合并3D模型的入口。

    MeshFilter类，是承载Mesh数据的类。

    MeshRenderer类，是绘制Mesh网格的类。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在使用这几个类前我们首先需要弄明白几个概念：&lt;/p&gt;

&lt;p&gt;1，    SubMesh的意义。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    前文用专门的一节来解释它的意义。这里简单阐述下，SubMesh是Mesh里拆出来的子模型，SubMesh需要额外多个的材质球，而普通的Mesh只有一个材质球。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2，    MeshFilter 和 MeshRenderer中的 mesh 和 shareMesh ，material 和 shareMaterial 的区别。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    mesh 和 material 都是实例型的变量，对 mesh 和 material 进行任何操作都会额外复制一份后再进行重新赋值，即使只是get操作也同样会发生复制效果。也就是说对 mesh 和 material 进行操作后就会变成另一个实例，虽然看上去一样，但其实已经是同的实例了。

    sharedMesh 和 sharedMaterial 与前面两个变量不同，他们是共享型的。多个3D模型可以共用同一个指定的 sharedMesh 和 sharedMaterial，当你修改sharedMesh或sharedMaterial里面的参数时，多个同是指向同一个 sharedMesh 和 sharedMaterial的模型就会同时改变效果。也就是说 sharedMesh 和 sharedMaterial 被改变后，所有使用sharedMesh 和 sharedMaterial资源的3D模型会有同一个表现效果。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3，    materials 和 sharedMaterials 的区别。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    与前面 material 和 sharedMaterial 同样的区别， materials 是实例型，sharedMaterials 是共享型，只不过现在他们变成了数组形式。

    materials 只要对它进行任何操作都会复制一份一模一样的来替换，sharedMaterials 操作后所有指向这个材质球的模型都会改变效果。而 materials 和 material，与 sharedMaterials 和 sharedMaterial 的区别是，materials和sharedMaterials可以针对不同的subMesh，而material和sharedMaterial只针对主Mesh。也就是说 material 和 sharedMaterial 等于 materials[0] 和 sharedMaterials[0]。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4，    Mesh，MeshFilter，MeshRenderer的关系。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Mesh是数据资源，它可以有自己的资源文件，比如XXX.FBX。Mesh里存储了，顶点，uv，顶点颜色，三角形，切线，法线，骨骼，骨骼权重等提供渲染必要的数据。

    MeshFilter是一个承载Mesh数据的类，Mesh被实例化后存储在MeshFilter，MeshFilter有两种类型即实例型和共享型的变量，mesh和sharedMesh，对mesh的操作将生成新的mesh实例，而对sharedMesh操作将改变与其他模型共同拥有的那个指定的Mesh数据实例。

    MeshRenderer具有渲染功能，它会提取MeshFilter中的Mesh数据，结合自身的materials或者sharedMaterials进行渲染。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5，    CombineInstance即合并数据实例类。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    合并时我们需要为每个需要合并的 Mesh 创建一个CombineInstance实例并往里面放入，mesh，subMesh的索引，lightmap的缩放和偏移，以及realtimeLightmap的缩放和偏移(如果有的话)，和世界坐标矩阵。CombineInstance承载了所有需要合并的数据，通过将CombineInstance数组传入到合并接口，即通过Mesh.CombineMeshes接口进行合并。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;理清以上概念后，我们在编写合并3D模型程序时难度会降低很多。下面来看下合并3D模型的具体步骤：&lt;/p&gt;

&lt;p&gt;1，建立合并数据数组&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CombineInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CombineInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mMeshFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2，填入合并数据&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMeshFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMeshFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sharedMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMeshFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;localToWorldMatrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subMeshIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//标识Material的索引位置，可以为0，1，2等&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3，合并所有Mesh为单独一个&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_meshFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sharedMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CombineMeshes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者，合并后保留SubMesh&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;new_meshFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sharedMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CombineMeshes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4，CombineMeshes接口定义为&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CombineMeshes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CombineInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeSubMeshes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useMatrices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasLightmapData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完整代码为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CombineInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CombineInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mMeshFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMeshFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMeshFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sharedMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMeshFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;localToWorldMatrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subMeshIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//标识Material的索引位置，可以为0，1，2等&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;new_meshFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sharedMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CombineMeshes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第五章，3D模型与动画(一) - 美术资源的规范</title>
   <link href="http://www.luzexi.com/2018/08/03/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-3D%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8A%A8%E7%94%BB1.html"/>
   <updated>2018-08-03T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/08/03/Unity3D高级编程之进阶主程-3D模型与动画1</id>
   <content type="html">&lt;h3&gt;3D模型大小，面数，贴图大小，骨骼数量在游戏中的规范。&lt;/h3&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;资源的规范在项目中是比较重要的，看到过有很多项目都没有重视资源规范，他们奢求高的运行效率，却不懂资源的规范是运行效率的前提。&lt;/p&gt;

&lt;p&gt;有的游戏项目，一个人物模型就有几万个面，一个建筑就有几十万个面，不堪入目。贴图也有很糟糕的，到处都是不规则的贴图蕾丝1024和2048大小的贴图到处都是，骨骼数量有的甚至到了几百。在这样恶劣的资源环境情况下，项目的运行效率怎么可能高。&lt;/p&gt;

&lt;p&gt;资源的优劣直接导致了项目的性能好坏，模型太大，面数太多，贴图太大，会导致包体过大，骨骼数量太多导致CPU在动画上消耗过多。资源过大过重，还会导致CPU消耗在资源加载上面的时间过多过长，导致画面帧率下降，卡顿严重等问题。假如这个游戏项目完成打包后，在这么劣质的性能品质下发布出去，基本上投资人的钱就打水漂了。&lt;/p&gt;

&lt;p&gt;对于美术资源来说，模型面数不是越多越好，越细越好，而是在一定数量的限制下，我们尽最大努力做到最大限度的美化。同样贴图也不是越大越好，精度越高越好，而是在一定大小的限制下，做到最大限度的不失真。资源规范能有效的限制美术人员在制作美术资源时无度的扩张。&lt;/p&gt;

&lt;h6&gt;如何规范3D美术资源？&lt;/h6&gt;

&lt;p&gt;模型的大小一般都会按正常的尺寸进行制作，通常都规定1个单位空间就是1米，也有例外的时候，不过也是按这个放大缩小的，比如1个单位空间为1厘米，或10米等。&lt;/p&gt;

&lt;h6&gt;如何确定美术资源规范的大小。&lt;/h6&gt;

&lt;h3&gt;1，    根据运用的场景而不同。&lt;/h3&gt;

&lt;p&gt;像汤姆猫这种强调单一主角的场景，主要资源全部投入到主角一个人的，对主角进行精细化的雕琢是很有必要的。&lt;/p&gt;

&lt;p&gt;这种场景的人物模型做到1万面也不为过，主角的骨骼也可以做得很精细，骨骼数量可以达到50-100个，贴图大小也可以在512 x 512左右，如果需要 1024 x 1024 的贴图我觉得问题也不是很大，只是如果需求中有换装时，需要考虑下包体大小。&lt;/p&gt;

&lt;p&gt;第三人称视角的RPG游戏，由于视角与角色的距离有限，同时看到的场景范围有限，可以使用动态场景地图加载的方式控制内存使用量，主要是同屏单位数量会决定模型面数。如果人模模型面数控制在3000-4000面，骨骼数量控制在30个左右，至于建筑模型面数因为大小差异太多无法统一，不过我们可以用整体面数统计法来规范资源。贴图可以控制在 256 x 256 及以下，比如主贴图为 256 x 256，副贴图为 128 x 128。&lt;/p&gt;

&lt;p&gt;总的来说美术资源规范就是限制模型的面数，限制贴图的大小，限制一个材质球的贴图张数，限制一个人物身上的材质球数量，限制骨骼数量，具体数字是多少需要因项目而定，不过这里可以给一个大多数项目使用的标准，3000面左右的模型，不超过256大小的贴图，一个材质球内至多3张贴图，一个人物不超过2个材质球使用量，30个左右的骨骼数量。&lt;/p&gt;

&lt;p&gt;如果做的是《塞尔达传说》，《魔兽世界》这种超大型的游戏场景，可以从高空俯瞰整个场景的这种情况，渲染压力比较大，除了制定美术规范外，我们也需要借用用其他方法比如LOD，它能把渲染压力和渲染质量平衡的很好。后面章节中会具体介绍LOD在优化中的运用。&lt;/p&gt;

&lt;h3&gt;2，    使用反推计算来得出规范。&lt;/h3&gt;

&lt;p&gt;对于一些模型物体大小差异比较大的，无法统一模型与贴图面数的，我们可以用全场景总面数来控制。&lt;/p&gt;

&lt;p&gt;我们可以用这种方式来举个例子，假如我们在场景中同屏面熟控制在6万面左右，然后再开始部署，地形模型总共3万面左右，数量多的小件模型在100面以下平均50面，中型建筑在500-1500面平均下1000面好了，大型建筑在2000-5000面以下平均3000面。这样的情况下，除了地形模型剩下的还有3万面，小件模型可以放100件也就是5千面，中型建筑可以放10件1万面，大型建筑5件，1万面，总共3万面差不多满足了6万面左右的需求。&lt;/p&gt;

&lt;p&gt;贴图大小也可以同样按照这种方法进行规范，假如我们设定总体内存中贴图的大小不得超过100MB，倒推出去平均有多少种小件模型在场景内，平均有多少种中型模型在场景内，平均有多少种大型建筑在场景内。如果小件平均有30种，中型模型有20种，大型模型有10种，那么小件每个贴图不得超过0.3MB，中型模型每个贴图不得超过1MB，大型模型每个贴图不得超过2MB。&lt;/p&gt;

&lt;p&gt;除了占用内存的大小，也可以用总张数和size大小来进行规范。例如我们设定场景的总体贴图大小设置为不得超过 20张 1024 x 1024，那么在小件平均30种，中型模型平均20种，大型模型平均10种的情况下，我们就可以规定为小件贴图大小在128 x 128以下，中型模型贴图大小在256 x 256以下，大型模型贴图大小在 512 x 512 以下。&lt;/p&gt;

&lt;p&gt;用反推的计算方法来计算和规范，一整个地形场景的模型和贴图的规范就会相对容易些，对于整体的内存和计算量的把控会加强很多。&lt;/p&gt;

&lt;h3&gt;3，    规范的自动检测&lt;/h3&gt;

&lt;p&gt;无论什么方法，都敌不过实际测试。如果可以在项目前加入实际的压力测试环节，或者在项目进行中加入渲染压力测试的环境，会更有利于对美术资源的规范，专门有人做渲染压力的实际测试是有必要的。&lt;/p&gt;

&lt;p&gt;专门派遣一个人来完成这件事情，做好前期的计划和测试是对项目负责的做法，是对项目有更好前程的安全保障。但仍然有许多项目和公司，由于人才缺乏成本高企等问题下，没有派人去做各种渲染测试，只是一味的求快求速度是有问题的。不过现实仍然打败了大多数人和项目，更多时候也是无奈的选择，有时我们只能边做边测，遇到具体问题寻找自己的答案。&lt;/p&gt;

&lt;p&gt;只是人工去寻找美术资源规范问题仍然会有很多遗漏，不能形成系统化的流程与规范，导致大家都是有一枪打一枪，发现就修一个，无法确定是否有遗漏，以及完全也不知道什么时候有人一不小心又提交了不符合的资源。&lt;/p&gt;

&lt;p&gt;因此我们要建立自动规范的检测程序，这些测试程序应该设定为每个2-3小时运行一次，运行后提醒我们有多少资源存在不规范的情况，分别是哪些资源罗列出来，甚至可以细化到是最近一次谁提交的。&lt;/p&gt;

&lt;p&gt;这里列举一个我在前一个能够分享的项目的检测例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C#&quot; data-lang=&quot;C#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[MenuItem(&amp;quot;校验工具/角色、模型、地形Prefab&amp;quot;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ModelPrefabValidate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//写入csv日志&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;StreamWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StreamWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;模型Prefab检测报告.csv&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UTF8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allAssets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AssetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAllAssetPaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allAssets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIAssetPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsInPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelFbxAssetPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Character_Prefab_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AssetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadAssetAtPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//--检查Fbx，网格，设置&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;MeshFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meshes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetComponentsInChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MeshFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meshes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertexCount_sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meshes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Mesh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meshes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedMesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;SkinnedMeshRenderer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;smr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meshes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SkinnedMeshRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// BatchRenderer br = meshes[i].GetComponent&amp;lt;BatchRenderer&amp;gt;();&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;str_record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;丢失Mesh ,{0} ,{1}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meshes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;ModelImporter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model_importer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;UnityEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_fbx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;//检查fbx路径&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AssetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAssetPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;obj_fbx&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AssetDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LoadAssetAtPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;//检查fbx设置&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;model_importer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AssetImporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAtPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelImporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_importer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;optimizeMesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;str_record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Fbx设置中 optimizeMesh off 没开起来 ,{0} ,{1}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_fbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_importer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;importMaterials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;str_record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Fbx设置中 importMaterials on 被开起来了 ,{0} ,{1}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_fbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_importer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weldVertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;str_record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Fbx设置中 weldVertices off 没开起来 ,{0} ,{1}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_fbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_importer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;importTangents&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelImporterTangents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;str_record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Fbx设置中 importTangents on 被开起来了 ,{0} ,{1}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_fbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_importer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;importNormals&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModelImporterNormals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;str_record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Fbx设置中 importNormals off 没开起来 ,{0} ,{1}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_fbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model_importer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isReadable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;str_record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Fbx设置中 isReadable on 开起来了 SkinnedMeshRenderer 即动画不能开write ,{0} ,{1}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_fbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_write&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model_importer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isReadable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;str_record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Fbx设置中 isReadable on 开起来了 但文件名没有 _write 后缀,{0} ,{1}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_fbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_write&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_importer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isReadable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;str_record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Fbx设置中 isReadable off 没开起来 但文件名有 _write 后缀,{0} ,{1}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_fbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;vertexCount_sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertexCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertexCount_sum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESH_VERTEX_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;str_record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;网格顶点数大于 {0},{1} ,{2}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MESH_VERTEX_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vertexCount_sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//检测命名是否合法&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIAssetPost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsFileNameLegal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;str_record&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;文件命名不合法, {0}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码有点长我把它们省略了很多，并突出了重要的部分，我们可以举一反三，在检查的过程中，把资源在Unity3D中不符合规则的设置输出到文件中，告知大家有哪些资源文件有问题。把这个程序放在打包机上或者专门用于检测的流水线上，每1-2个小时运行一次，用微信或者企业微信的方式告知大家。这样就能做到检测的实时性和完整性，如果哪条规则疏漏了，就在程序里加上就可以了，检测到的资源问题分派给各个成员去处理，每个人做好自己范围内的资源管理，把资源检测警告清零就等于把项目中的资源完全规范化了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第四章，UI(七) - UI优化(三)</title>
   <link href="http://www.luzexi.com/2018/07/30/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-UI9.html"/>
   <updated>2018-07-30T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/30/Unity3D高级编程之进阶主程-UI9</id>
   <content type="html">&lt;h6&gt;前面介绍过优化UI的几种方法，包括，UI动静分离，拆分过大的UI，UI预加载，UI图集Alpha分离，UI字体拆分，Scroll View 滚屏优化，以及UGUI图在改变颜色或Alpha后导致对Mesh重构的优化。这篇我们来讲解，UI展示与关闭的优化，对象池的运用，UI贴图设置的优化，内存泄露排查与预防。&lt;/h6&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;⑧ UI展示与关闭的优化。&lt;/h3&gt;

&lt;p&gt;UI的展示与关闭动作最常见，需要查看界面时打开，结束了关闭。但打开和关闭会消耗一定的CPU，打开时需要实例化和初始化，关闭需要销毁GameObject。这些是CPU消耗在实际项目中的消耗量巨大。&lt;/p&gt;

&lt;p&gt;对于关闭和打开的CPU消耗的优化这里有几个策略可寻，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1.前面提过利用碎片时间的预加载，会让展示速度更加快。

    2.在关闭时隐藏节点，打开时再显示所有节点。

    3.移出屏幕。移出屏幕并不会让CPU消耗全部消失，但会减少GPU在这个界面上的消耗。当需要显示时再移入屏幕，有时候移入后进行初始化回到原来的状态也是必要的。

    4.打开关闭时，设置UI界面为其他的层级Layout，使得其排除在相机渲染之外，当需要展示时再设置回UI层级。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述中 2、3、4方法相同点是，都是用内存换CPU，关闭界面时不减少内存，只减少了CPU的消耗。不同点是，方法2 在关闭期间CPU消耗比方法3的更少，在打开时CPU消耗比方法3 的却更多。因为在显示所有节点的同时，UI网格需要重构，而移出屏幕则不需要重构网格。&lt;/p&gt;

&lt;p&gt;方法3 和方法4都使用了相同的原理。只是方法3 用坐标去做摄像机的渲染排除，而方法4 则用层级Layout去做摄像机的排除操作。方法3和4 在CPU消耗上会更少，不过也要注意它们在关闭的同时也需要关闭Update更新程序，以减少不必要的消耗。&lt;/p&gt;

&lt;h3&gt;⑨ 对象池的运用。&lt;/h3&gt;

&lt;p&gt;什么是对象池，以及为什么要用对象池？&lt;/p&gt;

&lt;p&gt;对象池，即对象的池子。对象池里寄存着一些废弃的对象，当计算机程序需要该种对象时，可以向对象池申请，让我们对废弃的对象再利用。&lt;/p&gt;

&lt;p&gt;如果对废物再利用就能省去了很多实例化时的CPU消耗。实例化消耗包括了，模型文件读取，贴图文件读取，GameObject实例化，程序逻辑初始化，内存销毁消耗等。&lt;/p&gt;

&lt;p&gt;对象池的规则是，当需要对象时向对象池申请对象，对象池从池子中拿出以前废弃的对象重新‘清洗’下(重置下)给出去，如果对象池也没有可用对象，则新建一个放入给出去，当对象用完后，把这些废弃的对象放入对象池以便再利用。&lt;/p&gt;

&lt;p&gt;对象池的方法，本质是用内存换CPU的策略。我们在UI界面中，时常会需要不断跳出不同的物体。这时实例化和销毁UI物体是逻辑中消耗最大的，物体被不断新建出来，又不断被销毁。CPU大部分浪费在了实例化和销毁上，渲染只占了很小一部分比重。这时运用对象池就能解决大部分浪费的问题，将要销毁的实例对象，放入对象池并移出屏幕或隐藏，当需要他们时再放出来重新初始化。&lt;/p&gt;

&lt;p&gt;对象池是个用内存换CPU的方法，它用内存付出代价来换取CPU的效率。不过使用的不恰当的话也会引起不少内存问题的，因此对象池最好是要用在重复利用率高的对象上。这里总结了几条对象池运用的经验：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当程序中有重复实例化并不断销毁的对象时需要使用对象池进行优化。重复实例化和销毁操作会消耗大量CPU，在此类对象上使用对象池的优化效果极佳，相反如果在很少或较少做重复和销毁操作的对象上使用对象池，则会浪费内存，得不偿失。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个需要使用对象池的对象都需要继承对象池的基类对象，这样在初始化时可以针对不同对象做重载，区别对待不同类型的对象。让不同对象的初始化方法根据各自的情况分别处理。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;销毁操作时使用对象池接口进行销毁。在销毁物体时要使用对象池提供的销毁接口，让对象池来决定是真销毁，还是只是隐藏对象。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;场景结束时要及时销毁整个对象池，避免无意义的内存驻留。当场景结束后，在对象池内的物体，已经不再适合新的场景了，或者说面临的环境情况与旧场景不同时所以需要及时清理对象池，把内存空出来留给新场景使用。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;⑩ UI贴图设置的优化。&lt;/h3&gt;

&lt;h6&gt;为什么要关心UI贴图设置？&lt;/h6&gt;

&lt;p&gt;首先我们得知道，Unity3D会重置全部贴图格式。可以理解为，无论你是JPG，PNG，PSD等，只要放在Unity3D中，Unity3D会读取图片内容，然后重新生成一个自己格式的图，在引擎中使用的是自己生成的图和格式。因此在Unity3D中使用图片其实不必关心用什么格式的图，只要你做好内容就可以了，比如JPG是没有alhpa通道的，通常做透贴都是PNG，这些图形或颜色内容上的东西是我们需要关心的，其他的交给Unity3D就可以。&lt;/p&gt;

&lt;p&gt;Unity3D中图片的设置也有很多讲究，因为关系到重新生成的图片的格式，最终将决定加载入引擎的是什么样格式的图片，所以我们不得不要研究下贴图的设置问题。&lt;/p&gt;

&lt;p&gt;这里以NGUI和UGUI为例分别讨论。NGUI的UI贴图使用传统的贴图方式，常使用 Editor GUI and Legacy GUI 方式，这种方式隐藏了一些设置参数，为了需要全面掌握所有对图片的功能才能做好优化工作，我们把Editor GUI and Legacy GUI 方式展开为 Advance 类型。&lt;/p&gt;

&lt;p&gt;Advance 里面需要注意的有：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;1.Alpha是否需要。如果需要透明通道，则要把透明通道点开，否则最好关闭。

2.是否需要进行2次方大小的大小纠正。Non Power of 2，对UI贴图来说基本上都是2次方大小的图集，使用对象大多是头像之类的Icon。

3.读写权限去除。常会默认勾选，导致内存量大增。此选项会使贴图在内存中存储两份，内存会有比不勾选大1倍。

4.Mipmap去除。Mipmap是对3D远近视觉的优化，Mipmap会在摄像头离物体远时因为不需要高清的图片而选择使用Mipmap生成的贴图小的模糊图像，从而减轻GPU压力。但是UI里没有远近之分，所以并不需要Mipmap这个选项，而且Mipmap会导致内存和磁盘空间加大，选择小尺寸图像会使得UI看起来模糊。

5.  压缩方式选择。

    压缩方式的选择，主要是为了降低内存消耗，降低CPU与GPU之间的带宽消耗，以及减少包体的大小，在清晰度足够的情况下，我们可以针对性的选择一些压缩方式来优化内存和包体。

    最高的色彩度是无压缩，其次是RGBA16色彩少了点且有透明通道，再次是RGB24没有alpha通道的全彩色，再RGB16色彩少了一半也没了透明通道，最后是算法级别的压缩，RGBA ECT2 8bits和RGBA PVRTC 4bits是带透明通道的压缩算法，RGB ECT2 4bits和RGB PVRTC 4bits，是不带透明通道的压缩算法。

    这样逐级下来，压缩的越来越厉害，同时画质就越来越差。前面有介绍过关于UI贴图Alpha分离的方法，这方法就是压缩的极致和平衡，既做到好画质又最大极限的压缩了图片。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;UI的选项的优化，我们可以通过写脚本的方式，把放入UI的贴图自动设置我们规定好的图片选项，辅助我们更改UI贴图设置，省去不少二次检查时间。例如以下这段，就是利用Unity3D的 Editor API 来自动设置UGUI的精灵图片。&lt;/p&gt;

&lt;p&gt;void Apply&lt;em&gt;ui&lt;/em&gt;sprite()
{
    if(!UIAssetPost.IsInPath(assetImporter.assetPath, UI&lt;em&gt;Sprite&lt;/em&gt;path))
    {
        return;
    }&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;TextureImporter tex_importer = assetImporter as TextureImporter;

if(tex_importer == null) return;

tex_importer.textureType = TextureImporterType.Sprite;
FileInfo file_info = new FileInfo(assetImporter.assetPath);
string dir_name = file_info.Directory.Name;
tex_importer.spritePackingTag = dir_name;
tex_importer.alphaIsTransparency = true;
tex_importer.mipmapEnabled = false;
tex_importer.wrapMode = TextureWrapMode.Clamp;
tex_importer.isReadable = false;

SetCompress(tex_importer);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;要完全省去检查时间是不可能的，在实际项目中我们也不得不从头检查一遍所有贴图的设置情况，来确认是否是我们所期望的设置，不过工作量比以前少了很多，可靠性也增强了许多。&lt;/p&gt;

&lt;h3&gt;⑪ 内存泄露。&lt;/h3&gt;

&lt;p&gt;内存泄露是个敏感的词汇，在各大项目中，都会对内存泄露进行检验，一旦涉及到内存泄露所有内存，大家都会格外重视。其实在整个项目各个地方都有可能，我把内存泄露放在UI章节里是因为UI逻辑占去了游戏逻辑中比较大的一部分，所以内存泄露在UI逻辑中也是重灾区。&lt;/p&gt;

&lt;h6&gt;什么是内存泄露？&lt;/h6&gt;

&lt;p&gt;内存泄漏，简单来说就是由程序向系统申请内存，使用完毕后并没有将内存还给系统导致内存驻留或者浪费的过程。系统本身的内存是有限的，如果内存泄漏一直被调用，就会耗尽系统内存，最终导致奔溃。就像你一直向银行借钱不还一样，银行虽然一直容忍你的不道德行为但银行也是有底线的，最终会切断你的资金来源，一下子收回全部资金，到那时候你就崩溃了。计算机系统也是一样，他不会无限制的让程序申请到内存，当申请内存影响到系统运行时就会停止。&lt;/p&gt;

&lt;h6&gt;为什么会内存泄露？&lt;/h6&gt;

&lt;p&gt;游戏项目内存泄漏简单分两种，一种是程序上的内存泄漏，另一种是资源上的内存泄漏。虽然资源上的内存泄漏也跟程序有关，但跟程序上的自身内存块的内存泄漏相比，它主要是因为资源在使用后或不再使用时没有卸载的原因导致的。&lt;/p&gt;

&lt;p&gt;程序上的内存泄漏主要是因为Mono的垃圾回收机制并没有识别“垃圾”的原因造成的。为什么会没有识别呢，根源还是在编程时的疏忽，在编程时一些不好的习惯，错误的想法，不清晰的逻辑，导致申请的内存或指向内存的引用，没有有效的释放，导致垃圾回收机制没能识别出释放此块内存的理由。
而资源上的内存泄漏，主要是因为人为的申请资源使用完毕后并没有释放，导致资源内存长期驻留在内存里。&lt;/p&gt;

&lt;p&gt;程序上的内存泄漏，需要借助些工具，也可以从框架的角度建立有效的指针计数器来排查，可以说是属于预防型为主排查为辅。而资源上的内存泄漏，就完全是属于人为的过错或疏忽，关键是容易排查。资源内存泄漏，主要排查的内容就是，资源在不需要使用时，却仍然驻留在内存里的情况。&lt;/p&gt;

&lt;h6&gt;什么是垃圾回收机制？&lt;/h6&gt;

&lt;p&gt;Unity3D是使用基于Mono的C#作为脚本语言，它是基于Garbage Collection（简称GC）机制的内存托管语言。那么既然是内存托管，为什么还会存在内存泄漏呢？GC本身并不是万能的，GC能做的是通过一定的算法找到“垃圾”，并且自动将“垃圾”占用的内存回收，并且每次运行垃圾回收需会消耗一定量的CPU。&lt;/p&gt;

&lt;p&gt;找“垃圾”的算法有两种，一种是用引用计数的方式，另一种是跟踪收集的方式。&lt;/p&gt;

&lt;p&gt;引用计数，简单的说，就是当被分配的内存块地址赋值给引用时，增加计数1，相反当引用清除内存块地址时，减少计数1。当引用计数变为0时，表明没有人再需要此内存块了，所以可以把内存块归还给系统，此时这个内存块就是垃圾回收机制要找的“垃圾”。&lt;/p&gt;

&lt;p&gt;另一个是跟踪收集，简单的说就是遍历一遍引用内存块地址的根变量，以及与之相关联的变量，对内存资源没有引用的内存块进行标记，标记为“垃圾”，在回收时还给系统。&lt;/p&gt;

&lt;h6&gt;为什么有了这么智能的垃圾回收机制，还会有内存泄漏呢？&lt;/h6&gt;

&lt;p&gt;首先引用计数的方式它很难解决对象之间相互循环引用的问题，导致引用计数时无法被释放。现代计算机语言中已经很少使用这种方式去做了，但在逻辑组件上或业务框架上有很多，因为这样做简单方便，比如C++智能指针就是这种方式。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;比如 A类中有B类的实例变量，而B类中有A类的实例变量，现在有A,B两个实例，这时A的引用计数为2，B的引用计数也为2，当B变量被置NULL后，B的引用计数只减少了1，因为在A中还有一个，因此，只有当A的实例变量也被销毁时，B实例的引用计数才真正变为0。也就是说B类变量是否销毁的命运同时取决于A和B。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其次跟踪收集并不是万能的，很多时候会有环状的引用链存在，以及包括在编码时错误操作的泄漏，这些编码的泄漏问题在实际编码过程中是非常隐蔽且难以查找的，不少的泄露问题需要人工去检查引用变量是否释放引用，工作量比较巨大且繁琐，特别是程序侧的内存泄漏尤其难找。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;比如常常会有 A类中有B，B类中有C，C类中有D，D类中有A。这种环装的链路，导致跟踪收集比较困难，当C类实体设置为NULL后，B中依然有C，B设置为NULL后，A中依然有B，进而导致B中依然有C。这种就像‘命运共同体’似的环状引用链，导致跟踪收集的垃圾回收机制在被调用时的效果并不明显。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因此垃圾回收并不是万能的，即使有垃圾回收也一样会存在内存泄露问题。如果想避免内存泄露，至少在建立框架或架构时就应该对此有足够的考虑，对基础组件应该更加严谨，在这基础之上再对编程规范进行严格的把控，即使是这样在排查时也要保持足够的耐心和细心。&lt;/p&gt;

&lt;p&gt;资源侧的内存泄漏对游戏项目来说量级上比较大，大到几百MB甚至几个G，不过万幸的是相对程序侧来说资源侧的内存泄漏查找相对比较容易。下面介绍一些关于Unity3D内存运作，泄漏排查，预防泄漏的经验，来帮助大家在实际项目中针对内存泄漏理解，排查，和预防。&lt;/p&gt;

&lt;h6&gt;Unity3D内存是如何运作的？&lt;/h6&gt;

&lt;p&gt;Unity3D中C#起初使用Mono做为虚拟机(VM，和Java一样都是虚拟机托管)运行在各大平台上，也就是说C#代码只要一份就够了(准确的来说应该是IL即中间语言是同一份的)，各大平台的Mono需要各自制作一份来应对各系统的执行接口，简单说也就是说Unity3D通过Mono来跨平台解析并运行C#代码，在Android系统上App的lib目录下存在的libmono.so文件，就是Mono在Android系统上的实现。&lt;/p&gt;

&lt;p&gt;C#代码通过Mono这个虚拟机解析和执行，当需要的内存自然由Mono来进行分配管理。只是Mono的堆内存大小在运行时是只会增加而不会减少的。可以将Mono内存堆理解为一个内存池，每次C#向Mono内存的申请堆内存，都会在池内进行分配，释放的时候也是归还给池里去，而不是释放归还给操作系统。假如某次分配，发现池里的内存不够了，则会对池进行扩建，即向操作系统申请更多的内存扩大池以满足该次以及后面更多的内存分配。需要注意的是，每次对池的扩建都是一次较大的内存分配，每次扩建都会将池扩大6-10MB左右。&lt;/p&gt;

&lt;p&gt;分配在Mono堆内存上的都是程序上需要的内存块，例如静态实例以及这些实例中的变量和数组、类定义数据、虚函数表，函数和临时变量更多得则使用栈来存取。Unity3D的资源则不同，当它被读取进来时是通过Unity3D的C++层，分配在Native堆内存上的那部分内存，与Mono堆内存是分开来管理的。&lt;/p&gt;

&lt;p&gt;Mono通过垃圾回收机制（Garbage Collect，简称GC）对内存进行回收。前面我们说了当Mono需要分配内存时，会先查看空闲内存是否足够，如果足够的话则直接在空闲内存中分配，否则Mono会扩容，在扩容之前Mono会进行一次垃圾回收(GC)以释放更多的空闲内存，如果GC之后仍然没有足够的空闲内存，这时Mono才会向操作系统申请内存扩充堆内存。&lt;/p&gt;

&lt;p&gt;除了空闲内存不足时Mono会自动调用GC外，我们也可以在代码中主动调用GC.Collect()来手动进行GC。不过问题是GC本身是个比较消耗CPU计算量的过程，不仅如此，由于GC会暂停那些需要Mono内存分配的线程（C#代码创建的线程和主线程），因此无论是否在主线程中调用GC都会导致游戏一定程度的卡顿，需要谨慎调用。&lt;/p&gt;

&lt;p&gt;由于各种原因Unity3D后来不再完全依靠Mono了，而另寻了一个解决方案那就是IL2CPP，Unity3D将C#翻译成IL中间语言后再翻译成C++以解决所有问题。那么翻译成C++语言内存就不托管了吗？不是的。内存依然托管，只是这次由C++编写VM来接管内存，不过这个VM只是内存托管而已，并不解析和执行任何代码，它只是个管理器。&lt;/p&gt;

&lt;p&gt;IL2CPP与Mono的区别在什么地方呢？区别在于Mono只将C#翻译为IL中间语言，并把中间语言交给VM去解析和执行，VM的工作既要解析又要执行，这样的话Mono要针对不同平台执行IL程序就需要为每个平台定制一个单独的VM。IL2CPP则是把C#代码翻译为IL中间语言后又再继续翻译为C++代码，对于不同平台来说每次翻译的C++代码必须针对当前平台的API做出些变化，也就是说IL2CPP在不同平台下需要对不同平台的接口进行改造。与Mono针对不同平台拥有不同的VM相比，IL2CPP只是在翻译时改造了不同平台的接口代码，显而易见IL2CPP对程序员来说维护的工作量减少了很多。不仅仅只是程序员维护的工作量少了，在IL2CPP翻译完成后的编译时，使用的是平台本身都各自拥有的C++编译器，用各自平台的C++编译器进行编译后就可以直接执行编译内容无需再通过VM，因此IL2CPP相对Mono的效率会更高一些。&lt;/p&gt;

&lt;h6&gt;资源内存泄漏&lt;/h6&gt;

&lt;p&gt;资源内存泄漏就是Native内存泄漏，与程序内存泄漏不一样，资源内存泄漏都是因为加载后没有释放造成的，也有在逻辑中拷贝了一份资源但没有在使用完释放的情况。基本上都是疏忽大意造成的，除非完全不知道需要卸载。&lt;/p&gt;

&lt;p&gt;Unity3D的 MemoryProfiler 是个查内存泄漏的利器，他是由官方开发的专门用于Unity3D 5.x以上版本的内存快照工具。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/Unity-Technologies/memoryprofiler&quot;&gt;MemoryProfiler&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;它可以快照内存的信息，并可以以文件形式保存和加载，这样我们可以在不同的节点进行内存快照，再经过两者的对比找出内存泄漏的资源，定位泄漏的资源文件，再根据此文件从程序逻辑中寻找泄漏点。&lt;/p&gt;

&lt;p&gt;比较遗憾的是，MemoryProfiler并没有提供两次（或多次）内存快照的比较功能。所以更多的是需要人工去核实。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/4/ui-optimization1.png&quot; alt=&quot;MemoryProfiler&quot;&gt;&lt;/p&gt;

&lt;p&gt;从图中可以看出整体上的内存占用规模，包括，音效，字体，Assetbundle，动画，模型，粒子，贴图，Shader等。也可以点击整个模块细致的检查，模块中的各个点位资源的信息。比如我选中的Texture模块中的一个贴图，就展示出此贴图的信息包括：名字、图案、材质球、以及关联了哪些脚本等。&lt;/p&gt;

&lt;p&gt;我们也可以借助Unity3D自带的Memory Profiler，这是个比较老的工具。它会记录CPU使用情况，精准定位CPU耗时节点，也可以记录Mono堆内存和资源内存的使用情况，并且详细记录下了内存中资源的详细情况。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/4/ui-optimization2.png&quot; alt=&quot;MemoryProfiler&quot;&gt;&lt;/p&gt;

&lt;p&gt;当我们检查到当前场景，不需要用到的资源时，这个资源就是泄漏的点。我们可以顺藤摸瓜根据Profiler提供的信息，在代码中寻找线索。寻找的过程还是很枯燥的，这是肯定的，但当我们寻找出一个资源泄漏点时，可以举一反三的找出更多的资源泄漏点。不过在Editor下编辑场景时Editor本身会加载些资源来达到可视化的目的，这导致在Editor下的使用Memory Profiler时不太准确因为前面你已经查看过这个资源，这个资源已经被加载到内存里了，所以最好在使用 Memory Profiler 前重启Unity3D查看和不编辑任何资源立刻调试。&lt;/p&gt;

&lt;h6&gt;这里介绍两种寻找资源内存泄漏的技巧：&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1） 通过资源名来识别。

        即在美术资源（如贴图、材质）命名的时候，就将其所属的游戏状态放在文件名中，如某贴图叫做bg.png，在房间中使用，则修改为Room_bg.png。

        这样在Profile工具里一坨内存资源里面，混入了一个Room大头的资源，可以很容易地识别出来，也方便利用程序来识别。

        这个方法但也不是万能的，因为在项目制作过程当中，一张图需要被用到各个场景中去，很可能也不只一两个，有时甚至四五个场景中都会用，只用前缀来代替使用场景的指定，很多时候也会造成另一种误区。

        甚至由于项目的复杂度扩展到一定程度，包括人员更替，在检查资源泄漏时，用前缀来判断使用场景点不太靠谱，因为你根本就不知道这张图在哪使用了。所以说技巧只能辅助你，并不是说一定能有效。

    2） 我们可以通过Unity提供的接口Resources.FindObjectsOfTypeAll()进行资源的Dump.

        可以根据需求Dump贴图、材质、模型或其他资源类型，只需要将Type作为参数传入即可。

        Dump成功之后我们将这些信息结果保存成一份文本文件，这样可以用对比工具对多次Dump之后的结果进行比较，找到新增的资源，那么这些资源就是潜在的泄漏对象，需要重点追查。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在平时项目中，我们找到这些泄漏的资源的方法，最直观的方法，就是在每次游戏状态切换的时候，做一次内存采样，并且将内存中的资源一一点开查看，判断它是否是当前游戏状态真正需要的。这种方法最大的问题，就是耗时耗力，资源数量太多眼睛容易看花看漏。&lt;/p&gt;

&lt;p&gt;现在市面上比较有名的Unity3D项目优化工具UWA的GOT，它会逐帧记录资源内存和Mono堆内存的使用情况，并且可以在快照之间进行相互比较，得出新增或减少的资源名称。有了内存快照之间的对比就可以大大加快了我们查找内存泄漏的问题。&lt;/p&gt;

&lt;p&gt;另外在Github上有一个在Editor下可以对内存快照进行比较的工具。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/PerfAssist/PA_ResourceTracker&quot;&gt;内存快照进行比较的工具&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;它是将Unity Memory Profiler改造后，加了快照比较，搜索，内存分配跟踪的功能，在原来Unity Memory Profiler的快照功能上提升了不少实用性。我们可以用这个工具来方便得快照内存以及比较内存的使用情况，借此来查找内存泄漏情况，确实是一个内存泄漏查找利器。&lt;/p&gt;

&lt;p&gt;排查还是后置的方法，在编写程序和架构，特别是基础组件(即内存管理器，资源管理器)时，我们应该强化生命周期的理念，无论是程序内存还是资源内存，都应该有它存在的生命周期，在生命周期结束后就应该及时被释放。具体我们将在“资源加载与释放”章节中详细讲解。&lt;/p&gt;

&lt;p&gt;参考文献：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    深入浅出再谈Unity内存泄漏 作者：Arthuryu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第四章，UI(七) - UI优化(二)</title>
   <link href="http://www.luzexi.com/2018/07/27/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-UI8.html"/>
   <updated>2018-07-27T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/27/Unity3D高级编程之进阶主程-UI8</id>
   <content type="html">&lt;p&gt;这篇我们来继续聊聊优化，UI图集Alpha分离，UI字体拆分，Scroll View 滚屏优化，以及UGUI图在改变颜色或Alpha后，导致对Mesh重构的优化。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;④ UI图集Alpha分离。&lt;/h3&gt;

&lt;h6&gt;为什么要对UI图集进行Alpha分离？&lt;/h6&gt;

&lt;p&gt;我们对UI图集的压缩是减少APP包体大小的一部分，这也是减少内存使用量的一个比较有效方法，内存减少的同时对CPU也会降低些消耗。UI图集的压缩好处很多，但同样也会引起些问题，当我们对图集进行压缩后，在屏幕上显示的效果却不尽如人意，模糊，锯齿，线条等劣质的画面出现。这是因为我们在使用压缩模式ECT或PVRTC时将透明通道也一并压缩进去了，导致了渲染的扭曲，因此我们需要把透明通道alpha分离出来单独压缩。这样就既可以压缩图集，达到缩小内存目的，图像显示又不会太失真。&lt;/p&gt;

&lt;h6&gt;如何分离UI图集的Alpha呢？&lt;/h6&gt;

&lt;p&gt;我们这里主要是针对NGUI的方案，而UGUI由于是内部集成的，Alpha分离在Unity3D的UGUI中已经帮你完成了，因此我们仅仅针对NGUI来讲一讲如何分离alpha。&lt;/p&gt;

&lt;p&gt;首先，用TexturePacker在打图集时将原来打成2张的图集，改成打成一张RGB888的png和一张Alpha8的png。RGB888的PNG图没有alpha，而所有的alpha通道都在Alpha8的PNG里。也可以使用程序分离的方式，把原图中的颜色提取出来放入一张新的图片中，alpha部分提取出来放入另一张图片。&lt;/p&gt;

&lt;p&gt;然后，我们需要修改NGUI的原始shader，把原来的只绑定一张主图的shader改成需要绑定一张主图和一张Alpha图的shader。&lt;/p&gt;

&lt;p&gt;需要修改下面这4个Shader&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Unlit – Transparent Colored.shader，

    Unlit – Transparent Colored 1.shader，

    Unlit – Transparent Colored 2.shader，

    Unlit – Transparent Colored 3.shader
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改的内容为，加入&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;_AlphaTex (&amp;quot;Alpha (A)&amp;quot;, 2D) = &amp;quot;black&amp;quot; {} 变量，用来可以绑定Alpha图
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在 frag 函数中，有对 alpha 与主图 alpha 操作的内容，都替换成Alpha图中的alpha值。用Alpha图的Alpha，来替代原来主图承担的alpha部分，而主图仍然承担主要色彩内容。具体如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;     //fixed4 col = tex2D(_MainTex, i.texcoord) * i.color;
     //return col;
     fixed4 texcol = tex2D(_MainTex, i.texcoord);   
     fixed4 result = texcol;  
     result.a = tex2D(_AlphaTex,i.texcoord).r*i.color.a;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码中，注释掉的部分为原始的只用一张图承担颜色和透明通道的，新加入的方式为用&lt;em&gt;MainTex和&lt;/em&gt;AlphaTex这两张图分别替代颜色和透明通道。&lt;/p&gt;

&lt;p&gt;最后，在以上都完成后，选中一个创建好的图集 prefab 会发现 Inspector 窗口下的预览窗口以及 Sprite 选择窗口中看到的 sprite 都是没有 alpha 通道显示，这是因为用于Editor下的展示模式仍然使用的原始的一张图使用两个通道的方式，因此我们也需要修改这些编辑器上的NGUI工具。&lt;/p&gt;

&lt;p&gt;修复这个问题我们的解决方案是在编辑器模式下动态生成一个rgba32的texture来替换它，rgb和alpha通道的值分别取两张我们现在拥有的图。&lt;/p&gt;

&lt;p&gt;其中需要修改的NGUI编辑类的有以下这几个文件:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    UIAtlas.cs，

    UIAtlasInspector.cs，

    SpriteSelector.cs，

    NGUITools.cs，

    UISpriteInspector.cs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改以上类里，绘制图片时都启用新生成的图，就是上面所说的用RGB888和Alpha合成的临时图。&lt;/p&gt;

&lt;p&gt;其实修改的部分并不多，修改的方向和原理也简单，首先生成两张图一张只带颜色，一张只带Alpha通道，再是 Shader 的 alpha 来源修改为新的alpha图，最后是 Shader修改导致编辑器的显示问题，需要在编辑器部分生成临时的图来替换原来显示的图。&lt;/p&gt;

&lt;h3&gt;⑤ UI字体拆分。&lt;/h3&gt;

&lt;p&gt;为什么要拆分UI字体？&lt;/p&gt;

&lt;p&gt;项目中字体其实占了很大的空间，如果有几个不同的字体一起展示在屏幕上，会消耗较大的内存。字体很多时候不可避免，但需要规范和整理，并且也需要优化。我们需要更快的性能效率，拆分字体会让加载字体的速度更快，让场景加载的速度更快。&lt;/p&gt;

&lt;p&gt;如何拆分UI字体？&lt;/p&gt;

&lt;p&gt;我们的解决方案是把字体中的常用字拆出来，另外生成一个字体文件，让字体文件变小，内存变少，最终使得加载变快。&lt;/p&gt;

&lt;p&gt;比如在登陆场景中，我们只需要几个数字和字母，所以我们大可以从字体中提取数字和26个字母成立一个新的字体在场景中应用，这样就省去了大的字体的加载。&lt;/p&gt;

&lt;p&gt;又比如，注册登陆后的取名字的场景，我们去掉部分使用频率比较少的字，只保留3000个常用字。将字体中常用的3000字拆出来，生成新的字体进而用到场景中去。这样就节省掉了很多无用的字形图片存放在字体里，从而节省了不少内存空间。&lt;/p&gt;

&lt;h3&gt;⑥ Scroll View 滚屏优化。&lt;/h3&gt;

&lt;p&gt;Scroll View 使用在类似背包的界面中非常常见，会有巨量的元素存在在窗口中进行渲染，所以在生成和滑动时，会消耗大量的CPU来重构Mesh，进而导致游戏运行缓慢，出现卡顿现象。这是由于我们前面在UGUI源码剖析中介绍过的元素属性上的改变将导致网格的重构，如果不断移动则每帧都需要重构，导致大量的CPU浪费。&lt;/p&gt;

&lt;p&gt;要优化这种情况，就必须对滚屏菜单组件进行改造，将原来策略中所有元素都必须一次性实例化的问题，改为只实例化需要显示的实例数量。然后在拖动滑动的期间，实时判断是否有有UI元素被移出画面，这样的元素可以重复利用，将他们填补到需要显示的位置的上去，再对该单位元素的属性重新设置，我们需要的元素信息，让它展现为在该位置需要显示的元素的样子。&lt;/p&gt;

&lt;p&gt;从表现上观察就如同下面所描述的那样:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    我们在窗口中实例化10排元素显示在那里滚动窗口中，其中5排是展示在中央的窗口上的，另外5排中的顶上2排因为超出了窗口被裁剪而无法看见，

    同样的下面3排也是因为超出了窗口被裁剪无法看见，在整个10排元素整体向上滑动期间，顶上2排变成了3排，底下3排变成了2排，

    其中最顶上的1排超过了重置的界线，就被移动到了底下去了，这样整体10排元素，变成了顶上2排，底下3排的局面，

    这样不断反复，不断在移动顶上或底下的1排元素，把他们移动到需要补充的位置上去。看起来像是，很顺畅地上下滚屏整个500个元素那样，实际上是对这5排元素在不断重复的利用而已。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Scroll View 自定义组件是大部分项目都必须的，大部分项目都会遇到这类问题也会去改善这个问题，有一个自己优化过的自定义组件，能很快很高效的解决这类问题。&lt;/p&gt;

&lt;h3&gt;⑦ UGUI图在改变颜色或Alpha后，导致对Mesh重构的优化。&lt;/h3&gt;

&lt;p&gt;这里再稍微解释下为什么在UGUI的图元素在改变颜色或Alpha后会导致Mesh的重构？UGUI的Mesh的合并机制是拥有相同的材质球的Mesh合并在一起才能达到最佳效果，一个材质球对应一个图集，只有相同图集内的图片才需要合并在一起。&lt;/p&gt;

&lt;p&gt;UGUI中当元素需要对颜色进行改变时，UGUI是通过改变顶点的颜色来实现颜色的变化的。改变当前元素的顶点颜色，然后需要将它们重新合并到整块的Mesh里去，因为不能直接从原来合并好的Mesh上找到当前的顶点位置，所以需要一次整体的合并重构Mesh。&lt;/p&gt;

&lt;p&gt;元素改变了 alpha 则会更糟糕，由于改变 alpha 的效果无法通过改变顶点的颜色来实现，于是就需要拆分出一个另外的材质球来进行渲染，通过对材质球的参数改变来实现 alpha 的效果。这样做不但重构了Mesh，还多出来个材质球，就相当于多一个Drawcall，效率消耗相当大。&lt;/p&gt;

&lt;p&gt;倘若在动画里，每一帧都对UGUI的颜色和Alpha进行改变，那么UGUI每一帧都会对Mesh进行重构一次，并且每帧都生成新的材质球来实现 alpha 的透明效果。这样做消耗了大量的CPU运算，通常使得UI界面在运行动画时效率特别低下，即使拆分动静分离也无济于事。&lt;/p&gt;

&lt;p&gt;如何对此做优化呢？我们不希望在UI颜色改变时，导致Mesh重构，这样动画中消耗掉太多CPU，那么我们就自己建一个材质球，提前告诉UGUI：我们使用自己的特殊的材质球进行渲染。当颜色动画对颜色和 alpha 更改时，我们直接对我们自定义的材质球进行颜色和 alpha 的改变。这样UGUI就不需要重构Mesh了，因为把渲染的工作交给了新的材质球，而不是通过 UGUI 设置顶点颜色和新材质球来达到效果。&lt;/p&gt;

&lt;p&gt;如何操作？&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    首先，我们需要把UGUI的Shader下载下来。

    然后，建立一个自己的材质球，并且材质球里使用下载下来的UGUI的Shader。

    再次，把这个材质球放入Image或RawImage的Material上去，与Image或RawImage绑定。

    接着，写个类比如class ImageColor继承MonoBehaviour，里面有个public 的颜色变量，比如public Color mColor，类里面只干一件事，在update里一直判断是否需要更改颜色，如果颜色被更改，就把颜色赋值给Material。

    最后，把动画文件中的颜色部分从更改Image或RawImage的颜色变为更改 ImageColor 的颜色变量。这样UGUI颜色动画在播放时，不会直接去改变 Image 或 RawImage 的颜色，改变的是我们创建的 ImageColor 的颜色。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过 ImageColor 来改变材质球属性，最后达到不重构Mesh的效果。切换元素的贴图时也一样可以做到不重构的效果，由于贴图更换会导致重构，为了达到不重构的目的可以给一个自定义材质球的并且更换材质球中的贴图。&lt;/p&gt;

&lt;p&gt;不过要注意下，因为启用了自定义的材质球，所以Drawcall就提高了，因为每个材质球都会单独增加一次Drawcall。并且当 alpha 不是1的时候，会与原有的UGUI产生的材质球的透贴形成不同的渲染排序，原因是当两张透贴放在一起渲染时，alpha混合会导致渲染排序混乱而前后不一致。所以使用时要小心谨慎，权衡利弊用在恰当的地方将发挥大的功效，用在不恰当的地方则事倍功半。&lt;/p&gt;

&lt;p&gt;这个半透明物体的排序问题，归根结底是无法写入深度数据问题，是3D渲染中无法彻底解决的问题。我们会在后面的渲染管线与图形学章节中详细介绍。这里解决半透明排序问题，可以通过改变自定义的 Shader 中的渲染次序(RenderQueue)来解决。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第四章，UI(七) - UI优化(一)</title>
   <link href="http://www.luzexi.com/2018/07/27/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-UI7.html"/>
   <updated>2018-07-27T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/27/Unity3D高级编程之进阶主程-UI7</id>
   <content type="html">&lt;p&gt;这篇我们来聊聊，优化UI的几种方法，UI动静分离，拆分过大的UI，UI预加载。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;① UI动静分离。&lt;/h3&gt;

&lt;p&gt;什么是UI动静分离？&lt;/p&gt;

&lt;p&gt;动指的是元素移动，或放大缩小频率比较高的UI，静就是静止不动的，或者说动的比较少的UI。&lt;/p&gt;

&lt;p&gt;我们在做项目中，避免不了一些UI会动的而且是不停的动的UI元素，这些一直在动的UI元素就是UI性能的祸害。&lt;/p&gt;

&lt;p&gt;那么为什么要将他们分离开来呢？&lt;/p&gt;

&lt;p&gt;UGUI 和 NGUI一样，都是用模型构建UI画面的，在构建后都做了合并Mesh的有优化操作，不合并会导致无数drawcall进而导致GPU队列阻塞或消耗加大，游戏性能降低。&lt;/p&gt;

&lt;p&gt;合并操作是有极大益处的，但问题在于UI元素一动就需要重新合并，将那些原本不需要重新构建的内容也一并重构了，导致原来合并Mesh的好事变坏事。&lt;/p&gt;

&lt;p&gt;因此要将行动的UI元素和静态不动的UI元素分离开来，让合并的范围缩小，只合并那些会动的UI元素，因为他们重绘的频率比较高，而那些基本不动的UI元素就不让它们参与重新合并Mesh的操作了。&lt;/p&gt;

&lt;p&gt;那么如何分离他们呢？&lt;/p&gt;

&lt;p&gt;UGUI 和 NGUI都有自己的重绘合并节点，我们可以称它们为画板，UGUI是Canvas，NGUI是UIPanel。&lt;/p&gt;

&lt;p&gt;以画板为节点进行拆分。把会动的UI元素放入专门为它们准备的合并节点上，而将静止不动的UI留在原来的合并节点上。&lt;/p&gt;

&lt;p&gt;这样一来，当会动的UI元素来回移动缩放的时候，不再会重构静态部分的UI了。在实际项目中静态的UI元素占UI的数量比较多，而动态的UI元素只是小部分。动静分离后，减少了不少的CPU在重绘和合并时的消耗。&lt;/p&gt;

&lt;h3&gt;② 拆分过大的UI。&lt;/h3&gt;

&lt;h6&gt;为什么要拆分过大的UI？&lt;/h6&gt;

&lt;p&gt;项目的制作过程是个比较长期的时间过程，在这个过程中UI的大小会随着项目时间的积累而不断扩大。&lt;/p&gt;

&lt;p&gt;很多时候我们总是莫名其妙的感觉，‘怎么这个UI界面，前段时间还好好的，现在打开会变得如何缓慢呢？！‘。&lt;/p&gt;

&lt;p&gt;随着项目的推进，UI经手的人越来越多，添加的功能也越来越多，有的甚至一个Prefab里，装着2-3个界面。它们在展示一个界面时时隐藏了其他的几个而已，最后导致UI过大，实例化，初始化时，消耗的CPU过大。我们需要想办法拆分这些，过大的UI界面。&lt;/p&gt;

&lt;h6&gt;如何拆分？&lt;/h6&gt;

&lt;p&gt;把隐藏的UI界面拆分出来，成为独立运作的界面，只在需要它们时才调用并实例化。其次，如果界面内容还是很多，我们可以把2次显示的内容拆出来。&lt;/p&gt;

&lt;p&gt;什么是2次内容？打个比方，一个界面打开时会显示一些内容(例如动画)，完毕后或者点击后才能看到另外的内容。这之后出现的内容视为2次显示内容，可以考虑拆分出来成为独立的界面，需要时再加载。&lt;/p&gt;

&lt;p&gt;注意权衡加载速度与内存，过大的UI固然加载缓慢内存消耗大，但拆分成小个体时，如果小个体频繁加载和销毁，也同样会消耗过多CPU。如果加载和销毁过于频繁，我们可以使用后面介绍的优化方法，把它们存起来不销毁。&lt;/p&gt;

&lt;h3&gt;③ UI预加载。&lt;/h3&gt;

&lt;p&gt;为什么要进行UI的预加载？&lt;/p&gt;

&lt;p&gt;我们在UI实例化时，需要将Prefab实例化到场景中，这期间还会有Mesh的合并，组件的初始化，渲染初始化，图片的加载，界面逻辑的初始化等程序调用，消耗掉了很多CPU。这导致了在我们打开某个界面时，出现卡顿的现象，就是CPU消耗过重的表现。&lt;/p&gt;

&lt;p&gt;上面讲的拆分UI是一个方面，不过只能在一些冗余比较大的界面上做优化，而一些容易比较小，难以拆分的UI界面，就很难再用拆分的方法优化效果。甚至有的UI界面即使拆分后，任然会消耗很多CPU。因此我们使用UI预加载，在游戏开始前加载一些UI界面，让实例化的消耗在游戏前平均分摊在等待的时间线上。&lt;/p&gt;

&lt;h6&gt;如何进行UI预加载？&lt;/h6&gt;

&lt;p&gt;第一步，最直接的方法，在游戏开始前加载UI资源但不实例化，只是把资源加载到内存。这样当点击按钮后，弹出UI界面时就少了一点加载资源的时间，把CPU消耗重心放在了实例化和初始化上。&lt;/p&gt;

&lt;p&gt;第二步，在第一种方法的基础上，打开界面时CPU还是消耗太严重，那么就将UI实例化和初始化也提前到游戏开始前。只是实例化和初始化后，对UI界面进行了隐藏，当需要他出现时，再显示出来，而不再重新实例化，当关闭时，也同样只是隐藏而不是销毁。这样一来在打开和关闭时，只消耗了少量CPU在展示和隐藏上。&lt;/p&gt;

&lt;p&gt;现在项目大都使用 AssetBundle 来做资源，但也有部分使用 Unity3D 的本地打包机制，这些prefab在Unity3D中有Preload的功能，在平台设置里这个功能，可以把需要预加载的Prefab加入到列表中去。它会将这些Prefab在进入APP或者说打开应用展示LOGO界面时进行预加载。在APP初始化时，预加载了指定的Prefab，CPU消耗在启动页面上，对于使用Resources.Load接口的加载整体效果不错。&lt;/p&gt;

&lt;p&gt;最后，所有的预加载，都会出现另一个问题，CPU集中消耗带来的卡顿。预加载并没有削减CPU，CPU消耗的总量并没有发生变化。总体需要加载的图片数是不变的，实例化的元素数不变，以及初始化程序需要消耗的时间也不变，所有消耗总量是不变的。我们只是把它们这些消耗分离了或者说提前了，拆分到了各个时间碎片里去，让人感觉不到一瞬间有很大的CPU消耗。所以如果我们将这些预加载，集中在了某个位置，比如全部集中在游戏开始前，或者进度条的某个位置，也同样会有强烈的卡顿感，因为CPU在这个点进行了集中的消耗。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第四章，UI(四) - UGUI核心源码剖析</title>
   <link href="http://www.luzexi.com/2018/07/27/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-UI4.html"/>
   <updated>2018-07-27T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/27/Unity3D高级编程之进阶主程-UI4</id>
   <content type="html">&lt;p&gt;前面我们对NGUI和UGUI进行了比较，讲述了UGUI的组件使用详解以及一些内在运作机制，又对UGUI源码中输入事件模块源码进行了剖析。此篇我们接着上篇的源码剖析，讲解下UGUI组件部分的核心源码。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;UGUI核心源码剖析&lt;/h3&gt;

&lt;p&gt;我们依然从文件夹结构下手，从最容易看懂的地方下手，寻找某块之间的划分，我们先来看下核心部分的文件结构，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/4/ugui3.png&quot; alt=&quot;ugui-core&quot;&gt;&lt;/p&gt;

&lt;p&gt;从图中可以看出，以文件夹为单位，拆分模块有，Culling(裁剪), Layout(布局), MaterialModifiers(材质球修改器), SpecializedCollections(收集), Utility(实用工具), VertexModifiers(顶点修改器)，我们下面就来分析这些模块.&lt;/p&gt;

&lt;h3&gt;Culling 裁剪模块&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/4/ugui4.png&quot; alt=&quot;ugui-core&quot;&gt;&lt;/p&gt;

&lt;p&gt;Culling 里是对模型裁剪的工具类，大都用在了 Mask 遮罩上，只有 Mask 才有裁剪的需求。&lt;/p&gt;

&lt;p&gt;里面四个文件，其中一个是静态类，一个是接口类。&lt;/p&gt;

&lt;p&gt;代码不多，但其中Clipping 类中有2个函数比较重要，常常被用在Mask的裁剪上，如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindCullAndClipWorldRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RectMask2D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rectMaskParents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rectMaskParents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;validRect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compoundRect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rectMaskParents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;canvasRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rectMaskParents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compoundRect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RectIntersect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compoundRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rectMaskParents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;canvasRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cull&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compoundRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compoundRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;validRect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compoundRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compoundRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compoundRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compoundRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compoundRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compoundRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;validRect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RectIntersect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xMin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yMin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xMin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yMin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xMin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yMin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xMin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yMin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述中，Clipping 类的函数里，第一个函数 FindCullAndClipWorldRect 的意义是，将很多 RectMask2D 重叠部分，计算出它们的重叠部分的区域。第二个函数 RectIntersect 为第一函数提供了计算服务，其意义是计算两个矩阵的重叠部分。&lt;/p&gt;

&lt;p&gt;这两个函数都是静态函数，可以视为工具函数，直接调用就可以，不需要实例化。&lt;/p&gt;

&lt;h3&gt;Layout 布局模块&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/4/ugui5.png&quot; alt=&quot;ugui-core&quot;&gt;&lt;/p&gt;

&lt;p&gt;我们从文件夹结构可以看出，Layout 主要功能都是布局方面，包括横向布局，纵向布局，方格布局等等。总共12个文件，有9个带有 Layout 字样，它们都是处理布局的。&lt;/p&gt;

&lt;p&gt;除了处理布局内容以外，其余3个文件，CanvasScaler，AspectRatioFitter，ContentSizeFitter 则是调整自适应功能。&lt;/p&gt;

&lt;p&gt;从 ContentSizeFitter，AspectRatioFitter 都带有 Fitter 字样可以了解到，它们的功能都是处理自适应。其中 ContentSizeFitter 处理的是内容自适应的， 而 AspectRatioFitter 处理的是朝向自适应的，包括以长度为基准的，以宽度为基准的，以父节点为基准的，以外层父节点为基准的自适应，四种类型的自适应方式。&lt;/p&gt;

&lt;p&gt;另外 CanvasScaler 做的功能非常重要，它操作的是 Canvas 整个画布针对不同屏幕进行的自适应调整。&lt;/p&gt;

&lt;p&gt;我们着重来看看 CanvasScaler 里的代码，其CanvasScaler的核心函数:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HandleScaleWithScreenSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scaleFactor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_ScreenMatchMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScreenMatchMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MatchWidthOrHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// We take the log of the relative width and height before taking the average.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Then we transform it back in the original space.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// the reason to transform in and out of logarithmic space is to have better behavior.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// If one axis has twice resolution and the other has half, it should even out if widthOrHeight value is at 0.5.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// In normal space the average would be (0.5 + 2) / 2 = 1.25&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// In logarithmic space the average is (-1 + 1) / 2 = 0&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ReferenceResolution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kLogBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ReferenceResolution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kLogBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logWeightedAverage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Lerp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_MatchWidthOrHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scaleFactor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Pow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kLogBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logWeightedAverage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScreenMatchMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Expand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scaleFactor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ReferenceResolution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ReferenceResolution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScreenMatchMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Shrink&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scaleFactor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ReferenceResolution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ReferenceResolution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;SetScaleFactor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scaleFactor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SetReferencePixelsPerUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_ReferencePixelsPerUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不同 ScreenMathMode 模式下 CanvasScaler 对屏幕的适应算法，包括优先匹配长或宽的，最小化固定拉伸的，以及最大化固定拉伸三种数学计算方式。其中代码中在优先匹配长或宽算法中，介绍了使用Log和Pow来计算缩放比例可以表现的更好。&lt;/p&gt;

&lt;h3&gt;MaterialModifiers, SpecializedCollections, Utility&lt;/h3&gt;

&lt;p&gt;材质球修改器，特殊收集器，实用工具，这三块相对代码量少却很重要，他们是其他模块所依赖的工具。&lt;/p&gt;

&lt;p&gt;文件夹结构如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/4/ugui6.png&quot; alt=&quot;ugui-core&quot;&gt;&lt;/p&gt;

&lt;p&gt;IMaterialModifier 是一个接口类，为Mask 遮罩修改材质球所准备的，但所用方法都需要各自实现。&lt;/p&gt;

&lt;p&gt;IndexedSet 是一个容器，在很多核心代码上都有使用，它加速了移除元素的速度，以及加速了元素包含判断。&lt;/p&gt;

&lt;p&gt;ListPool是List容器对象池，ObjectPool是普通对象池，很多代码上都用到了它们，对象池让内存利用率更高。&lt;/p&gt;

&lt;p&gt;VertexHelper 特别重要，它是用来存储生成 Mesh 网格需要的所有数据，由于在Mesh生成的过程中顶点的生成频率非常高，因此 VertexHelper 存储了 Mesh 的所有相关数据的同时，用上面提到的ListPool和ObjectPool做为对象池来生成和销毁，使得数据高效得被重复利用，不过它并不负责计算和生成 Mesh，计算和生成由各自图形组件来完成，它只为它们提供计算后的数据存储服务。&lt;/p&gt;

&lt;h3&gt;VertexModifiers&lt;/h3&gt;

&lt;p&gt;顶点修改器为效果制作提供了更多基础方法和规则。&lt;/p&gt;

&lt;p&gt;文件夹结构如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/4/ugui7.png&quot; alt=&quot;ugui-core&quot;&gt;&lt;/p&gt;

&lt;p&gt;VertexModifiers 模块，主要用于修改图形网格，尤其是在UI元素网格生成完毕后对其进行二次修改。&lt;/p&gt;

&lt;p&gt;其中 BaseMeshEffect 是抽象基类，提供所有在修改UI元素网格时所需的变量和接口。&lt;/p&gt;

&lt;p&gt;IMeshModifier 是关键接口，在下面的渲染核心类 Graphic 中会获取所有拥有这个接口的组件，然后依次遍历并调用 ModifyMesh 接口来触发改变图像网格的效果。&lt;/p&gt;

&lt;p&gt;当前在源码中拥有的二次效果包括，Outline(包边框)，Shadow(阴影)，PositionAsUV1(位置UV) 都继承了 BaseMeshEffect 基类，并实现了关键接口 ModifyMesh。其中 Outline 继承自 Shadow， 他们的共同的关键代码，我们可以重点看一下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplyShadowZeroAlloc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIVertex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UIVertex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neededCpacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Capacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neededCpacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Capacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neededCpacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_UseGraphicAlpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;newColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此函数作用是，在原有的Mesh顶点基础上，加入新的顶点，这些新的顶点复制了原来的顶点数据，修改颜色并向外扩充，使得原图形外渲染出外描边或者阴影。&lt;/p&gt;

&lt;h3&gt;核心渲染类&lt;/h3&gt;

&lt;p&gt;现在我们来看看核心渲染类的奥秘所在。&lt;/p&gt;

&lt;p&gt;我们常用的组件 Image，RawImage，Mask，RectMask2D，Text，InputField 中，Image，RawImage，Text 都是继承了 MaskableGraphic ，而 MaskableGraphic 又继承自 Graphic 类，这里 Graphic 类相对比较重要，是基础类也存些核心算法。除了这几个类外 CanvasUpdateRegistry 是存储和管理所有可绘制元素的管理类也是个蛮重要的类，我们会在下面的内容中介绍。&lt;/p&gt;

&lt;h6&gt;我们首先来看 Graphic 核心部分，它有两个地方比较重要，这两个地方揭示了 Graphic 的运作机制。&lt;/h6&gt;

&lt;p&gt;第一个如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetAllDirty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SetLayoutDirty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SetVerticesDirty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SetMaterialDirty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetLayoutDirty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;LayoutRebuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MarkLayoutForRebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rectTransform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_OnDirtyLayoutCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m_OnDirtyLayoutCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetVerticesDirty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;m_VertsDirty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CanvasUpdateRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RegisterCanvasElementForGraphicRebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_OnDirtyVertsCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m_OnDirtyVertsCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetMaterialDirty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;m_MaterialDirty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CanvasUpdateRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RegisterCanvasElementForGraphicRebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_OnDirtyMaterialCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m_OnDirtyMaterialCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码中，SetAllDirty 设置并通知元素需要重新布局、重新构建网格、以及重新构建材质球。 它通知 LayoutRebuilder 布局管理类进行重新布局，在 LayoutRebuilder.MarkLayoutForRebuild 中它调用 CanvasUpdateRegistry.TryRegisterCanvasElementForLayoutRebuild 加入重构队伍，最终重构布局。&lt;/p&gt;

&lt;p&gt;SetLayoutDirty、SetVerticesDirty、SetMaterialDirty 都调用了 CanvasUpdateRegistry.RegisterCanvasElementForGraphicRebuild，它被调用时可以认为是通知它去重新重构Mesh，但它并没有立即重新构建，而是将需要重构的元件数据加入到IndexedSet&lt;ICanvasElement&gt;容器中，等待下次重构。注意，CanvasUpdateRegistry 只负责重构Mesh网格，并不负责渲染和合并。我们来看看 CanvasUpdateRegistry 的RegisterCanvasElementForGraphicRebuild 函数部分:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RegisterCanvasElementForGraphicRebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ICanvasElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;InternalRegisterCanvasElementForGraphicRebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TryRegisterCanvasElementForGraphicRebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ICanvasElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;InternalRegisterCanvasElementForGraphicRebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InternalRegisterCanvasElementForGraphicRebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ICanvasElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_PerformingGraphicUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Trying to add {0} for graphic rebuild while we are already inside a graphic rebuild loop. This is not supported.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_GraphicRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;m_GraphicRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码中，InternalRegisterCanvasElementForGraphicRebuild 将元素放入重构队列中等待下一次重构。&lt;/p&gt;

&lt;p&gt;以及重构时的逻辑:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Comparison&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ICanvasElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_SortLayoutFunction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SortLayoutList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PerformUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CleanInvalidItems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;m_PerformingLayoutUpdate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//布局重构&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m_LayoutRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_SortLayoutFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CanvasUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PostLayout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_LayoutRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rebuild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m_LayoutRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectValidForUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;rebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Rebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CanvasUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LogException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_LayoutRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m_LayoutRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutComplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m_LayoutRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m_PerformingLayoutUpdate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 裁剪&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// now layout is complete do culling...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ClipperRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Cull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//元素重构&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m_PerformingGraphicUpdate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CanvasUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PreRender&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CanvasUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MaxUpdateValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m_GraphicRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m_GraphicRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectValidForUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Rebuild&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CanvasUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LogException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m_GraphicRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_GraphicRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m_GraphicRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutComplete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;m_GraphicRebuildQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;m_PerformingGraphicUpdate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码中，PerformUpdate 为 CanvasUpdateRegistry 在重构调用中的逻辑。先将需要重新布局的元素取出来一个个调用Rebuild 函数重构，再对布局后的元素进行裁剪，裁剪后对布局中每个需要重构的元素取出来调用 Rebuild 函数进行重构，最后做一些清理的事务。&lt;/p&gt;

&lt;h6&gt;我们再来看看 Graphic 另一个重要的函数，即执行网格构建函数。&lt;/h6&gt;

&lt;p&gt;如下代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DoMeshGeneration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rectTransform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rectTransform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rectTransform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;OnPopulateMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_VertexHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;s_VertexHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// clear the vertex helper so invalid graphics dont draw.&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GetComponents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IMeshModifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IMeshModifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ModifyMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_VertexHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ListPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;s_VertexHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FillMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workerMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;canvasRenderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SetMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;workerMesh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此段代码是 Graphic 构建 Mesh 的部分，先调用OnPopulateMesh创建自己的Mesh网格，然后调用所有需要修改 Mesh 的修改者(IMeshModifier)也就是网格后处理组件(描边等效果组件)进行修改，最后放入 CanvasRenderer 。&lt;/p&gt;

&lt;p&gt;其中 CanvasRenderer 是每个绘制元素都必须有的组件，它是画布与渲染的连接组件，通过 CanvasRenderer 我们才能把网格绘制到 Canvas 画布上去。&lt;/p&gt;

&lt;p&gt;这里使用 VertexHelper 是为了节省内存和CPU消耗，它内部采用List容器对象池，将所有使用过的废弃的数据都存储在里pool池子的容器中，当需要时再拿旧的继续使用。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VertexHelper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDisposable&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_Positions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_Colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_Uv0S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_Uv1S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_Normals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_Tangents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_Indicies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListPool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码为 VertexHelper 的定义部分。&lt;/p&gt;

&lt;p&gt;组件中，Image, RawImage, Text 都override重写了 OnPopulateMesh 函数。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    protected override void OnPopulateMesh(VertexHelper toFill)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为这些需要有自己自定义的网格样式，构建不同类型的画面。&lt;/p&gt;

&lt;p&gt;其实 CanvasRenderer 和 Canvas 才是合并Mesh网格的关键，但 CanvasRenderer 和 Canvas 并没有开源出来。并且从源码上看，他们是 C++ 编写的，从另外dll或so引进来。&lt;/p&gt;

&lt;p&gt;我试图通过查找反编译的代码查看相关内容，也没有找到，我们无法获得这部分的源码。但仔细一想，也差不多能想个大概。合并部分无非就是每次重构时获取 Canvas 下面所有的 CanvasRenderer 实例，将它们的 Mesh 合并起来，仅此而已。因此关键还是要看，如何减少重构次数，以及提高内存，CPU使用效率。&lt;/p&gt;

&lt;h6&gt;除了 Graphic类，遮罩部分也是我们非常关心的问题，我们继续看 Mask 遮罩部分的核心部分：&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maskMaterial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StencilMaterial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseMaterial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StencilOp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompareFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Always&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ShowMaskGraphic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ColorWriteMask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;All&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;StencilMaterial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_MaskMaterial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m_MaskMaterial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maskMaterial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unmaskMaterial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StencilMaterial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseMaterial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StencilOp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Zero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompareFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Always&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;StencilMaterial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_UnmaskMaterial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m_UnmaskMaterial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unmaskMaterial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;graphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;canvasRenderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;popMaterialCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;graphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;canvasRenderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SetPopMaterial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_UnmaskMaterial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_MaskMaterial&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从上述代码中看出来，Mask 组件调用了模板材质球构建了一个自己的材质球，因此它使用了实时渲染中的模板方法来裁切不需要显示的部分，所有在 Mask 组件后面的物体都会进行裁切。我们可以说 Mask 是在 GPU 中做的裁切，使用的方法是着色器中的模板方法。&lt;/p&gt;

&lt;p&gt;不过 RectMask2D 并不和 Mask 一样。我们来看 RectMask2D 核心部分源码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PerformClipping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// if the parents are changed&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// or something similar we&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// do a recalculate here&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_ShouldRecalculateClipRects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MaskUtilities&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetRectMasksForClip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_Clippers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m_ShouldRecalculateClipRects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// get the compound rects from&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the clippers that are valid&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validRect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clipRect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Clipping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FindCullAndClipWorldRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_Clippers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clipRect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_LastClipRectCanvasSpace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ClipTargets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;m_ClipTargets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SetClipRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clipRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;m_LastClipRectCanvasSpace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clipRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m_LastClipRectValid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ClipTargets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;m_ClipTargets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Cull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_LastClipRectCanvasSpace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_LastClipRectValid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述源码中我们可以看到，RectMask2D 会先计算并设置裁切的范围，再对所有子节点调用裁切操作。其中:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    MaskUtilities.GetRectMasksForClip(this, m_Clippers);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;获取了所有有关联的 RectMask2D 遮罩范围，然后&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Rect clipRect = Clipping.FindCullAndClipWorldRect(m_Clippers, out validRect);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;计算了需要裁切的部分，实际上是计算了不需要裁切的部分，其他部分都进行裁切。最后&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_ClipTargets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;m_ClipTargets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SetClipRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clipRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对所有需要裁切的UI元素，进行裁切操作。其中 SetClipRect 裁切操作的源码，如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetClipRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clipRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;canvasRenderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EnableRectClipping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clipRect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;canvasRenderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DisableRectClipping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最后操作是在 CanvasRenderer 中进行的。前面说过 CanvasRenderer 是我们无法得知内容。不过我们可以想到这里面的内容，计算两个四边形的相交点，再组合成裁切后的内容。&lt;/p&gt;

&lt;h3&gt;至此我们把 UGUI 的源代码都剖析完毕了。其实并没有高深的算法或者技术。所有核心部分都围绕着，如何构建Mesh，谁将重构，以及如何裁切的问题上。很多性能关键在于，如何减少重构次数，以及提高内存和CPU的使用效率。&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/Unity-Technologies/ui/downloads/?tab=downloads&quot;&gt;UGUI源码地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Unity-Technologies/UnityCsReference/tree/master/Runtime&quot;&gt;Unity3D的C#部分开源代码地址&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>重写Jekyll的Relate功能</title>
   <link href="http://www.luzexi.com/2018/07/26/jekyll-related-page.html"/>
   <updated>2018-07-26T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/26/jekyll-related-page</id>
   <content type="html">&lt;p&gt;Jekyll 的 ‘Relate-相关文章’的功能，写的真的不好用。完全表达不了相关文章的含义。&lt;/p&gt;

&lt;p&gt;于是打算修一下 Relate 部分的功能。&lt;/p&gt;

&lt;p&gt;网上查了很久，很多人在抱怨，但没人把写好的 Relate 放到网上。&lt;/p&gt;

&lt;p&gt;唯一一个Jekyll 的 Relate 插件都是渣的要命的那种，根本没法用。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;于是就有了重写这个功能的欲望，本想也简单，只是几个for循环而已。&lt;/p&gt;

&lt;p&gt;原以为是 Jekyll 是 Ruby 写的，网页上也是 Ruby，还复习了下 Ruby 写法。以前写过很久没用就会忘记。&lt;/p&gt;

&lt;p&gt;最后发现网页部分不是Ruby语法呢，而是 Liquid 的语法，一款用 ruby 写的‘模板引擎’。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;查了下他的用法，API还真的不多，用起来好难受。比如 for循环 就是个要命的点。还有变量申明和运算，和平常用的语言相差有点大的。&lt;/p&gt;

&lt;h3&gt;关于Relate功能，我希望是，有最新的文章链接，之前的文章链接和之后的文章链接，让读者能有更大的概率找到自己想要的文章。&lt;/h3&gt;

&lt;p&gt;写完后的效果如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2018/07/jekyll-relate.png&quot; alt=&quot;relate功能图&quot;&gt;&lt;/p&gt;

&lt;p&gt;源码如下:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/luzexi/jekyll-relate&quot;&gt;Jekyll Relate github&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第四章，UI(六) - 如何架构UI框架</title>
   <link href="http://www.luzexi.com/2018/07/26/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-UI6.html"/>
   <updated>2018-07-26T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/26/Unity3D高级编程之进阶主程-UI6</id>
   <content type="html">&lt;p&gt;回顾下，前面两章着重对 UGUI 的源码进行的剖析，包括事件系统的模块和底层渲染模块以及渲染组件。这篇我们来讲讲，如何在Unity3D游戏项目中架构UI框架。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;快速架构一个简单易用的UI框架&lt;/h3&gt;

&lt;p&gt;在前面架构章节中，我们讲述了架构的需要注意的特性，以及设计架构时所使用的抽象方法。我们在经历几个项目后，会总结所有经历过的这些项目的经验，这些经验很好的支撑了构建架构的基础。&lt;/p&gt;

&lt;h6&gt;我们从宏观的角度看UI框架。&lt;/h6&gt;

&lt;p&gt;只有从宏观的角度看问题，才能看的更明白。我们项目中拥有众多UI界面，我们要统一管理所有UI，这样才能使得每个UI界面都能得到有效的调配。不仅如此，如果每个UI界面都是可扩充的那就太棒了。UI有一个很关键的系统是输入事件系统，UI内的每个按钮都需要有一个处理输入的句柄。所以我们需要写一个统计的管理类，以及每个UI都要有统一的基类，并且每个UI按钮元素都对应一个处理输入的句柄。另外对于UI来说，有通用UI，也有非通用UI，有常用UI和非常用UI之分。接下来我们把细节规划一下。&lt;/p&gt;

&lt;h3&gt;Ⅰ.管理类。&lt;/h3&gt;

&lt;p&gt;整个UI是由N个界面构成的。这些UI界面有基本的功能，生成，展示，销毁，查找。如果说，我们分别对N个UI界面的这些功能进行编程，就会有大量的工作产生，而且维护起来的工作量也是巨大的。&lt;/p&gt;

&lt;p&gt;我们需要用一个单例实例来管理所有的UI界面，让他们能有统一的接口进行以上的活动，创建UI管理类是最好的选择，我们可以命名它为 UIManager，这个名字符合它代表的功能。&lt;/p&gt;

&lt;p&gt;那么 UIManager 具体里面要做些什么呢。它需要创建UI，需要查找现有的某个UI，以及需要销毁UI，以及一些UI的统一接口调用和调配工作。UIManager 承担了所有UI的管理工作，因此UI在生成出来后的实例都将存储在这里。不仅如此，一些UI常用变量也存储在里面，比如屏幕的适配标准大小，比如UI的Camera实例等等。&lt;/p&gt;

&lt;p&gt;这样一来，第一个方向确定了，那就是UIManager是UI界面的管理员，统筹管理UI问题。它包括了UI的众多统筹需求，比如下层UI切换到上层，比如加载方式变更，比如选择性预加载UI等，都需要在UIManager里编写。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ScreenManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ScreenManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIScreenBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_DicScreens&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIScreenBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 关闭所有界面&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CloseAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 是否UI正打开&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IsShow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 关闭界面&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CloseScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIScreenBase&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 创建所有界面&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateMenu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIScreenBase&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 找出某个界面&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindMenu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIScreenBase&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Ⅱ.基类。&lt;/h3&gt;

&lt;p&gt;项目中有很多界面，这N个界面他们有自己的共性，比如最基本的，他们都需要进行初始化，他们都需要有展示接口，他们都可以关闭，共性产生统一特征的接口，Init，Open和Close。继承基类又使得管理起来比较方便，在上面提到的 UIManager 里存储的UI实例时，可以统一使用基类的方式存储。我们可以把基类的名字称为 UIScreenBase，每个UI界面都继承自它，Screen一词很形象贴切的描述了屏幕上显示的界面。&lt;/p&gt;

&lt;p&gt;我们将所有UI都定义为基类的子类，对有需要做特殊处理的UI界面，可以重写Init，Open和Close。为了能更方便的知道UI的状态，我们也可以定义一个UI状态，比如OpenState为打开状态，CloseState为关闭状态，HidenState为隐藏状态，PreopenState为预加载状态，以状态的形式来判断UI现在的情况。&lt;/p&gt;

&lt;p&gt;到这里，我们的每个界面有了基类，自己成为了扩展界面功能的一个类实体，可以自主定义自己的功能性的接口，同时还会受到管理类的统一调配。做到了，既满足有序管理，又能满足自定义需求。看似简单的几行代码，里面蕴含着复杂的思考过程，抽象的意义就在于此。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UIScreenBase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonoBehaviour&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mInitialized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIState&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnScreenHandlerEventHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIScreenBase&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnScreenHandlerEventHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onCloseScreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 初始化&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;mInitialized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//打开&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Open&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//关闭&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Ⅲ.输入事件响应机制。&lt;/h3&gt;

&lt;p&gt;UI中输入事件的响应机制比较重要，好的输入事件响应机制能提高更多的效率，让程序员编写逻辑的时候更加舒服。&lt;/p&gt;

&lt;p&gt;Unity3D的UGUI输入事件响应机制建立通常有2种，一种是继承型，一种是注册型。&lt;/p&gt;

&lt;p&gt;继承型是指事件先响应到基类，再由基类反应给父类，由父类做处理，这样UI既可以得到对输入事件的响应，也可以自行修改自己需要的逻辑。比如我们写了个处理事件的基类组件UIEventBase是父类能接受各种输入事件响应，UIEventButton是继承UIEventBase的子类，当输入事件传入时UIEventButton能做出响应，因为它继承了父类。&lt;/p&gt;

&lt;p&gt;绑定型是指在对输入事件响应之前，我们对UI元素绑定一个事件响应的组件。比如编写一个绑定型事件类 UIEvent，当某个UI元素需要输入事件回调时，对这个物体加绑一个 UIEvent，并且对 UIEvent 里需要的相关响应事件进行赋值或注册操作函数。当输入事件响应时，由 UIEvent 来区分输入的是什么类型的事件，再分别调用响应到具体函数。&lt;/p&gt;

&lt;p&gt;继承型和绑定型都有一个共同的特点，都需要与UI元素关联，区别是继承型融入在了各种组件内，而绑定型以独立的组件形式体现。&lt;/p&gt;

&lt;p&gt;继承型UI事件输入响应机制需要关联到组件内，UGUI和NGUI都已经有了自己的基础的组件，所以很难在这上面使用，而在另一些比较特殊的GUI系统内可以很好的适应。比如我曾经做过一个项目，我们构建的一套新的UI系统的完全独立于UGUI和NGUI的GUI系统之外，我们将输入事件处理注入到这个系统的各个组件内，达到了输入事件处理与组件融合的效果。&lt;/p&gt;

&lt;p&gt;绑定型的方式更适合在已经建立了GUI系统的基础上，对输入事件进行封装处理。通常在UGUI和NGUI上都会使用绑定型对输入事件处理进行封装。&lt;/p&gt;

&lt;p&gt;例如，在UI初始化中，对需要输入事件响应的，绑定一个事件处理类，比如命名为 UIEvent，然后对事件句柄进行赋值，例如，ui_event.onclick = OnClickLogin，OnClickLogin就是响应登录按钮的事件句柄。&lt;/p&gt;

&lt;p&gt;这样的赋值方式，让程序员写逻辑时看起来更加清爽，简洁，直观。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// UI 事件&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UI_Event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnityEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EventSystems&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EventTrigger&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLICK_INTERVAL_TIME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//const click interval time&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLICK_INTERVAL_POS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//const click interval pos&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PointerEventDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UI_Event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BaseEventDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UI_Event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AxisEventDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AxisEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UI_Event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mArg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onDeselect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onBeginDrag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onDrag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onEndDrag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onDrop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AxisEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onMove&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onDown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onEnter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onExit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onUp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onScroll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSelect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onUpdateSelect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onCancel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onInitializePotentialDrag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseEventDelegate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onSubmit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPointData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 设置参数&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mArg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 获取参数&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mArg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mArg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UI_Event&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UI_Event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UI_Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UI_Event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnBeginDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnEndDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnDrop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnMove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AxisEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnPointerClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnPointerDown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnPointerEnter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnPointerExit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnPointerUp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnScroll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如上代码，篇幅有限，我把事件部分最重要的部分摘了出来，组件的挂在，事件的调用，以及参数的设置。&lt;/p&gt;

&lt;p&gt;到这里我们有了统一管理UI的管理类，有了界面的基类，有了处理输入事件句柄的事件类，就能开始拓展UI了，大部分UI界面我们都能够处理，但很多原生的组件用起来不是很好，效率也特别的差，所以我们需要构建自己的高效的UI自定义组件。&lt;/p&gt;

&lt;h3&gt;Ⅳ.自定义组件。&lt;/h3&gt;

&lt;p&gt;除了NGUI和UGUI本身的组件外，我们自己的自定义组件是必不可少的，特别是游戏项目，无论大小，都需要有自己的自定义组件，自定义组件不仅能让程序员在写逻辑时快速上手，满足项目的设计需求，而且也能起到对UI优化的作用，尤其在元素多的组件内。&lt;/p&gt;

&lt;p&gt;下面介绍项目中最常改造的组件:&lt;/p&gt;

&lt;h6&gt;① UI动画组件。&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    动画在UI中扮演重要的角色，这里主要说的是Animation的K线动画。

    如何让Animation在美术人员手里自如的制作，并且让程序员能方便调用是关键。

    UI动画组件里应该有什么呢？我们暂时命名为 UIAnimation 好了。

    首先它肯定要依赖 Unity3D 的 Animator 组件 [RequireComponent (typeof(Animator))]。

    其次它要有播放(Play)接口用来播放指定动画，Play的参数包括，动画名，播放完毕后的回调函数委托。

    再次他可以在无需程序调用的情况下自动播放，因此在 public 变量中需要 AutoPlay 这个参数，这样美术人员就可以在 Unity3D 界面上设置自动播放而无需程序调用了。

    最后美术人员需要在自动播放时选择指定的动画名和是否循环播放，以及循环播放间隔。

    这样就基本成形了，接下来要做的事就是我们对抽象的 UIAnimation 里完善以上的功能。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;② 按钮播放音效组件。&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    在点击按钮时会需要播放音效，这是每个项目必要的组件。

    功能也挺简单，当输入事件触发Click事件时发出绑定的声音文件就可以了。

    不过很多项目用到的音效系统并不是Unity3D原生态的音效系统，需要自己为这些系统定制组件。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;③ UI跟随3D物体组件。&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    项目中很多时候需要UI元素来跟随它们，比如游戏中的血条，又比如场景中建筑物头上的标志等等，因此UI跟随3D物体的组件非常必要。

    它的功能实现起来也挺简单的，不断地计算3D物体在屏幕中的位置，来确定UI位置，并且在前后位置不同时再进行更改以避免不必要的移动。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;④ 无限滚动页面组件。&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    在滚动的菜单栏里，通常类似于游戏中的背包界面，如果有几百个UI元素同时生成，或同时滚动时，效率会非常低，因为UI在每帧都需要重新构建Mesh，每一次的滚动都会引起不小的CPU消耗。

    因此一个自定义的无限滚动页面组件来，替换原来的模式，让CPU花最小的代价来运行这个滚动页面是非常有必要的。

    那么这个无限滚动页面组件关键点在哪呢？设想下，这么多UI元素一起生成，一起移动，都是一件很费力的事，我们需要减少UI元素的数量。

    最好减少到与在屏幕上显示的数量差不多，利用看不见的UI元素，来补充能看见的元素，可以描述为一个把上下UI元素不可见时的再利用过程。

    我们就拿游戏里的背包界面来举例吧，500个物品在背包界面中时，实例化，初始化，滚动都会很费劲，我们可以减少UI元素在背包界面里的显示数量。

    当UI元素滚动时一部分元素被遮挡住时，不再需要他们显示了，这时我们就可以对这些元素进行再利用。

    当上面有一行元素被遮挡住，可以被再利用时，我们就把他们移动到下面去，让他们变成下面的背包物品元素。

    这样不断得滚动，在表现上跟真的有500个物品滚动过程一模一样。这样就可以大量地削减组件消耗的CPU，不管有多少物品在背包里面，也不会引起CPU的负担了。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;⑤ 其他组件。&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    其他组件，比如美术数字组件，让美术制定的数字展示得更好，又比如暴击数字是特殊的图片数字等。又比如计数组件，可以让数字滚动的更加漂亮，又比如在获得游戏币时数字会像动画一样跳动由慢到快。

    再比如，针对UGUI改变颜色动画时过于消耗CPU而设计的优化组件，让动画只改变组件的颜色值，由组件来改变UI元素的材质球颜色，这样能省去很多重构Mesh导致的CPU消耗。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;编写自定义的UI组件的目标就是，增加更多通用的组件，减少重复劳动，让程序员在编写UI界面时更加快捷高效，同时也提升了UI的运行效率。拥有属于自己的一套自定义套件，对项目来说也是非常有价值和高效的一件事。&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第四章，UI(三) - 剖析UGUI源码中的输入与事件模块</title>
   <link href="http://www.luzexi.com/2018/07/26/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-UI3.html"/>
   <updated>2018-07-26T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/26/Unity3D高级编程之进阶主程-UI3</id>
   <content type="html">&lt;p&gt;前面几节对 NGUI 和 UGUI 进行了比较，也阐述了一些UGUI的组件的用途和原理，不过这些都仅仅只是停留在系统的表面，对系统深层次的原理和实现方式我们并不了解，接下来我们就从 UGUI 的源码入手，逐步为揭开它的神秘面纱。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;在了解整个 UGUI 源码之前，我们在此篇来从输入事件下手，对 UGUI 源码中输入事件模块进行剖析。&lt;/p&gt;

&lt;h3&gt;UGUI源码剖析&lt;/h3&gt;

&lt;p&gt;UGUI的源码是Unity3D官方公开的，这里我们来剖析的是 UGUI 在 Unity2017 中的公开源码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/4/ugui1.png&quot; alt=&quot;ugui文件夹&quot;&gt;&lt;/p&gt;

&lt;p&gt;上图为 UGUI 内核源码的文件夹结构图。它把UGUI分成了三块，输入事件，动画，核心渲染。&lt;/p&gt;

&lt;p&gt;其中动画部分相对比较简单，用了tween补间动画的形式，对颜色，位置，大小做了渐进的操作。tween的原理是在启动一个协程，在协程里对元素的属性渐进式的修改，除了修改属性数值，tween还有多种曲线可以选择，比如内番曲线，外翻曲线等，一个数值从起点到终点的过程可以由曲线来控制。举个例子，数字从 0 到 100 的变化，在3秒里完成，如果是线性的话，则在第2秒时的数值，应该是&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    (100 - 0) * (2f/3f) = 200f/3f = 66.666
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而如果使用内番曲线就不是这个结果了，不过它们最终都会到达100，只是过程有点‘曲折’罢了，曲线也体现了动画的‘有趣’。&lt;/p&gt;

&lt;p&gt;下面我们重点来剖析下输入事件和核心渲染这两块。&lt;/p&gt;

&lt;h3&gt;输入事件源码&lt;/h3&gt;

&lt;p&gt;输入事件源码的文件结构图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/4/ugui2.png&quot; alt=&quot;ugui事件文件夹结构&quot;&gt;&lt;/p&gt;

&lt;p&gt;图中，UGUI 把输入事件模块有四部分，事件数据模块，输入事件捕获模块，射线碰撞检测模块，事件逻辑处理及回调模块。我们把每部分的核心源码都拉出来分析一下。&lt;/p&gt;

&lt;h6&gt;事件数据模块&lt;/h6&gt;

&lt;p&gt;事件数据模块部分对整个事件系统的作用来说，它主要定义并且存储了事件发生时的位置、和事件对应的物体，事件的位移大小，触发事件的输入类型，以及事件的设备信息等。事件数据模块在逻辑上没有做过多的内容，而主要为了获取数据，提供数据服务。&lt;/p&gt;

&lt;p&gt;它有三个类 PointerEventData、AxisEventData、BaseEventData，分别为点位事件数据类，滚轮事件数据类，事件基础数据类。PointerEventData和AxisEventData 继承自 BaseEventData，且 AxisEventData 的代码量非常少，因为它只需要提供滚轮的方向信息。即如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UnityEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;EventSystems&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AxisEventData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseEventData&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//移动方向&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveVector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MoveDirection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moveDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AxisEventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EventSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;moveVector&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;moveDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MoveDirection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BaseEventData 定义了几个常用的接口，其子类 PointerEventData 是最常用的事件数据，我们来看看它是如何编写的，代码量并不多基本全是数据定义:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseEventData&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEnter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 接收OnPointerDown事件的物体&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_PointerPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 上一下接收OnPointerDown事件的物体&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastPress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 接收按下事件的无法响应处理的物体&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rawPointerPress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 接收OnDrag事件的物体&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerDrag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RaycastResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerCurrentRaycast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RaycastResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerPressRaycast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hovered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eligibleForClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 鼠标或触摸时的点位&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 滚轮的移速&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 按下时的点位&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pressPosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 为双击服务的上次点击时间&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clickTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 为双击服务的点击次数&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clickCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrollDelta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useDragThreshold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dragging&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputButton&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码中为数据类的核心类 PointerEventData，它存储了大部分的事件系统逻辑需要的数据，包括按下时的位置，松开与按下的时间差，拖动的位移差，点击到的物体等等，承载了所有输入事件需要的数据。事件数据模块的意义所在便是存储数据并为逻辑部分做好准备。&lt;/p&gt;

&lt;h6&gt;事件数据模块，主要作用为在各种事件发生时，为事件逻辑做好数据工作。&lt;/h6&gt;

&lt;h3&gt;输入事件捕获模块源码&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;缺图UGUI的时间捕获模块文件夹结构
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输入事件捕获模块由四个类组成，BaseInputModule，PointerInputModule，StandaloneInputModule，TouchInputModule。&lt;/p&gt;

&lt;p&gt;BaseInputModule 是抽象(abstract)基类，提供必须的空接口和基本变量。&lt;/p&gt;

&lt;p&gt;PointerInputModule 继承了BaseInputModule，并且在他基础上扩展了关于点位的输入逻辑，也增加了输入的类型和状态。&lt;/p&gt;

&lt;p&gt;StandaloneInputModule 和 TouchInputModule 又继承了 PointerInputModule，它们从父类开始延展向不同的方向。&lt;/p&gt;

&lt;p&gt;StandaloneInputModule 向标准键盘鼠标输入方向拓展，而 TouchInputModule 向触控板输入方向拓展。&lt;/p&gt;

&lt;p&gt;下面我们来看看他们的核心部分的代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// 处理所有的鼠标事件&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProcessMouseEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetMousePointerEventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leftButtonData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mouseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetButtonState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;InputButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Process the first mouse button fully&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 处理鼠标左键相关的事件&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ProcessMousePress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftButtonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ProcessMove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftButtonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buttonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ProcessDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftButtonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buttonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Now process right / middle clicks&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 处理鼠标右键和中建的点击事件&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ProcessMousePress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mouseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetButtonState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;InputButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ProcessDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mouseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetButtonState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;InputButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buttonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ProcessMousePress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mouseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetButtonState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;InputButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Middle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ProcessDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mouseData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetButtonState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;InputButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Middle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buttonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//滚轮事件处理&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mathf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Approximately&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftButtonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buttonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scrollDelta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sqrMagnitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrollHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetEventHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IScrollHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leftButtonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buttonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerCurrentRaycast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gameObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ExecuteHierarchy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrollHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;leftButtonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buttonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scrollHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上代码为 StandaloneInputModule 的主函数 ProcessMouseEvent，它从鼠标键盘输入事件上扩展了输入的逻辑，处理了鼠标的按下，移动，滚轮，拖拽的操作事件。其中比较重要的函数为 ProcessMousePress、ProcessMove、ProcessDrag 这三个函数，我们来重点看下他们处理的内容。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Process the current mouse press.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// 处理鼠标按下事件&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProcessMousePress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MouseButtonEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buttonData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentOverGo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerCurrentRaycast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gameObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// PointerDown notification&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 按下通知&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PressedThisFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eligibleForClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;zero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dragging&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;useDragThreshold&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pressPosition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerPressRaycast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerCurrentRaycast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;DeselectIfSelectionChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentOverGo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 搜索元件中按下事件的句柄，并执行按下事件句柄&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPressed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ExecuteHierarchy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentOverGo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerDownHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// didnt find a press handler... search for a click handler&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 搜索后找不到句柄，就设置一个自己的&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newPressed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;newPressed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetEventHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPointerClickHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentOverGo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Debug.Log(&amp;quot;Pressed: &amp;quot; + newPressed);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unscaledTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newPressed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diffTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clickTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diffTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clickCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clickCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clickTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clickCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerPress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rawPointerPress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentOverGo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clickTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Save the drag handler as well&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 保存拖拽信息&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerDrag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetEventHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IDragHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentOverGo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 执行拖拽启动事件句柄&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerDrag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initializePotentialDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// PointerUp notification&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 抬起通知&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ReleasedThisFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//执行抬起事件的句柄&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Debug.Log(&amp;quot;Executing pressup on: &amp;quot; + pointer.pointerPress);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerUpHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Debug.Log(&amp;quot;KeyCode: &amp;quot; + pointer.eventData.keyCode);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerUpHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetEventHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPointerClickHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentOverGo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 如果抬起时与按下时为同一个元素，那就是点击&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerPress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerUpHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eligibleForClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerClickHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 否则也可能是拖拽的释放&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerDrag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dragging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ExecuteHierarchy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentOverGo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dropHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eligibleForClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerPress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rawPointerPress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 如果正在拖拽则抬起事件等于拖拽结束事件&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerDrag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dragging&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endDragHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dragging&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerDrag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 如果当前接收事件的物体和事件的刚开始的物体不一致，则对两个物体做进和出的事件处理&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentOverGo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerEnter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;HandlePointerExitAndEnter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;HandlePointerExitAndEnter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentOverGo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面展示了 ProcessMousePress 处理鼠标按下事件的代码，虽然比较多但并不复杂，我在代码上做了详尽的注解。其实它不仅仅处理的是按下的操作，也同时处理鼠标抬起的操作，以及处理了拖拽启动和拖拽抬起与结束的事件。在调用处理相关句柄的前后，事件数据都会被保存在 pointerEvent 中，然后被传递给业务层中设置的输入事件句柄。&lt;/p&gt;

&lt;p&gt;我们再来看看 ProcessDrag 拖拽处理函数:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProcessDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moving&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IsPointerMoving&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 如果已经在移动，且还没开始拖拽启动事件，则调用拖拽启动句柄，并设置拖拽中标记为true&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moving&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerDrag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dragging&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShouldStartDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pressPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pixelDragThreshold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;useDragThreshold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginDragHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dragging&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 拖拽时的句柄处理&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dragging&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;moving&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerDrag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 如果按下的物体和拖拽的物体不是同一个则视为抬起拖拽，并清除前面按下时的标记&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerPress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerUpHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eligibleForClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerPress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rawPointerPress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 执行拖拽中句柄&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dragHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面展示了 ProcessDrag 拖拽句柄处理函数，与ProcessMousePress类似对拖拽事件逻辑做了判断，包括拖拽开始事件处理，判断结束拖拽事件，以及拖拽句柄的调用。&lt;/p&gt;

&lt;p&gt;ProcessMove 则相对简单点，每帧都会直接调用处理句柄。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProcessMove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PointerEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetGO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pointerCurrentRaycast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gameObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HandlePointerExitAndEnter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetGO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;除了鼠标事件外，我们再来看看触屏事件的处理方式，即 TouchInputModule 的核心函数。如下:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Process all touch events.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// 处理所有触屏事件&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ProcessTouchEvents&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;touchCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Touch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetTouch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;released&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetTouchPointerEventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;released&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ProcessTouchPress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;released&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;released&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ProcessMove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ProcessDrag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RemovePointerData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从代码中我们看到 ProcessMove 和 ProcessDrag 与前面鼠标事件处理时一样的，只是按下的时间处理不同，而且它对每个触点都做了相同的操作处理。其实 ProcessTouchPress 和鼠标按下处理函数 ProcessMousePress 非常相似，可以说基本上一模一样，只是传入时的数据类型不同而已，由于篇幅有限这里不再重复展示长串代码。&lt;/p&gt;

&lt;p&gt;这里大量用到了 ExecuteEvents.ExecuteHierarchy，ExecuteEvents.Execute 之类的静态函数来执行句柄，它是怎么工作的呢，其实很简单:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_InternalTransformList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExecuteHierarchy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseEventData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callbackFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEventSystemHandler&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 获取物体的所有父节点，包括它自己&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GetEventChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_InternalTransformList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_InternalTransformList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_InternalTransformList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 对每个父节点包括自己依次执行句柄响应&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gameObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callbackFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gameObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;解释下上述代码，对所有父节点都调用句柄函数。也就是说，当前节点的事件会通知给它上面的父节点。&lt;/p&gt;

&lt;h6&gt;到这里我们基本清楚事件处理的基本逻辑了，下面我们来看看碰撞测试模块是如何运作的&lt;/h6&gt;

&lt;h6&gt;射线碰撞检测模块源码&lt;/h6&gt;

&lt;p&gt;射线碰撞检测模块主要工作是从摄像机的屏幕位置上，做射线碰撞检测并获取碰撞结果，把结果返回给事件处理逻辑类，交由事件处理模块处理事件。&lt;/p&gt;

&lt;p&gt;射线碰撞检测模块主要为3个类，分别作用于 2D射线碰撞检测，3D射线碰撞检测，GraphicRaycaster图形射线碰撞测试。&lt;/p&gt;

&lt;p&gt;2D、3D射线碰撞测试相对比较简单，用射线的形式做碰撞测试，区别在2D碰撞结果里预留了2D的层级次序以便在后面的碰撞结果排序时，以这个层级次序为依据做排序，而3D的碰撞检测结果则是以距离大小为依据排序的。&lt;/p&gt;

&lt;p&gt;GraphicRaycaster 为UGUI元素点位检测的类，它被放在了 Core 渲染块里。它主要针对 ScreenSpaceOverlay 模式下输入点位做碰撞检测，因为这个模式下的检测并不依赖于射线碰撞，而是遍历所有可点击的UGUI元素来检测比较，从而判断是该响应哪个UI元素。因此 GraphicRaycaster 是比较特殊的。&lt;/p&gt;

&lt;p&gt;我们来着重看下 GraphicRaycaster 的核心源码如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Perform a raycast into the screen and collect all graphics underneath it.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NonSerialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_SortedGraphics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Raycast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Canvas&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Camera&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Debug.Log(&amp;quot;ttt&amp;quot; + pointerPoision + &amp;quot;:::&amp;quot; + camera);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Necessary for the event system&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundGraphics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GraphicRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GetGraphicsForCanvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundGraphics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Graphic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graphic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foundGraphics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// -1 means it hasn&amp;#39;t been processed by the canvas, which means it isn&amp;#39;t actually drawn&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;raycastTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RectTransformUtility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RectangleContainsScreenPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rectTransform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointerPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Raycast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pointerPosition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;s_SortedGraphics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graphic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;s_SortedGraphics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CompareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//      StringBuilder cast = new StringBuilder();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s_SortedGraphics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s_SortedGraphics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//      Debug.Log (cast.ToString());&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;s_SortedGraphics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上述代码中，GraphicRaycaster 对每个可以点击的元素(raycastTarget是否为true，并且 depth 不为-1，为可点击元素)进行计算，判断点位是否落在该元素上。再通过 depth 变量排序，判断最先该落在哪个元素上，从而确定哪个元素响应输入事件。&lt;/p&gt;

&lt;p&gt;所有检测碰撞的结果数据结构为 RaycastResult 类，它承载了所有碰撞检测结果的依据，包括了距离，世界点位，屏幕点位，2D层级次序，碰撞物体等，为后面事件处理提供了数据上的依据。&lt;/p&gt;

&lt;h6&gt;事件逻辑处理模块&lt;/h6&gt;

&lt;p&gt;事件主逻辑处理模块，主要的逻辑都集中在 EventSystem 类中，其余的类都是对它起辅助作用的。&lt;/p&gt;

&lt;p&gt;EventInterfaces，EventTrigger，EventTriggerType 定义了事件回调函数，ExecuteEvents 编写了所有执行事件的回调接口。&lt;/p&gt;

&lt;p&gt;EventSystem 主逻辑里只有300行代码基本上都在处理由射线碰撞检测后引起的各类事件。判断事件是否成立，成立则发起事件回调，不成立则继续轮询检查，等待事件的发生。&lt;/p&gt;

&lt;p&gt;EventSystem 是事件处理模块中唯一继承 MonoBehavior 并且有在 Update 帧循环中做轮询的。也就是说，所有UI事件的发生都是通过 EventSystem 轮询监测到的并且实施的。EventSystem 通过调用输入事件检测模块，检测碰撞模块，来形成自己主逻辑部分。因此可以说 EventSystem 是主逻辑类，是整个事件模块的入口。&lt;/p&gt;

&lt;h6&gt;架构者在设计时将整个事件层各自的职能拆分的很清楚，使得我们看源代码时也并没有那么难。输入监测由输入事件捕捉模块完成，碰撞检测由碰撞检测模块完成，事件的数据类都有各自的定义，EventSystem 主要作用是把这些模块拼装起来成为主逻辑块。&lt;/h6&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/Unity-Technologies/ui/downloads/?tab=downloads&quot;&gt;UGUI源码地址&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第四章，UI(二) - UGUI的原理及组件使用详解</title>
   <link href="http://www.luzexi.com/2018/07/25/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-UI2.html"/>
   <updated>2018-07-25T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/25/Unity3D高级编程之进阶主程-UI2</id>
   <content type="html">&lt;p&gt;前文对NGUI和UGUI进行了比较，讲述了如何选择UI系统作为项目的UI框架。这篇我们来讲讲，UGUI的原理，以及UGUI的组件使用详解。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;UGUI的初级和高级使用详解&lt;/h3&gt;

&lt;p&gt;首先我们来介绍下ugui的运作机制。&lt;/p&gt;

&lt;p&gt;UGUI是在3D网格下建立起来的UI系统，它的每个可显示的元素都是以3D模型网格的形式来构建起来的。当UI被实例化时，UGUI首先要做的事就是构建网格。&lt;/p&gt;

&lt;p&gt;也就是说当Unity3D制作一个图元，或者一个按钮，或者一个背景时，都会先构建一个方形网格，再将图片放入网格中。可以理解为制造了一个3D模型，用一个网格绑定一个材质球，材质球里存放了要显示的图片。&lt;/p&gt;

&lt;p&gt;如果每个元素都会生成一个模型并且绑定一个材质球存入一张图片的话，UI上成千上百个元素就会拥有成千上百个材质球，以及成千上百张图。这样使得引擎在渲染时都需要读取成千上百张图，对每个材质球和网格都进行渲染，这会导致性能开销巨大，drawcall过高，可以简单的理解为一个材质球一个drawcall。(drawcall的原理我们将在后面的章节中介绍)&lt;/p&gt;

&lt;p&gt;UGUI当然做了优化，它将一部分相同类型的图片都集合起来合成一个张图，然后将拥有相同图片相同shader的材质球合并成一个材质球，并且把分散开的模型网格也一起合并了，这样就生成了几个大网格和几个材质球，以及少许整张的图集。节省了很多材质球，图片，网格的渲染，UI的效率更高了很多，游戏在进行时才会顺畅。这就是我们常常在UI制作中提到的图集的概念，它把很多张图片都放置在一张图集上，导致大量的图片和材质球不需要重复的绘制，只要改变模型顶点上的uv即可。&lt;/p&gt;

&lt;p&gt;UGUI也并不是所有的网格和材质球都合并成一个，只有把相同层级的元素，以及相同层级上的拥有相同的材质球参数的才合并在一起。合并成一个网格了就是一个静止的模型了，如果我们移动了任何元素，或者销毁了任何元素，或者改变了任何元素的材质球参数，UGUI则会销毁这个网格，重新构建一个新的。我们设想下，如果我们每时每刻都在移动一个元素的话，UGUI就会不停的拆分合并拆分合并，就会不停的消耗CPU，来使得画面保持应该有的样子。&lt;/p&gt;

&lt;p&gt;因为这些合并和拆分的操作会消耗很多CPU，UI系统要做的就是尽一切可能节省些CPU消耗，把尽量多的剩余CPU让给项目逻辑。UGUI在制作完成成品后性能优劣差距很多时候都会出现在这里，合并的最多的元素，拆分次数最少的UI，才能达到优秀的性能开销.&lt;/p&gt;

&lt;p&gt;下面我们来主要介绍下UGUI的核心组件。&lt;/p&gt;

&lt;h3&gt;核心组件Canvas&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Canvas，我们暂且叫它画布。Canvas就相当于画画时铺在上边的画板，我们把各类元素放在画布上后，Canvas要做的事情就是合并这些元素。

    合并的规则为，同一个Canvas里，相同层级的，相同材质球的元素进行合并，从而减少Drawcall。不过相同层级的概念并不是gameobject 上的节点层级，而是覆盖层级。Canvas说如果两个元素重叠，则可以认为它们是上下层关系，把所有重叠的层级数计算完毕后，第0层的所有元素统一合并，第1层的元素也统一合并，以此类推。

    Canvas上的参数 Render Mode 渲染模式比较重要，这里详细介绍下，你可以选择不以Camera为基准的Overlay模式，也可以选择Camera为基准的Screen Camera模式，也可以选择3D世界为基准的World Space模式。三者适合于三种不同的的使用场景各有不同。

    Overlay模式并不与空间上排序有任何关系，空间上的前后位置不再对元素起作用，它常用在纯UI的区域内，这种模式下Camera排序有别与其他模式，Sort order参数在排序时被着重使用到，Sort order参数的值越大，越靠前渲染。在这个模式下没有Camera的渲染机制因此很难加入普通的3D模型物体来增加效果。

    Screen Camera模式，相对比较通用一点，它依赖于Camera的平面透视，渲染时的布局依赖于它绑定的Camera。想让更多的非UGUI元素加入到UI中，Screen Camera模式更加具有优势。这种模式是实际项目中制作UI最常用的模式，不过UGUI底层有对排序做些规则，如对元素的z轴不为0的元素，会单独提取出来渲染，不参与合并。

    World Space模式，主要用于当UI物体放在3D世界中时用的，比如，一个大的场景中，需要将一张标志图放在一个石块头上，这时就需要World Space模式。它与 Screen Camera 的区别是，它常在世界空间中与普通3D物体一同展示，依赖于截锥体透视(Perspective)Camera。它的原理挺简单的，与普通物体一样当UI物体在这个Camera视野中时，就相当于渲染了一个普通的3D面片，只不过除了普通的渲染Canvas还对这些场景里的UI进行合并处理。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;Canvas Scaler&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    这是个缩放比例组件，用来指定画布中元素的比例大小。

    有简单指定比例大小的Constant Pixel Size模式，也有Scale With Screen Size以屏幕为基准的自动适配比例大小，或者Constant Physical Size以物理大小为基准的适配规则。

    在实际手游项目里，设备的屏幕分辨率变化比较大，通常使用以屏幕为基准的自动适配比例大小的Scale With Screen Size选项。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;Graphic Raycaster&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    输入系统的图形碰撞测试组件，它并不会检测Canvas以外的内容，检测的都是画布下的元素。当图元素上存在有效的碰撞体时，Graphic Raycaster 组件会统一使用射线碰撞测试来检测碰撞的元素。

    我们也可以设置完全忽略输入的方式来彻底取消点击响应，也可以指定阻止对某些layers进行相应。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;EventTrigger&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    输入事件触发器，与此脚本绑定的UI物体，都可以接受到输入事件。

    比如(鼠标，手指)按下，弹起，点击，开始拖动，拖动中，结束拖动，鼠标滚动事件等。

    它主要是起到点击响应作用，配合前面的 Graphic Raycaster 响应给输入事件系统。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;Image，RawImage&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    这两个是UI里的主要部件，它们可以对图片进行展示，包括图片，图集。

    两者的区别是Image仅能展示图集中的图元但可以参与合并，而RawImage能展示单张图片但无法合并。通常我们会将小块的图片，打成图集来展示，这样更节省性能也更节省内存，这也是UGUI自动集成的功能，每个图片资源都有一个tag 标记，标记决定了哪些元素会合并到同一张图集内，如果没有tag标记，则默认不会合并图集它自己就是自己的图集。

    不使用图集而使用RawImage展示单张图片的时，通常都是由于图片尺寸太大导致合并图集效率太低，或者相同类型的图片数量太多，导致合并图集后的图集太大，而实际在画面上需要展示的这种类型的图片又很少，图集方式反而浪费大量内存空间，则使用RawImage逐一展示即可。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;Mask，RectMask2D&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    遮挡组件，可以将其子节点下矩形区域外的内容剔除，是滚动窗口中最常用的组件。

    这两种方式的主要是在剔除的方法上有所区别，在实现效果上都是一样的，其中Mask 使用顶点重构的方式剔除矩形区域外的部分，而 RectMask2D 则采用 Shader 的剔除方式，每个元素都有自己的材质球实例和实例参数。

    Mask 和 RectMask2D 它俩具体的剔除算法和源代码分析我们将在后面的UGUI源码剖析章节讲解。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;其他组件&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    其他大部分逻辑组件都是可以重写的，比如按钮组件Button，切换组件Toggle，滚动条组件ScrollBar，滑动组件Slider，下拉框组件DropDown，视图组件ScrollView，如果不想使用它们，觉得它们的功能不够用，我们是可以用Image，Mask等几个核心组件组合后重写的。

    在实际工作中，很多项目都会自定义属于自己的组件，为什么要自定义呢？很多时候项目里的需求更多样化，有自己的组件可以在特殊需求和特殊逻辑时，能够好不费劲的更改自定义的组件。所以大部分项目中，都会重写一些组件来用来给自己项目使用，也有一些人总结了这些组件的经验，写了些比较好用的组件开源在Github上。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第四章，UI(一) - NGUI和UGUI比较</title>
   <link href="http://www.luzexi.com/2018/07/25/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-UI1.html"/>
   <updated>2018-07-25T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/25/Unity3D高级编程之进阶主程-UI1</id>
   <content type="html">&lt;p&gt;UI是游戏项目中重要的组成部分，面对一个从零开始的项目，首先要确立的就是选用哪个UI系统作为主框架。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;现在主流项目中基本上都是NGUI和UGUI，那么到底选哪个。我们先来做个比较。&lt;/p&gt;

&lt;h3&gt;图集处理功能比较&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    NGUI需要使用工具手动拼接图片成图集。

    UGUI开发期间可以直接使用图片作为元素，打包时会自动拼接成图集。

    图集的alpha拆分功能，NGUI可以通过增加工具类和shader来做，UGUI有自带的alpha拆分功能方便许多。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;组件支持功能比较&lt;/h3&gt;

&lt;p&gt;NGUI组件比较多，比较常用的有&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Localization System -- 多语言组件
    UIScrollView -- 滚动视图
    UIButton -- 按钮
    UIToggle -- 切换选择组件
    UIScrollBar -- 滚动条
    UIProcessBar -- 进度条
    UIPopupList --下拉列表菜单
    UIInput -- 输入框
    UIKeyBinding -- 快捷键绑定
    UIKeyNavigation -- 导航绑定
    UIGrid -- 排列
    UITable – 表格排列
    UIPlayAnimation -- UI动画
    UIAnchor -- 锚点
    UICamera -- UI摄像头
    UIDragXXX – 拖拽摄像头，元素，视图等
    UIFont – UI字体
    UILabel – 文字组件
    UIPanel – 绘制面板
    UIPlaySound – 声音播放
    UITexture – 贴图
    等等等等…还有很多
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;UGUI组件比较少&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    Text – 文字
    Image – 贴图(图集中的元素)
    RawImage – 贴图(单张图)
    Button – 按钮
    Toggle – 切换与选择
    Slider – 大小滑动块
    Scrollbar – 滑动条
    Dropdown – 下拉框
    Input Field – 输入框
    Canvas – 画布
    Panel – 一大块元素
    Scroll View – 滑动视图
    Mask – 遮挡块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可定制程度&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    NGUI有源码，可以随时随地修改满足特殊需求
    UGUI源码c#开源，可修改，但不是那么方便，需要重新打成dll后再替换原来的
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输入事件处理&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    NGUI通过摄像头发出射线碰撞，接受输入事件，并通过碰撞顺序来处理层级。
    UGUI根据输入点的位置RaycastTarget，判断事件应该交给哪个UI元素。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;层级显示控制&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    NGUI依靠Panel depth、RenderQueue来控制层级。
    UGUI可以依靠距离摄像机的前后位置来控制层级，也可以用sort order排序设置前后顺序。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;字体制作&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    NGUI不支持dynamic font。
    UGUI支持dynamic font，可直接使用字体文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;社区完善程度&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    NGUI商业运营，氛围良好
    UGUI官方自运营，后台强大
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;性能&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    NGU据很多测试网站统计，性能尚可
    UGUI同样，据很多测试网站统计，性能良好
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，以上列出的是从几个方面对NGUI和UGUI的比较。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从图集工具来看，NGUI有更多的自主选择权，而UGUI更多的自动化的便利，&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从组件支持度来看NGUI更适合快速原型，而UGUI更多的是需要自己编写适合自己的组件。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从UI底层可定制度上看，两者都是可定制的，但NGUI更加方便。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从输入事件处理上看，NGUI混合了物理系统，而UGUI有一套自己独立的事件系统。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从层级显示上看，NGUI概念有点混淆，而UGUI层级概念清晰干净。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从字体制作上看，NGUI麻烦了点，而UGUI更加方便。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从社区完善上看，NGUI更加商业化，而UGUI有官方支持后台强大。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从性能上比较看，NGUI臃肿了点但尚可，而UGUI更加良好。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;综合来看，NGUI和UGUI都各自有各自的特点，没有绝对好，也没有绝对的差，都各自有各自的特点，和擅长的领域。针对不同的人群和项目可以有不同的选择。&lt;/p&gt;

&lt;h3&gt;如何选择适合你的GUI&lt;/h3&gt;

&lt;p&gt;适不适合，并不是绝对的，根据人和项目来分，上面分析过程中看，NGUI和UGUI都各自有自己的特点，对每个人每种情况来说都是不一样的。我的建议是选择你熟悉的，尝试你不熟悉的比较后再做决定。&lt;/p&gt;

&lt;p&gt;Unity3D 4.x的项目通常会选择NGUI，因为Unity3D 4.x对UGUI支持的并不好。而如今新项目都会选择使用最新版本的Unity3D，所以选择UGUI的会多一点。我们需要与时俱进跟随潮流，所以如果你没有尝试过UGUI，熟悉UGUI应该是迟早的事。铁了心要做一个决定是用NGUI还是用UGUI，我的建议是，新项目启用UGUI，老项目继续使用NGUI。&lt;/p&gt;

&lt;p&gt;但也不一定是一个套路用到底，比如有些人就是喜欢把控源码，希望在源码基础上进行更多的自定义的修改，然后完善成自己的系统框架，更好的服务于游戏逻辑，或者拥有更好的性能定制，那么最好的选择就是NGUI。不过UGUI也有源码开放，只是不能随意定制，只是在此基础上扩展和重载。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第二章，架构(三) - 架构的误区，如何做前端架构，以及如何架构Unity3D项目</title>
   <link href="http://www.luzexi.com/2018/07/24/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%9E%B6%E6%9E%843.html"/>
   <updated>2018-07-24T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/24/Unity3D高级编程之进阶主程-架构3</id>
   <content type="html">&lt;p&gt;前文我们对软件系统架构进行一个彻头彻尾的解释。并且对软件系统架构抽象的思维方式进行了一番详细介绍，包括了分层，分治，演化。这篇我们将来具体介绍下，架构中的误区，以及如何做前端架构，并且了解下如何架构Unity3D项目。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;前端与后端架构之间的共性&lt;/h3&gt;

&lt;p&gt;前后端架构的目标都是，高性能、高可用、可扩展、安全、可容错。对于前端来说除了这些目标特性外，我们还需要加入更多的用户体验，包括视觉效果和操作灵敏度。&lt;/p&gt;

&lt;p&gt;作为前端工程师，用户体验是比较重要的，但这种体验涉及到很多方面，包括性能优化，视觉效果，以及操作上的人性化等，例如如何让游戏加载更快，如何制作更绚丽的特效，如何减少Drawcall，如何减少CPU的负载，如何最快的响应用户操作等。&lt;/p&gt;

&lt;p&gt;前端技术与后端技术，都是在同一个系统层面上建立起来的，都是建立在Linux，Windows，Android，IOS，操作系统之上的，两者最后要需要了解操作系统的接口以及底层运作原理。区别在于后端在操作系统上构建了一套服务端框架，而前端在操作系统之上构建了一个渲染引擎，两者都需要在这之上构建业务架构。当我们自己构建了或选择使用商业渲染引擎后，再在渲染引擎之上建立游戏应用的业务架构，因此我们其实有两套架构要学习，一套是渲染引擎架构，一套是游戏业务架构。&lt;/p&gt;

&lt;p&gt;对渲染引擎架构的探讨偏离了书本的初衷，留给作者在其他文章中再来详细讲解。在游戏架构中有很多需要我们搭建的框架，我们可以以模块形式来命名它们，包括网络框架，UI框架，数据框架，核心战斗框架，AI框架等我们将在下面的文章中讨论。&lt;/p&gt;

&lt;h3&gt;培养架构设计思维&lt;/h3&gt;

&lt;p&gt;良好的架构设计思维的培养，离不开工作中大量高质量项目的实战锻炼，然后是平时的学习、思考和提炼总结。&lt;/p&gt;

&lt;p&gt;基本的架构设计思维，其实在我们大学计算机课程（比如数据结构和算法）中可以找到影子，大学里以学习理论知识为主，需要在具体的工作中实践他们。其实大学教育其实非常重要，基本的架构设计思维在那个时候就已经埋下种子，后面工程实践中会进一步消化和应用，随着经验的积累我们能够解决的问题的复杂性和规模逐渐变大，所用的方法就是抽象，包括分层、分治、演化。&lt;/p&gt;

&lt;p&gt;架构设计不是静态的，而是动态的。只有能够不断应对环境变化的系统，才是有生命力的系统。所以即使你掌握了抽象、分层和分治这三种基本思维，仍然需要演化式思维，在设计的同时，借助反馈和进化的力量推动架构的持续演进。&lt;/p&gt;

&lt;p&gt;架构师在关注技术，开发应用的同时，需要定期梳理自己的架构设计思维，积累时间长了，你看待世界事物的方式会发生根本性变化，你会发现我们生活其中的世界，其实也是在抽象、分层、分治和演化的基础上构建起来的。架构设计思维的形成，会对你的系统架构设计能力产生重大影响。可以说对抽象、分层、分治和演化掌握的深度和灵活应用的水平，直接决定架构师所能解决问题域的复杂性和规模大小，是区分普通应用型架构师和平台型/系统型架构师的一个分水岭。&lt;/p&gt;

&lt;h3&gt;试着架构Unity3D项目&lt;/h3&gt;

&lt;p&gt;我们可以用以上的方法来试着架构Unity3D项目，我们用分层的思维方式，先确定架构的层级，如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/2/unity-archiecture1.png&quot; alt=&quot;Unity3D架构1&quot;&gt;&lt;/p&gt;

&lt;p&gt;把整个项目分成五大层级，网络层，数据层，资源层，核心逻辑框架层，UI层。&lt;/p&gt;

&lt;p&gt;这样一分清晰的知道了我们需要做哪几块大类的东西。但是这样拆分太笼统，特别是核心逻辑框架这块，完全是概括性的层级，无法表达具体的系统。所以我们再拆分层级。把太过于笼统的层级进行再分层。如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/2/unity-archiecture2.png&quot; alt=&quot;Unity3D架构2&quot;&gt;&lt;/p&gt;

&lt;p&gt;经过再分层后，把核心逻辑框架分成了，工具编辑器，角色行为框架，AI框架，地图场景与寻路框架，Shader与特效，设备原始接口。这些子层都是在核心逻辑层中，他们有自己的框架，也可以互相调用，构成了核心逻辑部分，也就是核心玩法或者说核心战斗的主要部分。&lt;/p&gt;

&lt;p&gt;我们将资源管理层和数据管理层再进行了拆分，分成了Assetbundle资源管理和Prefab资源管理，以及内存数据管理和外部数据管理，这样更清晰的分工了各层的职能。其实还有很多其他的层级我们这里没有提到的，包括常用库，工具库，动画控制等，这里暂不一一提出来。&lt;/p&gt;

&lt;p&gt;在游戏项目中最常用的是，数据表，网络层，UI层，常用库，这几个模块。我们可以用这个层级的方式来试着搭建一个完整的项目，只是做抽象上的编写，就可以清晰的知道，这个项目需要哪些模块和层级了。&lt;/p&gt;

&lt;p&gt;比如如果项目单机的策略类游戏，可能就没有很多角色上的东西，而多了很多2D动画行为控制上的需求。这时我们就可以把层级划分下，把注意力重点放在，2D动画行为控制，UI框架，数据管理，资源管理，以及AI上。&lt;/p&gt;

&lt;p&gt;如果我们项目是3D人物角色为主的网络游戏，就有地形地图，角色行为控制，还需要一套角色技能特效动画编辑器。这时我们就需要把网络层这块好好决策下该用哪种框架，TCP-Socket？UDP？还是web形式的HTTP？！3DMMRPG的难度主要集中在了角色技能动画、AI、地图、物理模拟上。我们可以重点划分出来，找人专门做这块，把最难把控的放在最优先的位置去做，而后再对这些层级进行细致化的构建。&lt;/p&gt;

&lt;p&gt;对模块进行细致化构建时，我们可以用分治法方法去构建。如果某个要解决的内容已经确定了，而这个内容或问题的规模还是太大，无法直接的下手解决，那么我们用分治的方法，把一个问题分成几个小问题来做，把小问题再划分成更小的问题直到小到能直接解决，再依次对他们跟进处理。&lt;/p&gt;

&lt;p&gt;这里我们拿网络层来说，进行分而治之，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/2/unity-archiecture3.png&quot; alt=&quot;Unity3D架构3&quot;&gt;&lt;/p&gt;

&lt;p&gt;图中我们把网络层拆分成http，tcp-socket，udp这三种类型的形式，再对每个类型的具体接口进行了拆分，对于拆分出来的每个接口，如果还不能直接使用再进行细致的拆分，直到拆分到可以具体实施了为止。在上图中，我们以接口的形式进行拆分，先将接口拆分成，连接，断开连接，发送数据，收到数据，以及(断开、连接、终结)网络事件，然后再对每个接口进行拆分，把接口需要处理的问题拆分出来各个击破。&lt;/p&gt;

&lt;p&gt;除了我们举例的网络层，其他层级部分的框架也可以用同样的方式进行类似的分解，用分而治之的方法逐个击破每个模块。这里我们描述了各个模块的拆分原则:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;数据表 -- XLS导为二进制文件还是Json或其他格式，读取接口和解析接口的定义。

UI层 -- 使用NGUI还是UGUI，界面基类，界面管理，输入事件封装，自定义通用组件基类，自定义各类通用组件。

外部资源管理 -— 是否使用AssetBundle，AssetBundle资源分类，AssetBundle资源间的依赖关系，加载与释放AssetBundle的管理，AssetBundle加密。

AI层 -— 使用状态机还是行为树或者其他，状态机或行为树接口实现，AI可视化工具，AI扩展接口。

地形地图 -— 地图是2D还是3D，场景编辑器的结构，是否需要Mesh合并，场景内的大小物件区别对待，大地形在游戏里该怎么逐步显示，是否要划分区块。

寻路与网格 -— 使用A星还是跳点算法或者其他，使用网格栅格还是三角网格，长距离寻路的解决方案，地图数据管理。

常用库 -— 时间函数，数学函数，数字变量加密封装，坐标转换函数，Debug调试工具，各大逻辑系统通用工具等等。

角色行为控制 -— 人物移动处理方案，摄像机的碰撞检测，动画特效编辑器，技能编辑器，行为流的建立。

2D动画控制 -— 动画组件封装，2D动画的制作流程，2D图合并为图集。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实际工作中，我们对层级和模块逐个攻破的同时，也进入架构演化模式。一开始的做的架构中某个部位的并不适合，或需要改善，在后面的工作中，修复和完善架构是演化的重要步骤。&lt;/p&gt;

&lt;p&gt;在不断编写完善架构的过程中原本抽象简单的架构，开始复杂化。虽然每个模块都在有条不紊的进行中，但也会不断冒出各种各样不适应或者不符合实际需求的问题出现，我们需要及时跟进演化内容。去除、重构或者改善，前面由于各种原因而导致的错误的理解。&lt;/p&gt;

&lt;p&gt;最后架构设计的文档要及时跟进完善，在抽象的过程中，我们需要整理和记录整个过程，以便为今后在完善时能够一下子翻阅到并记起当时在架构时所考虑的各方面问题的原因。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第二章，架构(二) - 软件系统架构思维方式</title>
   <link href="http://www.luzexi.com/2018/07/24/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%9E%B6%E6%9E%842.html"/>
   <updated>2018-07-24T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/24/Unity3D高级编程之进阶主程-架构2</id>
   <content type="html">&lt;p&gt;前面对软件系统架构进行了一个深刻的解释。对什么是软件系统架构，为什么需要软件系统架构，怎样才算是优秀软件系统架构做了详细的分析。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;这节我们来说说在构建软件架构的过程中，我们需要的几种思维方式。我们生活和学习中常常有思维方式的转换，构建软件架构时也同样需要不同的思维方式。&lt;/p&gt;

&lt;p&gt;对于构建一个软件架构来说，从思维方式上入手有很多值得我们学习的地方，这涉及到如何抽象构建架构的思维方式。这篇我们就来讲讲，软件系统架构思维方式有哪些。&lt;/p&gt;

&lt;p&gt;架构既承载了我们对这个项目的抽象思维构建，也同时帮助了我们理清业务体系的方向。如果要说软件研发、系统架构中最重要的能力是什么，我会毫不犹豫回答是抽象能力。&lt;/p&gt;

&lt;p&gt;在系统架构和设计中，抽象能力是个比较重要的能力，其实抽象能力在生活也很重要，只是在软件设计架构中尤其的重要。一个项目在最初的设计时是没有可见目标的，也就是说我们需要凭空创造出一个我们能看到或想象的到的构建目标，这个目标大概率指向软件形成的最终形态不会偏离很多。抽象能力在这个特殊时期发挥了重要作用，它可以帮助我们在没有形成任何可见可幻想的实际目标之前，描绘出一个大致的轮廓，以至于我们在实现架构途中能有个可见的标准和目标。因此实际工作中抽象能力的强弱，直接决定我们所能解决问题的复杂度和规模大小。&lt;/p&gt;

&lt;p&gt;软件系统架构设计和小朋友搭积木无本质差异，只是解决的问题域和规模不同罢了。架构师先要在大脑中形成抽象概念，然后是子模块分解，以及子模块之间的沟通方式，然后是依次实现子模块，最后将子模块拼装组合起来，形成最后系统。我们常说编程和架构设计就是搭积木，优秀的架构师受职业习惯影响，眼睛里看到的世界都是模块化拼装组合式的。&lt;/p&gt;

&lt;p&gt;抽象能力不仅对软件系统架构设计重要，对建筑、商业、管理等人类其它领域活动也同样非常重要。可以这样认为，我们生存的世界都是在抽象的基础上构建起来的，离开抽象人类将对事物的构建寸步难行。&lt;/p&gt;

&lt;p&gt;我在一篇名为《优秀架构师必须掌握的架构思维》的文章中看到关于抽象能力分析很好的分析，以下部分内容引申了他的文章。&lt;/p&gt;

&lt;h3&gt;第一种，分层思维&lt;/h3&gt;

&lt;p&gt;分层是我们应对和管理复杂性的基本思维武器.&lt;/p&gt;

&lt;p&gt;面对一个复杂的系统，我们一开始总是无从下手，就好比一下子在我们面前摆了有很多很多的问题，杂乱无章。这很大程度都会导致我们慌张，焦急，惶恐等心理波动。分层思维，就能很好的帮助我们抽象一个复杂的系统的架构层次，从而清晰的描述了我们有多少层面的事务需要我们解决，以及解决层级的先后次序。&lt;/p&gt;

&lt;p&gt;构建一套复杂系统，我们把整个系统划分成若干个层次，每一层专注解决某个领域的问题，并向上提供服务。这样的抽象做法，让复杂的事务变得更加清晰有序。有些层次并不一定是横向的，也可以是纵向的，纵向的层次贯穿其他横向层次，称为共享层。如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/2/layer-solution.png&quot; alt=&quot;分层思维&quot;&gt;&lt;/p&gt;

&lt;p&gt;下面我们来介绍几个用分层思维作为抽象方法的架构案例：&lt;/p&gt;

&lt;p&gt;一个中小型的Spring Web应用程序，我们一般会设计成三层架构：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/2/spring-java-layer.png&quot; alt=&quot;spring分层&quot;&gt;&lt;/p&gt;

&lt;p&gt;Linux操作系统是经典的分层架构，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/2/linux-layer.png&quot; alt=&quot;Linux系统分层&quot;&gt;&lt;/p&gt;

&lt;p&gt;TCP/IP协议栈也是经典的分层架构，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/2/tcp-ip-protocol-layer.gif&quot; alt=&quot;TCP-IP分层&quot;&gt;&lt;/p&gt;

&lt;p&gt;如果你关注人类文明演化史，你会发现今天的人类世界也是以分层方式一层层搭建和演化出来的。今天的互联网系统可以认为是现代文明的一个层次，其上是基于互联网的现代商业，其下是现代电子工业基础设施，诸如此类。&lt;/p&gt;

&lt;h3&gt;第二种，分治思维&lt;/h3&gt;

&lt;p&gt;分而治之也是应对和管理复杂性的一般性方法，下图展示一个分治的思维流程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/2/divide.png&quot; alt=&quot;分治法&quot;&gt;&lt;/p&gt;

&lt;p&gt;这是我2015年在思考Unity3D手游项目开发整体流程时，用分治法抽象出来的对整个问题的分解。我首先把code编码作为主中心，再把除了code的以外的事拆分成打包发布，资源部署到外网与检测，版本控制，项目管理平台。再对拆分出来的大块问题，进行细化，分解到具体的某个小问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/uploads/2015/03/%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%8E%AF%E5%A2%83%E5%B8%83%E5%B1%80.jpg&quot; alt=&quot;手游开发流程&quot;&gt;&lt;/p&gt;

&lt;p&gt;对于一个无法一次解决的大问题，我们会先把大问题分解成若干个子问题，如果子问题还无法直接解决，则继续分解成子子问题，直到可以直接解决的程度，这个是分解(divide)的过程；然后将子子问题的解组合拼装成子问题的解，再将子问题的解组合拼装成原问题的解，这个是组合(combine)的过程。&lt;/p&gt;

&lt;p&gt;在生活中分治思维，解决大问题，复杂问题，是很好手段。特别是当遇到那些你从未处理过的问题时，或者特别复杂超出你能力范围的问题时，把它分解、拆分、解刨、撕裂。把大问题先分成几大块的问题，再从这几大块问题入手，对每个大块问题再分解，拆分成小块问题。倘若小块问题仍然无法进行，或者还是没有思路，再拆分，再解刨，再分解，直到分解到你能开始着手解决了为止。这样一步步，一点点，把小的问题解决了，就是把大块问题解决了。随着时间的推移，不断解决细分的小问题，大块问题被迎刃而解，最后大块问题解决完后，更大块问题迎刃而解。&lt;/p&gt;

&lt;h3&gt;第三种，演化思维&lt;/h3&gt;

&lt;p&gt;经常有人在讨论：架构是设计出来的？还是演化出来的？我个人基于多年的经验认为，架构既是设计出来的，同时也是演化出来的，对于互联网系统，基本上可以说是三分设计，七分演化，而且是在设计中演化，在演化中设计，一个不断迭代的过程。&lt;/p&gt;

&lt;p&gt;在互联网软件系统的整个生命周期过程中，前期的设计和开发大致只占三分，在后面的七分时间里，架构师需要根据用户的反馈对架构进行不断的调整。我认为架构师除了要利用自身的架构设计能力，同时也要学会借助用户反馈和进化的力量，推动架构的持续演进，这个就是演化式架构思维。&lt;/p&gt;

&lt;p&gt;当然一开始的架构设计非常重要，架构定系统基本就成型了，不容马虎。同时，优秀的架构师深知，能够不断应对环境变化的系统，才是有生命力的系统，架构的好坏，很大部分取决于它应对变化的灵活性。所以具有演化式思维的架构师，能够在一开始设计时就考虑到后续架构的演化特性，并且将灵活应对变化的能力作为架构设计的主要考量。&lt;/p&gt;

&lt;p&gt;从单块架构开始，随着架构师对业务域理解的不断深入，也随着业务和团队规模的不断扩大，渐进式地把单块架构拆分成微服务架构的思路，这就是演化式架构的思维。如果你观察现实世界中一些互联网公司（例如eBay，阿里，Netflix等等）的系统架构，大部分走得都是演化式架构的路线。&lt;/p&gt;

&lt;p&gt;下图是建筑的演化史，在每个阶段，你可以看到设计的影子，但如果时间线拉得足够长，演化的特性就出来了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/2/building-archiecture.png&quot; alt=&quot;建筑演化史&quot;&gt;&lt;/p&gt;

&lt;p&gt;总结下，我们上文中我们强调了抽象思维在架构设计中的重要性，以及抽象思维的几种用法，包括分层思维，分治思维，以及演化思维，他们帮助我们在抽象的架构设计中起到了很好的作用。&lt;/p&gt;

&lt;p&gt;参考文献：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    1.《优秀架构师必须掌握的架构思维》作者：杨波
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Have fun in watch video</title>
   <link href="http://www.luzexi.com/2018/07/23/have-fun-in-watch-video.html"/>
   <updated>2018-07-23T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/23/have-fun-in-watch-video</id>
   <content type="html">&lt;p&gt;This is a funy video I would like to share with you. Learn english should be more funy than u think. I prefer to find out the funy way to keep, not only the boring thing as learn words or do homework on paper.&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;The way I find out this time is a short funy video. It&amp;#39;s just has 3 minutes long to watch, but makes me laugh out loudly.&lt;/p&gt;

&lt;p&gt;The story happend in a normal company, a person which in HR department is having a interview with a job seeker.&lt;/p&gt;

&lt;p&gt;The especial thing is they are using a new Lie Detector which will make noise when you lie to others.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s start:&lt;/p&gt;

&lt;iframe frameborder=&quot;0&quot; width=&quot;640&quot; height=&quot;498&quot; src=&quot;https://v.qq.com/iframe/player.html?vid=w0161zniawq&amp;tiny=0&amp;auto=0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Hahahaha. Did you laugh out loudly like I do?&lt;/p&gt;

&lt;p&gt;故事大致是这样的：两个人面试时用了‘测谎仪3000’，求职者说我要插管什么的吗，面试官说以前要的，不过最新研制的这个机器不用了。然后他让求职者说几个明显的谎话。求职者说了几个觉得很好玩，面试官看他不爽，又让他说几个真实的，有意思的是求职者说自己有12英尺的大屌，测谎仪居然没报错，面试官怀疑是不是机器坏了，求职者说自己确实有12英尺的大屌。面试官兴奋异常，原来面试官是个同性恋，还一直在掩饰自己的性取向。但是求职者品德很坏，被开除很多次，也偷过很多钱。面试官很愤怒，最后问了他一个问题，把他给潜规则了。。。。。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>白领投资探讨(三)</title>
   <link href="http://www.luzexi.com/2018/07/20/%E7%99%BD%E9%A2%86%E6%8A%95%E8%B5%84%E6%8E%A2%E8%AE%A83.html"/>
   <updated>2018-07-20T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/20/白领投资探讨3</id>
   <content type="html">&lt;p&gt;最近P2P雷爆很多，据统计平均每天有2家网贷平台倒闭和跑路，据说把所有倒闭跑路的网贷平台资金总量加起来有2万亿，倒霉的都是老百姓，很多家庭的财富顷刻间灰飞烟灭。我们今天就来说说，用钱赚钱这事。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;首先我并不认为他们那些把钱投向P2P的人值得同情，他们只想躺着赚钱，脑经连动都不想动，懒且贪。对于这些人，我认为教点财商税，交点智商税，交点学费是应该的。不给他们教训，他们是不会明白，这个世界从来都没有容易赚的钱。&lt;/p&gt;

&lt;p&gt;要达到财务自由，只有一条路：勤奋，并且努力学习，并且节俭。&lt;/p&gt;

&lt;p&gt;所有违背这条规则的路，最终是无法到达胜利的彼岸。如果彻底违背这条规则，那么将是另一面的情景，地狱情景。&lt;/p&gt;

&lt;p&gt;也就是说，在金融投资中，但凡你简单看两眼，或者看几个新闻，听别人说几句话，就把钱投进去的，都会被吞没掉，或者严重亏损。&lt;/p&gt;

&lt;p&gt;我可以100%肯定的跟你说，所有金融理财公司，包括最大的和最厉害的，全部看上的是你的本金，而不是你的本金带给他们的利润，而你看上的却是他们口头上承诺的利息。&lt;/p&gt;

&lt;p&gt;我明白，这个结论跟大多数人的观念是冲突的，他们会用比如“专业的事情交给专业的人去做”，来反驳我。虽然这个道理在很多其他领域上是正确的，但在金融投资中，却是错误的，至少错了一大半。&lt;/p&gt;

&lt;p&gt;在金融领域，专业人士不能100%保证给你赚钱，其实他们来操作和你自己来操作的赔率差不多。因为金融就是不确定的代名词，没有人能预测，也没有人能掌控，政府都没有这个能力，何况是小老百姓。&lt;/p&gt;

&lt;p&gt;金融的不确定性是人类造成的，人类的情绪就是金融波动的原因，情绪好时所有人都会往上冲，而情绪差时，所有人都往后跑形成挤兑和踩踏。&lt;/p&gt;

&lt;p&gt;这就是为什么温家宝说，信心比黄金还珍贵的原因。我们说的信心不仅仅只在金融领域，在生活，工作，学习中也是同样的道理。特别是人民大众的信心，是由一个个小老百姓构成的，不是说颠覆就颠覆，说雄起就雄起的，没有人有这么大的能耐，天皇老子也不行。&lt;/p&gt;

&lt;p&gt;看起来，像是赌博一样的金融投资，不确定性太大。那么什么才是确定的？唯有坚持不懈的努力和勤奋才是确定的。任何一个国家，公司，个人，能最最确定的一样事情就是，勤奋努力能带给他们好结果。&lt;/p&gt;

&lt;p&gt;过去30年的中国经济大发展带给人们太多的误区，导致大多数人都认为，今后的30年也会像前面那样，快速发展，包括房地产，企业，金融，投资等还会快速的增长。殊不知，我们已经到达了一个瓶颈，说瓶颈还是太容易了点，毕竟瓶颈看起来只要稍微努力下就能突破，应该把瓶颈换成‘天花板’，让我们有可能这辈子都无法颠覆的天花板。这个天花板就是美国。&lt;/p&gt;

&lt;p&gt;很多国人还没有清醒的意识到美国的强大，以及怎么个强大法。简单解释下：&lt;/p&gt;

&lt;p&gt;以下内容，可能有人认为，我忽视了中国的潜力和中国作为全球第二大经济国家的力量。我只是说说美国强大在什么地方，并没有说中国完全不可能超越，也说没有哪里中国不好。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;全球都用美元来做交易货币。导致美国很容易就能控制全球的现金流，让钱回到国内就能回来，想放出去就放出去。如果他大量印钞，全球都在帮他分担通货膨胀的危机，也就是说他可以随时从全球国家的口袋中抽点利息税什么的。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;美国是全球最大(交易量最大，金融产品最丰富)的金融交易场所。只要在美国的交易所里公认某某资产贬值了，全球的市场的相关产品都跟着下跌。这就是领头羊的效应。也就是说美国主导了整个全球的金融产品价格。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;美国是全球资金力量最集中的地方。全球大部分有钱的，有名望的都扎根在美国或者有根据地在美国，形成聚拢效应，越有钱的人越想去美国。导致美国不缺少风险投资的资金，任何有希望成为未来风向标，或者新科技的公司，都被大量资金包围着。做公司和产品的人，会更关注产品质量和体验，而不是分出很大一部分精力来融资。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;中国现在的‘天花板’就是这样一个美国。一个GDP比你大几乎一倍，人均GDP比你大10倍的美国。而从历史角度看，美国从前都忽视了中国的崛起，可能忽视不太准确，用睁一只眼闭一只眼来形容更加确切。而当前不一样了，现在的中国，可以威胁到美国了，虽然还不能构成巨大颠覆性的威胁，但跟从前的弱小比起来那是相当不一样的影响。&lt;/p&gt;

&lt;p&gt;美国完全有理由站起来，主动打压中国。面对美国这种主动性的打压，中国前面的道路更加艰难。但也不是没有翻盘的机会，我们只要秉持，勤奋努力，脚踏实地的准则，坚持韬光养晦的政策，多一点真诚，少一点虚假，翻盘也是早晚的事。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第二章，架构(一) - 架构的意义</title>
   <link href="http://www.luzexi.com/2018/07/18/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%9E%B6%E6%9E%841.html"/>
   <updated>2018-07-18T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/18/Unity3D高级编程之进阶主程-架构1</id>
   <content type="html">&lt;h6&gt;什么是架构? 架构每天都有人在耳边提起。架构到底是什么，却很少有人说的清楚。&lt;/h6&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;网络上解释的，比如，软件架构是一个系统的草图，又比如，软件体系结构是构建计算机软件实践的基础，还有，软件系统架构是一系列相关的抽象模式，用于指导大型软件系统各个方面的设计。说的都对，但是阐述还是过于模糊，懂的人本来就懂不用看，而不懂的人看了还是一头雾水。&lt;/p&gt;

&lt;p&gt;‘架构’这个词太抽象，导致难以准确定义，而现在的大部分书本和文章中讨论的’架构‘都是服务器端的部署图，所以大部分人一提到架构就觉得是几台服务器放这里，放那里，用什么软件连接合作，用什么框架开发扩展等等。&lt;/p&gt;

&lt;p&gt;我希望能这通过这个章节引导人们将错误的观念纠正过来。实际上架构无处不在，它实质上是解决生活和工作中的问题的一种方案。除了自己着手寻找解决问题的方案外，其他方案，比如直接购买现成的，或者直接放弃，或者以外包以及部分外包的形式，以还有合作模式等来对解决问题，也是切实可行的，其实都是值得考虑的解决问题的方案。我们所求的不是最贵的也不是最高级的，而是最好用的。&lt;/p&gt;

&lt;p&gt;在软件系统架构中，架构承担了解决项目从研发到上线运营的方案。前端渲染引擎的选择是自己研发一款引擎，还是使用商业引擎？商业引擎使用Unity3D还是Unreal还是其他？以及怎么用，是和UGUI一起用还是和NGUI一起用？UI里的事件系统如何做统一的处理？AI行为算法是选择行为树还是状态机抑或事件型决策树？数据如何获取和存储？场景如何拆分？是否需要将资源分离出去？是长连接还是短连接？服务器端是用C++还是Java抑或Python？是全部使用关系型数据库还是加入Cache机制？网络协议是用 protocal buff 还是 json 还是 xml 或者使用完全自定义格式等等等。&lt;/p&gt;

&lt;p&gt;这些项目中的每个子系统的都有自己的决策方向，而子系统的决策方向，把它们合起来加入一定的关联性就构成了一个完整架构整体，即每个系统、模块、组件都是软件系统架构中的一部分。&lt;/p&gt;

&lt;p&gt;优秀的架构师，需要对每个子系统决策的方向要进行深思熟虑，不仅只针对单个系统的决策方向，还要结合其他系统以及整体系统需求的方向进行决策。&lt;/p&gt;

&lt;p&gt;在架构设计中，为了能够更好的整理，思考，描述，表达，于是就有了架构图这个东西。架构师把架构中抽象的系统、模块、组件画在图上用圆圈、方块和文字表示，让自己和大家能够更加系统的认识到架构的意图，规范，以及子系统的细节。&lt;/p&gt;

&lt;p&gt;一个完整架构图会有很多细节的子系统、或者说子模块架构图，比如UML对象关系图就是一种，它描述了数据类之间的关系，把系统中对象模块用画图的方式描述清楚了。又比如部署图也是其中的一种，它把需要多少种服务器，分别起到什么作用，相互之间的关系描述清楚了，还有时序图，把系统程序调用的次序与流程描述清楚了。这些子系统的架构图合起来构成了一个完整的项目的架构图，最后才有了总体的架构图。如果把子系统架构细节略去，在不关心细节的情况下，描述各系统的合作方式，展现给人的是整体的解决方案，从宏观的角度下看整个项目的布局，会让人一目了然。&lt;/p&gt;

&lt;p&gt;为了让更多人理解软件系统架构的，我想把软件系统架构比喻的更切入实际生活一点。&lt;/p&gt;

&lt;p&gt;软件系统架构可以理解为是软件程序的架子，和现实中的书架相比有异曲同工之妙，这个架子上有很多大大小小的格子，每个格子里都可以放固定种类的程序。架子有大有小，大的需要花费点去做，小的轻便快捷。&lt;/p&gt;

&lt;p&gt;架子的大小是由做设计的设计师决定的，设计师根据客户的需求设计大小，假如放置的空间大，且需要承载的东西多，那么就往空间大的方向设计，能容纳更多的东西，能放置各种不同类型的程序，反之则做小一点，又快，又轻。&lt;/p&gt;

&lt;p&gt;架子完成后要拿出去用，如果一有什么不同的情况就倒了或散架了就不算是个好的架子了，所以架子的好坏有几个方面的评估。&lt;/p&gt;

&lt;h6&gt;一，承载力。&lt;/h6&gt;

&lt;p&gt;书架上能放多少东西，能放多重的东西是使用者(这里使用者可以为客户，玩家，或程序员)比较关注的点。&lt;/p&gt;

&lt;p&gt;从软件架构的程序意义来说，一个架构能承载多少个逻辑系统，代码复杂度扩展到100万行代码代码时是否依然能够有序规范，程序员彼此工作的模块相互依存度有多少，能够承载多少个程序员共同工作因为能工共同工作的架构加速了开发与迭代，这是对软件架构承载力的评定。&lt;/p&gt;

&lt;p&gt;从架构的结果上来看，对于服务器来说，当前架构能承受多少人同时访问，日均访问量能承载多少，是承载力的体现。而对于客户端来说，能显示多少UI元素，可渲染多少模型（包括同屏渲染和非同屏渲染），数据交互能达到多少量。&lt;/p&gt;

&lt;p&gt;访问量承载太低，访问量一上来就都卡在加载上，大家就不再有这个耐心来看你的产品，运营和宣传部门的导量效果就大打折扣。同样的，客户端渲染承载不了过多元素时，帧率过低，画面卡顿现象严重，产品就不会得到认同。&lt;/p&gt;

&lt;p&gt;承载力是重要因素，但并非是唯一关键因素，这个世界这个社会讲究的永远是综合因素，一个点的好坏并不能决定全盘的好坏，而往往木桶效应里最短的那块木板才是。&lt;/p&gt;

&lt;h6&gt;二，可扩展度。&lt;/h6&gt;

&lt;p&gt;如果书架上只能放书，这个书架的用途就太单一了，花瓶不能放、箱子不能放、鞋子不能放、袋子不能放、衣服不能放，客户八成不买单。&lt;/p&gt;

&lt;p&gt;架子适应不同类型的需求，添加不同类型的系统，不同功能的子系统，是非常必要的。软件架构也是同样的，需要具有高的可扩展度。&lt;/p&gt;

&lt;p&gt;而且可扩展度的关键在于，在添加新的子系统后不能影响或者只能尽可能的少量影响其他子系统的运作。假设添加了子系统后，所有系统都得重写或者重构，那就是灾难，前面花去的时间和人力物力精力全部‘浪费’，这是我们不想看到的，因此可扩展度也是衡量好的架构的非常重要标准。&lt;/p&gt;

&lt;h6&gt;三，易用性。&lt;/h6&gt;

&lt;p&gt;易用性是架构师最最容易忽视的一个点，有了完整的架构，但不好用，而架构师却还是一心在推动它使用，导致开发效率的下降是常有的。&lt;/p&gt;

&lt;p&gt;这就好比，书架上要取个东西，如果取个东西需要先输入密码，再打开门，再剥去袋子，拿出来，把袋子放进箱子，关上门，当放回书架上去时，则再来一遍以上这些所有步骤，实在是太繁琐，即使功能再多，承载力再好，使用者也无法承受这么繁琐的步骤，而且都是机械重复的，精力和注意力都损耗在了没有意义的地方。&lt;/p&gt;

&lt;p&gt;易用性决定了架构的整体开发效率，程序员容易上手，子系统容易对接，开发效率自然就高，各模块各部件的编写只需要花一点点精力来关注架构的融合，其他所有精力和注意力都可以全部集中在自己的框架结构上，才能让各系统各尽其职将效率发挥到极致。&lt;/p&gt;

&lt;h6&gt;四，可伸缩力。&lt;/h6&gt;

&lt;p&gt;还是用书架比喻，假设我现在没有这么多书和东西要放，房子也不够大，我的书架是否可以折叠缩小到我需要的大小，是可伸缩力的体现。&lt;/p&gt;

&lt;p&gt;如果我们制造的书架可随时放大或随时折叠缩小的那就太好。软件架构也是同样的，当需要的承载量没有这么大时，是否可以不使用不需要的功能，化繁为简，只使用需要的部分。&lt;/p&gt;

&lt;p&gt;例如从服务器端的角度来说，当需要急速导入大量用户时到做能承载几百万人同时在线，服务器可随时扩展到几百上千台服务器来提高承载量，当访问量骤减，或者平时访问量比较少的情况下，访问量甚至低到只有几十个人在访问时，服务器可缩减到就几台机子在运作，这样大大缩减了服务器费用的开销，可以根据需要而随时变更架构的承载力来节省成本。&lt;/p&gt;

&lt;p&gt;而从客户端的角度来说，伸缩力体现在是否能适应大型项目众多人协同开发复杂系统，既能适应大成本消耗下的大项目大作品，也能适应小项目1-3个人团队小而快速的开发环境，小成本小作品极速迭代。&lt;/p&gt;

&lt;p&gt;在实际项目中，有时可伸缩力看起来并不是关键的因素，很多人误认为伸缩能力是种程序员的负担，甚至有的项目某些时期根本不需要伸缩力，只需要适应当前的特定时间的需求就可以了。不得不强调可伸缩力在架构中的关键位置，它是深入理解、设计架构的关键因素，是做出优秀的完整的架构的重要因素。&lt;/p&gt;

&lt;h6&gt;五，容错力以及错误的感知力&lt;/h6&gt;

&lt;p&gt;书架也会磕磕碰碰的时候，同样也会在某处做工不精时遇到使用后歪斜，如果我们保证不了完全没有问题，至少我们需要保证它不会因为一点点小小的毛病而彻底散架。&lt;/p&gt;

&lt;p&gt;软件架构也是同样的，软件中错误、异常、BUG常有，设备何时损坏我们无法预估。容灾力首先起到了不让产品彻底不能使用的作用，有备份方案自动启用，也同时要能够让我们及时得知到问题发生，以及问题的所在，通过EMAIL发送或者通过短信、电话方式通知维护者，并且记录并保存错误信息。&lt;/p&gt;

&lt;p&gt;从服务端的角度来说，容灾力包括，数据库容灾能力，应用服务器容灾力，缓存服务器容灾力，以及中心服务器容灾力，每个机子倒下了都需要通知相关中心服务器改变策略，或者监控服务器检测得知该服务器倒下了，更换成备用服务器或者直接更换链路。&lt;/p&gt;

&lt;p&gt;从客户端角度来说，容灾力包括当数据发生错误时，是否同样能够继续保持运行而不崩溃，当程序出错时，是否依然能够继续运行其他程序，而不闪退或崩溃甚至再次启动也不能使用的状况发生。所有出现的错误，都能及时的记录并发送到服务器后台存储成为错误日志，便于开发人员能都及时得到详细的错误信息，根据错误信息能够快速找出问题的所在。&lt;/p&gt;

&lt;h6&gt;在架构中这五项能力缺一不可，某项能力特别突出也不能决定整个架构的好坏，综合因素才是。哪一项比较弱，则问题会不断向该方向聚集，直到最终出现大的问题，甚至崩溃。我们需要一个牢固的，多样化的，好用的，可伸缩的，有韧性的书架，这也是我们在构建架构时所追求的。&lt;/h6&gt;

&lt;h6&gt;其实万物是相通的，木桶原理在各个地方都适用，木桶上仅有一条或几条板比较长没用，其他板都短照样撑不住多少水。说到实际工作生活中就比如，老板CEO是有局限性的，对公司的宏观架构多厉害多好多明智，下面的高管不给力，一切都是白费力气，高管再给力，小弟们不给力，还是一塌糊涂。一个点的好坏并不能决定整体的走向。契合我们的架构理论，最宏观的整体架构，是由所有子系统的架构来支撑的，整体架构虽然比其他子系统的架构都更加重要，但再好的整体架构也并不能起到决定性作用。引申到战争中，也是一样，立于众多溃败下的一两场漂亮的以少胜多的精彩战斗，还是无法扭转全局，因为一个好的将军需要众多好的将士支撑，一个好的司令需要众多好的将领以及更多的好的士兵支撑。综合因素决定了成败，架构也同样如此，如何让所有的因素都朝着好的方向发展是所有架构师最终都需要思考和解决的问题。&lt;/h6&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第一章，C#要点技术(二) - Dictionary 底层源码剖析</title>
   <link href="http://www.luzexi.com/2018/07/18/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-CSharp%E8%A6%81%E7%82%B9%E6%8A%80%E6%9C%AF2.html"/>
   <updated>2018-07-18T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/18/Unity3D高级编程之进阶主程-CSharp要点技术2</id>
   <content type="html">&lt;p&gt;前文剖析了 List 的源码，我们明白了 List 是用数组构建而成的，增加，减少，插入的操作，都在数组中进行。我们还分析了大部分 List 的接口，包括Add，Remove，Insert，IndexOf，Find，Sort，ToArray，等等。我们得出了一个结论，List 是一个兼容性比较好的组件，但 List 在效率方面并没有做优化，线程也并不安全，需要加锁机制来保证线程的安全性。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;这次我们来对常用的另一个组件 Dictionary 组件进行底层源码的分析，看看我们常用的字典容器是如何构造而成的，它的优缺点如何。&lt;/p&gt;

&lt;h3&gt;Dictionary 底层代码&lt;/h3&gt;

&lt;p&gt;我们知道 Dictionary 字典型数据结构，是以关键字Key 和 值Value 进行一一映射的。Key的类型并没有做任何的限制，可以是整数，也可以是的字符串，甚至可以是实例对象。关键字Key是如何映射到内存的呢？&lt;/p&gt;

&lt;p&gt;其实没有什么神秘的，这种映射关系可以用一个Hash函数来建立，Dictionary 也确实是这样做的。这个Hash函数也并非神秘，我们可以简单的认为它只是做了一个模(Mod余)的操作，Dictionary 将每个Key加入容器的元素都要进行一次Hash哈希的运算操作，从而找到自己的位置。&lt;/p&gt;

&lt;p&gt;Hash函数可以有很多种算法，最简单的可以认为是余操作，比如当Key为整数93时&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;hash_key = Key % 30 = 3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于对象和字符串来说，虽然没有直接点数字做标准，但也能以实例ID为标准来做Hash操作。实际算法可能没有我举例子这么简单，我们将在下面的源码剖析中详细讲解。&lt;/p&gt;

&lt;p&gt;对于不同的关键字可能得到同一哈希地址，即 &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;key1 != key2 =&amp;gt; F(key1)=F(fey2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种现象叫做Hash哈希冲突，在一般情况下，冲突只能尽可能的少，而不能完全避免。因为哈希函数是从关键字范围到索引范围的映射，通常关键字范围要远大于索引范围，它的元素包括多个可能的关键字。既然如此，如何处理冲突则是构造哈希表不可不解决的一个问题。&lt;/p&gt;

&lt;p&gt;在处理Hash哈希冲突的方法中通常有：开放定址法、再哈希法、链地址法、建立一个公共溢出区等。Dictionary使用的解决冲突方法是拉链法，又称链地址法。&lt;/p&gt;

&lt;p&gt;拉链法的原理：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;将所有关键字为同义词的结点链接在同一个单链表中。若选定的散列表长度为n，则可将散列表定义为一个由n个头指针组成的指针数 组T[0..n-1]。凡是散列地址为i的结点，均插入到以T[i]为头指针的单链表中。T中各分量的初值均应为空指针。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在哈希表上进行查找的过程，和，在哈希表构建的过程是基本一致的。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;给定Key值，根据造表时设定的哈希函数求得哈希地址，若表中此位置没有记录，则查找不成功；否则比较关键字，若何给定值相等，则查找成功；否则根据处理冲突的方法寻找“下一地址”，直到哈希表中某个位置为空或者表中所填记录的关键字等于给定值时为止。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们来看看更形象的结构图，如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/1/lalianfa.png&quot; alt=&quot;拉链法结构图&quot;&gt;&lt;/p&gt;

&lt;p&gt;如图所示，拉链法结构中，主要的宿主为数组指针，每个数组元素里存放着指向下一个节点的指针，如果没有元素在单元上，则为空指针。当多个元素都指向同一个单元格时，则以链表的形式依次存放并列的元素。&lt;/p&gt;

&lt;h6&gt;在 Dictionary 中究竟是如何实现的呢，我们来剖析一下源码。&lt;/h6&gt;

&lt;p&gt;首先我们来看看源码中对 Dictionary 的变量定义部分，如下:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IReadOnlyDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISerializable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDeserializationCallback&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Entry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Lower 31 bits of hash code, -1 if unused&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Index of next entry, -1 if last&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// Key of entry&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// Value of entry&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freeList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freeCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ValueCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_syncRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;从继承的类和接口看，Dictionary 主要继承了 IDictionary 接口，和 ISerializable 接口。IDictionary 和 ISerializable 在使用过程中，其主要的接口为，Add, Remove, ContainsKey, Clear, TryGetValue, Keys, Values, 以及[]数组符号形式作为返回值的接口。也包括了常用库 Collection 中的接口，Count, Contains等。&lt;/p&gt;

&lt;p&gt;从 Dictionary 的定义变量中可以看出，Dictionary 是以数组为底层数据结构的类。当我们实例化 new Dictionary() 后，内部的数组是0个数组的状态。与 List 组件一样，Dictionary 也是需要扩容的，会随着元素数量的增加而不断扩容。具体我们来看看下面的接口源码剖析。&lt;/p&gt;

&lt;p&gt;下面的我们将围绕上述的接口进行解析 Dictionary 底层运作机制。&lt;/p&gt;

&lt;h6&gt;了解Add是最直接了解底层数据结构如何运作的途径，我们来看下Add接口的实现。&lt;/h6&gt;

&lt;p&gt;源代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashHelpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;freeList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetHashCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x7FFFFFFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetBucket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if FEATURE_RANDOMIZED_STRING_HASHING&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collisionCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetBucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
                &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Argument_AddingDuplicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

&lt;span class=&quot;cp&quot;&gt;#if FEATURE_RANDOMIZED_STRING_HASHING&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;collisionCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freeCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freeList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;freeList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;freeCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;--;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;targetBucket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetBucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetBucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if FEATURE_RANDOMIZED_STRING_HASHING&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#if FEATURE_CORECLR&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// In case we hit the collision threshold we&amp;#39;ll need to switch to the comparer which is using randomized string hashing&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// in this case will be EqualityComparer&amp;lt;string&amp;gt;.Default.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Note, randomized string hashing is turned on by default on coreclr so EqualityComparer&amp;lt;string&amp;gt;.Default will &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// be using randomized string hashing&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collisionCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashHelpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HashCollisionThreshold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NonRandomizedStringEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collisionCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashHelpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HashCollisionThreshold&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashHelpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsWellKnownEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashHelpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetRandomizedEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Resize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif // FEATURE_CORECLR&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;展示的代码稍稍多了点，我们摘出其中的要点，通过要点来了解重点，再通过重点了解全局。&lt;/p&gt;

&lt;p&gt;其实 Add 接口就是 Insert 的代理，因为它 Insert 一句话，那么 Inset 里做了什么呢？&lt;/p&gt;

&lt;p&gt;首先在加入数据前需要对数据结构进行构造。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;if (buckets == null) Initialize(0);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实在 Dictionary 构建时如果没有指定任何数量 buckets 就有可能是空的，所以需要对buckets进行初始化，Initialize(0)，说明构建的数量级最少。&lt;/p&gt;

&lt;p&gt;不过奥妙就在 Initialize 函数里，如果传入的参数不是0，而是5、10、25、或其他更大的数量的话，那么构造多大的数据结构才合适呢？&lt;/p&gt;

&lt;p&gt;在 Initialize 函数中，给了我们答案，看下面这行:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;int size = HashHelpers.GetPrime(capacity);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它们有专门的方法来计算到底该使用多大的数组，我们查出源码 HashHelpers 中，primes数值是这样定义的:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;89&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;107&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;131&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;163&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;197&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;239&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;293&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;353&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;431&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;521&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;631&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;761&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;919&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;m&quot;&gt;1103&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1327&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1597&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1931&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2801&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3371&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4049&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4861&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5839&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7013&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8419&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10103&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12143&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14591&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;m&quot;&gt;17519&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;21023&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25229&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30293&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;36353&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;43627&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;52361&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;62851&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;75431&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;90523&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;108631&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;130363&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;156437&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;m&quot;&gt;187751&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;225307&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;270371&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;324449&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;389357&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;467237&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;560689&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;672827&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;807403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;968897&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1162687&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1395263&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;m&quot;&gt;1674319&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2009191&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2411033&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2893249&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3471899&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4166287&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4999559&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5999471&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7199369&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetResourceString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Arg_HTCapacityOverflow&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndContractBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//outside of our predefined table. &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//compute the hard way. &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hashtable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HashPrime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Returns size of hashtable to grow to.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ExpandPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Allow the hashtables to grow to maximum possible size (~2G elements) before encoutering capacity overflow.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Note that this check works even when _items.Length overflowed thanks to the (uint) cast&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaxPrimeArrayLength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaxPrimeArrayLength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaxPrimeArrayLength&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxPrimeArrayLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Invalid MaxPrimeArrayLength&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MaxPrimeArrayLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetPrime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上述代码为 HashHelpers 部分的源码，其中 GetPrime 会返回一个需要的 size 最小的数值，从 GetPrime 函数的代码中，我们可以知道这个 size 是由数组 primes 里的值与当前需要的数量大小有关，当需要的数量小于 primes 某个单元格的数字时返回该数字，而 ExpandPrime 则更加简单粗暴，直接返回原来size的2倍作为扩展数量。&lt;/p&gt;

&lt;p&gt;从Prime的定义看的出，首次定义size为3，每次扩大2倍，也就是，3-&amp;gt;7-&amp;gt;17-&amp;gt;37-&amp;gt;.... 底层数据结构的大小是按照这个数值顺序来扩展的，除非你在创建 Dictionary 时，先定义了他的初始大小，指定的初始大小也会先被 GetPrime 计算该分配的数量最终得到应该分配的数组大小。这和 List 组件的分配方式一模一样。&lt;/p&gt;

&lt;p&gt;我们继续看初始化后的内容，对关键字 Key 做Hash哈希操作从而获得地址索引:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    int hashCode = comparer.GetHashCode(key) &amp;amp; 0x7FFFFFFF;
    int targetBucket = hashCode % buckets.Length;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当调用函数获得Hash哈希值后，还需要对哈希地址做余操作，以确定地址落在 Dictionary 数组长度范围内不会溢出。&lt;/p&gt;

&lt;p&gt;紧接着对指定数组单元格内的链表元素做遍历操作，找出空出来的位置将值填入。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;for (int i = buckets[targetBucket]; i &amp;gt;= 0; i = entries[i].next) {
    if (entries[i].hashCode == hashCode &amp;amp;&amp;amp; comparer.Equals(entries[i].key, key)) {
        if (add) { 
            ThrowHelper.ThrowArgumentException(ExceptionResource.Argument_AddingDuplicate);
        }
        entries[i].value = value;
        version++;
        return;
    } 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;if FEATURE&lt;em&gt;RANDOMIZED&lt;/em&gt;STRING_HASHING&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    collisionCount++;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;endif&lt;/h1&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这一步就是前面我们所说的拉链法的链表推入动作。当获得Hash值的数组索引后，我们知道了该将数据存放在哪个数组位置上，如果该位置已经有元素被推入，则需要将其推入到链表的尾部。从for循环开始，检查是否到达链表的末尾，最后将数据放入尾部，并结束函数。&lt;/p&gt;

&lt;p&gt;如果数组的空间不够了怎么办？源码中体现了这一点:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;int index;
if (freeCount &amp;gt; 0) {
    index = freeList;
    freeList = entries[index].next;
    freeCount--;
}
else {
    if (count == entries.Length)
    {
        Resize();
        targetBucket = hashCode % buckets.Length;
    }
    index = count;
    count++;
}

entries[index].hashCode = hashCode;
entries[index].next = buckets[targetBucket];
entries[index].key = key;
entries[index].value = value;
buckets[targetBucket] = index;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当被用来记录剩余单元格数量的变量 freeCount 等于0时，则进行扩容，扩容后的大小就是我们前面提到的 调用 ExpandPrime 后的数量，即通常情况下为原来的2倍，再根据这个空间大小数字调用 GetPrime 来得到真正的新数组的大小。&lt;/p&gt;

&lt;h6&gt;了解了Add接口，我们来看看Remove部分。&lt;/h6&gt;

&lt;p&gt;删除的过程和插入的过程比较相似，因为要查找到Key元素所在位置，所以再次将Key值做哈希操作也是难免的，然后类似沿着拉链法的模式寻找与关键字匹配的元素。&lt;/p&gt;

&lt;h6&gt;Remove 用关键字删除元素的接口源码：&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetHashCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x7FFFFFFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;freeList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;freeList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;freeCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们注意到 Remove 接口相对 Add 接口简单的多，同样用哈希函数 comparer.GetHashCode 再除余后得到范围内的地址索引，再做余操作确定地址落在数组范围内，从哈希索引地址开始，查找冲突的元素的Key是否与需要移除的Key值相同，相同则进行移除操作并退出。&lt;/p&gt;

&lt;p&gt;注意源码中，Remove 的移除操作并没有对内存进行删减，而只是将其单元格置空，这是位了减少了内存的频繁操作。&lt;/p&gt;

&lt;h6&gt;我们继续剖析另一个重要的接口 ContainsKey 检测是否包含关键字的接口。源码如下：&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetHashCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x7FFFFFFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buckets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;从源码中看到 ContainsKey 是一个查找Key位置的过程。它调用了 FindEntry 函数，FindEntry 查找Key值位置的方法跟我们前面提到的相同。从用Key值得到的哈希值地址开始查找，查看所有冲突链表中，是否有与Key值相同的值，找到即刻返回该索引地址。&lt;/p&gt;

&lt;h6&gt;有了前面对几个核心接口理解的基础，其他接口相对比较就简单多了，我们快速的看过去。&lt;/h6&gt;

&lt;h6&gt;TryGetValue 尝试获取值的接口:&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TryGetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;与 ContainsKey 同样，他调用的也是FindEntry的接口，来获取Key对应的Value值。&lt;/p&gt;

&lt;h6&gt;对[]操作符的重定义，源码:&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowKeyNotFoundException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在重新定义[]符号的代码中，获取元素时也同样使用 FindEntry 函数，而 Set 设置元素时则使用与 Add 调用相同的 Insert函数，它们都是同一套方法，即哈希拉链冲突解决方案。&lt;/p&gt;

&lt;h6&gt;从源码剖析来看，哈希冲突的拉链法贯穿了整个底层数据结构。因此哈希函数是关键了，哈希函数的好坏直接决定了效率高低。&lt;/h6&gt;

&lt;p&gt;既然这么重要，我们来看看哈希函数的创建过程，比较函数的创建的源码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ensures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;RuntimeType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Specialize type byte for performance reasons&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ByteEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If T implements IEquatable&amp;lt;T&amp;gt; return a GenericEqualityComparer&amp;lt;T&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEquatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsAssignableFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeTypeHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateInstanceForAnotherGenericParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenericEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If T is a Nullable&amp;lt;U&amp;gt; where U implements IEquatable&amp;lt;U&amp;gt; return a NullableEqualityComparer&amp;lt;U&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsGenericType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetGenericTypeDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Nullable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RuntimeType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetGenericArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEquatable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&amp;gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MakeGenericType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsAssignableFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeTypeHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateInstanceForAnotherGenericParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NullableEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// See the METHOD__JIT_HELPERS__UNSAFE_ENUM_CAST and METHOD__JIT_HELPERS__UNSAFE_ENUM_CAST_LONG cases in getILIntrinsicImplementation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsEnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TypeCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;underlyingTypeCode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetTypeCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetUnderlyingType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Depending on the enum type, we need to special case the comparers so that we avoid boxing&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Note: We have different comparers for Short and SByte because for those types we need to make sure we call GetHashCode on the actual underlying type as the &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// implementation of GetHashCode is more complex than for the other types.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;underlyingTypeCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// short&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeTypeHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateInstanceForAnotherGenericParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShortEnumEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeTypeHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateInstanceForAnotherGenericParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SByteEnumEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;sbyte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UInt32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UInt16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//ushort&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeTypeHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateInstanceForAnotherGenericParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EnumEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UInt64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeTypeHandle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateInstanceForAnotherGenericParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RuntimeType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LongEnumEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Otherwise return an ObjectEqualityComparer&amp;lt;T&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectEqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们看到源码中，对数字，byte，有‘比较’接口(IEquatable&lt;T&gt;)，和没有‘比较’接口，四种方式进行了区分对待。&lt;/p&gt;

&lt;p&gt;对于像数字和byte类的，比较容易比较，所以它们都是一类，且是有相应固定的比较函数的。&lt;/p&gt;

&lt;p&gt;而有‘比较’接口(IEquatable&lt;T&gt;)的实体，则直接使用GenericEqualityComparer&lt;T&gt;来获得哈希函数。&lt;/p&gt;

&lt;p&gt;最后那些没有‘比较’接口(IEquatable&lt;T&gt;)的实体，如果继承了 Nullable&lt;U&gt; 接口，则使用一个叫 NullableEqualityComparer 的比较函数来代替。&lt;/p&gt;

&lt;p&gt;如果什么都不是，就只能使用 ObjectEqualityComparer&lt;T&gt; 默认的对象比较方式来做比较了。&lt;/p&gt;

&lt;p&gt;在C#里所有类都继承了 Object 类，所以即使没有特别的重写 Equals 函数，都会使用 Object 类的 Equals 函数:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RuntimeHelpers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[System.Security.SecuritySafeCritical]&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// auto-generated&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[ResourceExposure(ResourceScope.None)]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[MethodImplAttribute(MethodImplOptions.InternalCall)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;而这个 Equals 两个对象的比较，是以内存地址为基准的。&lt;/p&gt;

&lt;h6&gt;Dictionary 同List一样并不是线程安全的组件，官方源码中进行了这样的解释。&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    ** Hashtable has multiple reader/single writer (MR/SW) thread safety built into 
    ** certain methods and properties, whereas Dictionary doesn&amp;#39;t. If you&amp;#39;re 
    ** converting framework code that formerly used Hashtable to Dictionary, it&amp;#39;s
    ** important to consider whether callers may have taken a dependence on MR/SW
    ** thread safety. If a reader writer lock is available, then that may be used
    ** with a Dictionary to get the same thread safety guarantee. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hashtable在多线程读写中是线程安全的，而 Dictionary 不是。如果要在多个线程中共享Dictionaray的读写操作，就要自己写lock以保证线程安全。&lt;/p&gt;

&lt;h3&gt;到这里我们已经全面了解了 Dictionary 的内部构造和运作机制。他是由数组构成，并且由哈希函数完成地址构建，由拉链法冲突解决方式来解决冲突。&lt;/h3&gt;

&lt;h3&gt;从效率上看，同List一样最好在 实例化对象时，即 new 时尽量确定大致数量会更加高效，另外用数值方式做Key比用类实例方式作为Key值更加高效率。&lt;/h3&gt;

&lt;h3&gt;从内存操作上看，大小以3-&amp;gt;7-&amp;gt;17-&amp;gt;37-&amp;gt;....的速度，每次增加2倍多的顺序进行，删除时，并不缩减内存。&lt;/h3&gt;

&lt;h3&gt;如果想在多线程中，共享 Dictionary 则需要进行我们自己进行lock操作。&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/collections/generic/dictionary.cs&quot;&gt;Dictionary源码&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第三章，数据表(三) - 多语言的实现</title>
   <link href="http://www.luzexi.com/2018/07/17/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%95%B0%E6%8D%AE%E8%A1%A83.html"/>
   <updated>2018-07-17T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/17/Unity3D高级编程之进阶主程-数据表3</id>
   <content type="html">&lt;p&gt;前文介绍了关于数据表的几种形式，以及如何让数据表运用更加简单高效，这篇我们来讲讲多语言在数据表中的实现方式。&lt;/p&gt;

&lt;p&gt;游戏项目中文字显示本身就是件比较头疼的事，再加上多语言，更多的问题将待需解决。很多时候项目起初，文本是写进代码里的，但是当项目中后期，文字又需要由策划来修改和添加，这个导致了大量的程序员的重复工作。所以文字的数据还是放在表里比较好些，就让该考虑文字内容的人去考虑文字内容吧，我们需要把这块工作分离出来，完全交给独立的人处理。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;为了实现这个独立模块，我们需要多数据配置表的导出做些规则的设计。&lt;/p&gt;

&lt;p&gt;我们来分析下，一般文字放在Excel表里一般都会以Key-Value形式存放，就比如，Key为&amp;quot;RoleName&amp;quot;,Value为&amp;quot;角色名字&amp;quot;，或者Key为1101,Value为&amp;quot;好友分享&amp;quot;等。&lt;/p&gt;

&lt;p&gt;这种Key-Value形式，一般会以Int-String形式存在，或者string-string形式存在。&lt;/p&gt;

&lt;p&gt;我们先来讨论下这两种形式。&lt;/p&gt;

&lt;p&gt;你从数据表里获取文字的方式，你是喜欢以整数为键值还是字符串形式呢？&lt;/p&gt;

&lt;p&gt;用整数形式获取就会像这样的样式存在&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;string content = GetTextString(12)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种形式，看起来不是很美观，对于其他程序员来说，或者我们过了几周再回头来看时，我们怎么知道12代表什么？只能猜，这个12可能是某个字符串。随着代码的增多文字量的增多，对应数字Key也增多，我们很难识别这句话是代表什么，调试起来会很麻烦。一个项目一般会有10-30万行代码，到处都是这种形式的字符串获取方式，任何人看起来都会崩溃。维护性太差，校验检查难度太大，效率太低。&lt;/p&gt;

&lt;p&gt;如果用字符串形式获取&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    string content = GetTextString(“FightWin”)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这种形式，会好些吗？看起来似乎好了些，至少我知道了我获取的大概是什么内容的字符串。不过任然有问题，你用一个字符串去获取另一个字符串，那岂不是双份内存，GC垃圾回收的消耗也会同时增加。原本只需要存储一个字符串就够了，现在要存两个，就因为用了键值字符串去获取内容字符串。&lt;/p&gt;

&lt;p&gt;当文字内容很多时，我们可能需要用很长的字符串去获取另一个很长的内容，比如用”BattleSceneFightAllianceWin” 去取”联盟战胜利了”，这种形式的字符串换字符串，导致文字数据表变得很大，内存占用量也加大了很多，因为你要另外存一份常量的字符串。&lt;/p&gt;

&lt;p&gt;那么我们来想个更好的方法吧，我们既要用简洁的数字去代表文字，又要让键值看起来形象。怎么办？&lt;/p&gt;

&lt;p&gt;我们策略是生成一个类，用变量的形式去记录文字的ID，在文字表生成数据表，同时生成数据定义类，使用变量去代表数字。我们依然在表里填字符串对应字符串，比如上面提到的”BattleSceneFightAllianceWin” 对应”联盟战胜利了”，在导出xls数据文件时，生成一个类文件，专门把Key值按次序写进类中当变量。如下&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextKey&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BattleSceneFightAllianceWin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BattleSceneFightAllianceLose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;再把“联盟战胜利了”这种文本数据按次序，依次写入数据文件。这样就可以一一对应了。也就是，第一个变量对应第一个文字，第二个变量对应第二个文字。获取文本的方式改为了&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;string content = GetTextString(TextKey.BattleSceneFightAllianceWin)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这时文本数据的排列是如下&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;联盟战胜利了
联盟战失败了
…
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;而程序变量生成后为如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextKey&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BattleSceneFightAllianceWin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BattleSceneFightAllianceLose&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;文字与变量的数字依次对应，既解决了用数字做Key不够形象的问题，又解决了字符串做Key太多冗余的问题。&lt;/p&gt;

&lt;p&gt;那么多语言部分怎么处理？&lt;/p&gt;

&lt;p&gt;简单的处理方式就是做多个表，每个表一个语言。获取方式可以根据不同语言来获取，如下&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;string content = GetTextString(”win”,Language.Chinese)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过每次增加删除都要一一对应，否则一个语言没有改就会报错，调试起来非常麻烦。&lt;/p&gt;

&lt;p&gt;优化下合并数据表，把一个表里的一个Key对应多个语言的文字内容写在一个表里面。如下&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;键值  中文  英文  日文   韩文
Win   赢了  Win  勝った 이기다
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样就有了规则，即第2列是中文，第3列是英文，第4列是日文，第5列是韩文，依次类推。&lt;/p&gt;

&lt;p&gt;接口没变，任然是&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;string content = GetTextString(”win”,Language.Chinese)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是文字表在编辑时就更加的形象，方便，快捷了。&lt;/p&gt;

&lt;p&gt;做到这里多语言部分就完美了。策划设计人员和运营人员只要关心文字语言表里内容和键值是否正确就可以了，其他都可以完全交给程序员处理了。&lt;/p&gt;

&lt;p&gt;关于分散读取，和集中读取，以及预读取部分，我们也在这里做个讲解。&lt;/p&gt;

&lt;p&gt;假如把所有表都集中起来成一个表，那么游戏在加载数据表就需要一次集中使用CPU去处理，导致游戏有时会卡顿现象，不合理。我们需要让游戏表现的尽可能的顺畅。&lt;/p&gt;

&lt;p&gt;所以分散读取比较可取，各个表数据都自己管自己读取吧，这样就CPU就分散开来了，不会一下子对CPU的需求量很大。而且在读取数据表时，要按需读取，而不是一开始就初始化，这样的话跟集中在一起就没有区别了。&lt;/p&gt;

&lt;p&gt;至于预读取，其实和提前集中读取没有区别，关键是如何利用空挡时间进行预读取。比如在Loading等待时读取一部分数据，这样在等待时也不会浪费CPU。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第三章，数据表(二) - 数据表的制作方式</title>
   <link href="http://www.luzexi.com/2018/07/17/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%95%B0%E6%8D%AE%E8%A1%A82.html"/>
   <updated>2018-07-17T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/17/Unity3D高级编程之进阶主程-数据表2</id>
   <content type="html">&lt;h1&gt;第三章，数据表(二)&lt;/h1&gt;

&lt;h3&gt;本篇来介绍下数据表的几种制作数据的方式。&lt;/h3&gt;

&lt;p&gt;Excel是大部分数值策划选择用的填数工具，因为Excel是天生为数据处理而生，而Excel转为什么格式就需要选择了。&lt;/p&gt;

&lt;p&gt;最简单的就是直接将Excel里的数据复制黏贴到文本文件作为游戏数据。这种简单快捷的方式任何人都能做，但问题是当需要多个Excel转化为文件数据时，我们就遇到麻烦了，每次都要手动复制粘贴一遍所有的Excel数据文件到指定的文本文件中，这种人工手动操作的事，常常会引起不少麻烦，当我们手动导入我们常还要想想，是不是复制粘贴错了，有可能是真的操作错了或者只是自己健忘。在最初的几年的程序开发历程中，为了让Demo加快进度，也这么干过，总是会需要我们查好几次莫名奇妙的数据表错误问题，其实都是因为人脑的极限，人脑对重复的工作有自己的极限，到达了这种枯燥的极限，我们就会增大犯错的概率和次数，于是时常会因为重复劳动太多次而出错。&lt;/p&gt;

&lt;p&gt;有比较简单的直接Excel手动另存为导出CSV，就有了CSV的一个规范。
这样既有了规范，又不怕复制粘贴错误。不过不要高兴太早，这样依然会有很多问题，比如当我们导出多个文件时，我们枯燥乏味的重复劳动还是很多，出错的概率依然很高。&lt;/p&gt;

&lt;p&gt;于是为了避免出错概率和次数，自动化和流水线是成为了进阶的方式，将所有需要人工操作的流程，全部写入程序，让程序来帮助我们完成我们想要完成工作。&lt;/p&gt;

&lt;p&gt;主流的制作自动化程序方式有很多，例如使用Shell或Bat(window批处理)设计自动化流程操作，在Mac或Windows下执行我们编写的批处理文件就能自动一步步地执行我们规则的操作步骤。&lt;/p&gt;

&lt;p&gt;也有自己通过特定语言写自动化程序的，比如C#从Excel中读取数据后写入特定文件，会使用.Net库，或者其他第三方库来取得Excel里的数据，再将数据以自己希望的格式输出到文件中。&lt;/p&gt;

&lt;p&gt;很多同学还使用Jenkins来强化自动化流水线。Jenkins可以认为是一个电脑中待命的程序，它有自己的本地站点，可以通过网页的形式，添加我们需要执行的操作或程序命令，还可以设置运行的时间和次数，每次运行结束都会有失败和成功的信息显示，还会有很多错误的日志记录在里面。&lt;/p&gt;

&lt;p&gt;Jenkins是很多公司的自动化流水线必备工具，比如打包，转换数据表，同步上传，自动化检测，自动运行等功能被广大的高级程序员所喜爱。&lt;/p&gt;

&lt;p&gt;当然Jenkins也不是万能的，并不是说一定要使用它，我们也可以有自己的流水线制作途径。Jenkins只是多了一个可视化的Web页面，它同样需要借助特定的语言，比如Shell或C#或Python或Ruby等来编写我们需要的操作过程，甚至这些语言的组合起来的操作流程也是很常见的。如果这些你都不太熟悉，还可以使用Unity3D的菜单栏编辑功能，实现点击菜单栏按钮后执行一套相关程序，也是种不错的选择。&lt;/p&gt;

&lt;p&gt;自动化流水线的最终目标是让人力成本降到最低，节省所有能节省的精力消耗，把所有人员的注意力都集中到核心问题上去，比如框架，核心战斗，变化多端的渲染方式等。&lt;/p&gt;

&lt;h3&gt;让数据使用起来更加方便&lt;/h3&gt;

&lt;p&gt;用什么形式的文件作为数据表并不最最重要的，CSV也照样能把游戏跑得很好，因为这些技术并不能决定游戏的性能会有大幅的偏差，只要我们喜欢，什么形式都可以。很多时候，我们在选定数据存储规则时，大都选择的是自己喜欢的方式去规划，并且符合团队做事风格，因为这能给我们带来很大的工作的效率，沟通的效率，也加快了开发速度，让团队不用这么痛苦并且浪费时间去适应新的规则。&lt;/p&gt;

&lt;p&gt;数据表的关键作用是连接游戏策划设计师与其他部门的桥梁，所以我们在指定数据导入导出规则的时候需要考虑设计师们体验的因素。如何让策划在配置数据表的时候能够有更好的体验就成了关键，好用是关键。&lt;/p&gt;

&lt;p&gt;为什么要好用呢？只有好用才能提高效率，同事们都用着舒心顺畅，无意中降低了工作中的精神损耗，减少了精力损耗，打通了沟通交流上的问题，从而提高了效率。&lt;/p&gt;

&lt;p&gt;前面提到的自动化就是提高效率的一种方法，还有比如一键转化XXX，这种形式的也是提高效率的好办法。&lt;/p&gt;

&lt;p&gt;一键转化Excel到其他格式是一个比较人性化的工具，不需要人工手动去转化，通过工具就能搞定，只要数值策划按照你们双方约定的规则就行。这能大大提高数值策划与程序的协调性，一个系统，一个模块，需要什么数值，什么类型的数值，数据表建立的流程，在你们约定的填表规则上，建立，读取，转化，变得轻而易举。这种在规则下，大家都遵守同一规则，减少了沟通时间以及沟通的障碍，彼此能默契的合作，是多么高效和舒心。&lt;/p&gt;

&lt;p&gt;不过只有自动化，或者只有一键XXXX的功能，还是不够。这些只是工具，我们要的是团队间的，特别是部门间的，不同工种间的配合，能顺畅无障碍。&lt;/p&gt;

&lt;p&gt;如果只是单个表有了自动化，策划设计人员可以自由的将Excel数据转化成能让程序员读取的数据格式，但是策划设计人员一直在对数据进行变动，特别是对字段的类型，字段的名字，一直在变。今天这个字段定义为id，明天这个字段成了是time了。或者插入了一个新的字段，删掉了旧的字段，或者新增了一个数据表，或者删掉了一个旧的数据表，等等。这让程序员很头疼，每次更改都需要及时得到通知程序员，即使及时得到通知，也会遇到不少的麻烦。&lt;/p&gt;

&lt;p&gt;因此我们要再深入加强这种规则的好用性，将单个表，边为多个表的自定义配置，将所有策划内容的数据表和导出规则都由策划来指定填写。&lt;/p&gt;

&lt;p&gt;以前每次策划设计人员增加Excel表时，都需要更程序员打招呼说，你帮我把这个Excel表加入到自动化和一键XXX的功能里去。程序员就需要腾出时间和精力来为策划设计人员服务。我们可以把这块工作移交出去，策划设计人员能够可以自定义导出哪个Excel文件，以及Excel文件里的哪个工作簿。这样策划可以自主选择和自主增加表的导出内容。&lt;/p&gt;

&lt;p&gt;我们来看怎么做？一个可行的办法是，在程序命令中预留几个参数，这个参数是指向某个需要导出的文件的，以及需要导出sheet。那么在命令行里，执行这个程序并且后面跟上参与就能导出数据。&lt;/p&gt;

&lt;p&gt;但是批处理写命令行也好，shell写命令行也好，毕竟还是程序级别的。策划并不能很好的控制对表的导出内容的增加和修改。
比如我需要新增一个表，或者修改某个表的文件名，或者修改导出某个表文件里的sheet，这项工作还是需要修改命令行的，或者说修改批处理文件，或shell文件的。策划并不会改，或者说并且这种命令形式并不直观。&lt;/p&gt;

&lt;p&gt;再次加入规则，让自动化和一键XXX更加人性化。我们可以增加一个Excel表，表里面填有具体要导出哪些Excel文件里的哪个sheet，这些sheet的数据导出后的文件名是什么，以及生成文件后，文件应该转移到哪个文件夹中去。这样策划就可以自行定制，我们需要用哪些Excel里的哪些sheet，可以自行增删改，可以完全自给自足了。策划设计人员完全能够主导所有数据的导出工作和转移工作都了。&lt;/p&gt;

&lt;p&gt;还不够。虽然这样方便了策划设计人员，但程序员的麻烦还没解决，如果设计人员改了字段名字，插入了新的字段，删除了字段，又没有及时通知程序员，或者说忘记了自己做过什么怎么办，那岂不是要全盘彻查了？不可以，彻查这样的效率太低，不可以让这种事情发生。如果能在生成数据时自动检查与程序的对应关系就好了。&lt;/p&gt;

&lt;p&gt;我们再加一个规则，让字段名字与程序对应的规则。用程序生成一群变量定义与每个数据表字段名对应，将每个要导出的sheet里的头行的列名作为变量名字写入程序变量定义中，以方便程序在读取数据表时，列名与数据表对齐，无形中校验做好了。&lt;/p&gt;

&lt;p&gt;举个例子，在role.xls文件中，role这个sheet(工作簿)中的第一列字段为ID，第二列字段为Name，第三列字段为Age，那么程序变量自动生成后就成了以下这种格式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExcelDefine&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role_role_ID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role_role_Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role_role_Age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当策划设计人员更改字段后，新增字段，删除字段后，会如何呢，比如第一列ID更改为Identifier,第二列插入School，第三列Age删除后，生成了如下的代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExcelDefine&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role_role_Identifier&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role_role_School&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;role_role_Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如此一来，在转换数据表后，原来在程序中使用的ExcelDefine.role&lt;em&gt;role&lt;/em&gt;ID，ExcelDefine.role&lt;em&gt;role&lt;/em&gt;Age，将失效报错，而 ExcelDefine.role&lt;em&gt;role&lt;/em&gt;Name则自动转入读取第三列无需修改。&lt;/p&gt;

&lt;p&gt;现在程序员不再需要知道策划设计人员修了数据是第几列，策划设计人员忘记了修改哪里也无妨，因为在编译时就会报出相关的错误，提示程序员们，表中的哪些字段进行了修改，你需要向策划设计人员询问具体意向。&lt;/p&gt;

&lt;p&gt;到这里，我们有了自动化和一键转化XXX的工具，省去了不少人力，并且加入了规则，让策划设计人员完全可以自己控制Excel数据表的操作，又加入了检查校验和修复的功能，让程序员在数据表衔接部分也得到了很好的检查和校验作用。这个方案可以供大家参考，许多大项目大公司都采用这样的方式，安全又稳定。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Challenge your fearing</title>
   <link href="http://www.luzexi.com/2018/07/11/challenge-your-fearing.html"/>
   <updated>2018-07-11T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/11/challenge-your-fearing</id>
   <content type="html">&lt;h1&gt;Challenge your fearing&lt;/h1&gt;

&lt;p&gt;Recently I&amp;#39;m thinking about the challenge. Why we stop challenging? Why pick up again after we drop it? What it the best way to keep moving?&lt;/p&gt;

&lt;p&gt;We challenge a lot in live. Pick one example in my life.&lt;/p&gt;

&lt;p&gt;My swimming experience.&lt;/p&gt;

&lt;p&gt;In my swimming experience fearing is the most important thing I have to overcome. I&amp;#39;m not the smart one in people, my swimming experience begin at 10 years old, until now I just know how to swim in free style.&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;Fearing stay in the whole swimming experience. At the beginning of swim, I scare gone down in the water, I cant breathe air as normally as on lands. It makes me feel that I will die. I escape like a army deserter.&lt;/p&gt;

&lt;p&gt;The fearing makes me stop learning swim. A long time after, one day in summer, my fearing about swim fade away, but still dont like to swim, until one day someone invite me to swim together. I lie to them that I can swim, it makes me feel good. Because some of them never tried swim, they even never went to swim pool before. I feel good, at least i went to swim pool, and tried.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m in my a little self-confidence, try to focous on learning, but still scare a lot. I scare after my energy expend I will die. There&amp;#39;s too much fearing in my head, makes me drop again. &amp;#39;I can not learn swim&amp;#39; I told to myself in sad.&lt;/p&gt;

&lt;p&gt;a long time after again, fearing fade away again. One day in summer again, in one friend&amp;#39;s party we talk about the sport, I support swimming is the best one in sport. After that I think must keep the truth in life, I went to swim pool, start learning again.&lt;/p&gt;

&lt;p&gt;This time, I keep do swimming sport for a long days, because no longer scare breathe air, and no longer scare expend energy. I put my focous on swimming skill, the skill how to breathe enough air and how to save energy. I do a greate job on swim now, can swim a lot without fearing.&lt;/p&gt;

&lt;p&gt;I know one example is not enough to prove anything, but most of things has the same root. Fearing is always the most important thing we have to beat. If you can beat fearing in anything, u can win the world.&lt;/p&gt;

&lt;p&gt;Why we stop? Most of the reason is fearing, or you can say the unknow future, its the same as fearing. We scare that we can&amp;#39;t learn or finish, we thought its too hard for us.&lt;/p&gt;

&lt;p&gt;Why pick up again? The fearing fade away, or maybe we forget the feelling of fear, or maybe someone push us to do. Many unknow reasons or things will push us to pick up again after fearing away. But no scare anymore is necessary.&lt;/p&gt;

&lt;p&gt;What&amp;#39;s the best way to keep moving? Try your best to find the way you think is fun for you to overcome the fearing. Fearing is the biggest boss we must beat, and you must clear that it can&amp;#39;t be beated in a short time, it will be continues for a long long time in your head, longer than you think. So find out the fun thing for you, it will makes you more intereted in keep moving.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>白领投资探讨(二)</title>
   <link href="http://www.luzexi.com/%E9%87%91%E8%9E%8D/%E9%87%91%E8%9E%8D%E6%8A%95%E8%B5%84/2018/07/10/%E7%99%BD%E9%A2%86%E6%8A%95%E8%B5%84%E6%8E%A2%E8%AE%A82.html"/>
   <updated>2018-07-10T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/%E9%87%91%E8%9E%8D/%E9%87%91%E8%9E%8D%E6%8A%95%E8%B5%84/2018/07/10/白领投资探讨2</id>
   <content type="html">&lt;h1&gt;白领投资探讨(二)&lt;/h1&gt;

&lt;p&gt;说说股市，&lt;/p&gt;

&lt;p&gt;中国股市跌了大半年了，整体所有股票平均都有30%以上的跌幅，50%-70%的跌幅是正常现象。&lt;/p&gt;

&lt;p&gt;原因很多，首先最大原因是中国任然没有走出困境，过去过于追求快速的发展遇到了瓶颈，限制了现在的发展。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;现在在抓紧转型中，痛苦是无法避免的。一旦转型成功，前途不可估量，那意味着中国将站上世界顶峰，上证破万点不是梦。但是否会成功，需要花多少时间成功，这是个主要问题。&lt;/p&gt;

&lt;p&gt;时间能改变一切，时间成本是最大的。&lt;/p&gt;

&lt;p&gt;另外一个原因是美国发起的贸易战。其实贸易战是常事，只是在中国最最艰难的时候发起，确实是一种打击你，压垮你，鞭挞你的感觉。美国毕竟是世界经济的领袖，全球霸主，对于向他发起挑战的国家，进行打击打压，也是可以理解的。就看我们如何应对，如何防御了。&lt;/p&gt;

&lt;p&gt;A股2700点反弹到2800点这个位置多空博弈最激烈，买入看涨的和反弹止损的对抗赛。&lt;/p&gt;

&lt;p&gt;熊市没有底，因为是各板块是轮番下跌的，板块之间有联动会被拖累，所以底部深的很，即使政府站出来背书也没用，人心没有这么容易稳.&lt;/p&gt;

&lt;p&gt;前几天政府官员就站出来背书了，说明金融风险加大很多了。系统性风险的关键，并不是上证2xxx点或者1xxx点的问题，而是大众情绪的问题。防止踩踏和挤兑才是关键，即使经济出现问题，也不能让民众慌乱，因为情绪一旦失控，整个国家就完蛋了。&lt;/p&gt;

&lt;p&gt;贸易战肯定是持久战。现在中国想借助贸易战转型，第一坚持不放水，第二防止大规模踩踏为转型争取时间。&lt;/p&gt;

&lt;h3&gt;这个位置不要做任何买卖，无意义的区间，等一方彻底胜利或者对抗平息后再做决定。&lt;/h3&gt;

&lt;h3&gt;投资是寂寞的。我现在才明白，为什么大佬说，要像投资实业那样投资股票。&lt;/h3&gt;

&lt;h3&gt;和权利的游戏一样。如果你不用尽全力对待，通常很快就死了。&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第三章，数据表(一) - 数据表的种类</title>
   <link href="http://www.luzexi.com/2018/07/09/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-%E6%95%B0%E6%8D%AE%E8%A1%A81.html"/>
   <updated>2018-07-09T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/09/Unity3D高级编程之进阶主程-数据表1</id>
   <content type="html">&lt;p&gt;在游戏项目中缺少不了数据表，数据决定了游戏的整个进程，因此怎么用数据表配置数，配置数据时是否方便成了关键的问题。&lt;/p&gt;

&lt;p&gt;那么如何来理解数据表的存在呢？数据表完全可以认为是一个本地的数据库，只不过这个数据库里的数据是不可被修改的，是只读的。可以这么说，在实际项目的开发中，它们大部分从Excel里生成出来，再导入到游戏中去的，也有其他的各种方式，比如使用比较原始的方法直接写在代码里，下面的内容中我们来讲讲数据的存放种类。&lt;/p&gt;

&lt;p&gt;数据表的在项目中的作用是什么？数据表是连接美术，设计策划，和程序的桥梁。艺术家们用它来配置效果，设计师用它来调整游戏的数值平衡，程序员们用它来判断逻辑。所以数据表的意义非常大，是连接各个环节的桥梁。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;大部分数据都是在Excel里填写生成的&lt;/h3&gt;

&lt;p&gt;自从微软创建出神级的Excel后，全世界都爱上了这款软件，无论自用还是商用，制图还是分析都离不开它了。&lt;/p&gt;

&lt;p&gt;居我的了解，基本上所有的公司都在用excel。而且，只要跟数据，数字，接触的职业，都会大量使用excel来做数据分析，数据制表等工作。&lt;/p&gt;

&lt;p&gt;它能给你所有你想处理数据的功能，而且快捷，方便，易于保存，上手快，方便传播等等等，说不完的好品质。&lt;/p&gt;

&lt;p&gt;所以呢，游戏行业里数值策划更是喜欢这个工具了，我们的游戏数据跟excel分不开，我们需要用它的来加快效率，特别是数据开发，数值平衡的工作。&lt;/p&gt;

&lt;p&gt;现在你应该明白了，我为何如此夸大的它的优秀，因为他确实在很大程度上加快了项目的进度。&lt;/p&gt;

&lt;p&gt;下面说所的数据表，基本上都是意味着从Excel文件中导出来的数据的集合。&lt;/p&gt;

&lt;h3&gt;最原始的数据方式，代码数据&lt;/h3&gt;

&lt;p&gt;最最原始的数据，是写在程序里写着的，这种一般都是临时级别的数据，在更改，增加，删除时增加了大量的程序员的工作量。&lt;/p&gt;

&lt;p&gt;然而让策划人员去自行更改代码里的数据，不但增加了修改程序的风险，也让数值策划人员批量修改数值的难度增加好几倍。&lt;/p&gt;

&lt;p&gt;所以这种放在代码里的数据，基本都只存在于Demo阶段，或者mini游戏中，因为数据量小，更改的次数少，不会特别去在意数值的平衡性。&lt;/p&gt;

&lt;p&gt;数据放在代码里的原因就只有一个，快，制作快，使用快，效率快。不需要建立与其他部门的桥梁，只要程序员自己动手就能搞定。不需要像Excel那样，需要建立先Excel表，制定规则，再转化数据，再加载，再解析等步骤后才能使用。代码里的数据，程序员们直接就能用。&lt;/p&gt;

&lt;p&gt;因为只有程序员知道是什么，为什么这么写，也只有程序员能看明白，所以当数据使用量逐渐增大，或者使用规则逐渐复杂，或者数据的修改次数逐渐增加，就会渐渐觉得对于小改动的花费的精力太大，效率也大幅降低。&lt;/p&gt;

&lt;h3&gt;txt文本数据&lt;/h3&gt;

&lt;p&gt;文本是一种常用的数据表形式，例如用.Json，Xml，Csv为扩展名的文件，里面全是字符串形式的文本，包括数字在内也都以字符串的形式存在，在当程序读取这些字符串内容后将它们转化为相应的数据类型，整数，浮点数，文本，数组。于是这些字符串以怎样的规则存储在文件中是一个比较需要考究的东西了，因为我们还要解析它们。&lt;/p&gt;

&lt;p&gt;文本读取规则有很多标准形式的，包括Json，Xml，CSV等，这些都是常用的文本读取规则，在很多情况下用文本读取字符串形式的数据然后按规则来转化成相应的数据和数据组是极佳的选择。它的优点是肉眼能很直观的看到数据，并且也容易查找问题，并能立即直接对文本进行修改，无需其他工具。&lt;/p&gt;

&lt;p&gt;像文本这样的数据存储方式，如果为了方便快捷，把数据直接用逗号隔开，或者用空格隔开，或者用特别的符号比如&amp;#39;;&amp;#39;分号等形式隔开，就可以作为一个数据的规则格式，无需其他复杂的协议商定。&lt;/p&gt;

&lt;p&gt;还记得我们主要的数据开发工具是Excel么，为了能从Excel里更容易的导出数据，我们会选择一些更加简单实用的导出方式。比如直接从Excel里复制粘贴数据到txt文件，这是最直接的手动导出方式。&lt;/p&gt;

&lt;p&gt;也有用Excel直接保存CSV格式的，它是以&amp;#39;,&amp;#39;逗号开的格式的文本文件。&lt;/p&gt;

&lt;p&gt;这些都是比较容易的方式，如果要做到不手动，而是用程序工具转化，那就写个程序读取Excel文件内容，程序看以直接导出相应的格式的文本文件。&lt;/p&gt;

&lt;p&gt;写一个程序工具来导出Excel的数据，会有很多格式可以考虑，比如我们前面提到的，Json格式，Xml格式，以及自定义格式，每次导出时都会将数据在内存中以一定规则排列好，再导出到文本文件。&lt;/p&gt;

&lt;p&gt;通常使用过工具导出Excel数据的同学，以后都会非常喜欢使用使用程序工具导出数据，因为这样会更高效。当他们已经熟悉了这套流程和方法，在制定项目模块规划时，就很习惯性的把程序自动导出数据的模块规划进项目里，对他们来说，这是顺手拈来的事情，而且这事很容易做到，一劳永逸。&lt;/p&gt;

&lt;p&gt;这种程序化代替人工操作的事，我们通常称为自动化或流水线。其实自动化是最终的目标，我们希望任何工作都可以自动化来代替，从而减少人工手动操作导致的失误，同时也减少了工作量，减少了同学们不必要的精力消耗。&lt;/p&gt;

&lt;h3&gt;比特流数据&lt;/h3&gt;

&lt;p&gt;数据比特流是一种稍微底层点的数据表现形式，他是将数据转化为二进制形式存放在文件里，然后程序通过读取二进制文件，按一定的规则将其转化为所需要的数据。它比起文本形式的数据文件，比特流数据文件特点是，占用的空间更加小，读取速度更快，但缺点也同时存在，通用性差，无法直观和任意的修改。&lt;/p&gt;

&lt;p&gt;为什么会更加小，二进制比特流在存储数字时，会直接用二进制形式存储，比如，txt文本中23345是“23345”这个字符串，占用了5个字符，每个字符2个字节，就用了10个字节，而二进制比特流则在存储时可以直接使用二个字节(short)存储’23345‘这个数字，所以数据比特流形式的数据存储文件更加小。一个以文本形式的txt文件来建立的10MB的数据文件，转化为2进制格式后，可以压缩到几百KB甚至几十KB。&lt;/p&gt;

&lt;p&gt;一个10MB的文件在读取的时候是很消耗CPU的，假如项目中有几个甚至几十个这样的数据文件，在游戏进行中的卡顿是难免的。这么大的数据文件光读取整个内容就已经很消耗CPU资源了，更别说，还需要在读取文本数据后进行解析。庞大的文本解析工作，让成千上万个字符串转化为数字或者浮点数，会消耗比较多的CPU计算量。&lt;/p&gt;

&lt;p&gt;其实比特流数据和数据网络传输时使用的协议是一个道理，有人使用了json格式的数据协议来传输网络数据，所以当数据大时，json字符串占用的数据量也非常大，启用压缩算法也不能解决根本问题。因此很多人转而使用数据比特流形式的数据协议来传输网络数据，以减少网络数据占用量，即使在网络不稳定的情况下，因为体量比较少，能够准确送达的概率也大了很多，从而网络性能也提高了很多。关于网络协议具体内容，会在以后的章节中一一介绍。&lt;/p&gt;

&lt;p&gt;以比特流形式作为协议的标准很多。比如最近比较流行的，Google protobuf，还有MessagePack。&lt;/p&gt;

&lt;p&gt;这里简单介绍下Google protobuf：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    protobuf是一个开源项目，而且是后台很硬的开源项目。网上现有的大部分（至少80%）开源项目，要么是某人单干、要么是几个闲杂人等合伙搞。而protobuf则不然，它是Google公司开发的，并且在Google内部久经考验的一个数据协议。

    那这个听起来牛X的东西到底有啥用处呢？简单地说，这个东西干的事儿其实和XML差不多，也就是把某种数据结构的信息，以某种格式保存起来。主要用于数据存储、传输协议格式等场合。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;protobuf有什么特色呢？我们将这些数据协议内容放在网络层的章节里讲。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>《Unity3D高级编程之进阶主程》第一章，C#要点技术(一) - List 底层源码剖析</title>
   <link href="http://www.luzexi.com/2018/07/06/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-CSharp%E8%A6%81%E7%82%B9%E6%8A%80%E6%9C%AF1.html"/>
   <updated>2018-07-06T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2018/07/06/Unity3D高级编程之进阶主程-CSharp要点技术1</id>
   <content type="html">&lt;p&gt;很多老鸟看到C#基础总想跳过，因为看了太多次，次次都一样，基础里无非是几个语法，或者由继承展开的特性，再加上一些高级特有的属性，看多了确实有点枯燥。但我还是要强调一下，基础的重要性，没有扎实的基础，所有写的程序就会随着软件规模的扩大，使用规模的扩大，或者使用途径的扩大而遇到越来越多的问题，这些程序最后大部分都会被遗弃，或者重新开始。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;也是因为基础的重要性之高，使得很多资深的程序员从这里出发，最终又回到了这里，他们一遍又一遍的看着这部分内容，希望从中得到新的启发或者纠正自己以前的错误观念。&lt;/p&gt;

&lt;p&gt;我不仅仅想把基础的东西告知给大家，但又不想让大家觉得开枯燥，所以我想写些不一样的东西。我认为能看这本书的，基本上都能做到基础的语法部分已经滚瓜烂熟，所以我们在基础的语法之上讲些进阶的内容会来得更有趣些，比如算法设计，比如常用组件的底层代码分析，比如设计模式，比如动态库(so文件和dll文件)等等。&lt;/p&gt;

&lt;p&gt;首先我们来讲解下我们在日常的工作中常常会用到的C#组件底层原理，从这一章的知识中，我们可以充分的了解到我们日常编程代码中，这些组件在底层是如何运作的，当我们再次编写代码时，能有意识的理解背后的执行步骤，从而能更好的提升代码的质量。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;1。 ## 常用组件底层代码解析&lt;/p&gt;

&lt;h3&gt;List 底层代码剖析&lt;/h3&gt;

&lt;p&gt;List是一个C#中最常见的可伸缩数组组件，我们常常用它来替代数组，因为它是可伸缩的，所以我们在写的时候不用手动去分配数组的大小。甚至有时我们也会拿它当链表使用。那么到底它的底层是怎么编写的呢，每次增加和减少以及赋值，内部是怎么执行和运作的呢？我们接下来就来详细的讲解。&lt;/p&gt;

&lt;p&gt;我们首先来看看List的构造部分，源码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IReadOnlyList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_defaultCapacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_syncRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;_emptyArray&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;        
        
    &lt;span class=&quot;c1&quot;&gt;// Constructs a List. The list is initially empty and has a capacity&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// of zero. Upon adding the first element to the list the capacity is&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// increased to 16, and then increased in multiples of two as required.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_emptyArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Constructs a List with a given initial capacity. The list is&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// initially empty, but will have room for the given number of elements&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// before any reallocations are required.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentOutOfRange_NeedNonNegNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndContractBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_emptyArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//其他内容&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;从源码中可以知道，List 继承于IList，IReadOnlyList，IList是提供了主要的接口，IReadOnlyList提供了迭代接口。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/collections/ilist.cs,5d74f6adfeaf6c7d&quot;&gt;IList源码&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/collections/generic/ireadonlylist.cs,b040fb780bdd59f4&quot;&gt;IReadOnlyList源码&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看构造部分，我们明确了，List内部是用数组实现的，而不是链表，并且当没有给予指定容量时，初始的容量为0。&lt;/p&gt;

&lt;p&gt;也就是说，我们可以大概率推测List组件在Add,Remove两个函数调用时都采用的是“从原数组拷贝生成到新数组”的方式工作的。&lt;/p&gt;

&lt;p&gt;下面我们来看下，我们的猜测是否正确。&lt;/p&gt;

&lt;h6&gt;Add接口源码：&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Adds the given object to the end of this list. The size of the list is&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// increased by one. If required, the capacity of the list is doubled&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// before adding the new element.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnsureCapacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Ensures that the capacity of this list is at least the given minimum&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// value. If the currect capacity of the list is less than min, the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// capacity is increased to twice the current capacity or to min,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// whichever is larger.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EnsureCapacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCapacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_defaultCapacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Allow the list to grow to maximum possible capacity (~2G elements) before encountering overflow.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Note that this check works even when _items.Length overflowed thanks to the (uint) cast&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newCapacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxArrayLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCapacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MaxArrayLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newCapacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCapacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Capacity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newCapacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上述List源代码中的Add函数，每次增加一个元素的数据，Add接口都会首先检查的是容量还够不够，如果不够则用 EnsureCapacity 来增加容量。&lt;/p&gt;

&lt;p&gt;在 EnsureCapacity 中，有这样一行代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    int newCapacity = _items.Length == 0? _defaultCapacity : _items.Length * 2;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每次容量不够的时候，整个数组的容量都会扩充一倍，_defaultCapacity 是容量的默认值为4。因此整个扩充的路线为4，8，16，32，64，128，256，512，1024...依次类推。&lt;/p&gt;

&lt;p&gt;List使用数组形式作为底层数据结构，好处是使用索引方式提取元素很快，但在扩容的时候就会很糟糕，每次new数组都会造成内存垃圾，这给垃圾回收GC带来了很多负担。&lt;/p&gt;

&lt;p&gt;这里按2指数扩容的方式，可以为GC减轻负担，但是如果当数组连续被替换掉也还是会造成GC的不小负担，特别是代码中List频繁使用的Add时。另外，如果数量不得当也会浪费大量内存空间，比如当元素数量为 520 时，List 就会扩容到1024个元素，如果不使用剩余的504个空间单位，就造成了大部分的内存空间的浪费。具体该怎么做才是最佳的策略，我们将在后面的文章中讨论。&lt;/p&gt;

&lt;p&gt;我们再来看看Remove接口部分的源码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Removes the element at the given index. The size of the list is&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// decreased by one.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IndexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RemoveAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Returns the index of the first occurrence of a given value in a range of&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// this list. The list is searched forwards from beginning to end.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The elements of the list are compared to the given value using the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Object.Equals method.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This method uses the Array.IndexOf method to perform the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// search.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IndexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ensures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ensures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IndexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Removes the element at the given index. The size of the list is&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// decreased by one.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RemoveAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndContractBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;--;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remove接口中包含了 IndexOf 和 RemoveAt，其中用 IndexOf 函数是位了找到元素的索引位置，用 RemoveAt 可以删除指定位置的元素。&lt;/p&gt;

&lt;p&gt;从源码中我们可以看到，元素删除的原理其实就是用 Array.Copy 对数组进行覆盖。IndexOf 启用的是 Array.IndexOf 接口来查找元素的索引位置，这个接口本身内部实现是就是按索引顺序从0到n对每个位置的比较，复杂度为O(n)。&lt;/p&gt;

&lt;p&gt;先补急着总结，我们再看来 Insert 接口源码。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Inserts an element into this list at a given index. The size of the list&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// is increased by one. If required, the capacity of the list is doubled&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// before inserting the new element.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Note that insertions at the end are legal.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentOutOfRange_ListInsert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndContractBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EnsureCapacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;            
    &lt;span class=&quot;n&quot;&gt;_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;与Add接口一样，先检查容量是否足够，不足则扩容。从源码中获悉，Insert插入元素时，使用的用拷贝数组的形式，将数组里的指定元素后面的元素向后移动一个位置。&lt;/p&gt;

&lt;p&gt;看到这里，可以我们明白了List的Add，Insert，IndexOf，Remove接口都是没有做过任何形式的优化，都使用的是顺序迭代的方式，如果过于频繁使用的话，会导致效率降低，也会造成不少内存的冗余，使得垃圾回收(GC)时承担了更多的压力。&lt;/p&gt;

&lt;p&gt;其他相关接口比如 AddRange，RemoveRange的原理和Add与Remove一样，区别只是多了几个元素，把单个元素变成了以容器为单位的形式进行操作。都是先检查容量是否合适，不合适则扩容，或者当Remove时先得到索引位置再进行整体的覆盖掉后面的的元素，容器本身大小不会变化，只是做了重复覆盖的操作。&lt;/p&gt;

&lt;h6&gt;其他接口也同样基于数组，并使用了类似的方式来对数据做操作，我们可以来快速的看看其他常用接口的源码是如何实现的。&lt;/h6&gt;

&lt;p&gt;比如 []的实现，&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Sets or Gets the element at the given index.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Following trick can reduce the range check by one&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndContractBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndContractBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;[]的实现，直接使用了数组的索引方式获取元素。&lt;/p&gt;

&lt;h6&gt;再比如 Clear 清除接口&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Clears the contents of List.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Don&amp;#39;t need to doc this but we clear the elements so that the gc can reclaim the references.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Clear接口在调用时并不会删除数组，而只是将数组中的元素清零，并设置 _size 为 0 而已，用于虚拟地表明当前容量为0。&lt;/p&gt;

&lt;h6&gt;再比如 Contains 接口，用于确实某元素是否存在于List中&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Contains returns true if the specified element is in the List.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// It does a linear, O(n) search.  Equality is determined by calling&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// item.Equals().&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EqualityComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;从源代码中我们可以看到，Contains 接口使用的是线性查找方式比较元素，对数组进行迭代，比较每个元素与参数的实例是否一致，如果一致则返回true，全部比较结束还没有找到，则认为查找失败。&lt;/p&gt;

&lt;h6&gt;再比如 ToArray 转化数组接口&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// ToArray returns a new Object array containing the contents of the List.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This requires copying the List, which is an O(n) operation.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ensures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&amp;gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ensures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ToArray接口中，重新new了一个指定大小的数组，再将本身数组上的内容考别到新数组上，再返回出来。&lt;/p&gt;

&lt;h6&gt;再比如 Find 查找接口&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndContractBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Find接口使用的同样是线性查找，对每个元素都进行了比较，复杂度为O(n)。&lt;/p&gt;

&lt;h6&gt;再比如 Enumerator 枚举迭代部分的细节&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Returns an enumerator for this list with the given&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// permission for removal of elements. If modifications made to the list &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// while an enumeration is in progress, the MoveNext and &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// GetObject methods of the enumerator will throw an exception.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Enumerator&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Enumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;internalonly/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Enumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Enumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[Serializable]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Enumerator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Enumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MoveNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localList&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                                                     
            &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;                    
            &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MoveNextRare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MoveNextRare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;                
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowInvalidOperationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvalidOperation_EnumFailedVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowInvalidOperationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvalidOperation_EnumOpCantHappen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowInvalidOperationException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InvalidOperation_EnumFailedVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其中我们需要注意 Enumerator 这个结构，每次获取迭代器时，Enumerator 每次都是被new出来，如果大量使用迭代器的话，比如foreach就会造成大量的垃圾对象，这也是为什么我们常常告诫程序员们，尽量不要用foreach，因为 List 的 foreach 会增加有新的 Enumerator 实例，最后由GC垃圾回收掉。&lt;/p&gt;

&lt;h6&gt;最后我们来看看 Sort 排序接口&lt;/h6&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Sorts the elements in a section of this list. The sort compares the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// elements to each other using the given IComparer interface. If&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// comparer is null, the elements are compared to each other using&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// the IComparable interface, which in that case must be implemented by all&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// elements of the list.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This method uses the Array.Sort method to sort the elements.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentOutOfRange_NeedNonNegNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ArgumentOutOfRange_NeedNonNegNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ThrowHelper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThrowArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExceptionResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Argument_InvalidOffLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EndContractBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;它使用了 Array.Sort接口进行排序，其中Array.Sort的源码我们也把它找出来。以下为 Array.Sort 的使用的算法源码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DepthLimitedQuickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IComparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depthLimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depthLimit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Heapsort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// pre-sort the low, middle (pivot), and high values in place.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// this improves performance in the face of already sorted data, or &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// data that is made up of multiple sorted runs appended together.&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SwapIfGreater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// swap the low with the mid point&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SwapIfGreater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// swap the low with the high&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SwapIfGreater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// swap the middle with the high&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;middle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;--;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Contract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;(i&amp;gt;=left &amp;amp;&amp;amp; j&amp;lt;=right)  Sort failed - Is your IComparer bogus?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;--;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// The next iteration of the while loop is to &amp;quot;recursively&amp;quot; sort the larger half of the array and the&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// following calls recrusively sort the smaller half.  So we subtrack one from depthLimit here so&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// both sorts see the new value.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;depthLimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;--;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DepthLimitedQuickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depthLimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DepthLimitedQuickSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comparer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depthLimit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Array.Sort 使用的是快速排序方式进行排序，从而我们明白了 List 的 Sort 排序的效率为O(nlogn)。&lt;/p&gt;

&lt;h6&gt;我们把大部分的接口都列了出来，差不多把所有的源码都分析了一遍，我们可以看到 List 的效率并不高，只是通用性强而已，大部分的算法都使用的是线性复杂度的算法，这种线性算法当遇到规模比较大的计算量级时就会导致CPU的大量损耗。&lt;/h6&gt;

&lt;h6&gt;我们可以自己改进它，比如不再使用有线性算法的接口，自己重写一套，但凡要优化List 中的线性算法的地方都使用，我们自己制作的工具类。&lt;/h6&gt;

&lt;h6&gt;List的内存分配方式也极为不合理，当List里的元素不断增加时，会多次重新new数组，导致原来的数组被抛弃，最后当GC被调用时造成回收的压力。&lt;/h6&gt;

&lt;h6&gt;我们可以提前告知 List 对象最多会有多少元素在里面，这样的话 List 就不会因为空间不够而抛弃原有的数组，去重新申请数组了。&lt;/h6&gt;

&lt;p&gt;&lt;a href=&quot;https://referencesource.microsoft.com/#mscorlib/system/collections/generic/list.cs&quot;&gt;List源码&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;另外我们也可以从源码上看得出，代码是线程不安全的，它并没有对多线程下做任何锁或其他同步操作。并发情况下，无法判断 _size++ 的执行顺序，因此当我们在多线程间使用 List 时加上安全机制。&lt;/h3&gt;

&lt;h3&gt;最后List 并不是高效的组件，真实情况是，他比数组的效率还要差的多，他只是个兼容性比较强得组件而已，好用，但效率差。&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>白领投资探讨(一)</title>
   <link href="http://www.luzexi.com/%E9%87%91%E8%9E%8D/%E9%87%91%E8%9E%8D%E6%8A%95%E8%B5%84/2018/07/05/%E7%99%BD%E9%A2%86%E6%8A%95%E8%B5%84%E6%8E%A2%E8%AE%A8(%E4%B8%80).html"/>
   <updated>2018-07-05T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/%E9%87%91%E8%9E%8D/%E9%87%91%E8%9E%8D%E6%8A%95%E8%B5%84/2018/07/05/白领投资探讨(一)</id>
   <content type="html">&lt;p&gt;我在金融领域上学习了有一段时间了，大概花了快4年的时间，特别是前面几年在微博上自言自语了很长时间，就是为了让自己独立思考，自己能够好好静下心来学习，不用受到外界的干扰。&lt;/p&gt;

&lt;p&gt;从最初的做股票，到做国内期货，然后又从国内期货退出来，研究程序自动化交易，包括K线知识和交易知识等，再到研究外汇期货与外汇商品，再放下转为研究宏观经济，再转入研究全球经济系统，再重头回到股票上。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;从那时起决定对股票进行深入探索，从短线玩玩，到研究短线启动点，买点，卖点，短线爆发线索，再到发现短线不是长久之计从而放弃短线，到研究当时很流行的&amp;quot;价值投资&amp;quot;，然后在股灾时摒弃&amp;quot;价值投资&amp;quot;的偏见，再到只研究自己感兴趣的行业，最后才到现在的，深入调查研究公司运营层面和管理层面的问题，以投资实业的而心态投资股票，关注行业动态，秉持低吸高抛的理念，坚持慢入法则，及无限现金流打法。&lt;/p&gt;

&lt;p&gt;一口气用简单的文字说了这么多看似很简单的经历，其实中间的过程经历非常丰富，而且自己也交了很多很多学费，这个学费交的我心疼，但我觉得很值得，它让我的世界观端正了很多，也让我的眼界扩大了很多。&lt;/p&gt;

&lt;p&gt;我花去了大量的时间和精力来学习这些我从来没有接触过的知识和理念。整个过程让我受益匪浅，最重要的是让我大开眼界，完全颠覆了我前20年的思维逻辑，此后在面对很多生活中的事情的时候自己能够很快看透事情的本质，抓住重点。&lt;/p&gt;

&lt;p&gt;投资是项一生都要学习的知识，我们所在的这个世界本身就是由金融构成的，而金融则是由交易构成，而交易则由投资促成。无论什么时候都别忘了学习投资，也包括如何投资自己。&lt;/p&gt;

&lt;p&gt;不避讳的说，我学金融投资的目的就是为了赚钱，说有其他学术目的都是虚的。对什么感兴趣就要抓紧时间去学习，这也是我的学习法则，我对如何赚钱，以及赚钱的哲学有着深厚浓烈的兴趣。我在前面文章有写自己关于兴趣的原则 &lt;a href=&quot;http://luzexi.com/life/2018/07/04/Always-challenge-miracle.html&quot;&gt;《Always challenge miracle》&lt;/a&gt; 欢迎探讨。&lt;/p&gt;

&lt;p&gt;本想探讨下，我在金融投资领域获得的经验和知识，但最近又对卖产品这事有了浓厚的兴趣。所以想趁热打铁，学习下如何卖产品。&lt;/p&gt;

&lt;p&gt;前面聊的有点多，自己写文章并没有什么章法，想到哪就说到哪，随心而动罢了。&amp;#39;用心写&amp;#39;我认为就是最好的最感动的文章，不管章法只要用心，就能得到读者同样的感触。主题正式进入。&lt;/p&gt;

&lt;p&gt;最近在想一个问题，人们是如何把产品卖出去赚钱的，重要的是如何做到卖出去很多产品。所以查阅了一些资料，来跟大家分享下。我这里探讨的都是我的假设，我并没有实际的运作过任何商品营销的事，就当做意淫好了。&lt;/p&gt;

&lt;p&gt;我假设我现在想批发来一些商品，然后卖出去赚钱。首先，怎么进货？从哪里进货？其次，怎么让这些商品最快速度的卖出去赚取利润？&lt;/p&gt;

&lt;h3&gt;关于进货&lt;/h3&gt;

&lt;p&gt;第一。想到的是从批发市场进货。那里进货有个好处就是可以亲眼亲手感受到商品的品质好与坏，能直接第一时间把控商品的品质。批发市场进货也有坏处，价格落差太大，要留精力砍价，而且在批发市场里找适合自己品质的商品需要花的精力需要很多，不是一两天就能搞定的。可能起码要去个5，6次才开始熟悉。&lt;/p&gt;

&lt;p&gt;第二。我想到了网上进货，比如阿里巴巴网站，他时供应全球的电子商品批发市场，可以在里面找到很轻松的找到你想要的产品，而且价格都是明码标价的。找货和价格更容易谈了，但试错成本却高了很多，因为我们看不到摸不到感受不到商品的真实品质，所以在试错上成本会增加很多。&lt;/p&gt;

&lt;p&gt;第三。一次进货就有量起步，大概看了下，一种商品进货的起步资金需求在3000-10000不等。如果是5种商品以上的话，在库存压货上的资金就会有很大的压力。于是我想到了二级代理，让别人去压货，就相当于把被人当做仓库，提供了货源的资金，自己专注于做商品营销策划。这样我大大降低了，进货的风险和成本，坏处就是自己的利润少了，对商品的改进的主动能力少了，把控商品更加困难。&lt;/p&gt;

&lt;p&gt;第四。如果我又想控制商品质量和价格，又想少承担风险呢？怎么办？招募合伙人，分摊资金风险。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;h3&gt;关于营销&lt;/h3&gt;

&lt;p&gt;从商品在卖出去到卖完的过程中，本身就需要一个自我完善的过程，其实就是从无到有过程。&lt;/p&gt;

&lt;p&gt;所以对营销方法的思考中，我认定一个原则，不断优化完善现有的方法和方案，才是最终成功卖完的关键。&lt;/p&gt;

&lt;p&gt;整个销售过程，我把它拆分成了几个部分，我们来从宏观的看下，我们到底需要面对哪些问题，并且有哪些手段和方法或者说途径来处理，其实就是我们有哪些工具可以运用。&lt;/p&gt;

&lt;p&gt;下面是我对整个销售过程，各个环节可以用到的方法和途径的一些总结。&lt;/p&gt;

&lt;h6&gt;商品展示&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    宣传图片
    模特照片
    功能介绍
    材质介绍
    特性介绍
    视频介绍
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;文案&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    故事文案
    促销文案
    段子文案
    热门事件文案
    干货文案
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;营销途径&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    朋友圈传播营销 -- 促销转发点赞砍价的传播方式
    策划讨论营销 -- Q群和微信群策划一场讨论而造成的营销
    建立自己的客户群营销 —- 维护型营销方式
    微博营销 —- 吸粉吸眼球营销
    博客营销 —- 干货吸粉营销
    公众号营销 —- 自己建立公众号和借助别人的公众号
    视频营销 —- 视频中加入广告
    引流营销 —- 把不喜欢此商品的客户引向另一个商品
    直播营销 —- 真人直播介绍产品
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;策划案&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    销售策划案
    促销策划案
    营销策划案
    功能开发策划案
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;广告策划&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    图文广告
    视频广告
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;广告投放途径&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    淘宝搜索广告
    百度搜索广告
    广告牌投放广告
    热门公众号广告投放
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其实营销方案和途径还有很多种，包括百科营销，线下活动营销，展会营销等。不过那些我都认为是属于效果比较远，对于资金量大的企业来说是需要的，但对于资金量小的小企业甚至个体户来说事承担不起的成本。&lt;/p&gt;

&lt;p&gt;打造产品的时候，我们的目标是爆款，目标要高，这样才有更多的idea，更多的激情，更多的动力。&lt;/p&gt;

&lt;p&gt;爆款如何打造？其实网上干货很多。&lt;/p&gt;

&lt;p&gt;大致从三个方面入手。&lt;/p&gt;

&lt;h3&gt;1。产品质量与品质。&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    产品关有两个属性：第一是从科学角度出发，能够被相关领域的专家认可；第二是从消费角度出发，能够被消费者认可。

    要亲自使用，并且让团队的人一起使用，最好是天天用。亲自感受产品的好与坏，同时改善产品品质和使用体验。

    只有高于同行业品质的产品才能有机会成为爆款。一个烂产品是永远不可能成为爆款的。

    只有更好的产品更符合市场、消费者需求才能获得更好的进步。再加上价格因素，性价比也要高于行业中的竞品。

    高品质，高性价比的产品，在主推过程中，才能发挥最佳的效果。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;2。营销策划方案。&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    产品对象选好了，就要对这个产品有针对性的进行策划宣传。

    首先，要有一套科学的营销方案。

    只有营销方案恰当，才能够为销售做好准备；如果营销方案不恰当，这个产品最终也只能是失败的。

    宣传、终端销售、消费者工作等，解决这些问题不要交给那些不了解产品的咨询公司，唯一办法就是靠自己摸索。

    有了想法后，先找一个小的市场试水，后面再不断地完善。

    比如经过研究后认为，朋友圈软文营销是最好的突破口，就从软文开始着手，一点点完善。

    倘若觉得软文还不够，再加入其他的营销途径比如客户群营销，一点点把原来简单的想法，变得更大，变得更系统，更庞大，更丰富，逐步吸收更多流量，更多关注。

    有一个好的产品，而且这个产品有知名度、有好口碑，是远远不够的，让消费者买得到才是最终目的。所以接下来我们做了营销手册，把营销标准化，将市场分类，比如A是淘宝店，B是微信商铺，C是网站电子商务。对这三类市场做细致的营销案拆分。

    比如淘宝使用直通车广告方式吸收流量，优化关键词等手段完善点击率与付费转化率，也就是砸钱换流量和关注度。

    而微信商品则采用软文营销和群聊营销手段，把客户的粘在公众号或群里面，也就是增加人力成本来换取流量和关注度。

    对于电子商务网站，则采用引流方式，把干货，故事，段子的软文放入，论坛，贴吧，微博，视频中去，将目标群体引导进网站。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;3。团队配合与执行力。&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    如果仅仅做一个局部市场的话，老板亲自坐镇，问题不大。但如果目标是更大的市场甚至是全国市场，团队的作用就至关重要了,这就是产品的第三关——团队关。

    市场过大，每一个小的终端是否按照之前制定的标准严格执行，光靠老板一个人是无法全面监管的，所以团队的执行力很关键。

    如果前两关产品关和策划关都过了，而且我们都努力做到了一流，团队关过不了，比如广告费只谈到了30%，那么这个产品的运营成本会居高不下，也无法盈利。

    因此，究竟能不能让你的团队按照既定的标准执行，也是产品能否成功盈利的关键所在。

    这一点麦当劳就做得很好，总部搞研发，制定标准和流程；分部只需要按部就班的执行就可以了，这对于以全国为市场的行业来说是一个非常重要的方法。千万不能让终端人员自己发挥聪明才智，搞策划方案，最后弄得乌烟瘴气一团糟；一定要总部亲力亲为做市场调查，然后效果评估，最后制定出一个标准，再在全国铺开来做。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;产品的品质是关键中的关键，好的品质才能衬托出大的潜力，加上精准的营销，让广告效应和传播效应深入人们的心里面，当人们有此类产品需求时，第一个想到的就是我们这个产品。而团队的配合和执行力，使得营销方案再锦上添花，爆款一触即发。所谓爆款都是天时地利人和的一种机遇，但没有品质，营销，团队三个因素，再好的机遇都会瞬间溜走。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Always challenge miracle</title>
   <link href="http://www.luzexi.com/life/2018/07/04/Always-challenge-miracle.html"/>
   <updated>2018-07-04T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/life/2018/07/04/Always-challenge-miracle</id>
   <content type="html">&lt;p&gt;Recently I&amp;#39;m thinking of the meaning in my life. Whatever I lose or get something that was not the end of the life, we always have another objective to get or maybe restart training or studying and try to get again and again until win.&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;So I&amp;#39;m thinking that why me always like to chanllenge the work or the job or the task. Because i have much fun when i&amp;#39;m working , sometimes geting something or get some new skills or learned some knowledge. The root is I&amp;#39;m insteresting in doing some special thing which I really like.&lt;/p&gt;

&lt;p&gt;Sometimes I was tired, I dont know why, but I was really tired to do the special thing which interest before. But I&amp;#39;m still keep moving to do that, it makes the job much more lower effective, and my brain becomes more and more slow to run. The feeling of failed and sad coming, the situation becomes much more bad now.&lt;/p&gt;

&lt;p&gt;I know you have to win or get the special thing, its your purpose and you must insist.But is it the best way to insist doing the only thing you want? I think no, you can keep learning but not the only thing in your life.&lt;/p&gt;

&lt;p&gt;So I would like to say that, we must keep moving but not only in one thing. The most important thing is we are keeping have fun in studying or learning something. If you are tired, pls just put it down or drop it directly, then finding out the thing which you have fun.&lt;/p&gt;

&lt;p&gt;Do not spend all your time on training or studying - this way you will probably become very exhausted and unwilling to compete more. Whatever you do - have fun.&lt;/p&gt;

&lt;p&gt;Once you find programming is no fun anymore – drop it. Play soccer, find a girlfriend or boyfriend, study something not related to programming, just live a life.&lt;/p&gt;

&lt;p&gt;work are only work, job are only job, programming are only programming, and nothing more. Don&amp;#39;t let them become your life - for your life is much more interesting and colorful.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>股市底部探索逻辑分析</title>
   <link href="http://www.luzexi.com/%E9%87%91%E8%9E%8D/%E9%87%91%E8%9E%8D%E6%8A%95%E8%B5%84/2018/07/02/%E8%82%A1%E5%B8%82%E5%BA%95%E9%83%A8%E6%8E%A2%E7%B4%A2%E9%80%BB%E8%BE%91%E5%88%86%E6%9E%90.html"/>
   <updated>2018-07-02T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/%E9%87%91%E8%9E%8D/%E9%87%91%E8%9E%8D%E6%8A%95%E8%B5%84/2018/07/02/股市底部探索逻辑分析</id>
   <content type="html">&lt;p&gt;前面探讨了 &lt;a href=&quot;http://www.luzexi.com/%E9%87%91%E8%9E%8D/%E9%87%91%E8%9E%8D%E6%8A%95%E8%B5%84/2018/06/22/%E8%82%A1%E5%B8%82%E7%9A%84%E5%BA%95%E9%83%A8%E7%A9%B6%E7%AB%9F%E6%98%AF%E6%80%8E%E6%A0%B7%E5%BD%A2%E6%88%90%E7%9A%84.html&quot;&gt;《股市的底部究竟是怎样形成的》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;分析了股市是由人性决定的，是由人创造的，所以会因为人而辉煌，并且也会因为人而毁坏。&lt;/p&gt;

&lt;p&gt;面对不确定的持续性的下跌，我们应该如何面对的呢？&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;首先，我们是避不开下跌的，所以的上升都会引起同样的下跌。只要你在股市里，就必须面对下跌。&lt;/p&gt;

&lt;p&gt;其次，下跌也分好几种。有从高位摔下来的，有从中继平台继续下探的，有再创历史新低的。三种情况都不一样，高位摔下来肯定不能玩，中继平台下跌的可以看看，新低的要研究其基本面。&lt;/p&gt;

&lt;p&gt;那么要怎么样判断股票在下跌过程中时可以买入的呢？&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;一。基本面扎实。 是最最重要的一点，也是所有买入的必要条件。所谓买好股做好人就是这个道理。只有买好的公司的股票才真正赚钱。投资股票要像投资实业那样脚踏实地才能真正赚到钱。否则所谓的炒作，最终都会将自己带入坟墓。&lt;/p&gt;

&lt;p&gt;那么什么叫基本面扎实？&lt;/p&gt;

&lt;p&gt;首先，营收要稳定增长，毛利率要稳定，&lt;/p&gt;

&lt;p&gt;其次，债务不能太多否则营收利润都会被债务吃掉，&lt;/p&gt;

&lt;p&gt;然后，管理层人员，特别是CEO要有能力，善于学习，积极学习，深耕本行业。而不是为了抄高股价而来。&lt;/p&gt;

&lt;p&gt;最后，研发能力强，研发经费占比要大，这能说明公司比较重视科研，那些以运营为目的公司是走不长的。&lt;/p&gt;

&lt;p&gt;另外市值大小其实并不能说明其爆发力和持续能力的多少，小企业也同样能爆发大力量，大企业也会因为不善的经营管理策略而衰败。&lt;/p&gt;

&lt;p&gt;二。行业未来前途光明。如果行业未来的不确定性过大，就无法支撑当前的基本面的持续增长。也将导致股票价格的不确定性波动。一个在未来无法确定的东西，那跟赌博是没有区别的。所以我们一定要选，行业在未来的潜力大却持续性很好的来做。&lt;/p&gt;

&lt;p&gt;三。被低估。如果不是被低估的股票，是能难有好的收益的，即使他是高成长高发展的股票，也有到头的时候，如果不是被低估，注定要做很大的过山车。&lt;/p&gt;

&lt;p&gt;其实在牛市里，我们很难找到被低估的股票，基本上所有的股票都是被高估的，因为在牛市里大家的风险意识下降，只要有点前景的股票都会被买到很高的价格。&lt;/p&gt;

&lt;p&gt;而在牛熊中间，有很多诱骗人的价格，因为是从高处下来的股价，所以会认为捡到便宜货，而其实并不便宜，因为价格是相对的，看见过高的，就认为现在时便宜的。殊不知，在未来的熊市中，会有比这低一倍的价格出现。&lt;/p&gt;

&lt;p&gt;真正便宜的价格是在熊市中出现的。为什么这么说呢？因为只有在熊市中，人们的风险意识才是最高的，这个时候，很多利好甚至重大利好消息，都会被忽略，导致价格与实际基本面完全背离。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;在熊市中，有两种风险，一种是底部还有底，二是破产。熊市中的风险就是人们的恐慌，所以底部下还有底部，因为人们不相信一切未来，只在乎当下的亏损。而破产很大一部分原因就是因为大家的谨慎导致资金面紧缺，最后可能由于债务或者资金链导致无法继续经营下去而破产。只有那种基本面扎实的，一心扑在行业里深耕拓展的企业才能最终活下来。也只有脚踏实地的企业，能在熊市中崛起。&lt;/p&gt;

&lt;p&gt;从另外一个角度看，熊市是一个很好的布局机会。因为只有熊市才会让好企业的价格完全低于它企业本身的价值，在未来爆发的过程中，能得到很好的投资收益。&lt;/p&gt;

&lt;p&gt;记住，价格不会因为有人买而见底，只会因为没人卖而见底。同样，价格也不会因为有人卖而见顶，只会因为没人买而见顶。股市，房市，都是一样的道理，因为交易是由人性构成的。&lt;/p&gt;

&lt;p&gt;在持续下跌的熊市中，我们需要很好的耐心，来等待底部的形成，也需要很好的资金控制，逐步买入好的企业的股票。这也是我提倡的，无限现金流打法，按月持续买入底部好企业，并深入研究企业的运营状况，以及行业的发展方向。&lt;/p&gt;

&lt;p&gt;这市场有不少靠嘴巴吃饭的分析师几乎都是一个套路，市场刚刚下跌或没下跌时会反复说“A股没有大幅下跌的基础，长期慢牛上涨将是股市波动主基调”。后来市场大幅下跌了，跌得惨不忍睹，他们就开始换口吻说“股市大幅下跌已严重背离经济基本面”。其实，股市的涨跌一定有其内在原因。再说，股市就算是经济的晴雨表，也是未来经济基本面的晴雨表吧？既然是未来，是不是具备太多的不确定性因素呢？&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Vi和Vim常用命令集</title>
   <link href="http://www.luzexi.com/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/2018/06/30/Vi%E5%92%8CVim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9B%86.html"/>
   <updated>2018-06-30T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/2018/06/30/Vi和Vim常用命令集</id>
   <content type="html">&lt;p&gt;vi,vim命令是种神奇的存在，他似乎提高了编辑的效率但门槛又变的太高导致不能流行在程序员中。看起来有些复杂的vi命令编辑，在一些人眼里感觉很厉害，其实都是通过成千上百次的练习掌握的技巧。本文我就来试图分解这些命令块，让大家在练习时，能更加有针对性更加有序有逻辑。&lt;/p&gt;

&lt;h2&gt;入门命令之简单编辑&lt;/h2&gt;

&lt;h5&gt;1.光标移动&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    ←↓↑→                h,j,k,l
    到下一行的第一个字符  +
    到上一行的第一个字符  -
    到单词的结尾          e或E(忽略符号，只识别空格，回车)
    往后一个单词          w或W(跟符号和空格和回车挂钩)
    往前一个单词          b或B(跟符号和空格和回车挂钩)
    到一行的结尾          $
    到一行的开头          0(零)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;===&lt;/p&gt;

&lt;h5&gt;2.文本编辑操作&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    在光标位置插入文本         i
    在一行的开头插入文本      I(大写I)
    在光标所在位置附加文本       a
    在一行的最后附加文本      A(大写A)
    在光标下一行打开新行      o
    在光标上一行打开新行      O(大写O)
    删除一行并替换文本         S(大写S)
    用新文本覆盖现有的文本       R(大写R)
    合并当前这一行与下一行       J(大写J)
    切换当前字符的大小写      ~
    重复上一个动作           .
    撤销上一个动作           u
    将一整行恢复到原来的      U(大写U)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;3.对缓冲区的操作&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    粘贴内容                    p或P
    保存文件                    w
    保存并退出             wq
    强制退出不保存           q!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;4.组合命令&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    更改一个单词      cw
    删除一个单词      dw
    赋值一个单词      yw
    更改一整行     cc
    删除一整行     dd
    复制一整行     yy
    更改到行尾     c$或C
    删除到行尾     d$或D
    复制到行尾     y$
    更改到行头     c0
    删除到行头     d0
    复制到行头     y0
    更改一个字     I
    删除一个字     x或X
    复制一个字     y1或yh
    更改5个字           5s
    删除5个字           5x
    复制5个字           5yl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;高级进阶之光标快速移动&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;h5&gt;快速翻屏&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;往后滚动一整屏       ctrl + f
往前滚动一整屏       ctrl + b
往后半屏                ctrl + d
往前半屏                ctrl + u
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5&gt;同屏移动&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;移动到屏幕顶端       H
移动到屏幕中间       M
移动到屏幕底部       L
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5&gt;段落移动&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;移动到当前段落开头     {
移动到下一段开头        }
移动到这一节开头        [[
移动到下一节开头        ]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5&gt;搜索模式移动&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;往后搜索某个字符串     /搜索的字符串
往前搜索某个字符串     ?搜索的字符串
往同一个方向重复搜索  n
往反方向重复搜索        N
往后重复搜索          /
往前重复搜索          ?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5&gt;直接跳转到某个位置&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;跳转至第n行            nG
跳转至文件末尾       ``
显示当前的行号       ctrl + g
光标往后n行            nj
光标往前n行            nk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5&gt;做标记(只在一个文件内有效)&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;将当前位置标记成x字符     mx
将光标移动到第一个标记x      &amp;#39;x(单引号)
将光标移动到以x标记的字符   `x(反引号)
回到上一个标记位置         ``(两个反引号)
回到上一个标记开头         &amp;#39;&amp;#39;(两个单引号)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;h2&gt;高级进阶之搜索与替换&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;h5&gt;搜索与替换的基本命令&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;s/old/new       搜索替换当前行，第一个找到的
s/old/new/g     搜索替换当前行，所有找到的
g/old/new/g     搜索替换当前文件中，所有找到的内容
g/old/new/gc    搜索替换当前文件中，所有找到的内容，并且做yes or no 的替换确认

g/pattern/s/old/new/gc 先搜索文件中所有含有pattern的行，在这些行中找到的所有old内容，并且做yes or no 的替换确认
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5&gt;搜索替换匹配规则&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;.(点号) 表示任意一个字符
* 表示任意字符
^ 是正则表达式的开头
$ 正则表达式的结尾
\ 特殊字符
[] 匹配出方括号里的任何一个字符。
\&amp;lt; 以某字符开头
\&amp;gt; 以某字符结尾
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5&gt;查找替换多个文件内容&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;多文件查找内容

使用grep

直接在vim中输入:grep abc * 这是直接调用unix下的grep命令 

使用vimgrep 

基本用法就是
:vimgrep /匹配模式/[g][j] 要搜索的文件/范围 
:vim[grep][!] /{pattern}/[g][j] {file} ...
g 和 j 是两个可选的标志位，g表示是否把每一行的多个匹配结果都加入。j表示是否搜索完后定位到第一个匹配位置。
要搜索的文件 可以是具体的文件路径，也可以是带通配符的路径比如 *.as **/*.as ，**表示递归所有子目录。 要搜索的文件和或搜索范围都可 以写多个，用空格分开。

例子：

:vimgrep /\&amp;lt;flash\&amp;gt;/ **/*.as 搜索当前目录以及所有子目录内as文件中的 &amp;quot;flash&amp;quot;
:vimgrep /an error/ *.c 就是在所有的.c文件中搜索an error。
:vimgrep/an error/* 意思是查找当前目录下的文件中的an error，不包括子目录

定位 

输入上述的命令后，可以像输入:make命令，那样定位匹配到的文件位置 
:cnext (:cn)           下一个匹配位置
:cprevious (:cp)     上一个匹配位置
:cwindow (:cw)     quickfix窗口，可以选择匹配的文件位置
:cl(:clist)                查看所有匹配的位置

多文件替换(arg) 
a、加入要处理的文件  :args *.txt
b、输入对上述文件的动作  :argdo %s/hate/love/gc | update  （这里将hate替换成love，update表示要写入到文件中，否则只作替换而不写入）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;高级进阶之强化功能&lt;/h2&gt;

&lt;h5&gt;1.分割多窗口&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;直接打开多窗口

    $ vim -o file1 file2 使用shell命令开启多窗口

分割窗口

    :[n]split [++opt] [+cmd] [file] 横向分割窗口

    : 前面必须以冒号开始命令

    n 为新窗口中显示的行数

    opt 为传递给新窗口的选项信息(必须前置两个+号)

    cmd 为传入新窗口中执行的命令(必须前置一个+号)

    file 指定打开的文件地址

    例如： :15split ++fileformat-unix ./site/testfile.txt
    新窗口有15行高，确保是unix文件格式，路径为./site/testfile.txt

    另外还有，vsplit, new, vnew都是同理分割窗口，split和new只有细微差别。
    :[n]vsplit [++opt] [+cmd] [file] 是垂直分割
    :[n]new [++opt] [+cmd] [file] 是横向分割，并执行自动命令
    :[n]vnew [++opt] [+cmd] [file] 为垂直分割，并执行自动命令

    此外，还有sview filename 和 sfind filename作为辅助作用也很重要。
    sview 以只读形式打分割一个窗口打开文件
    sfind 为在path中寻找filename，如果未找到则不会分割窗口

    vi命令
    split       ctrl + w then s
    vsplit      ctrl + w then v
    new         ctrl + w then n

窗口游走

    光标游走到下边窗口 ctrl + w then j 或 ↓(down)
    光标游走到上边窗口 ctrl + w then k 或 ↑(up)
    光标游走到左边窗口 ctrl + w then h 或 ←(left)
    光标游走到右边窗口 ctrl + w then l 或 →(right)

    另外还有一些不太实用的游走命令比如左上，右上，左下，右下游走等这里不进行细致的说明了，用到的实在是很少。

窗口移动

    移动本窗口到最顶端     ctrl + w then K(大写)
    移动本窗口到最底端     ctrl + w then J(大写)
    移动本窗口到最左端     ctrl + w then H(大写)
    移动本窗口到最右端     ctrl + w then L(大写)
    移动本窗口向右或向下轮换        ctrl + w then r(小写)
    移动本窗口向左或向上轮换        ctrl + w then R(大写)
    移动本窗口与下一个窗口交换     ctrl + w then x

    上下左右的窗口移动都是不太实用的操作，很少会有。本来窗口移动的频率就小，基本都是顶底左右，其他操作基本可以忽略。

窗口大小调整

    窗口高度减少一行    ctrl + w then -
    窗口高度增加一行    ctrl + w then +
    窗口宽度减少一行    ctrl + w then &amp;gt;
    窗口宽度增加一行    ctrl + w then &amp;lt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;h5&gt;2.标签页多窗口&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    :tabe &amp;lt;文件名&amp;gt;  在新标签页中打开指定的文件。
    :tabnew &amp;lt;文件名&amp;gt;  在新标签页中编辑新的文件。
    :tab split  在新标签页中，打开当前缓冲区中的文件。
    :tabf 或 :tabfind  允许你在当前目录搜索文件，并在新标签页中打开。比如:tabf img.*。此命令只能打开一个文件.

    Vim默认最多只能打开10个标签页。你可以用set tabpagemax=15改变这个限制。

    列示标签页
    :tabs  显示已打开标签页的列表，并用“&amp;gt;”标识出当前页面，用“+”标识出已更改的页面。

    关闭标签页
    :tabc  关闭当前标签页。
    :tabo  关闭所有的标签页。
    :tabo :tabonly 关闭所有其他标签页

    切换标签
    :tabn 或 gt  移动到下一个标签页。
    :tabp 或 gT  移动到上一个标签页。
    :tabfirst 或 :tabfir 或 :tabr  移动到第一个标签页。
    :tablast 或 :tabl  移动到最后一个标签页。

    移动标签页
    :tabm [次序]  移动当前文件的标签页次序。比如:tabm 1将把当前标签页移动到第2的位置。如:tabm不指定参数将被移动到最后。

    配置标签页
    :set showtabline=[1,2,3]  标签页在窗口上方显示标签栏。=0完全不显示标签栏，=1只有用户新建时才显示，=2总是显示标签栏。

    多标签页命令
    :tabdo &amp;lt;命令&amp;gt;  同时在多个标签页中执行命令。比如:tabdo %s/food/drink/g 命令把当前多个标签页文件中的“food”都替换成“drink”。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;3.批量缩进&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    方法一

    按v进入visual状态，选择多行，然后用&amp;gt;缩进或&amp;lt;缩出 

    方法二

    &amp;gt;为缩进，&amp;lt;为缩出，前面加n，表示当前行起n行同时缩进或缩出，5&amp;gt; then 回车 或 5&amp;lt; then 回车
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Markdown(MD)的语法说明</title>
   <link href="http://www.luzexi.com/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/2018/06/27/Markdown-MD-%E7%9A%84%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E.html"/>
   <updated>2018-06-27T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/2018/06/27/Markdown-MD-的语法说明</id>
   <content type="html">&lt;p&gt;针对中文,演示Markdown的各种语法&lt;/p&gt;

&lt;p&gt;标题大小用多个#号表示大小，#越多字体越小&lt;/p&gt;

&lt;p&gt;#&lt;/p&gt;

&lt;h1&gt;这是 H1&lt;/h1&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;h2&gt;这是 H2&lt;/h2&gt;

&lt;p&gt;###&lt;/p&gt;

&lt;h3&gt;这是 H3&lt;/h3&gt;

&lt;p&gt;####&lt;/p&gt;

&lt;h4&gt;这是 h4&lt;/h4&gt;

&lt;p&gt;#####&lt;/p&gt;

&lt;h5&gt;这是 h5&lt;/h5&gt;

&lt;p&gt;######&lt;/p&gt;

&lt;h6&gt;这是 h6&lt;/h6&gt;

&lt;p&gt;????&lt;/p&gt;

&lt;h3&gt;注意!!!下面所有语法的提示我都先用小标题提醒了!!!&lt;/h3&gt;

&lt;h3&gt;单行文本框&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;这是一个单行的文本框,只要1个Tab再输入文字即可
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;多行文本框&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    这是一个有多行的文本框
    你可以写入代码等,每行文字只要输入2个Tab再输入文字即可
    这里你可以输入一段代码
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;比如我们可以在多行文本框里输入一段代码,来一个Java版本的HelloWorld吧&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    public class HelloWorld {
      /**
      * @param args
        */
        public static void main(String[] args) {
            System.out.println(&amp;quot;HelloWorld!&amp;quot;);

        }

    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;

&lt;h3&gt;链接&lt;/h3&gt;

&lt;p&gt;链接内容定义的形式为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字
接着一个冒号加空格或直接括号
接着链接的网址
选择性地接着 title 内容，可以用单引号、双引号或是括弧包着
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例如:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [点击这里你可以链接到www.baidu.com](http://www.baidu.com)&amp;lt;br /&amp;gt;
    [点击这里我你可以链接到我的博客](http://luzexi.com)&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;点击这里你可以链接到www.baidu.com&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://luzexi.com&quot;&gt;点击这里我你可以链接到我的博客&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;h3&gt;显示图片&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    []前面加!就代表图片了，其他和普通的连接差不多
    ![icon](http://luzexi.com/public/apple-touch-icon-144-precomposed.png &amp;quot;icon&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://luzexi.com/public/apple-touch-icon-144-precomposed.png&quot; alt=&quot;icon&quot; title=&quot;icon&quot;&gt;&lt;/p&gt;

&lt;h3&gt;想点击某个图片进入一个网页,比如我想点击blog的icorn然后再进入www.luzexi.com&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    []中加入图片显示，进行嵌套操作
    [![image](http://luzexi.com/public/favicon.ico &amp;quot;blog&amp;quot;)](http://www.luzexi.com/)
    这个可以分解拆分为[![image](http://luzexi.com/public/favicon.ico &amp;quot;blog&amp;quot;)] 和 (http://www.luzexi.com/) 两部分
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.luzexi.com/&quot;&gt;&lt;img src=&quot;http://luzexi.com/public/favicon.ico&quot; alt=&quot;image&quot; title=&quot;blog&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;文字被些字符包围&lt;/h3&gt;

&lt;p&gt;&amp;gt; 文字被些字符包围&lt;/p&gt;

&lt;p&gt;&amp;gt; 只要再文字前面加上&amp;gt;空格即可&lt;/p&gt;

&lt;p&gt;&amp;gt; 如果你要换行的话,新起一行,输入&amp;gt;空格即可,后面不接文字&lt;/p&gt;

&lt;p&gt;&amp;gt; 但&amp;gt; 只能放在行首才有效&lt;/p&gt;

&lt;p&gt;效果:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;文字被些字符包围&lt;/p&gt;

&lt;p&gt;只要再文字前面加上&amp;gt;空格即可&lt;/p&gt;

&lt;p&gt;如果你要换行的话,新起一行,输入&amp;gt;空格即可,后面不接文字
但&amp;gt; 只能放在行首才有效&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;h3&gt;文字被些字符包围,多重包围&lt;/h3&gt;

&lt;p&gt;&amp;gt; 文字被些字符包围开始&lt;/p&gt;

&lt;p&gt;&amp;gt; &amp;gt; 只要再文字前面加上&amp;gt;空格即可&lt;/p&gt;

&lt;p&gt;&amp;gt;  &amp;gt; &amp;gt; 如果你要换行的话,新起一行,输入&amp;gt;空格即可,后面不接文字&lt;/p&gt;

&lt;p&gt;&amp;gt; &amp;gt; &amp;gt; &amp;gt; 但&amp;gt; 只能放在行首才有效&lt;/p&gt;

&lt;p&gt;效果:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;文字被些字符包围开始&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;只要再文字前面加上&amp;gt;空格即可&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如果你要换行的话,新起一行,输入&amp;gt;空格即可,后面不接文字&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;但&amp;gt; 只能放在行首才有效&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h3&gt;特殊字符处理&lt;/h3&gt;

&lt;p&gt;有一些特殊字符如&amp;lt;,#等,只要在特殊字符前面加上转义字符\即可&lt;br /&gt;
你想换行的话其实可以直接用html标签&amp;lt;br /&amp;gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;列表&lt;/h3&gt;

&lt;h5&gt;无序列表使用星号、加号或是减号作为列表标记：&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;*   Jesse
*   Sharon
*   Anne
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Jesse&lt;/li&gt;
&lt;li&gt;  Sharon&lt;/li&gt;
&lt;li&gt;  Anne&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;等同于：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;+   Jesse
+   Sharon
+   Anne
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Jesse&lt;/li&gt;
&lt;li&gt;  Sharon&lt;/li&gt;
&lt;li&gt;  Anne&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;等同于：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;-   Jesse
-   Sharon
-   Anne
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Jesse&lt;/li&gt;
&lt;li&gt;  Sharon&lt;/li&gt;
&lt;li&gt;  Anne&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h5&gt;有序列表则使用数字接着一个英文句点&lt;/h5&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;1.  Jesse
2.  Sharon
3.  Anne
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Jesse&lt;/li&gt;
&lt;li&gt; Sharon&lt;/li&gt;
&lt;li&gt; Anne&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;等同于:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;1. Jesse
1. Sharon
1. Anne
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Jesse&lt;/li&gt;
&lt;li&gt;Sharon&lt;/li&gt;
&lt;li&gt;Anne&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;等同于:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;4. Jesse
2. Sharon
8. Anne
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Jesse&lt;/li&gt;
&lt;li&gt;Sharon&lt;/li&gt;
&lt;li&gt;Anne&lt;/li&gt;
&lt;/ol&gt;

&lt;hr&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;h3&gt;分割线&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    * * *

    ***

    *****

    - - -

    ---------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;

&lt;p&gt;test1&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;test2&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;test3&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;testend&lt;/p&gt;

&lt;hr&gt;

&lt;h3&gt;强调&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    *single asterisks*

    _single underscores_

    **double asterisks**

    __double underscores__
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;效果:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;single asterisks&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;double underscores&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JaveScript的奇葩写法规则</title>
   <link href="http://www.luzexi.com/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/2018/06/26/JaveScript%E7%9A%84%E5%A5%87%E8%91%A9%E5%86%99%E6%B3%95%E8%A7%84%E5%88%99.html"/>
   <updated>2018-06-26T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/2018/06/26/JaveScript的奇葩写法规则</id>
   <content type="html">&lt;h3&gt;① =&amp;gt; 箭头函数&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    两个箭头同时使用 arg1 =&amp;gt; arg2 =&amp;gt;{return xxx;}
    可以理解为
    function( arg1 )
    {
        return function(arg2)
        {
            return xxx;
        }
    }
    也就是可以是 (arg1,arg2)=&amp;gt;{return xxx;}的简写
    也就是function( arg1, arg2 ){ return xxx; }的意思

===
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;② ... 剩余数据&lt;/h3&gt;

&lt;h6&gt;数组中的剩余数据&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    [a, b, ...rest] = [10, 20, 30, 40, 50];
    console.log(a); // 10
    console.log(b); // 20
    console.log(rest); // [30, 40, 50]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;对象中的剩余数据&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    ({a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40});
    console.log(a); // 10
    console.log(b); // 20
    console.log(rest); // {c: 30, d: 40}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;③ [] 数组分配赋值用法&lt;/h3&gt;

&lt;h6&gt;数组分配1&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    var x = [1, 2, 3, 4, 5];
    var [y, z] = x;
    console.log(y); // 1
    console.log(z); // 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;数组分配2&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    var foo = [&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;];
    var [one, two, three] = foo;
    console.log(one); // &amp;quot;one&amp;quot;
    console.log(two); // &amp;quot;two&amp;quot;
    console.log(three); // &amp;quot;three&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;数组赋值默认值用法&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    var a, b;
    [a=5, b=7] = [1];
    console.log(a); // 1
    console.log(b); // 7
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;用数组做变量置换&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    var a = 1;
    var b = 3;
    [a, b] = [b, a];
    console.log(a); // 3
    console.log(b); // 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;省略赋值用法&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    var [a, ...b] = [1, 2, 3];
    console.log(a); // 1
    console.log(b); // [2, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;④ {} 对象分配用法&lt;/h3&gt;

&lt;h6&gt;对象分配赋值&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    var o = {p: 42, q: true};
    var {p, q} = o;
    console.log(p); // 42
    console.log(q); // true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;默认值用法&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    var {a = 10, b = 5} = {a: 3};
    console.log(a); // 3
    console.log(b); // 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;指定key赋值+默认值&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    var {a:aa = 10, b:bb = 5} = {a: 3};
    console.log(aa); // 3
    console.log(bb); // 5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;指定属性key解析赋值&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    let key = &amp;#39;z&amp;#39;;
    let {[key]: foo} = {z: &amp;#39;bar&amp;#39;};
    console.log(foo); // &amp;quot;bar&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;对象中剩余赋值法&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    let {a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40}
    a; // 10 
    b; // 20 
    rest; // { c: 30, d: 40 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;弱变量定义与赋值&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    const foo = { &amp;#39;fizz-buzz&amp;#39;: true };
    const { &amp;#39;fizz-buzz&amp;#39;: fizzBuzz } = foo;
    console.log(fizzBuzz); // &amp;quot;true&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;h3&gt;⑤ Object.assign() 合并对象&lt;/h3&gt;

&lt;h6&gt;将源对象（ source ）的所有可枚举属性，复制到目标对象（ target ）&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    var target = { a: 1 };
    var source1 = { b: 2 };
    var source2 = { c: 3 };
    Object.assign(target, source1, source2);
    target // {a:1, b:2, c:3}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    var target = { a: 1, b: 1 };
    var source1 = { b: 2, c: 2 };
    var source2 = { c: 3 };
    Object.assign(target, source1, source2);
    target // {a:1, b:2, c:3}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    var obj1 = {a: {b: 1}};
    var obj2 = Object.assign({}, obj1);
    obj1.a.b = 2;
    obj2.a.b // 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    var target = { a: { b: &amp;#39;c&amp;#39;, d: &amp;#39;e&amp;#39; } }
    var source = { a: { b: &amp;#39;hello&amp;#39; } }
    Object.assign(target, source)
    // { a: { b: &amp;#39;hello&amp;#39; } }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;Object.assign 常见用途&lt;/h6&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    为对象添加属性
    class Point {
        constructor(x, y) {
            Object.assign(this, {x, y});
        }
    }

    为对象添加方法
    Object.assign(SomeClass.prototype, {
        someMethod(arg1, arg2) {
        ···
        },
        anotherMethod() {
        ···
        }
    });
    //  等同于下面的写法
    SomeClass.prototype.someMethod = function (arg1, arg2) {
    ···
    };
    SomeClass.prototype.anotherMethod = function () {
    ···
    };

    克隆对象
    function clone(origin) {
        return Object.assign({}, origin);
    }

    合并多个对象
    const merge =(target, ...sources) =&amp;gt; Object.assign(target, ...sources);

    为属性指定默认值
    const DEFAULTS = {
        logLevel: 0,
        outputFormat: &amp;#39;html&amp;#39;
    };
    function processContent(options) {
        let options = Object.assign({}, DEFAULTS, options);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;⑥ (function(){})(); 函数function后面跟()括号&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    举个例子:

    (function(p1,p2){alert(p1+p2);})(1,2);

    实际就相当与

    function test(p1,p2){
       alert(p1+p2);
    };
    test(1,2);

    这种写法可以看做是私有的内部类,一般出于加载时就需要立即执行的代码可以这样来些,第2个就是避免与其它的名称相冲突.

    匿名方法的好处,上面也有提到.

    1.其它外部调用不到,相对安全.

    2.可用于onload事件保证不与其冲突.

    3.可看做线程安全.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;⑦ !function(){}(); 函数function前面加!感叹号&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    如果我们尝试为一个“定义函数”末尾加上()，解析器是无法理解的。

    function msg(){
      alert(&amp;#39;message&amp;#39;);
    }();//解析器是无法理解的

    原来，使用括号包裹定义函数体，解析器将会以函数表达式的方式去调用定义函数。也就是说，任何能将函数变成一个函数表达式的作法，都可以使解析器正确的调用定义函数。而 ! 就是其中一个，而 + - || 都有这样的功能。

    其实就是为了能省略一个字符……

    // 这么写会报错，因为这是一个函数定义：
    function(){}()

    // 常见的（多了一对括号），调用匿名函数：
    (function() {})()

    // 但在前面加上一个布尔运算符（只多了一个感叹号），就是表达式了，将执行后面的代码，也就合法实现调用
    !function() {}()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>股市的底部究竟是怎样形成的</title>
   <link href="http://www.luzexi.com/%E9%87%91%E8%9E%8D/%E9%87%91%E8%9E%8D%E6%8A%95%E8%B5%84/2018/06/22/%E8%82%A1%E5%B8%82%E7%9A%84%E5%BA%95%E9%83%A8%E7%A9%B6%E7%AB%9F%E6%98%AF%E6%80%8E%E6%A0%B7%E5%BD%A2%E6%88%90%E7%9A%84.html"/>
   <updated>2018-06-22T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/%E9%87%91%E8%9E%8D/%E9%87%91%E8%9E%8D%E6%8A%95%E8%B5%84/2018/06/22/股市的底部究竟是怎样形成的</id>
   <content type="html">&lt;p&gt;股灾再一次来临，对于大部分投资者来说都是痛苦的。中国股市这两年在金融领域受挫很大，股，债，汇都面临巨大的压力，爆发出无数的问题。大部分投资者都付出了沉痛的代价，30%的损失已经算是少的了，多的可以达到70-80%甚至90%以上的损失。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;不过无论环境有多差，投机的活跃资金一直都会尝试新的突破和抄底。但个人意志和能力拗不过大的趋势，中国股市也在持续滑向风雨缥缈，活跃资金的一次次的抄底带来的一次次的失望，导致抄底资金也陷入了困境。这让所有的人都陷入了失望，失望我认为还太轻，绝望又太重，差不多是在失望和绝望的中间状态。&lt;/p&gt;

&lt;p&gt;有话说的好，要在别人恐惧的时候我贪婪，别人贪婪的时候我恐惧。这句话虽然没什么大问题，而且算是极其有道理的，但细化的内容大家都没有认识到，一味得执行别人恐惧我贪婪，别人贪婪我恐惧，就容易导致巨大的亏损。细化内容比如你如何判断大家是最后一次恐惧，而不会继续恐惧，又比如如何判断别人是最后一次绝望的，而不会有更绝望的事情发生，反过来也是一样，如何判断大家是贪婪的，并且不会有更贪婪的事情发生。除了上面说的几条外，还需要自身做到一些非常人的境界，比如自身必须不受恐惧影响，不害怕不犹豫的坚定买入，又比如买入时能否做到冷静克制而不贪婪，不可以一次性提升大量仓位而是在2个月或者半年内慢慢提升仓位，又比如当买入时再次遇到恐惧甚至踩踏，是否能够理性分析临危不乱。&lt;/p&gt;

&lt;p&gt;首先必须坚定的事实是，金融是动态的，并且反射到我们生活中来说，世界也是动态的。事件，事情，经济，人心，都是在动态的发生着变化，谁都无法准确预料明天，或者下一秒会发生什么事情。今天的底，有可能是明天的中继平台，今天的涨，也有可能是只是反弹后继续下跌的一个陷阱。但是为什么，从现在看历史，历史是却是清晰的，为什么？！因为金融是动态的，世界是动态的，人心是动态的，他随时随地的在变化，没有人能准确预料到下一秒会是什么。但是，这里重点强调，一旦发生就固定在了历史中了。这就是为什么，我们回顾看历史都是固定清晰的，而当前的状况或者说当前的情况，都是模糊不清，难以琢磨的。&lt;/p&gt;

&lt;p&gt;如果要刨根问底说，为什么就无法准确预料下一秒下一天下个月发生的事呢，答案就是人本身。这个世界是由人创造的，金融也是一样是由人创造出来，它受到人心的支配，人心是怎么样的，它就是怎么样的，人心是飘忽不定的，它也就是飘忽不定的。我们生活在人类创造的世界里，受到人群的影响，而人本身思维就是个无法琢磨的无法确定的存在，无论你多少厉害，都无法确定的知道人本身是如何想的，即使你知道人是如何想的，也并不可能知道他会如何做，因为世界是动态的，人与人之间的影响也是动态的，所有这一切你看到的都是动态的。就是由于人类本身是无法琢磨的，导致了无法准确的预测人类的行为，进而导致无法准确的预测下一秒下一天下个月发生的事。&lt;/p&gt;

&lt;p&gt;无法准确预测是件很恐怖的事，因为未知，或者说对未知的恐惧。庆幸的是，无法准确预测，却可以从一个比较长的时间中猜测到大概率会发生什么。我们可以根据大概率发生的事件而提前布局，比如中国股市大概率在未来10-20年内会全面开放给全球，全球投资者涌入的同时会带来一波巨大的牛市，冲破6000点不是梦。当然，这10-20年内中间的过程究竟会发生什么，谁都无法知道。就目前来看，是不会太顺利的。毕竟不经历风雨怎能见彩虹。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;从上面的分析来看，股市是不确定的，无法准确的预测，甚至有时模糊的预测都是错误的，只可以做一个5年或者10年或者20年后大概率发生的事，时间越久概率越大。人性恐惧导致了底部还有底。&lt;/p&gt;

&lt;p&gt;面对下跌的熊市，那么最终股市的底部是如何形成的呢，我们来推演下沙盘。这可以解决我们的心理的疑惑，知道未来会发生的大概的模糊的画面，好让自己有个心理准备，并且做出相应的对策。&lt;/p&gt;

&lt;p&gt;1.下跌。有人开始卖出，↓&lt;/p&gt;

&lt;p&gt;2.持续下跌。越来越多人不相信会涨，↓↓&lt;/p&gt;

&lt;p&gt;3.巨幅下跌。大家都认为要跌了，↓↓↓&lt;/p&gt;

&lt;p&gt;4.买卖平衡横盘走势。大家认为跌的有点多，→→→&lt;/p&gt;

&lt;p&gt;5.反弹。一部分人认为跌多了会涨回来点，↑&lt;/p&gt;

&lt;p&gt;6.反弹结束买卖平衡横盘。有人不相信会涨回去，→&lt;/p&gt;

&lt;p&gt;7.继续下跌。越来越多人不相信会涨回去，↓&lt;/p&gt;

&lt;p&gt;8.大幅下跌。越来越多人认为利空消息还会继续，↓↓&lt;/p&gt;

&lt;p&gt;9.巨幅下跌，跌破前期支撑。所有人都一致认为利空消息太大，↓↓↓&lt;/p&gt;

&lt;p&gt;10.继续下跌。利空消息让所有人恐惧，↓&lt;/p&gt;

&lt;p&gt;11.深跌后大量股票跌幅达到30-50%，开始横盘。人们开始反思是不是跌太多了。→&lt;/p&gt;

&lt;p&gt;12.反弹开启。越来越多人相信跌太多了。↑&lt;/p&gt;

&lt;p&gt;13.买卖平衡。有人相信跌太多，有人求早点跑。→&lt;/p&gt;

&lt;p&gt;14.又开始跌。抢跑的人又开始抛售。↓&lt;/p&gt;

&lt;p&gt;15.继续跌破前期低点。所有人都陷入绝望。↓↓&lt;/p&gt;

&lt;p&gt;16.横盘或持续阴跌。人们看不到希望，认为没有希望。→↓→↓&lt;/p&gt;

&lt;p&gt;17.大部分股票跌入安全区，但任然在跌。恐惧的氛围一直没有散开。→→↓→→↓&lt;/p&gt;

&lt;p&gt;18.开始有人相信买入安全区的股票是有价值的，但股市并没有买账，因为相信的人太少。→→→→↓→→→→&lt;/p&gt;

&lt;p&gt;19.又一些人加入相信安全区的行列，股市开始不再阴跌而是横盘或在小范围上下震荡。→→→→&lt;/p&gt;

&lt;p&gt;20.越来越多人认为现在时安全区，持续买入的力量越来越大。股市从小幅震荡变为了大幅度震荡。→→↑→→↑&lt;/p&gt;

&lt;p&gt;21.这种震荡并没有使得股市形成向上的趋势，任然在某个位置，上上下下的来回震荡。→↑→↓&lt;/p&gt;

&lt;p&gt;22.有一部分人看不到希望，开始退场。又开始持续阴跌。↓&lt;/p&gt;

&lt;p&gt;23.越来越多的人跟随看不到希望的人退出场外。又开始大幅下跌。↓↓&lt;/p&gt;

&lt;p&gt;24.可能又再一次跌破了前期的低点，或者接近前期的低点。所有人都绝望。↓↓&lt;/p&gt;

&lt;p&gt;25.利好消息终于来临。但没有人相信。股市继续横盘。→→→→&lt;/p&gt;

&lt;p&gt;26.小幅上涨，开始有人相信利好消息将带来股市上涨。→→↑→→↑&lt;/p&gt;

&lt;p&gt;27.大幅上涨，越来越多人相信并且买入。→↑→↑&lt;/p&gt;

&lt;p&gt;28.反复在利空和利好消息的情绪变化中思考，总体上是震荡向上的，局部是横盘震荡格局。→↑→↓&lt;/p&gt;

&lt;p&gt;29.底部形成。&lt;/p&gt;

&lt;p&gt;底部的形成是个艰难的，并且时间很长的过程，大概需要花起码半年的时间。在风雨缥缈中构建，在悄无声息中成长。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Back to blog</title>
   <link href="http://www.luzexi.com/life/2018/06/22/Back-to-Blog.html"/>
   <updated>2018-06-22T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/life/2018/06/22/Back-to-Blog</id>
   <content type="html">&lt;p&gt;It&amp;#39;s a long time before back to blog. Before, I went to Weibo to study something about finance. It&amp;#39;s good for me in the future. So now I have much knowledge and experience in finance invest. I&amp;#39;m glad that I make the real world more close to me.&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;And also, through studying finance I completely know technology is very much importanter than i thought before. Technology makes me have good work or job and also good life. Good life is the most important thing, and good life is depends on money and work sometime must be chanllenge. Money is not the most important thing but work and knowledge is, if you have knowledge and keep works you will be talent which must be popular round you.&lt;/p&gt;

&lt;p&gt;I stay at Weibo for a long time and learn much. But why I&amp;#39;m back, first reason is its too much information in Weibo both good and bad that makes me mix. Second one is more and more uesless information on Weibo makes me too tired to skip them. So i said to myself that i must think in individual style, only thinking individual style makes me more and more powerful. If I just follow some guy or some information I will be completely failed in my life. The only way to beat otherones else is keep leaning and thinking in individual style.&lt;/p&gt;

&lt;p&gt;Now I&amp;#39;m back. It&amp;#39;s a completely new start for my technology and my life. I will record all my mind, idea, experience or life in the blog. I wont be shy if my words were error in your view, but I would like to see that you can comment in the end of the page.&lt;/p&gt;

&lt;p&gt;&amp;#39;Keep moving, never stop&amp;quot; is my motto.&lt;/p&gt;

&lt;p&gt;Thanks for your reading.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Swimming excercise</title>
   <link href="http://www.luzexi.com/life/2016/04/22/Swimclub.html"/>
   <updated>2016-04-22T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/life/2016/04/22/Swimclub</id>
   <content type="html">&lt;h1&gt;Swimming excercise&lt;/h1&gt;

&lt;p&gt;Hi guys, recently i swim a lot, it make feel good. These years i work so hard that make my body worse and worse, so i decide to do some excercise to keep health. i think swim is good maybe the one of the best sport for health.&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;Actually my first swimming in shanghai make me terrible. I didnot do any excersice for a long time before that, And i event didnot spread myself before jump in the water. I just went in the swimming pool and spend all of energy to swim one side to the other side very fast, therefor i feel lots tried and dizzy. And then you know what, im fucking vomit, damn it.&lt;/p&gt;

&lt;p&gt;Since that i didnt go to swim a long time, maybe 3 month i dont remember. But i still try to do some excersice to keep health. i try to go to gym and buy 5 years membership. i know its waste my money but i bought :( 2 month ago i decide to come back to swim again. This time i try swimming carefully and do spread myself before swim and swim slowly at the beginning. Its feels good, and i think its make me realize that swimming is really good for health and easy to have in my life. So i start to swim every week and recommend others to swim.&lt;/p&gt;

&lt;p&gt;Actually these years i touch many new stuff in my life. i tried understanding foreign culture and learning foreign language and travelling lots of foreign countries and do swimming sport. All these stuffs are out of work, but i think its good for my life. I learn much things which i never touch any or maybe dont like it any. I think its great, i like to challenge.&lt;/p&gt;

&lt;p&gt;Well, i really like swimming but u know sometimes people is just like to do it in a short time, but i think i will insist swimming in a long time, maybe 3 years maybe 10 years. i dont know, i hope i can insist much more times.&lt;/p&gt;

&lt;p&gt;Now i&amp;#39;m going to build a swim club to collect people who love to swim or would like to swim. Its will be much fun if a group people go together and do the same thing. People know that swim is good for their health, but still dont want to play. These&amp;#39;s many reason i heard what they dont want to go. A lot of people dont know how to swim and some of them afraid water, And others maybe too lazy or too busy to do.&lt;/p&gt;

&lt;p&gt;If you would like to swim pls join us. Whatever, i will never give up persuading people to swim.
Well i create a swim club in meetup , if you would like to join us ,pls open it and join.
http://www.meetup.com/Shanghai-Swimming-Meetup/&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Gitlab removal</title>
   <link href="http://www.luzexi.com/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/2016/04/19/Gitlab-removal.html"/>
   <updated>2016-04-19T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/2016/04/19/Gitlab-removal</id>
   <content type="html">&lt;h1&gt;Gitlab removal&lt;/h1&gt;

&lt;p&gt;Hi guys, long time no see. these day i have much work and much things to learn so i didnot write any thing in the blog, sorry about that. its really busy in my probject. u know people always have their own reason not to do something lol. one day i saw my server which i bought in aliyun is almost time over, so i think about whether i should change the region of the server to hongkong. finally i make a decision to move my blog, gitlab and some other things to hongkong server.&lt;/p&gt;

&lt;p&gt;at the begion of the preparation, i try to buy a hongkong server for a month to test the network and server&amp;#39;s perform. actually it is really good. so im start to move blog, gitlab and svn etc. to my new server.&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h1&gt;Prolbem&lt;/h1&gt;

&lt;p&gt;1.the first problem i have is which folder or data i have to move.&lt;/p&gt;

&lt;p&gt;i move the whole git folder to new server include gitlab, gitlab-satellites, gitlab-shell, https-ca, repositories.&lt;/p&gt;

&lt;p&gt;2.the second problem i have is mysql data.&lt;/p&gt;

&lt;p&gt;i have lots of data in gitlab and the gitlab save the data in mysql, so i have to move them as the same.&lt;/p&gt;

&lt;p&gt;actually its easy to move mysql. i just install mysql in new server and dump the data of mysql then import them into new server.&lt;/p&gt;

&lt;p&gt;ok, all of the data is already be move to new server.&lt;/p&gt;

&lt;p&gt;3.the hardest things i have is install ruby, lib of mysql and some of the dependent stuff.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;its really hard for me to install lib of mysql for ruby because i dont know which source of apt-get i should use. i installed
5.5.47 mysql version but it tells me the lib of mysql is 5.5.37 and it is the newest version in source of apt-get which the installed is failed. i change some of them but still cant be install. i even download the mysql of source and make them and try to pick the lib to install but failed. finally i choose the nature source of aliyun to install the lib of mysql, its success. i think its my bad, because i dont believe the nature source of aliyun so i change it.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;4.After i finished all, i open gitlab site and it works. Then pull one of the repositories and change some file and push them. It said something wrong in the gitlab so i cant push the commit. i check search the problem and find i have to reline the update file in every repositories&amp;#39;s hook. So i do it, but it still socks. A little git time later i find that redis is not able to visit, so i add the user which git use into redis group. So the redis&amp;#39;s problem is solved but still cant push. I feel something wrong in satellites but i actually dont how to fix. So i remove all of the gitlab except repositories and install gitlab again, then import the respositories by using:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;cd /home/git/gitlab/
sudo -u git -H bundle exec rake gitlab:import:repos RAILS_ENV=production
sudo -u git -H bundle exec rake gitlab:satellites:create RAILS_ENV=production
sudo chmod -R ug+rwX,o-rwx /home/git/repositories/
sudo chmod -R ug-s /home/git/repositories/
find /home/git/repositories/ -type d -print0 | sudo xargs -0 chmod g+s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.now i finished setup the lib of all i need. and then i have to set the config to let the gitlab run.&lt;/p&gt;

&lt;p&gt;i set the gitlab config, gitlab-shell config and the nginx vhost, its much easy because i set them before in the old server.&lt;/p&gt;

&lt;p&gt;ok i should check all of the setting by using: sudo -u git -H bundle exec rake gitlab:env:info RAILS_ENV=production&lt;/p&gt;

&lt;h1&gt;all of thing is ok now, so lets run the gitlab.&lt;/h1&gt;
</content>
 </entry>
 
 <entry>
   <title>译安卓应用架构体系</title>
   <link href="http://www.luzexi.com/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2016/01/15/%E8%AF%91%E5%AE%89%E5%8D%93%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84%E4%BD%93%E7%B3%BB.html"/>
   <updated>2016-01-15T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2016/01/15/译安卓应用架构体系</id>
   <content type="html">&lt;h1&gt;安卓应用架构体系&lt;/h1&gt;

&lt;p&gt;我们经历了从标准的Activity加AsyncTask架构到当前流行的用RxJava驱动的MVP模式为基础的架构体系。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-355&quot; src=&quot;/assets/译安卓应用架构体系/1.png&quot; alt=&quot;48391BD3-BEAC-4E45-B6C4-17AA7B5B0428&quot; /&gt;
不同部分的软件模块应该是独立的，但放在一起工作时却想是个烂醉的机器--Chester Alvarez拍的照片&lt;/p&gt;

&lt;p&gt;安卓开发生态步伐很快，每个星期都有新的工具被创建，新的库被更新，新的博客文章发出来，新的话题被讨论。如果你去度假了一个月，你回来的时候就会有新版本的支持库或者新的服务等你去处理。
我在ribot团队做了3年的安卓应用。在此期间，我们使用的安卓应用技术和架构已经连续演变了很多次。这篇文章将带你经历讲述我们是如何在架构变化下学习，出错并且找到原因的。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;旧时代&lt;/h3&gt;

&lt;p&gt;回到2012年我们底层习惯使用基础的结构。我们不使用任何的网络库但AsyncTask任然是我们的朋友。下面的图差不多展示这个架构是个怎样子的。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-355&quot; src=&quot;/assets/译安卓应用架构体系/2.png&quot; alt=&quot;48391BD3-BEAC-4E45-B6C4-17AA7B5B0428&quot; /&gt;
初始的架构&lt;/p&gt;

&lt;p&gt;程序使用两层结构：数据层负责使用REST API检索和保存数据并持久化数据存储。视图层负责调用句柄和在UI上显示数据。
APIProvider 提供方法使得Activity和Fragment容易用REST API相互通信。这些方法使用URLConnection和AsyncTask执行网络调用在分开的线程里并经由回调返回结果给Activity。
同样的，CacheProvider包含了些方法用SharedPreference或者SQLite数据库，检索和存储数据。它也通过回调把结果返回给Activity。&lt;/p&gt;

&lt;h3&gt;问题集&lt;/h3&gt;

&lt;p&gt;这个途径最主要的问题是视图层负责的东西太多。想象一个的常用的方案，一个应用必须去加载一串博客文章，用SQLite数据库缓存他们并最终在ListView上展示他们。Activity会做以下的事情。&lt;/p&gt;

&lt;p&gt;1.在APIProvider里调用loadPosts方法(回调)。&lt;/p&gt;

&lt;p&gt;2.等待APIProvider回调成功然后在CacheProvider里调用savePosts(回调)。&lt;/p&gt;

&lt;p&gt;3.等待CacheProvider回调成功然后在ListView上展示文章。&lt;/p&gt;

&lt;p&gt;4.分别处理从APIProvider和CacheProvider这两个可能的错误回调。&lt;/p&gt;

&lt;p&gt;这是个非常简单的例子。在实际的案例方案里REST API可能不会返回视图需要的数据。因为Activity将需要以某种方法在展示前转换或过滤数据。另一个常用的案例是当loadPosts()方法带上一个需要从其他地方获取的参数时，比如SDK服务提供的一个邮件地址。SDK貌似会以异步回调方式返回邮件地址，这意味着我们现在有3层嵌套回调。如果我们继续增加复杂度，众所周知这个途径的结果是将会变成回调的地狱。&lt;/p&gt;

&lt;h3&gt;小结&lt;/h3&gt;

&lt;p&gt;1.Activity和Fragment会变得很大并且难以维护。&lt;/p&gt;

&lt;p&gt;2.太多的嵌套回调意味着程序是丑陋的并且难以理解，所以在更换和增加新的功能时会痛苦。&lt;/p&gt;

&lt;p&gt;3.单元测试变得有挑战性或者不太可能了，因为太多逻辑放在Activity和Fragment里，这样会导致单元测试会很费劲。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-355&quot; src=&quot;/assets/译安卓应用架构体系/3.png&quot; alt=&quot;48391BD3-BEAC-4E45-B6C4-17AA7B5B0428&quot; /&gt;
一个由RxJave驱动的新架构&lt;/p&gt;

&lt;p&gt;我们用前面的方法大概2年时间。在此期间，我们做了一些改进，稍微减轻前面描述的问题。
一直到2014年我们开始看RxJava。在尝试一些试验工程后，我们认识到它能最终解决嵌套回调的问题。如果你不熟悉反应式系统编你可以看这个介绍(https://gist.github.com/staltz/868e7e9bc2a7b8c1f754) 。简而言之，RxJava能让你通过异步流管理数据并且给你很多操作，你可以应用到数据流里去转换，过滤或者合并数据。
考虑到前些年痛苦的经验，我们开始考虑在新的app里采用怎样的架构。然后我们开始这样的做了。&lt;/p&gt;

&lt;h3&gt;RxJava驱动的架构体系&lt;/h3&gt;

&lt;p&gt;与第一个方法相似，这个架构也能被拆分成数据和视图层。数据层包括DataManager和一些工具。视图层由Android框架组件的形式例如Fragment，Activity，ViewGroup等。
工具类(图形的第三列)是非常特殊的责任，用简洁方式实现了他们。例如，大多数项目有访问REST API的工具，读取数据库数据或者与第三方SDK通信。不同的应用有不同数量的工具但大多数工具为如下：&lt;/p&gt;

&lt;p&gt;1.PreferencesHelper:用SharePreferences读取和保存数据&lt;/p&gt;

&lt;p&gt;2.DatabaseHelper：处理存取SQLite数据库&lt;/p&gt;

&lt;p&gt;3.Retrofit(https://github.com/square/retrofit) 服务：执行调用REST API。我们已经开始使用Retrofit代替Volley因为它提供对RxJava的支持。它也非常好用。&lt;/p&gt;

&lt;p&gt;工具类里面的大多数公有方法会返回RxJava的Observable。
DataManager是架构的大脑。它广泛使用RxJava操作去合并过滤转换数据并用工具类检索。DataManager的目的是去大量减少Activity和Fragment处理准备展示数据的工作，不再常需要任何转换。&lt;/p&gt;

&lt;p&gt;下面条目展示的是DataManager方法是怎样的。样例方法是如下工作的：
1.调用Retrofit服务从REST API加载一串博客文章。&lt;/p&gt;

&lt;p&gt;2.使用DatabaseHelper保存文章到本地数据库以达到缓存的目的。&lt;/p&gt;

&lt;p&gt;3.过滤今天写的博客文章因为这是视图层想要展示的东西。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;public Observable&amp;lt;Post&amp;gt; loadTodayPosts() {
        return mRetrofitService.loadPosts()
                .concatMap(new Func1&amp;lt;List&amp;lt;Post&amp;gt;, Observable&amp;lt;Post&amp;gt;&amp;gt;() {
                    @Override
                    public Observable&amp;lt;Post&amp;gt; call(List&amp;lt;Post&amp;gt; apiPosts) {
                        return mDatabaseHelper.savePosts(apiPosts);
                    }
                })
                .filter(new Func1&amp;lt;Post, Boolean&amp;gt;() {
                    @Override
                    public Boolean call(Post post) {
                        return isToday(post.date);
                    }
                });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;视图中的组件像Activity或Fragment会简单调用这个方法并订阅返回的Observable。一旦订阅结束，用Observable得到的不同的文章能直接加入到适配器去展示在RecyclerView或者类似地方。&lt;/p&gt;

&lt;p&gt;文章最后一个元素是事件总线。事件总线允许我们广播那些发生在数据层上的事件，所以在视图层里的多种组件可以订阅这些事件。例如，在DataManager里的asignOut()方法可以推出一个事件当Observable完成时，然后在这个事件里被订阅的多种Activity就可以更换他们的UI来展示一个不在线的信号。&lt;/p&gt;

&lt;h3&gt;为什么这个方法更好&lt;/h3&gt;

&lt;p&gt;1.RxJava 的Observable和操作者去除了嵌套回调的需求。&lt;/p&gt;

&lt;p&gt;2.DataManager接管了以前视图部分的工作。因此它使得Activity和Fragment更加轻便。&lt;/p&gt;

&lt;p&gt;3.把Activity和Fragment的代码迁移到DataManager和工具类意味着单元测试变得更加容易。&lt;/p&gt;

&lt;p&gt;4.整理拆分责任并让DataManager作为与数据层通信的唯一途径，这样使得这个架构测试友好。工具类和DataManager可以被容易模仿。&lt;/p&gt;

&lt;h3&gt;我们仍然存在什么问题？&lt;/h3&gt;

&lt;p&gt;1.对于大型和复杂的项目来说DataManager会变得太臃肿并且难以维护。&lt;/p&gt;

&lt;p&gt;2.虽然视图层组件像Activity和Fragment变得更加轻便了，但他们仍然需要去处理相当部分围绕管理RxJava的订阅逻辑和错误分析等。&lt;/p&gt;

&lt;h3&gt;整合MVP(模型-视图-发言者)&lt;/h3&gt;

&lt;p&gt;在过去几年，一些架构模式像MVP或者MVVM在安卓社区曾获得流行。在一个样例工程和文章上探索这些模式后，我们发现MVP能带来很好的价值来改进我们现存的方法。因为我们现在架构被分成2个层级(视图和数据)，加上MVP后显得自然。我们仅仅需要加入一个新的发言者层级并把视图层的代码迁移到发言者层上就可以。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-355&quot; src=&quot;/assets/译安卓应用架构体系/4.png&quot; alt=&quot;48391BD3-BEAC-4E45-B6C4-17AA7B5B0428&quot; /&gt;
MVP为基础的架构&lt;/p&gt;

&lt;p&gt;数据层保留下来但现在叫模型层了为了与模式的名字更加匹配。&lt;/p&gt;

&lt;p&gt;发言者是负责从模型层加载数据然后调用视图层的指定方法当结果准备好的时候。他们用DataManger订阅了Observable的返回。因为他们要去处理一些事情像调度程序和订阅一样。另外，他们可能分析错误代码或者应用特殊的操作在数据流上如果需要的话。例如，如果我们需要过滤一些数据并且这个过滤器不想被在其他地方重复使用，这样在发言者里实现比在DataManager里实现更有意义。&lt;/p&gt;

&lt;p&gt;下面你可以看到一个公有的方法在发言者里是怎样的。这个代码用thedataManager.loadTodayPosts() 方法订阅了Observable返回，它被定义在前面提到的部分。&lt;/p&gt;

&lt;p&gt;MvpView是视图组件而发言者是协助的。通常MVP视图是Activity，Fragment或者ViewGroup的实例。
如以前的架构，视图层包含标准框架组件例如ViewGroup，Fragment或Activity。主要的区别是这些组件不直接订阅Observable。他们用实现MvpView接口替代并提供一串简洁的方法例如showError()或者showProgressIndicator()。这视图的组件同样负责处理用户交互例如点击事件和行为通过在发言者里调用指定的方法。例如，我们有一个按钮加载一串文章，我们的Activity会从onClick监听者中调用presenter.loadTodayPosts()。&lt;/p&gt;

&lt;p&gt;如果你想了解一整个MVP为基础架构的工作样例，你可以渐出我们的Android Boilerplatex(https://github.com/ribot/android-boilerplate)项目在Github上，你也可以在ribot的指南(https://github.com/ribot/android-guidelines/blob/master/architecture&lt;em&gt;guidelines/android&lt;/em&gt;architecture.md)上了解更多。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;h3&gt;为什么这个方法更好？&lt;/h3&gt;

&lt;p&gt;1.Activity和Fragment变得很轻便。他们的责任只有装配和更新UI并且处理用户事件。因此他们变得很容易去维护。&lt;/p&gt;

&lt;p&gt;2.现在我们能容易的通过模仿视图层为发言者写单元测试。之前，这个程序是视图层的一部分所以我们不能对它单元测试。整个架构变得非常测试友好。&lt;/p&gt;

&lt;p&gt;3.如果DataManager开始变得臃肿，我们能通过迁移代码到发言者上来减缓这个问题。&lt;/p&gt;

&lt;h3&gt;我们任然存在的问题是什么？&lt;/h3&gt;

&lt;p&gt;当有一个单例DataManager仍然有一个问题当底层变得很大很复杂的时候。我们还没有达到这个真正问题点，但我们意识到他可能会发生。&lt;/p&gt;

&lt;p&gt;重点提下这个不是完美的架构。实际上，认为世界上有一个唯一并且完美的架构能永远解决你所有的问题是很幼稚天真的。安卓社区会持续快速发展，我们需要保持探索，阅读和尝试，这样我们可以找到一个更好的方式去继续构建优秀的安卓应用。
希望你喜欢这篇文章并且能对你有用。如果这真是这样的话，不要忘了点击推荐按钮。也欢迎能听到你自己对这些方法的想法。&lt;/p&gt;

&lt;p&gt;翻译自:&lt;a href=&quot;https://medium.com/ribot-labs/android-application-architecture-8b6e34acda65#.1qvkq2xaa&quot;&gt;https://medium.com/ribot-labs/android-application-architecture-8b6e34acda65#.1qvkq2xaa&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文作者: Ivan&lt;/p&gt;

&lt;p&gt;作者授权邮件：
&lt;img class=&quot;alignnone size-full wp-image-355&quot; src=&quot;/assets/译安卓应用架构体系/5.png&quot; alt=&quot;48391BD3-BEAC-4E45-B6C4-17AA7B5B0428&quot; /&gt;&lt;/p&gt;

&lt;p&gt;申明此篇文章为本人参加GAD翻译比赛文章&lt;/p&gt;

&lt;p&gt;转载请注明出处: http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>译Unity3d 综合性能窍门</title>
   <link href="http://www.luzexi.com/2016/01/08/%E8%AF%91Unity3d%E7%BB%BC%E5%90%88%E6%80%A7%E8%83%BD%E7%AA%8D%E9%97%A8.html"/>
   <updated>2016-01-08T00:00:00+08:00</updated>
   <id>http://www.luzexi.com/2016/01/08/译Unity3d综合性能窍门</id>
   <content type="html">&lt;p&gt;很久没写博文，抱歉让大家失望了，最近忙于学习新的东西，也有懒惰的成分。现在开始我打算用英文来写我的博文，不为了什么，只是自己的英文太差，想练习练习。最近开始翻译一些自己觉得好的文章，其实这篇文章，很早就有人翻译了，因为比较好，我又为自己翻译了一遍。&lt;/p&gt;

&lt;p&gt;Hi everyone, long time no see. these days i&amp;#39;m busy to learn something else not about technology but life, maybe it&amp;#39;s just a excuse that i didnt write anymore :) from now on i&amp;#39;d like to write in english, just practice my poor english :( recently i maybe translate some article which is usefully for you guys maybe translated before by other people.&lt;/p&gt;

&lt;h3&gt;下面的内容并不一定很详细，但能够引导unity3d开发者如何制作性能流畅的游戏应用&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;内容：
1.官方提示文档
2.性能优化概述
3.模型网格
4.灯光
5.贴图
6.音频
7.物理碰撞
8.Shader
9.脚本
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;===&lt;/p&gt;

&lt;h3&gt;官方提示文档&lt;/h3&gt;

&lt;p&gt;图形性能优(http://docs.unity3d.com/Documentation/Manual/OptimizingGraphicsPerformance.html)
如何减少包大小(http://docs.unity3d.com/Documentation/Manual/ReducingFilesize.html)
角色动画(技巧比较零散) ( http://unity3d.com/Documentation/Manual/Character-Animation.html)&lt;/p&gt;

&lt;h3&gt;优化技巧概述&lt;/h3&gt;

&lt;p&gt;分析第一步，不要试图花时间去优化一些模糊不清的程序或者降低图片的大小除非你确实知道他们是瓶颈。首要的是去一直分析你的游戏找到瓶颈在哪里。Apple的Shark是一个分析OpenGL基础应用不错的工具。
分析第二步，不要忘了在优化后对游戏再分析一次以便查看他们是否有效，同时你也有可能会发现另一些瓶颈。&lt;/p&gt;

&lt;p&gt;开发工作第一 – 性能优化第二。尽可能花时间使你的游戏更加平滑顺畅。能够使得更改和更新游戏变得更快也将让减轻以后的性能转变。 在观察屏中测试场景，他将告诉你性能是被在场景中的物体拖慢速度还是被绑定在物体上的脚本拖慢速度。如果是观察屏中迟钝缓慢，你可能需要优化一下模型或者贴图，如果不是，瓶颈可能在程序中或者物理碰撞上。关闭个别的游戏物体，在编辑器里，试图关掉一些个别的物体，这样通常能排查到拖慢游戏的物体。&lt;/p&gt;

&lt;h3&gt;模型网格&lt;/h3&gt;

&lt;p&gt;尽可能的将邻近的模型合并为单个模型单个材质球。例如，如果你的场景里的桌子上堆叠有很多个物体，合并这些物体将会很有意义(有可能会需要将一些贴图合并一张大的贴图图集)。减少Unity渲染的物体的数量能显著促进性能。
一个材质球一个模型，每个材质球都会被视为分开的模型渲染。
使用极致低模的模型(500个多边形以下)会使得性能增加。大多数的显卡都有转换和照明功能，这意味他们每秒都处理一些奇怪的多边形。加之通常会提交一个网格让显卡渲染，所以太过于减少模型的多边形可能使你的游戏模型看起来像块状。
开始吧，用大约1500-2000的三角形做角色，这个数字可以变化大些，但是作为一个首发的美术人员应该在一个细节层级上对质量和性能有一个比较好的妥协。注意，如果你有模型使用四边形，(四边形)Unity将会把每个四边形都转换成2个三角形再导入。&lt;/p&gt;

&lt;h3&gt;光照&lt;/h3&gt;

&lt;p&gt;每个像素光渲染都会生效另外的渲染管道。像素光会使你的游戏看起来更好但不要太过于热衷于他们。然而，使用Quality Manager去调整像素光的渲染在每个质量等级上是一个很好的方式，这在你发布的游戏里提供了性能与质量的平衡性。
 聚光灯比点光源和方向光更加费性能。光照一个场景最好的方式是先确定你想要的效果，然后去看所有的灯光中哪个是重要的哪个可以削减掉使得场景效果与你想要的相似。
点光源和聚光灯值影响在他们范围内的模型网格。如果模型在点光源和聚光灯范围以外，光的影响将被削弱，模型将不会被灯光影响从而节省性能消耗。这个方式可以在理论上解释拥有很多小的点光源却任然拥有好的性能表现，因为他们只影响一小部分的物体。记住，一个模型最多只能被8个光源所影响。&lt;/p&gt;

&lt;h3&gt;贴图&lt;/h3&gt;

&lt;p&gt;在看起来可以接受的情况下尽量缩小贴图的大小。如果你的显卡没有拥有足够的内存来存放这些贴图时，他们将被放置在系统内存里，当他们需要被渲染时再被上传。这在新的电脑上没什么问题因为他们有很多可以使用的空间。但如果你执着于完全能在低端显存设备上运行你的游戏的话，不需要在图片工具上改变贴图的大小，你可以使用Unity导入图片并对其设置大小。
不要使用低品质的图片文件，试图使用jpeg的低品质文件或者低色彩png或者gif文件也不会降低游戏中的大小。Unity会在打包发布时自动压缩所有图片，所以请保持原始的高品质贴图文件。这是由于多种压缩和解压缩对品质最小化变得很轻便。&lt;/p&gt;

&lt;h3&gt;音频&lt;/h3&gt;

&lt;p&gt;使用.ogg对音频压缩，其他的音频格式在发布打包时将被作为非压缩的PCM音频格式存储在包内。
对小的音效使用非压缩音频，Unity(从1.6开始)导入时会解压缩所有ogg文件。它让短音效播放时使用非压缩的wav或者aiff文件，这样可以不消耗CPU在解压音频文件上。例如那些急速开枪、脚步等类似的声音。&lt;/p&gt;

&lt;h3&gt;物理&lt;/h3&gt;

&lt;p&gt;每个rigidbody都消耗计算，所以越少越理想。已有的Rigidbody物体同样最好关闭起来当他们的旋转速度和移动速度到减少到一定程度的时候。当这个发生的时候，大量计算被显著去除并保持比较低的量，直到他们受到手动受力或者碰撞其他的碰撞体如果存在的话。
复杂的碰撞比普通的消耗更多的计算量，大量堆叠在一起的球形rigidbody碰撞体在地形上会比相隔较远的消耗更多的复杂计算过程。&lt;/p&gt;

&lt;h3&gt;着色器&lt;/h3&gt;

&lt;p&gt;很多复杂的着色器比简单的可能消耗性能。VertexLit Diffuse 着色器应该是带贴图和光照最快的着色器了。然而，如果没有像素灯光在场景里或者所有像素光都被Quality Manager关掉了，那么大多数着色器将回退到更加简单的顶点渲染版本。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;h3&gt;脚本&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;1.你是否使用了好的算法？选择一个好的算法对工作收益来说比其他的调整会有更好的优化效果如果可能的话。
注意最好的算法不总是那个最低平均复杂度的算法。对于小数据量来说，通常使用一个简单的低速算法比智能却带高初始化的算法要来的好。(例如可以用hash表或二叉树作为以名字存取的大型数据，但你可以使用一个简单链表和线性算法如果你存取小型数据的话。虽然dotnet的哈希表类在这种情况下已经选择了最佳的方式根据你的数据量大小。)

2.FixedUpdate方法里尽可能保持少的逻辑。这些逻辑可以被调用大约50-100次每秒在每个有效脚本的每个物体里，所以他们是优化的重要目标。如果某些逻辑确实需要在渲染更新后执行再把这些代码放进update方法里去。
尽可能把一些物体上的脚本关掉当不再需要他们的时候。如果你的游戏有一个大型的场景，里面的怪物在几公里远的地方，你可以关掉他的AI脚本直到摄像头靠近他们时再开启。这里有个好方法去开关它们，就是使用gameObject.SetActiveRecursively(false)并且设置球形和方形碰撞体为触发器(trigger)。

3.小心空的Update方法。当使用资源菜单创建新的脚本时他们包含了空的Update方法。去掉它如果你不需要它的话，因为它会带来一些(少量的)性能消耗。这个性能消耗点应用所有在MonoBehaviour脚本里的重载方法，以Update和FixedUpdate为主要的目标。

4.关于一个GameObject中最合逻辑的组件，某人可以理论上这样写: someGameObject.transform.gameObject.rigidbody.transform.gameObject.rigidbody.transform，但这个有大部分都是不需要的。如果你需要去处理一个物体的Transform，可以映射它到你的脚本里的开头部分。

5.协程是你的好朋友。协程只有很少的开销并更适合被选择，而一个update方法在他们不需要的时候也总是被调用。例如，你有一个脚本去实现一个命令触发的渐进渐出的灯光效果，你可以用协程去实现渐进渐出替换Update。这样做在大部分时候当灯光不进行渐进渐出时，脚本是最低的性能消耗。如果渐进渐出在Update方法里实现，你将低效的轮询去查看是否渐进渐出结束了。

6.在没有必要的情况下不要用方法去搜索物体，这包括方法GameObject.FindByTag() 和 GameObject.GetComponent()，与所有便利的属性(transform,light,等)一样，这些方法可以被优化的运行起来地尽可能的快，但他们仍然必须去通过搜索关联的物体去找到你想要的那个。最重要的事是避免调用搜索方法在Update和FixedUpdate方法里，于之替换的是调用某方法一次并存储它在你的类成员变量里，然后在你下次需要它时从这个成员变量里取得。

7.不要使用SendMessage(或类似的方法)当你不是必要的时候，SendMessage比直接调用方法慢至少100倍，并且这个倍数还会增加当很多脚本和方法在物体上生效时。如果你能得到你的脚本你最好尽早去找，同样的直接调用这个方法。

8.JavaScripts(和Boos)的duck类型会消耗已少量的计算量。在性能零界区域和在使用javascript时，请直接尝试声明你使用的变量类型。(尽管这个通常计算机会自动识别那个有效的你所指定的类型，所以你的程序可以多样化)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;翻译自：http://wiki.unity3d.com/index.php?title=General&lt;em&gt;Performance&lt;/em&gt;Tips&lt;/p&gt;

&lt;p&gt;申明此篇文章为本人参加GAD翻译比赛文章&lt;/p&gt;

&lt;p&gt;转载请注明出处: http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D之slua集成第三方库</title>
   <link href="http://www.luzexi.com/2015/09/26/Unity3D%E4%B9%8Bslua%E9%9B%86%E6%88%90%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93.html"/>
   <updated>2015-09-26T14:46:26+08:00</updated>
   <id>http://www.luzexi.com/2015/09/26/Unity3D之slua集成第三方库</id>
   <content type="html">&lt;p&gt;Unity3D中使用lua最近越来越火，我比较中意slua的思路与代码质量。因为先前的项目对slua做了几个第三方库的封装，所有在空出来的时间就对slua做了fork加入了一些大家都比较常用的第三方库。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/luzexi/slua-3rd-lib&quot;&gt;源码&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这面是源码的地址，如果喜欢可以star或watch，我会一直更新以方便大家。&lt;/p&gt;

&lt;p&gt;至今集成的第三方库罗列一下:&lt;/p&gt;

&lt;p&gt;1.pbc (&lt;a href=&quot;https://github.com/cloudwu/pbc&quot;&gt;https://github.com/cloudwu/pbc&lt;/a&gt;) 是云风用c写的google protocol buffers。&lt;/p&gt;

&lt;p&gt;2.lpeg (&lt;a href=&quot;http://www.inf.puc-rio.br/%7Eroberto/lpeg/lpeg.html&quot;&gt;http://www.inf.puc-rio.br/~roberto/lpeg/lpeg.html&lt;/a&gt;) 是正则表达式的解析与匹配库.&lt;/p&gt;

&lt;p&gt;3.lua-cjson (&lt;a href=&quot;http://www.kyne.com.au/%7Emark/software/lua-cjson.php&quot;&gt;http://www.kyne.com.au/~mark/software/lua-cjson.php&lt;/a&gt;) 是一个支持json的库，他的效率非常惊人。&lt;/p&gt;

&lt;p&gt;4.lua-socket (&lt;a href=&quot;http://w3.impa.br/%7Ediego/software/luasocket/home.html&quot;&gt;http://w3.impa.br/~diego/software/luasocket/home.html&lt;/a&gt;) 是一个用c写的socket的库，里面封装了TCP和UDP。提供了网络连接与传输的API，你可以用它在lua里实现网络层。&lt;/p&gt;

&lt;p&gt;5.sproto (&lt;a href=&quot;https://github.com/cloudwu/sproto&quot;&gt;https://github.com/cloudwu/sproto&lt;/a&gt;) 这也是云风写的一个关于网络协议，他类似与google protocol buffer，不同的是他在google protocol buffer基础上对协议的格式和内容做了修改，使得解析与构造的效率非常高。&lt;/p&gt;

&lt;p&gt;6.sqlite (&lt;a href=&quot;https://github.com/LuaDist/lsqlite3&quot;&gt;https://github.com/LuaDist/lsqlite3&lt;/a&gt;) 是一个以文件形式存在的轻量级数据库，他被很多软件用来做本地数据存储。他的api轻便好用，广受程序员欢迎。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;源码中已将所有第三方库构建进slua里，并完成了android(x86,armv7),ios,mac,windows(x86,x64)这几个平台的测试。&lt;/p&gt;

&lt;p&gt;如果你需要加入自己的第三方库或者说你希望去除一些你用不到的第三方库，你可以在源码的build里修改我写的自动build的批处理程序。&lt;/p&gt;

&lt;p&gt;1.make_ios.sh 构建ios平台的批处理程序。需要在mac下运行。&lt;/p&gt;

&lt;p&gt;2.make_osx.sh 构建osx平台的批处理程序。需要在mac下运行。&lt;/p&gt;

&lt;p&gt;3.make_android.sh 构建android平台的批处理程序。需要在mac或linux下运行。&lt;/p&gt;

&lt;p&gt;4.make-windows-32.cmd 构建windows x86 dll。需要在windows下运行。&lt;/p&gt;

&lt;p&gt;5.make-windows-64.cmd 构建windows x64 dll。需要在windows下运行。&lt;/p&gt;

&lt;p&gt;这里说明一些构建时需要注意的事情。ios构建时需要注意脚本里的xcode地址。如果你不是xcode7.0。可能需要设置一下脚本里的路径。android的构建脚本也是一样，需要配置你机子上正确的ndk路径。windows下编译dll需要用的MingGw，我在源码中用git的submodule的方式安了一个，你需要运行一下submodule的更新命令git submodule update --init。MingGw很大300mb，你要做好心理准备，或者你直接去这个地址下载一个&lt;a href=&quot;https://github.com/luzexi/MinGW&quot;&gt;https://github.com/luzexi/MinGW&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;转载注明出处 http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D-重新编译Mono加密DLL</title>
   <link href="http://www.luzexi.com/2015/04/11/Unity3D-%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91Mono%E5%8A%A0%E5%AF%86DLL.html"/>
   <updated>2015-04-11T18:58:36+08:00</updated>
   <id>http://www.luzexi.com/2015/04/11/Unity3D-重新编译Mono加密DLL</id>
   <content type="html">&lt;p&gt;Unity3D-重新编译Mono加密DLL。安卓应用总是让人头疼，游戏遭到破解与反编译是研发的人最不愿意看到的。自己的辛苦劳动成果被人随意窃取与利用，对这些咬牙切齿的痛恨。所以我们需要加强自身的反破解技术力量。不过这世上没有破解不了的东西，道高一尺魔高一丈，我们做的只是让破解更加困难而已。让那些破解的人付出点代价才能得到他们想要的，如果他们觉得代价太高，看不清前面的道路，他们就有可能放弃，然后我们的目的达到了。&lt;/p&gt;

&lt;p&gt;游戏本身加密方式有很多，对apk加壳，防止apk二次打包等。对这些android的加密与破解技术看过比较好的文章参考：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/column/details/security-android.html&quot;&gt;《Android安全及病毒分析》&lt;/a&gt; ，其中&lt;a href=&quot;http://blog.csdn.net/androidsecurity/article/details/8809542&quot;&gt;《Android APK加壳技术方案【2】》&lt;/a&gt; 最为经典。而本篇文章我们主要来说说针对Unity3D的加密。&lt;/p&gt;

&lt;p&gt;闲扯就到这里，我们开始说正事：&lt;/p&gt;

&lt;p&gt;Unity3D所有客户端的代码都会以dll文件形式存下来，当游戏应用被开启时c#vm(也就是mono的虚拟机)会去加载所有dll，从而开始运行真正的程序画面了。而破解的很大一部分都是通过解压apk后拿到主逻辑dll，对dll进行反编译，然后修改后重新编译，再放入apk重新签名打包。所以我们需要针对dll进行加密，以防止他们反编译dll。&lt;/p&gt;

&lt;p&gt;加密一个dll文件非常容易，无论你用什么算法都行，但是在哪解密呢？答案是libmono.so。libmono.so是mono的核心程序，它承载了加载解析dll和虚拟机运行的功能。所以说libmono.so是关键，我们需要修改mono内核程序并重新编译它。&lt;/p&gt;

&lt;p&gt;下面将开始mono的编译过程，别看步骤写得简单明了，其实我花了起码一个多星期的思考，尝试，失败，再思考，再尝试，再失败.....总结其中原因一方面也是自己的愚钝的资质，另一方面是unity mono和mono并不一样，unity mono缺少编译文档并且还混合着原mono的编译文档，导致误判了很多：&lt;/p&gt;

&lt;p&gt;1.首先不要认为unity mono 与 原生态mono一样。可以编译mono就可以同样步骤编译unity mono。我在这里尝试了很久，使用configure进行编译，尝试使用不同的编译参数，进行编译，最后发现unity mono使用的是ndk-9下的linux-4.8编译器，所有参数都是根据这个编译器所设定的。&lt;/p&gt;

&lt;p&gt;2.unity mono 地址：&lt;a href=&quot;https://github.com/Unity-Technologies/mono&quot;&gt;https://github.com/Unity-Technologies/mono&lt;/a&gt; 你需要从这里下载unity mono。&lt;/p&gt;

&lt;p&gt;3.mono需要autoconf automake libtool pkg-config这些工具。你最好还是去下载安装了。你可以用brew安装。brew install autoconf automake libtool pkg-config。&lt;/p&gt;

&lt;p&gt;4.我一开始使用mac x86&lt;em&gt;64进行编译，折腾了很久然后建了个linux-x86&lt;/em&gt;64虚拟机来编译，然后又折腾了很久，又建了个linux-i386来重新编译mono，因为我一直认为交叉编译需要加些不同的编译参数和变量。在linux-i386首次编译成功后又开始转化到mac上，进行交叉编译也一样成功，最后发现其实是我没找对路子。这路子就是unity 的mono-build-tool：&lt;a href=&quot;https://github.com/Unity-Technologies/monobuildtools&quot;&gt;https://github.com/Unity-Technologies/monobuildtools&lt;/a&gt; 它已经在unity mono的项目里了，在mono的external/buildscripts下。&lt;/p&gt;

&lt;p&gt;5.buildscripts下的build&lt;em&gt;runtime&lt;/em&gt;android.sh是编译安卓平台的关键。它是unity制作的一个自动编译 mono 流程的脚本。你需要将这个脚本copy到mono根目录下再执行。&lt;/p&gt;

&lt;p&gt;6.脚本里写些内容，如果你懒得看，我帮你稍微解释下。它会去检查你当前的ANDROID&lt;em&gt;NDK&lt;/em&gt;ROOT环境变量是否是指向ndk-9，所以你需要去下ndk-9版本，放到机子上，然后编辑环境变量ANDROID&lt;em&gt;NDK&lt;/em&gt;ROOT指向它，如果你没有它会通过perl模块lwp-download去下载ndk-9，但是你必须要要有这个perl模块才行，我劝你还是老老实实自己去下吧。ndk版本下载地址参考这里：&lt;a href=&quot;/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2015/04/06/Android-SDK-NDK-Studio-%E4%B8%8B%E8%BD%BD%E5%88%97%E8%A1%A8%E5%92%8C%E6%9E%84%E5%BB%BA%E8%AF%B4%E6%98%8E.html&quot;&gt;《android-sdk-ndk-studio-下载列表和构建说明》&lt;/a&gt;。如果是linux下编译环境变量设定参考这里：&lt;a href=&quot;/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2015/04/07/linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%AE%80%E4%BB%8B.html&quot;&gt;《linux环境变量简介》&lt;/a&gt;。然后呢，它会用git去clone一个编译时用到的库，这个也是unity自己改编过的一个库，地址为：&lt;a href=&quot;https://github.com/Unity-Technologies/krait-signal-handler&quot;&gt;https://github.com/Unity-Technologies/krait-signal-handler&lt;/a&gt; ，这个库有个坑说下：perl脚本build.pl头部有个命令是#!/usr/bin/env perl -w，这个在部分机子上并不兼容，如果你有错误停在这里这个文件上，你可以将env去除再尝试手动perl build.pl 运行构建一遍没问题再重新编译，原因参考：&lt;a href=&quot;http://abloz.com/2011/01/13/why-use-usr-bin-env.html&quot;&gt;http://abloz.com/2011/01/13/why-use-usr-bin-env.html&lt;/a&gt; 。最后就先make clean &amp;amp;&amp;amp; make distclean 清除前面编译的内容，然后进行预编译configure，参数都在脚本里设置好了，你不需要关心了。预编译后就开始make编译了。&lt;/p&gt;

&lt;p&gt;7.执行build&lt;em&gt;runtime&lt;/em&gt;android.sh后terminal基本都是刷屏的节奏。刷刷刷的编译输出，你根本来不及看清到底做到哪了做了些什么内容。而config.log这个文件记录所有的编译输出，包括哪行错误了，哪行通过了。调试基本也考这个log文件，如果关键部位错误它会停止，然后你就可以针对性的查了。这里提醒一点，编译时它很多地方都是在检测编译器是否正常，因为它要确认编译器对错误的编译内容是否能够检测到，所以很多错误内容只是测试内容-你需要省略掉。&lt;/p&gt;

&lt;p&gt;8.如果编译成功，那就恭喜你了。windows下我没有测试过，有可能会增加不少坑，我建议还是用linux或者mac编译吧，因为我搜集资料的时候不少人对windows下编译mono都抱怨不少。那么我们开始迈入下一个坑吧:)&lt;/p&gt;

&lt;p&gt;下面介绍加解密DLL部分：&lt;/p&gt;

&lt;p&gt;加密算法自己选我不多说了，但我这里要引用一篇同样介绍mono的dll加密的文章，我觉得也写得满不错的，但是文章描述不够详尽。我这篇文章弥补了他的不足，将细节补充得更加细致。你大可以两篇文章加起来参考。&lt;a href=&quot;http://www.unitymanual.com/home.php?mod=space&amp;uid=7672&amp;do=blog&amp;id=1440&quot;&gt;http://www.unitymanual.com/home.php?mod=space&amp;amp;uid=7672&amp;amp;do=blog&amp;amp;id=1440&lt;/a&gt; 不知道地址是不是原作者的，如果不是我再更换吧。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;1.首先找到dll解密入口。mono下/mono/metadata/image.c里mono&lt;em&gt;image&lt;/em&gt;open&lt;em&gt;from&lt;/em&gt;data&lt;em&gt;with&lt;/em&gt;name是关键方法，参数中的data是dll传入的数据。你要做的就是将它解密后传给datac，这个方法程序你必须看下，因为你要了解下解密程序放在哪才合适。&lt;/p&gt;

&lt;p&gt;2.大部分dll都会通过mono&lt;em&gt;image&lt;/em&gt;open&lt;em&gt;from&lt;/em&gt;data&lt;em&gt;with&lt;/em&gt;name这个方法进行加载，但不是所有dll，例如mscorlib.dll和System.Core.dll就不会，可能还有其他dll，我并不确定还有哪些。所以你还是得辨别下哪些dll会通过这个方法，这样你才能确定哪个dll可以加密。如何判断data属于哪个dll呢，参数name就是data的路径名，name打印出来后就像:/data/app/com.xx.xx.apk/assets/bin/Data/Managed/xxx.dll 这样。&lt;/p&gt;

&lt;p&gt;3.打印调试。你可以使用g&lt;em&gt;message例如：g&lt;/em&gt;warning(&amp;quot;dll name: %s \n&amp;quot;, name); 其他的打印调试你可以查看源码中的它写的代码。很容易找到，查关键字LOG吧。&lt;/p&gt;

&lt;p&gt;4.改完后重新编译mono，找到libmono.so(find . -name libmono.so)，完成编译后libmono.so的平台有好几个，你可以根据自己的平台来选。有人拷贝这些mono重新编译过的文件去覆盖了unity编辑器的原来mono文件，这样也可行。但我选择在打包android时再从外部复制libmono.so，这样就可以绕过编译器重新编译后无法读取无加密dll的麻烦，可以少做一层无意义的编辑器状态下的加解密工作。&lt;/p&gt;

&lt;p&gt;5.mono解密部分就到这里了。其他部分的关键就是你的加解密程序了，是否能够加密和解密都是ok的并且都是不改变size。你需要的参数有data和data&lt;em&gt;len，mono&lt;/em&gt;image&lt;em&gt;open&lt;/em&gt;from&lt;em&gt;data&lt;/em&gt;with_name方法里面都有。&lt;/p&gt;

&lt;p&gt;6.为了安全起见我使用c来编写加密程序，因为我认为c#和c的编译器对于变量内存的存储机制不一样，怕引起不必要的麻烦。
这里要非常感谢一个人，全程都在提供帮助：炽乐@宗树&lt;/p&gt;

&lt;p&gt;转载请注明出处：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>linux环境变量简介</title>
   <link href="http://www.luzexi.com/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2015/04/07/linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%AE%80%E4%BB%8B.html"/>
   <updated>2015-04-07T10:42:29+08:00</updated>
   <id>http://www.luzexi.com/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2015/04/07/linux环境变量简介</id>
   <content type="html">&lt;p&gt;linux环境变量简介。这个话题已经很老了,我只是重新温习一遍旧的知识而已。顺便熟悉下资料整理工具OmntOutliner。我们在使用android-sdk，android-ndk,jdk等众多软件时都会用到linux环境变量的配置。所以我觉得重点介绍下还是很有必要的。
因为我使用的是iframe标签，所以有可能有部分浏览器并不支持。
如果你查看时有问题可以直接点击:&lt;a href=&quot;/static-page/linux-env.html/index.html&quot;&gt;linux环境变量简介&lt;/a&gt;&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;iframe src=&quot;/static-page/linux-env.html/index.html&quot; width=&quot;100%&quot; , height=&quot;1000&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;转载注明出处 http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D-游戏画面高低品质切换</title>
   <link href="http://www.luzexi.com/2015/04/01/Unity3D-%E6%B8%B8%E6%88%8F%E7%94%BB%E9%9D%A2%E9%AB%98%E4%BD%8E%E5%93%81%E8%B4%A8%E5%88%87%E6%8D%A2.html"/>
   <updated>2015-04-01T00:36:06+08:00</updated>
   <id>http://www.luzexi.com/2015/04/01/Unity3D-游戏画面高低品质切换</id>
   <content type="html">&lt;p&gt;Unity3D-游戏画面高低品质切换。最近想办法让游戏在高画质和低画质之间切换，在判定游戏帧数高低后，可以实时切换游戏品质让游戏更加流畅。这能给客户端在渠道发行后提高些许留存率。
ngui和ugui切换方式有所不同，一个基于atlas一种基于Image，一种是之前的ngui的atlas，一种是Unity3D4.6.1后的sprite 2D(ugui)。&lt;/p&gt;

&lt;p&gt;两种方式都基于两套图和两套prefab。共同特点就是在开发期间prefab，用脚本工具去生成相应的sd prefab。细节如下：&lt;/p&gt;

&lt;p&gt;1.一套ui图分两套图，一套高清一套低清，ui prefab一套为指向高清图，一套指向低清图。&lt;/p&gt;

&lt;p&gt;2.基于两套图和两套prefab。开发期间，在修改其中一个prefab时，做个工具脚本，自动复制这个prefab到sd文件夹下，并将prefab里的所有图替换为sd。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;3.程序在选择sd还是hd时，只要关注prefab名就可以了。prefab名可以后缀不一样，load时可以区分开来。&lt;/p&gt;

&lt;p&gt;4.最后做到极致时，可以加强工具脚本，一键生成所有sd的prefab。
ngui部分的prefab，编写脚本使用atlas指向切换。ugui部分的prefab，编写脚本使用更换Image。&lt;/p&gt;

&lt;p&gt;最后总结：两套图一高一低，需要维护两套，使用脚本工具根据hd的prefab生成sd的prefab。低清图在压缩时，如果使用unity3d自带的压缩机制太过于粗糙的话，可以美术手动压缩。&lt;/p&gt;

&lt;p&gt;特别感谢一起讨论的童鞋，结论是通过大家的智慧结合：完美@yang，巨人@tangram，炽乐@宗树。&lt;/p&gt;

&lt;p&gt;转载请注明出处：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3DLua-将xls转化为lua</title>
   <link href="http://www.luzexi.com/2015/03/26/Unity3DLua-%E5%B0%86xls%E8%BD%AC%E5%8C%96%E4%B8%BAlua.html"/>
   <updated>2015-03-26T13:29:02+08:00</updated>
   <id>http://www.luzexi.com/2015/03/26/Unity3DLua-将xls转化为lua</id>
   <content type="html">&lt;p&gt;Unity3DLua-将xls转化为lua。使用lua写unity3d项目，由于加载数据一直觉得不方便，于是写个脚本将xls数据文件转化为lua文件，这样lua逻辑就可以直接读取数据。
为什么要这样做呢？&lt;/p&gt;

&lt;p&gt;首先转化为lua后就不再需要解析csv,json等数据了，可以直接使用。&lt;/p&gt;

&lt;p&gt;其次，数据转乘lua后，在同步lua脚本时，可以一并同步数据。在同步环节省去了同步数据的麻烦。&lt;/p&gt;

&lt;p&gt;再者，使用xls2lua脚本转化为lua数据文件，可以达到自动化校验的效果，省去一部分人为操作失误。&lt;/p&gt;

&lt;p&gt;最后，我观察到很多游戏都使用这种方式，其中比较有名的是 《刀塔传奇》。其实这种方式早就很普遍了，只不过我沿着别人的足迹而已走到了这了里而已。&lt;/p&gt;

&lt;p&gt;项目已经放在了github上，如果需要可以去拿。如果喜欢可以star(收藏)下。&lt;/p&gt;

&lt;p&gt;Github address : &lt;a href=&quot;https://github.com/luzexi/xls2lua&quot;&gt;https://github.com/luzexi/xls2lua&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以下是github的readme部分的文字，描述有英文和中文两个版本。你可以忽略英文部分。&lt;/p&gt;

&lt;h3&gt;Excute Example (举例执行命令)&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;python ./xls2lua.py example_building.xls ./data/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;NOTICE:(注意点)&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;The sheet name must start with &amp;quot;output_&amp;quot; , the lua file name will be the name behind &amp;quot;output_&amp;quot;.
The **first row** must be **title**. 
The **second row** must be **type** 
The **type must be i , f , s , b , ai , af , as , ab.
i mean int , f mean float , s mean string , b mean bool , ai mean array int , af mean array float , as mean array string , ab mean array bool.
The **first column** must be int , so the type in first column must be i.
The string type with char **&amp;quot;** or **&amp;#39;** will be replace by \&amp;quot; or \&amp;#39; 
The empty col will be a default value like 0 or &amp;quot;&amp;quot; or false or {} 
(sheet名以&amp;quot;output_&amp;quot;开头的才会被识别转换，否则将被忽略) 
(第1行必须是关键字名) 
(第2行必须为类型) 
(类型有：i,f,s,b,ai,af,as,ab这几种) 
(i表示int，f表示float,s表示string,b表示bool,ai表示int数组,af表示float数组,as表示string数组,ab表示bool数组) 
(第1列必须为int类型的唯一关键字) 
(string类型中&amp;quot;和&amp;#39;会自动用\&amp;quot;和\&amp;#39;替代)
(空列将会被默认值代替，例如:0,&amp;quot;&amp;quot;,false,{})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;h3&gt;Lua script (生成后的Lua文件示例)&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;-- this file is generated by program!&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- don&amp;#39;t change it manaully.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- source file: example_building.xls&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;-- created at: Thu Mar 26 02:53:52 2015&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;house&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;use_money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;use_food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.33&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;is_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;defense&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aadd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aadddss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ddff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sdf&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;23e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ffdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;house2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;use_money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;use_food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;336.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;is_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;defense&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aadd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aadddss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.3445&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ddff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;你好&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;你在哪&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ffdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;use_money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;use_food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;222.33665&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;is_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;defense&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;130&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aadd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aadddss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ddff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;我在这里啊&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;你在那&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;呢&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ffdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;farm&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;use_money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;use_food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;220.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;is_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;defense&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aadd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aadddss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;200.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;234.23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ddff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;df&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ssd&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ffdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;house5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;use_money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;use_food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;22.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;is_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;defense&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aadd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aadddss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ddff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ss&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ffdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;horse3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;use_money&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;use_food&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;is_init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;defense&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aadd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;aadddss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ddff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;2e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;we&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ffdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;How to use lua with data. (如何使用生成的lua数据)&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;building&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;building&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;building&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The console will print &amp;quot;house&amp;quot;&lt;/p&gt;

&lt;p&gt;转载注明出处 http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D项目环境全部署</title>
   <link href="http://www.luzexi.com/2015/03/06/Unity3D%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83%E5%85%A8%E9%83%A8%E7%BD%B2.html"/>
   <updated>2015-03-06T18:18:08+08:00</updated>
   <id>http://www.luzexi.com/2015/03/06/Unity3D项目环境全部署</id>
   <content type="html">&lt;p&gt;Unity3D项目环境全部署。这次我想总结下项目环境部署。可别小看了这个开发环境部署，这将直接导致项目的进程速度，以及成员们在这个开发行程中的疲劳积累速度。优秀的部署能省去成员们不必要的心理负担，卸下包袱专心去做自己的功能块。差劲的部署，会加重成员们的心理负担，并且有可能引起不必要的开发冲突。&lt;/p&gt;

&lt;p&gt;首先我来罗列下Unity3D开发手游需要经历哪些节点。&lt;/p&gt;

&lt;p&gt;1.Unity3D内编码。里面的内容自然主要是架构与编码，本篇不对其细说。&lt;/p&gt;

&lt;p&gt;2.IOS,Android  SDK接口对接。不同的平台，不同的sdk对接。&lt;/p&gt;

&lt;p&gt;3.项目进度监督与管理，所有策划案与修改案都会被记录在项目进度表中，每周都需要一个报告来支撑项目进度。项目的进度跟踪是对项目进度把控的最好体现。&lt;/p&gt;

&lt;p&gt;4.测试部门的bug提交，与用户体验建议&amp;amp;修改。这将极大的完善游戏体验，让bug与差体验都尽可能得消失殆尽。&lt;/p&gt;

&lt;p&gt;5.wiki面板。这将项目中的重大事件与注意事项进行记录，共所有人查阅，以方便在开发中查阅前面所经历的问题，缩短询问时间。&lt;/p&gt;

&lt;p&gt;6.策划案数据自动生成。策划案的数据在开发过程中随时都会进行改变，一键生成数据并同步到程序，反应到客户端是加快项目速度的好方法，也同时消除了成员们手动操作的心理负担。&lt;/p&gt;

&lt;p&gt;7.一键生成需要动态加载的资源与资源版本号，有些还需要对动态资源进行zip压缩打包。很多游戏都会在游戏的开头，或游戏中进行加载资源，开发中这些资源都会随时随地的被成员们改变，一键生成将加快项目进度，消除成员们手动操作的心理负担。&lt;/p&gt;

&lt;p&gt;8.打包成不同平台的包。ios-&amp;gt;ipa , android-&amp;gt;apk (android这里还有不同的游戏平台游戏包，一个游戏至少会有20个平台需要接，每个平台1个包)，winphone也一样。&lt;/p&gt;

&lt;p&gt;9.将包上传至内部服务器供，测试部门以及项目成员们测试&amp;amp;预览。ios可以用testFlight，也可以用协议在网页上自行下载安装。android和winphone不用说可以放内部网页直接下载安装。&lt;/p&gt;

&lt;p&gt;以上是所有开发需要的步骤，包括了 主逻辑开发，平台对接，项目管理，测试管理，备忘录，数据同步，资源打包，客户端打包，以及客户端同步。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;这些都只是称述而已，那么如何将这些部分连起来呢。看下图：
&lt;img class=&quot;alignnone size-full wp-image-501&quot; src=&quot;/assets/uploads/2015/03/客户端环境布局.jpg&quot; alt=&quot;客户端环境布局&quot; width=&quot;711&quot; height=&quot;486&quot; /&gt;能看明白吗，容我解释下(其实上面也有一部分称述)：&lt;/p&gt;

&lt;p&gt;点1和2=&amp;gt;使用git版本控制，建立主分支，各功能块拆分成不同分支并行开发，在主分支上建立ios,android,winphone平台分支，这里只写平台代码逻辑代码从主分支获取。&lt;/p&gt;

&lt;p&gt;点3和4和5=&amp;gt;使用redmine(当然也可以用别的管理)，建立wiki写备忘录，提供测试与体验提交问题，并且使用office软件与email编写进度报表共成员们查阅。&lt;/p&gt;

&lt;p&gt;点6=&amp;gt;用python(也可以ruby,php...等等自己选)解析xls生成数据并上传。&lt;/p&gt;

&lt;p&gt;点7=&amp;gt;这里可以用python语言也可用jenkins来执行资源打包程序，并上传。&lt;/p&gt;

&lt;p&gt;点8=&amp;gt;使用jenkins打包，建立&amp;amp;配置打包流程，随时随地可以一键打包，使得打包快速、准确、稳定。&lt;/p&gt;

&lt;p&gt;点9=&amp;gt;ios可以用testFlight，也可以用协议在网页上自行下载安装。android和winphone不用说可以放内部网页直接下载安装。&lt;/p&gt;

&lt;p&gt;总结：尽量将各部门的合作用自动化的形式融合在一起，维护好自动化程序与合作流程，让各个成员们都只关注自己的部分。最终目的就是加快开发速度，减少成员疲劳度积累(避免是不可能的)。&lt;/p&gt;

&lt;p&gt;另外题外话----附上web服务器的项目布局，见下图。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-510&quot; src=&quot;/assets/uploads/2015/03/服务端开发环境布局.jpg&quot; alt=&quot;服务端开发环境布局&quot; width=&quot;686&quot; height=&quot;468&quot; /&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D上海CTO&Leader讨论会</title>
   <link href="http://www.luzexi.com/2015/02/11/Unity3D%E4%B8%8A%E6%B5%B7CTO&Leader%E8%AE%A8%E8%AE%BA%E4%BC%9A.html"/>
   <updated>2015-02-11T20:15:24+08:00</updated>
   <id>http://www.luzexi.com/2015/02/11/Unity3D上海CTO&Leader讨论会</id>
   <content type="html">&lt;p&gt;2015-02-11 今天去了趟unity上海分部的CTO&amp;amp;Leader讨论会。记录下会议内容很多无聊的东西我都略过不写了，报告下我们比较关心的，或者将来会遇到的困难。&lt;/p&gt;

&lt;p&gt;1.现在unity3d 4.6.2 打包64位的ios app 不靠谱，bug有400多个，不建议升级。4月1号前说是会出个稳定版，但讨论中透露，稳定版中也会由许多未知因素。IL2P打成c++的方式有众多问题和困难。&lt;/p&gt;

&lt;p&gt;2.他们说了个热更新的解决方案，但只限安卓。原理就是把更新apk里的dll部分。然后我说了关于使用lua更新机制，虽然现在在u3d里仍不是非常成熟，但困难是永远都有的，各位可以值得一试，不要等到别人用熟了你才开始，那已经慢了好大一步了。&lt;/p&gt;

&lt;p&gt;3.问了关于内存释放的问题，他们阐述说resources.unloadunusedassets并不是根据引用计数来释放内存，而是根据世界树中的实例检测，而System.GC.Collect()是根据引用计数销毁的，所以可以选择两个一起使用，也就是我们现在的方式。unity3d内存销毁，似乎有时会隔一个场景，所以在主场景和战斗场景切换时中间隔个空场景是有必要的。&lt;/p&gt;

&lt;p&gt;4.关于内存，他们在阐述他们提供的一个性能测试服务中，提到由于ngui底层是mesh重构，而每次重构都会积累内存消耗，所以ngui的内存问题是比较严重。&lt;/p&gt;

&lt;p&gt;5.关于混淆，他们只有一般的混淆方案。网上可以找到。没什么特别的自己方案。混淆的注意点是，混淆时安卓和ios等平台对接的接口不要进行混淆，在平台调用时会找不到相应接口。unity技术团队说他们可以提供混淆服务，但我觉得并不困难。&lt;/p&gt;

&lt;p&gt;6.unity5 将与unity4完全不同，互不兼容，也就是像cocosx 2与cocosx 3一样，拆分两个版本维护。IL2P将会逐渐替代mono的打包方式。mono也很难升级，因为高版本的授权费用很高，一般的用户承受不了。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;7.以下是一些unity5比较有用的改善。没兴趣关注的就不提了。&lt;/p&gt;

&lt;p&gt;*场景中的shader可以自动合并成一个shader，减低drawcall。
*assetbundle打包可以进行增量更新，无变化的assetbundle会被自动识别，加快了批量打assebbundle的速度。
*更多得采用多线程处理，加快unity应用的速度。
*支持webGL平台的开发。在支持webGL浏览器里不需要unity插件。
*unity5升级为64位，编辑器可使用更多内存。&lt;/p&gt;

&lt;p&gt;8.最后他们提供说一个真机性能测试的服务，可以提供60页的性能测试报表。性能卡点自己找起来比较准确点，就看你愿不愿意去找了。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-487&quot; src=&quot;/assets/uploads/2015/02/IMG_0972.jpg&quot; alt=&quot;IMG_0972&quot; width=&quot;1763&quot; height=&quot;885&quot; /&gt;&lt;/p&gt;

&lt;p&gt;转载注明出处 http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lua使用实记</title>
   <link href="http://www.luzexi.com/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/2015/01/21/Lua%E4%BD%BF%E7%94%A8%E5%AE%9E%E8%AE%B0.html"/>
   <updated>2015-01-21T20:14:59+08:00</updated>
   <id>http://www.luzexi.com/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/2015/01/21/Lua使用实记</id>
   <content type="html">&lt;p&gt;c调用lua堆栈常用操作-------&lt;/p&gt;

&lt;p&gt;===================初级========================&lt;/p&gt;

&lt;p&gt;void lua_gettop() : 用于返回栈中元素的个数，同时也是栈顶元素的索引，因为栈底是1，所以栈中有多少个元素，栈顶索引就是多少。&lt;/p&gt;

&lt;p&gt;void lua&lt;em&gt;settop(int index) : 设置栈顶，也是设置栈的大小，多的去除，少的填nil。-- #define lua&lt;/em&gt;pop(L,n) lua_settop(L,-(n)-1)&lt;/p&gt;

&lt;p&gt;void lua_pushvalue(int index) : 拷贝索引index元素并压入栈。&lt;/p&gt;

&lt;p&gt;void lua_remove(int index) : 删除索引index。&lt;/p&gt;

&lt;p&gt;void lua_replace(int index) : 弹出栈顶元素，并将其替换到索引index元素。&lt;/p&gt;

&lt;p&gt;void lua_getglobal(const char *name) : 把全局变量name压入栈顶。&lt;/p&gt;

&lt;p&gt;void lua_pop(int n) : 推出栈顶(移除)n个元素。&lt;/p&gt;

&lt;p&gt;void lua_insert(int index) : 弹出栈顶，并将其插入索引index中。&lt;/p&gt;

&lt;p&gt;void lua_remove(int index) : 移除索引index的元素。&lt;/p&gt;

&lt;p&gt;lua_is***(int index) 检查变量是不是某个类型，index指示变量的顺序，栈顶为-1。&lt;/p&gt;

&lt;p&gt;lua_to***(int index) 获取栈中的变量，然后转换为某个指定的类型，并返回。&lt;/p&gt;

&lt;p&gt;lua_push***() 压入某类型元素。&lt;/p&gt;

&lt;p&gt;int lua_type(int index) : 获得索引index的值的类型。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;===================中级========================&lt;/p&gt;

&lt;p&gt;void lua_call(int nargs, int nresults) : 调用方法，其中nargs为参数数量，nresults为结果数量。栈中必须保持  ..... func , arg1 , arg2 ,art3 (&lt;em&gt;) ，&lt;/em&gt;表示栈顶，调用后func,arg都会消失，只留下结果，如果调用没有问题的话。&lt;/p&gt;

&lt;p&gt;int lua_pcall(int nargs, int nresults, int errfunc) :  功能pcall与call一样，区别在最后多了个自定义错误处理，当调用出错后，会调用其栈中索引方法。pcall返回0为无错误，其他则表示调用有错。如果errfunc为0，则报错调用原始方法。&lt;/p&gt;

&lt;p&gt;void lua_createtable(int narr, int nrec) : 创建一个narr行nrec列的table，将其压入栈。&lt;/p&gt;

&lt;p&gt;void lua&lt;em&gt;newtable() : 创建一个空表，将其压入栈。与lua&lt;/em&gt;createtable(0,0)一个意思。&lt;/p&gt;

&lt;p&gt;void lua&lt;em&gt;getfield(int index, const char *k) :  t[k]，获取表(索引为t的表)中的k值，并压入栈。这个会调用被修改的&lt;/em&gt;_index的方法，如果被修改过的话。&lt;/p&gt;

&lt;p&gt;void lua_setfield(int index, const char *k) : 设置t[k] = v，t为索引index的表，k为参数k值，v为栈顶元素，并弹出栈顶元素。此调用会触发修改过的newindex方法。&lt;/p&gt;

&lt;p&gt;void lua_getglobal(const char *name) : 获取全局变量name，并压入栈顶。&lt;/p&gt;

&lt;p&gt;void lua_setglobal(const char *name) : 弹出栈顶，并将其设置为全局变量name的值。&lt;/p&gt;

&lt;p&gt;void lua&lt;em&gt;gettable(int index) : 弹出栈顶，并压入t[k]值，t为索引index的表，k为栈顶值。此方法将调用被修改的&lt;/em&gt;_index的方法，如果被修改过的话。&lt;/p&gt;

&lt;p&gt;void lua&lt;em&gt;settable(int index) : 设置表t[k]=v，t为索引index的表，v是栈顶元素，k为栈顶下面一个元素。例如 lua&lt;/em&gt;settable(-3)  ---- table , &amp;quot;key&amp;quot; , &amp;quot;value&amp;quot; (&lt;em&gt;) ，&lt;/em&gt;表示栈顶。并弹出v(栈顶)和k(栈顶下面)元素，此调用会触发修改过的newindex方法。&lt;/p&gt;

&lt;p&gt;void lua_rawget(int index) : 与gettable一样，但调用的索引方法是原始的。&lt;/p&gt;

&lt;p&gt;void lua_rawset(int index) :  与settable一样，但调用的索引方法是原始的。&lt;/p&gt;

&lt;p&gt;void lua_rawgeti(int index, int n) : 压入t[n]值，t为索引index的表，n为参数n，调用的索引方法是原始的。&lt;/p&gt;

&lt;p&gt;void lua_rawseti(int index, int n) : 设置t[n]=v，t为索引index的表，v为栈顶值，n为参数n，并弹出栈顶元素。调用的索引方法为原始的。&lt;/p&gt;

&lt;p&gt;int lua_getmetatable(int index) : 压入索引index的值的metatable，如果索引index的值有metatable则返回非0，否则返回0并不压入任何元素。&lt;/p&gt;

&lt;p&gt;int lua_setmetatable(int index) : 弹出栈顶，并将其设置为索引index值的metatable。&lt;/p&gt;

&lt;p&gt;void lua&lt;em&gt;register(const char *name, lua&lt;/em&gt;CFunction f) :  向lua注册名字为name的f方法。这个方法相当于 #define lua&lt;em&gt;register(L,n,f) (lua&lt;/em&gt;pushcfunction(L, f), lua_setglobal(L, n))&lt;/p&gt;

&lt;p&gt;转载请注明出处：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D手机中的网页调用与回调</title>
   <link href="http://www.luzexi.com/2014/11/23/Unity3D%E6%89%8B%E6%9C%BA%E4%B8%AD%E7%9A%84%E7%BD%91%E9%A1%B5%E8%B0%83%E7%94%A8%E4%B8%8E%E5%9B%9E%E8%B0%83.html"/>
   <updated>2014-11-23T23:04:46+08:00</updated>
   <id>http://www.luzexi.com/2014/11/23/Unity3D手机中的网页调用与回调</id>
   <content type="html">&lt;p&gt;Unity3D手机中的网页调用与回调，其实就是我们口中常说的Webview，是手机项目里调用网页，来代替游戏画面展示的一种方法。因为其展示的是网页，所以展示画面是相对动态的，可以由服务器来控制。但是我们不只需要展示画面，还需要当点击网页按钮时产生回调以使U3D执行指定程序。&lt;/p&gt;

&lt;p&gt;其实日本在webview这个模块上做的很不错，我也是借用日本Gree公司在github上公开的webview程序来作为底层代码的，只是我稍微改进了下，以适合自己的程序习惯和项目习惯。下面我主要介绍下这个webview的运作机制。&lt;/p&gt;

&lt;p&gt;一、调用Webview打开网页。
我在源码基础上加了个单例接口，使得接口调用更加简单。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;初始化接口：WebViewObject.sInstance.Init((msg)=&amp;gt;{
Debug.Log(string.Format(&amp;quot;CallFromJS[{0}]&amp;quot;, msg));
}); 初始化传入的是点击回调的消息接口。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;设置窗体大小：WebViewObject.sInstance.SetMargins(5, 5, 5, 40); 窗体大小定义的十左边，上边，右边，下边的间隔像素。&lt;/p&gt;

&lt;p&gt;展示OR关闭网页：WebViewObject.sInstance.SetVisibility(true);&lt;/p&gt;

&lt;p&gt;通过地址加载某网页：WebViewObject.sInstance.LoadURL(path);&lt;/p&gt;

&lt;p&gt;二、Webview在不同平台的插件载体和编译这些载体的方法。&lt;/p&gt;

&lt;p&gt;这里主要是Android、IPHONE和MAC平台---因为它只做了这3个平台，所以Windows平台的同学就不能再编辑器里看到了，调试Webview时就用MAC吧。Android使用jar做插件体，iphone用.mm文件做插件体，mac用bundle做插件载体。&lt;/p&gt;

&lt;p&gt;iphone是用.mm文件，所以不用编译载体，只有Android和Mac需要。在platform&lt;em&gt;src/Android和platfor&lt;/em&gt;src/iOS下分别有install.ssh文件可以执行，用来编译各自的载体。所以你只要执行就可以了。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;三、Webview网页按钮回调。&lt;/p&gt;

&lt;p&gt;Webview网页按钮回调的功能对我们来说非常有用，所以这里细致讲下它是如何辨认并回调的。
所有的网页里的链接都可以想象成按钮，无论是图片超链接还是普通的链接地址，更或是form形式的submit提交按钮，都是以网页形式访问网页地址。当访问网页地址时，native程序中拦截了网页地址，并查看网页地址是否以&amp;#39;unity:&amp;#39;打头，如果是以&amp;#39;unity:&amp;#39;打头的认为是调用unity3d的按钮，将此地址直接发送(SendMessage)给U3D的Webview程序，让其判断根据接收到得地址判断需要调用哪段程序。比如，地址为unity:auth，U3D程序在init时传入的接口接收到的为auth的字符串。所以如果你想让网页链接调用U3D程序，你就把链接写成unity:开头的超链接。&lt;/p&gt;

&lt;p&gt;最后，我们既然有了手机中得网页调用与回调，我们就可以充分运用其在游戏里的功能了，最最基础的就是公告了，其次就是攻略网页，还有游戏功能的说明和调用，甚至有时可以直接代替游戏画面，直接替换画面的灵活性就非常强大了。&lt;/p&gt;

&lt;p&gt;现在，我连Webview的测试案例都写好，测试案例的项目在git clone 后切记使用 git submodule update --init 更新submodule。：）Good luck!&lt;/p&gt;

&lt;p&gt;注：有人反馈显示网页后，点击奔溃的问题，这是U3D的Editor本身与MAC兼容的问题，U3D编辑器的调用MAC程序奔溃比较频繁，所以细致的测试还得在真机上进行比较合适。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-450&quot; src=&quot;/assets/uploads/2014/11/img.png&quot; alt=&quot;img&quot; width=&quot;1408&quot; height=&quot;960&quot; /&gt;&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/luzexi/Unity3DWebView&quot;&gt;Unity3DWebview&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;测试案例地址：&lt;a href=&quot;https://github.com/luzexi/Unity3DWebView-Test&quot;&gt;Unity3dWebviewTest&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D人物行为状态机和指令状态机</title>
   <link href="http://www.luzexi.com/2014/10/25/Unity3D%E4%BA%BA%E7%89%A9%E8%A1%8C%E4%B8%BA%E7%8A%B6%E6%80%81%E6%9C%BA%E5%92%8C%E6%8C%87%E4%BB%A4%E7%8A%B6%E6%80%81%E6%9C%BA.html"/>
   <updated>2014-10-25T15:06:18+08:00</updated>
   <id>http://www.luzexi.com/2014/10/25/Unity3D人物行为状态机和指令状态机</id>
   <content type="html">&lt;p&gt;Unity3D人物行为状态机和指令状态机。状态机在各类游戏中都应用的比较平凡，不要以为只有角色扮演类游戏才用到状态机，但凡有物体有动作切换或者重复的指令切换都是状态机用到的地方。其实状态机到处都是，只有你想不到没有有他触及不到的地方，当然我这里主要讲有限状态机。这里省略一万字的状态机基础知识以及我的唠叨。&lt;/p&gt;

&lt;p&gt;状态机在游戏项目中的主要运用点：&lt;/p&gt;

&lt;p&gt;1.人物动作。一般的RPG人物最为明显，每个人物都有4-5个基本动作，比如 空闲动作，行走，攻击，受伤，施法等。把每个动作看成一个状态，就有了基本的状态，把每个状态用参数串联起来就算是状态机了。&lt;/p&gt;

&lt;p&gt;2.AI。这个在游戏AI里表现得最为明显，用状态机写AI是最快并且最有效的方式了。每个AI也都有几个基本状态，比如 追击状态，逃跑状态，疯狂状态，巡逻状态。有了这几个状态，就可以用参数串联起来成为状态机了。&lt;/p&gt;

&lt;p&gt;3.人物指令。这个可能很多没有写过状态机的童鞋比较难懂，他跟AI状态有点像，是为了辅助人物动作状态的。当我们把人物动作状态机定义完毕时，发现只有人物动作状态，如何去扩展除了动作以外的东西呢，比如移动，缩放。人物指令状态机就是做这事的，他相当于在动作状态机上套了又一层状态机。比如人物行走指令里，调用了动作行走状态，让人物一直保持行走动作，然后自己只要去处理人物位移就可以了，这样既有了动作也有了位移，整套移动指令就完整了。又比如攻击指令状态，发出指令后，攻击指令状态先调用行走动作状态并移动到目标点，再调用攻击动作状态，再处理攻击受伤逻辑。表现就是，一个人走到目标点攻击了另一个人。中间还可以加很多逻辑，比如判断是否处于封印状态，如果处在封印状态就不能攻击。&lt;/p&gt;

&lt;p&gt;状态机极大的简化了对人物行为变化的处理方式，也更加容易进行扩展。Unity3D里有一个动作的状态功能Animator，他的图形界面很清晰得解释了状态机的原理。但我自己并不喜欢使用，因为我认为这个Animator限制了程序员的思维，虽然达到了可视化状态机的目的但扩展性差，所以我一直不推崇使用，不过这只是个人看法。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-433&quot; src=&quot;/assets/uploads/2014/10/10039783.jpg&quot; alt=&quot;10039783&quot; width=&quot;550&quot; height=&quot;240&quot; /&gt;&lt;/p&gt;

&lt;p&gt;运用状态机时需要注意的几个问题:&lt;/p&gt;

&lt;p&gt;1.传统网游里人物状态不太多，最多也就10个极限了，但是现在已经不是从前了，特别是单机游戏里，动不动就2，3十个状态，这个时候状态与状态之间切换逻辑就成了一个麻烦事。我们可以增加事件处理句柄来整理状态切换事件，其他方法也有很多种，运用时最好围绕让程序员容易找，容易改来，不要为了发挥设计模式而抛弃了代码清晰度。&lt;/p&gt;

&lt;p&gt;2.输入参数。当前游戏项目中，输入参数有很多种。一种输入参数已经满足不了状态机在游戏中得运用了。而且不同的状态对于输入的参数也不同，所以我们可以面向对象方式对状态机输入进行扩做。我们定义一个Input类，里面什么都没有，每个状态或者某几个状态另开出一个类xxInput继承Input，增加里面的参数，再在输入参数时，对参数进行辨别，如果是xxInput时就对相应状态进行判定和处理。&lt;/p&gt;

&lt;p&gt;总结：状态机没有固定框架，还得要大家自己亲自试验，最好能借鉴别人的项目或者在自己的项目里试着写入状态机。我能帮大家的也就分析解释下状态机在游戏里的运用情况，最后还得靠自己琢磨出来。&lt;/p&gt;

&lt;p&gt;转载请注明出处：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D行为树系统编程实现</title>
   <link href="http://www.luzexi.com/2014/10/24/Unity3D%E8%A1%8C%E4%B8%BA%E6%A0%91%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E5%AE%9E%E7%8E%B0.html"/>
   <updated>2014-10-24T11:16:11+08:00</updated>
   <id>http://www.luzexi.com/2014/10/24/Unity3D行为树系统编程实现</id>
   <content type="html">&lt;p&gt;Unity3D行为树系统编程实现。行为树在AI领域使用十分广泛，行为树的架构非常通用和便捷，在扩展性方面表现得更是非常好。我这里只讲关于如何实现行为树，跳过了基础的行为树概念。关于行为树的介绍和行为树概念请看&lt;a href=&quot;/%E6%B8%B8%E6%88%8F%E9%80%9A%E7%94%A8%E6%A8%A1%E5%9D%97/2013/01/26/%E4%BD%BF%E7%94%A8%E8%A1%8C%E4%B8%BA%E6%A0%91(Behavior-Tree)%E5%AE%9E%E7%8E%B0%E6%B8%B8%E6%88%8FAI.html&quot;&gt;《使用行为树behavior-tree实现游戏ai》&lt;/a&gt;这是业界一个前辈写的文章我只是代为转载。&lt;/p&gt;

&lt;p&gt;很久没有写文章了，如果文笔弱请多见谅，随着工作的繁忙，写博客也是件奢侈的事情。在整理完代码后累得跟死猪一样，时间并不充裕，经历也有限，请各位期待更新的朋友多多见谅。行为树一直是我希望完善的一个系统框架，本身在2011年时就用在3DRPG里，但那是并不完善，只是个初级的产品。这次我彻彻底底把他完善成一个固定框架，可以直接拿来扩展使用。原本也这个行程也只是记在笔记本上，但最近有个英国的出版社发MAILL给我说有篇UNITY3D AI的书他们正在出版，要我做一下审阅和评论，于是看了几天审阅了段时间，里面大部分内容都是讲U3D里一个行为树插件RAIN如何使用，一项不喜欢使用插件的我看得我很不爽，因为文章大部分内容都是叙述使用过程没什么可看的。一念之下，一口气直接把行为树系统框架和行为树编辑器写了一遍。审阅和评论的事情没弄完，自己的行为树系统倒是写完了，罪过罪过。-----废话完毕。&lt;/p&gt;

&lt;p&gt;我先把源码地址贴上，让大家可以边对着代码，边看我的文章。这样可以像下酒菜一样，边喝着啤(wen)酒(zhang)，边吃着花(dai)生(ma)。
源码放在github上: &lt;a href=&quot;https://github.com/luzexi/Unity3DAIBehaviorTree&quot;&gt;https://github.com/luzexi/Unity3DAIBehaviorTree&lt;/a&gt; 如果你喜欢可以star或者follow下。&lt;/p&gt;

&lt;p&gt;行为树系统实现：&lt;/p&gt;

&lt;p&gt;1.我把行为树以BNode为基类节点。&lt;/p&gt;

&lt;p&gt;2.BNode的一层子类为BNodeAction(行动基类)，BNodeComposite(执行顺序基类)，BNodeCondition(条件基类)，BNodeDecorator(修饰基类)。&lt;/p&gt;

&lt;p&gt;3.BNode基类节点的基本方法：OnEnter--进入事件,OnExist--退出事件,Excute--执行事件。子类可以通过重写这三个方法以达到实现自我功能。&lt;/p&gt;

&lt;p&gt;4.节点的执行顺序是需要提前考虑的，我写了几个，比如顺序，选择，并行，随机，迭代。具体点：顺序--子节点中顺序执行直到结束如果遇到失败的节点就返回失败否则成功，选择--子节点中顺序执行直到遇到返回成功的节点，并行--顺序执行节点无论失败成功直到结束返回成功，随机--随机选择一个节点执行返回该节点的结果，迭代--顺序执行直到并连续成功N次就返回成功否则失败。&lt;/p&gt;

&lt;p&gt;5.输入参数BInput是行为树系统的必要类实例，因为在运行行为树时，每个节点的执行对象需要依赖输入参数，每个项目的输入参数都不一样，所以你可以继承BInput扩展成你希望的输入参数，比如：TestInput里加入了hp,mp两个元素用来保存AI的对象状态，你也可以加入更多更复杂的元素，比如角色信息类，伙伴信息类等。&lt;/p&gt;

&lt;p&gt;6.为了让行为树运用到项目里去，我们可以对BNodeAction，BNodeCondition，BNodeDecorator，进行扩展。继承书写的规则：继承子类必须在Game.AIBehaviorTree命名空间里，构造函数里最好对m_strName进行赋值，这样就能在行为树编辑器里看到你的扩展类和扩展命名，每个扩展的节点，如果有需要对变量进行编辑的，变量必须是public的，而且类型只限于int,float,bool,string四种。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;7.行为树编辑器是行为树系统可用性的关键。我把行为树用目录结构的方式来实现，这样对于节点的增加，删除，切换，拖拽，体验都非常便捷。对于每个节点的编辑状态在选择该节点后会在编辑器的右下脚现实。编辑器还承载了保存，加载，以及对行为树的增加和删除，重命名的功能。如下图：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-429&quot; src=&quot;/assets/uploads/2014/10/img.png&quot; alt=&quot;img&quot; width=&quot;985&quot; height=&quot;492&quot; /&gt;&lt;/p&gt;

&lt;p&gt;8.行为树数据存储。我用json格式来存储行为树，先前我用bytes来存，但发现因为扩展子类的变量经常性变化，所以用bytes来存常常会导致已编辑完成的数据无法重新编辑。所以我用了c#反射进行类与json变量的配对。&lt;/p&gt;

&lt;p&gt;9.最后请大家注意，行为树不只是用来做AI的，比如开宝箱，掉落，物品使用都可以用行为树来做。&lt;/p&gt;

&lt;p&gt;10.文档化数据，行为树有了编辑器似乎抛弃了xls,但我还是认为xls对于策划人员的数据编辑工作还是主流的，所以我接下来扩展的方向就是行为树编辑器xls化。&lt;/p&gt;

&lt;p&gt;转载请注明出处: http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>html5游戏开发---cocos2dx-js</title>
   <link href="http://www.luzexi.com/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2014/09/28/html5%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91-cocos2dx-js.html"/>
   <updated>2014-09-28T12:05:23+08:00</updated>
   <id>http://www.luzexi.com/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2014/09/28/html5游戏开发---cocos2dx-js</id>
   <content type="html">&lt;p&gt;html5游戏开发---cocos2dx-js。在神经猫发热后，我开始关注html5游戏。所以前段时间做了2个html5小游戏当试水，用的引擎是cocos2dx-js。在这里我想做回忆下，html5的制作过程和需要注意的地方，也阐述下当下html5游戏渠道的问题。&lt;/p&gt;

&lt;p&gt;我先接触了egret引擎，它是国内html5优秀的游戏引擎，采用typescripts做主语言。在我用了几天发现，它的主语言并非js所以html5底层的东西会被下意识的屏蔽掉，何不用js的引擎来写html5呢，即能快速开发又能随时接触html5底层。所以我使用了cocos2dx-js。&lt;/p&gt;

&lt;p&gt;关于cocos2dx-js的教程就不在这里写了，接口跟cocos2dx-c++的差不多。&lt;/p&gt;

&lt;p&gt;js写html5需要注意的几点：&lt;/p&gt;

&lt;p&gt;1.html5游戏最需要快速加载，js代码不能分成很多个一个个加载，减慢了加载速度也容易流失用户。所以在写玩html5时需要对所有js代码进行压缩合并。google的closure compiler解决了这个问题，cocos2dx-js也将这个功能融入进里面。下面是步骤：&lt;/p&gt;

&lt;p&gt;在cocos2dx-js-v3.0里使用cocos compile -p web -m release来对html5的js代码进行压缩。&lt;/p&gt;

&lt;p&gt;在cocos2dx-html5(与cocos2dx-js-v3.0是两个版本，cocos2dx-js-v3.0比较好用)里打包html5需要用到ant和build.xml。打包主要内容为将所有js文件打包成同一个文件，目的是减少加载文件数量，加快加载速度。打包命令：cd到项目文件夹下。敲入:ant或者ant -buildfile build.xml。build.xml中囊括了要打包的js文件。其中指定了js打包编译工具complie.jar是google closure compiler专门压缩js文件大小工具。&lt;/p&gt;

&lt;p&gt;关于微信分享:&lt;/p&gt;

&lt;p&gt;微信api已经在微信的浏览器里已经注入了它的api。&lt;/p&gt;

&lt;p&gt;微信api的机制其实就是事件机制，比如当你点击分享时，调用某个你制定的方法显示你想显示的文字和图片。&lt;/p&gt;

&lt;p&gt;微信api你可以参考 &lt;a href=&quot;https://github.com/zxlie/WeixinApi&quot;&gt;https://github.com/zxlie/WeixinApi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;主要用到的有分享朋友圈，分享给朋友，分享后回调。你可以首先看这几个重点。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;关于html5游戏渠道:&lt;/p&gt;

&lt;p&gt;1.现在html5游戏的渠道很少，而且现在html5游戏基本呈现在微信浏览器中，所以微信的公众平台是渠道之一，而且似乎占比比较大。&lt;/p&gt;

&lt;p&gt;2.在国外html5游戏在电视上的占比也开始大了，我不知道国内的情况，未来国内是否有可能在电视上呈现html5游戏。&lt;/p&gt;

&lt;p&gt;3.html5游戏的app形式，这个还是很有潜力的，因为渠道太少倒逼html5游戏发展成轻型app。也就是说html5的app就只是个连接地址，但在手机上呈现的是一个图标，打开后以浏览器形式访问。&lt;/p&gt;

&lt;p&gt;最后大家可以看看这个小游戏，请使用手机二维码扫描。&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-413&quot; src=&quot;/assets/uploads/2014/09/qrcode.png&quot; alt=&quot;qrcode&quot; width=&quot;280&quot; height=&quot;280&quot; /&gt;&lt;/p&gt;

&lt;p&gt;源码地址：&lt;a href=&quot;https://github.com/hangzhou-JIMI/MemoryFruits&quot;&gt;https://github.com/hangzhou-JIMI/MemoryFruits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Git命令使用集合</title>
   <link href="http://www.luzexi.com/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/2014/09/12/Git%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E9%9B%86%E5%90%88.html"/>
   <updated>2014-09-12T18:54:22+08:00</updated>
   <id>http://www.luzexi.com/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/2014/09/12/Git命令使用集合</id>
   <content type="html">&lt;p&gt;下面是我最近一直在使用的git命令。不知道能否为你提供点帮助。当然，我在github上做了很多好东西，全是开源的供你慢慢享用，如果觉得不错可以star(收藏),fllow(订阅)一下。等我空点了再把项目技术分享给你们哦。&lt;a href=&quot;https://github.com/luzexi&quot;&gt;https://github.com/luzexi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h4&gt;clone:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git clone path dir 或者 git clone path 名字可以省略默认使用该项目名
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;branch:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git branch -r 查看所有分支

    git branch 查看当前获取的分支信息，在没有获取分支信息前，只会显示在哪个提交点。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;checkout:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git checkout branch_name 切换某个分支

    git checkout -b branch_name 以当前分支未基础建立新分支并且切换过去

    git checkout -f 强制替换与分支不一样的文件

    git checkout path 撤销某个未提交文件恢复原状

    git checkout . 撤销所有未提交文件恢复原状

    git checkout --ours path  冲突中以当前分支未基准

    git checkout --theirs path 冲突中以对方分支未基准
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;add:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git add path 告诉git这个文件或文件夹加入到提交队列

    git add . 告诉git目录下文件和文件夹都加入到提交队列
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;rm:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git rm path 告诉git这个文件或文件夹需要被删除

    git rm . 告诉git当前目录下所有文件和文件夹都需要被删除

    git rm `git status | grep delete | awk &amp;#39;{print $2}&amp;#39;` 删除所有被删除的文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;commit:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git commit -m &amp;quot;write something&amp;quot; 提交当前被git add 或者 git rm 的内容

    git commit -a -m &amp;quot;write something&amp;quot; 提交所有被git跟踪的文件，-a表示所有
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;push:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git push origin branch_name 推送branch_name分支

    git push origin branch_name1:branch_name2 把当branch_name1支推送到新建一个分支branch_name2中去

    git push 推送所有本地修改过的分支到服务器
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;pull:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git pull 下载当前分支内容

    git pull server branch_name 下载server服务器上的 branch_name分支，如果有冲突将自动合并
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;show:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git show commit_id 查看某次提交修改的内容
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;whatchanged:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git whatchanged filepath  查看某个文件的修改记录
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;clean:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git clean -f 清除所有未被git跟踪的文件

    git clean -df 清除所有未被git跟踪的文件和文件夹
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;reset:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git reset --hard commitID 回撤到某个提交点,文件也一同回到那个状态

    git reset --soft commitID  回撤到某个提交点，但文件仍然保持原来被修改后的状态。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;fetch:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git fetch 这个我只知道抓取当前项目的所有信息主要实分支信息和提交记录，并不下载内容
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;h4&gt;merge:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git merge server branch_name 合并server项目上branch_name分支

    git merge branch_name 合并默认origin项目上的branch_name分支
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;diff:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git diff file_name 比较文件与前一个版本的不同之处
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;remote:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git remote add server_name git_path 将git_path以server_name命名，方便后面操作
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;submodule:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    git submodule add git_address dir_name  加入其他模块仓库

    git submodule init  初始化模块仓库

    git submodule update  更新模块仓库
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;log:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    -p：按补丁显示每个更新间的差异

    --stat：显示每次更新的修改文件的统计信息

    --shortstat：只显示--stat中最后的行数添加修改删除统计

    --name-only：尽在已修改的提交信息后显示文件清单

    --name-status：显示新增、修改和删除的文件清单

    --abbrev-commit：仅显示SHA-1的前几个字符，而非所有的40个字符

    --relative-date：使用较短的相对时间显示（例如：&amp;quot;two weeks ago&amp;quot;）

    --graph：显示ASCII图形表示的分支合并历史

    --pretty：使用其他格式显示历史提交信息
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Unity3D之对pomelo框架网络层改装</title>
   <link href="http://www.luzexi.com/2014/06/25/Unity3D%E4%B9%8B%E5%AF%B9pomelo%E6%A1%86%E6%9E%B6%E7%BD%91%E7%BB%9C%E5%B1%82%E6%94%B9%E8%A3%85.html"/>
   <updated>2014-06-25T14:27:25+08:00</updated>
   <id>http://www.luzexi.com/2014/06/25/Unity3D之对pomelo框架网络层改装</id>
   <content type="html">&lt;p&gt;最近了解了下网易的开源服务器框架pomelo，github地址：&lt;a href=&quot;https://github.com/NetEase/pomelo&quot;&gt;https://github.com/NetEase/pomelo&lt;/a&gt;发现其中它封装的u3d的网络层部分有线程安全问题，几乎不能直接u3d项目，所以对其进行了2次封装，让他可以真正用于u3d项目。&lt;/p&gt;

&lt;p&gt;封装后的源码也同样放在我的github上：&lt;a href=&quot;https://github.com/luzexi&quot;&gt;https://github.com/luzexi&lt;/a&gt; 供大家参考。&lt;/p&gt;

&lt;p&gt;下面写下pomelo的u3d网络层源码问题和我对源码的封装过程：
pomelo网络通信方式分:原始socket和websocket两种，这两种方式由项目需要而选择其中一种来使用。pomelo种对u3d网络通信封装的最主要问题是线程中逻辑句柄的调用，因为u3d对它本身主线程意外的线程调用本身api是非常排斥，当你在其他线程中运行u3d的api会直接被cut掉，所以我们需要将其调用游戏逻辑句柄的那部分放到u3d主线程中去。&lt;/p&gt;

&lt;p&gt;如何将线程通信后的游戏句柄调用部分放到u3d主线程中去：&lt;/p&gt;

&lt;p&gt;1.网络通信是由数据包为单位来驱动游戏逻辑句柄的，所以只要加入队列概念，在收到数据包时由原来的直接调用句柄，改为先推入到队列中，等待处理。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#if LUZEXI&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_cLock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//the lock object&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROCESS_NUM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//the process handle num per fps&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_seqReceiveMsg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&amp;gt;();&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//the message queue&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TranspotUpdate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_cUpdater&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//The Updater of the message queue&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.在u3d主逻辑中增加一个专门处理网络通信逻辑句柄的类。这个类在通信开始时就加入到u3d主逻辑中去，当通信结束(无论是正常还是异常结束)时在u3d主逻辑中销毁。在主逻辑中不断的或者说每帧都去查看网络通信层队列中有没有等待处理的句柄，有就取出来处理。这样就由等待队列串联起来了几个线程的共同合作。ps:对队列做防死锁操作&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#if LUZEXI&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PROCESS_NUM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_seqReceiveMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_seqReceiveMsg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dequeue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messageProcesser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;3.拆分网络通信事件。将网络通信事件拆分为OnConnect , OnError , OnDisconnect , 这3个事件是最常见的通信事件。这3个事件也必须在主线程中调用，但这3个事件又不是以网络数据包为基础，所以需要在专门处理通信逻辑的类中加入3种状态start , error , disconnect.当网络通信层出现这三种事件时，将状态切过去（ps:而不是直接调用句柄）,然后再由专门处理通信逻辑的类在下一帧去调用对应的事件句柄。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;UnityEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Collections.Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SimpleJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//  TranspotUpdate.cs&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  Author: Lu Zexi&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  2014-6-20&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Pomelo.DotNetClient&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Transpot updater.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TranspotUpdate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MonoBehaviour&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;NONE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;START&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;RUNING&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CLOSE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;DESTORY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_eStat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//the state of the transpotUpdate&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_cUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//update action&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_cOnDisconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//on the disconnect&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// Init this instance.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TranspotUpdate&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Socket&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TranspotUpdate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TranspotUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// set the update of the process message action&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;update&amp;quot;&amp;gt;Update.&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cUpdate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// set the disconnect evet.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;ondisconnect&amp;quot;&amp;gt;Ondisconnect.&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetOndisconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ondisconnect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cOnDisconnect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ondisconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// close the updater&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_eStat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLOSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// Start this update.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_eStat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// destory the gameobject.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;_Destory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_eStat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLOSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_eStat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESTORY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// Fixeds the update.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FixedUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_eStat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;START&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RUNING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cUpdate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CLOSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cOnDisconnect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cOnDisconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_cOnDisconnect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_eStat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESTORY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DESTORY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_eStat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;转载请注明出处：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D之如何将包大小减少到极致</title>
   <link href="http://www.luzexi.com/2014/06/06/Unity3D%E4%B9%8B%E5%A6%82%E4%BD%95%E5%B0%86%E5%8C%85%E5%A4%A7%E5%B0%8F%E5%87%8F%E5%B0%91%E5%88%B0%E6%9E%81%E8%87%B4.html"/>
   <updated>2014-06-06T18:38:46+08:00</updated>
   <id>http://www.luzexi.com/2014/06/06/Unity3D之如何将包大小减少到极致</id>
   <content type="html">&lt;p&gt;Unity3D之如何将包大小减少到极致,图片是游戏app里最最占空间的资源，所以请各位还没有理解u3d对图片文件存储方式理解的请看&lt;a href=&quot;/unity3d/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2014/05/21/Unity3D-Texture%E5%9B%BE%E7%89%87%E7%A9%BA%E9%97%B4%E5%92%8C%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90.html&quot;&gt;《unity3d-texture图片空间和内存占用分析》&lt;/a&gt;。因为u3d对资源的压缩并不阐述的十分详细，所以很多项目在遇到包大小瓶颈时非常头疼。我也不是神仙，也同样痛苦过，但经历几个项目的折腾，最终能梳理出一套能将u3d包大小减少到合理范围的方法。&lt;/p&gt;

&lt;p&gt;首先来展示下，官方如何说的:（&lt;a href=&quot;http://docs.unity3d.com/Manual/ReducingFilesize.html&quot;&gt;http://docs.unity3d.com/Manual/ReducingFilesize.html&lt;/a&gt; 官方手册）&lt;/p&gt;

&lt;p&gt;1.替换jpg，使用psd，减少重复资源&lt;/p&gt;

&lt;p&gt;2.剔除不必要的资源&lt;/p&gt;

&lt;p&gt;3.打包时查看log纪录，由此判断需要减少的文件类型&lt;/p&gt;

&lt;p&gt;4.优化，压缩图片，减少图片大小&lt;/p&gt;

&lt;p&gt;5.优化，压缩网格和动画，减少文件大小&lt;/p&gt;

&lt;p&gt;6.剔除system.dll和system.xml.dll ,尽量不要依赖他们，或用其他组件来代替。&lt;/p&gt;

&lt;p&gt;这些官方解释对我们帮助甚少。&lt;/p&gt;

&lt;p&gt;为了将包大小减少到极致，我把包分成三段：1.首包(里面包含了最最必要的资源)。2.首次进入包加载(加载游戏运行必要的资源)。3.游戏运行中资源加载(按每个游戏不同各自定义，以场景和单位个体为主要，在画面进入时加载资源，加载结束后再运行并显示)。&lt;/p&gt;

&lt;p&gt;这个说的好笼统，来说的细点：&lt;/p&gt;

&lt;p&gt;大部分网络游戏都可以把资源分成包内资源和首次进游戏加载的资源。这样就解决了一部分资源放里面的问题。&lt;/p&gt;

&lt;p&gt;不是所有游戏都适合游戏进行中加载网络资源的，况且在中国网络环境这么糟糕的情况下。敢在游戏中加载网络资源的也就那些重度手游，而且是大厂的重度了。所以我们还需要想办法把前两种方法里的资源压缩到最小。&lt;/p&gt;

&lt;p&gt;因为首包内大部分资源都是ui资源，以及一些必要的场景资源。所以我们最主要是提取这些资源到外面并放服务器上去。&lt;/p&gt;

&lt;p&gt;一般包内资源操作都是阻塞式的，为了让游戏的架构没有太大的变化，我们还是使用阻塞加载方式，但方式稍微换一下，本来使用Resources.Load的接口，改用AssetBundle.CreateFromFile + AssetBundle.Load。把包内绝大部分ui以及其他资源打成一个assetbundle文件，并且使用的是非压缩模式。&lt;/p&gt;

&lt;p&gt;因为非压缩模式使得文件更大，我们还需要一步操作，就是将文件压缩成zip文件后上传服务器。&lt;/p&gt;

&lt;p&gt;我们将包外的资源压缩成zip文件。这样在加载网络资源时就能省去很多网络流量。下载下来后，对zip文件进行解压，后再对zip文件删除，减少空间占用。&lt;/p&gt;

&lt;p&gt;这样做以后是不是差不多所有资源都在包外了。而且基本上包内就只有程序和游戏首画面的资源了。30mb内应该也可以轻松达到。&lt;/p&gt;

&lt;p&gt;至于如何使用AssetBundle的这些接口，我对Assetbundle api做了一个封装。所有assetbundle的api都封装在里面。你自可以尽情使用。请看:&lt;a href=&quot;https://github.com/luzexi/Unity3DGameResource&quot;&gt;Unity3DGameResource&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;关于u3d的AssetBundle资源加载与打包封装，请查看&lt;a href=&quot;/unity3d/%E6%B8%B8%E6%88%8F%E9%80%9A%E7%94%A8%E6%A8%A1%E5%9D%97/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2014/04/16/Unity3D%E4%B9%8BAssetBundle%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E5%B0%81%E8%A3%85.html&quot;&gt;《unity3d之assetbundle资源加载封装》&lt;/a&gt;这篇文章。&lt;/p&gt;

&lt;p&gt;下面说说关于动态资源加载和资源导入内存的所有方式，这是优化资源的必要条件，只有你知道了所有的加载和导入途径你才能对项目资源优化进行全面的分析。知道了有哪几条路你才能选择一条最好的。如下：&lt;/p&gt;

&lt;p&gt;利用动态资源加载有几种方式：&lt;/p&gt;

&lt;p&gt;1.将资源放入assetstream文件夹随打包一起打入文件。&lt;/p&gt;

&lt;p&gt;2.将部分资源放在服务器，游戏前或游戏中进行加载，并保存到本地。&lt;/p&gt;

&lt;p&gt;3.将资源压缩成多个zip文件放在服务器，客户端下载这些zip文件进行解压。&lt;/p&gt;

&lt;p&gt;其实www.LoadFromCacheOrDownload加载机制也可以算一种，但似乎u3d4.5.2开始已经摒弃这个接口，大部分人也不太建议使用这个接口，似乎是因为这个界面消耗内存太厉害。其实具体什么原因我也不太清楚。个人认为这个接口太过死板，操作余地太小，受限太大。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;资源导入内存的方式有几种：&lt;/p&gt;

&lt;p&gt;1.从Resources文件夹中导入。这是阻塞加载最常见的方式，接口Resources.Load();&lt;/p&gt;

&lt;p&gt;2.从某地址加载资源www。这是异步加载最常见方式，接口new www(path);&lt;/p&gt;

&lt;p&gt;3.直接从文件或者bytes[]生成AssetBundl，接口：AssetBundle.CreateFromFile阻塞方法, AssetBundle.CreateFromMemory异步方法，AssetBundle.CreateFromMemoryImmediate阻塞方法&lt;/p&gt;

&lt;p&gt;4.使用File类加载文件，File.ReadAllBytes，File.ReadAllText。&lt;/p&gt;

&lt;p&gt;有了资源加载和内存导入后，还需要配备资源验证方式，这样整个项目动态加载体制才完善。资源版本更新方式可以使用json格式并以文件形式查看。验证方式的理解，还需要大家使用在项目里才能体会到真正的用途，才能将原理牢记于心。&lt;/p&gt;

&lt;p&gt;验证资源版本有几种：&lt;/p&gt;

&lt;p&gt;1.资源整体验证。步骤：1.客户端向服务器发送资源版本。2.服务器匹配最近版本号，若版本号不同，比较两个版本号之间的内容差异，发送差异资源地址。3.客户端删除差异内容中需要删除的文件资源，加载需要下载的文件资源并保存文件。最后保存版本号。&lt;/p&gt;

&lt;p&gt;2.单个资源文件的时间戳验证。步骤：1.客户端向服务器发送资源版本号。2.服务器匹配最新版本号，如果不同就重新发送一份资源版本列表，里面包含了资源文件的时间戳。3.保存版本列表。4.在客户端需要加载该资源时比较时间戳是否一致，如果不一样或这不存在就加载资源文件并保存固定时间戳。&lt;/p&gt;

&lt;p&gt;3.单个资源文件md5验证。步骤：1.客户端向服务器发送资源版本号。2.服务器匹配最新版本号，如果不同重新发送一分资源版本列表，里面包含了资源文件的md5码。3.客户端比较新旧资源版本列表中的，删除需要删除的和更新的资源。4.在客户端需要加载该资源时查看文件是否存在，如果存在就说明资源是最新的。如果不存在则需要实时下载。&lt;/p&gt;

&lt;p&gt;对于资源版本验证与更新我写了一个关于资源更新的解决方案&lt;a href=&quot;https://github.com/luzexi/version_update&quot;&gt;https://github.com/luzexi/version_update&lt;/a&gt; 是一个用php写的脚本，将资源进行记录，每次生成版本，对比资源是否有被修改，或删除，或增加，有兴趣可以看看。&lt;/p&gt;

&lt;p&gt;转发请注明出处:http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D--Texture图片空间和内存占用分析</title>
   <link href="http://www.luzexi.com/2014/05/21/Unity3D-Texture%E5%9B%BE%E7%89%87%E7%A9%BA%E9%97%B4%E5%92%8C%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90.html"/>
   <updated>2014-05-21T11:05:21+08:00</updated>
   <id>http://www.luzexi.com/2014/05/21/Unity3D-Texture图片空间和内存占用分析</id>
   <content type="html">&lt;p&gt;Texture图片空间和内存占用分析。由于U3D并没有很好的诠释对于图片的处理方式，所以很多人一直对于图集的大小和内存的占用情况都不了解。在此对于U3D的图片问题做一个实际数据的分析。此前的项目都会存在这样或者那样的打包后包大小与内存占用情况的问题，所以这次所以彻彻底底得分析下U3D对于Texture的处理方式。程序里的内存优化请参考&lt;a href=&quot;/unity3d/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2014/02/22/Unity3d%E4%BC%98%E5%8C%96%E4%B9%8B%E8%B7%AF.html&quot;&gt;《unity3d优化之路》&lt;/a&gt;。减少U3D包大小请参考&lt;a href=&quot;/unity3d/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2014/06/06/Unity3D%E4%B9%8B%E5%A6%82%E4%BD%95%E5%B0%86%E5%8C%85%E5%A4%A7%E5%B0%8F%E5%87%8F%E5%B0%91%E5%88%B0%E6%9E%81%E8%87%B4.html&quot;&gt;《unity3d之如何将包大小减少到极致》&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我打包多种类型的项目，空项目和10张放在Resources文件夹中的图为比较案例。以下是比较数据。&lt;/p&gt;

&lt;p&gt;IPHONE：&lt;/p&gt;

&lt;p&gt;1.空项目----空间占用量42.3MB----IPA大小10MB&lt;/p&gt;

&lt;p&gt;2.10张1200*520无压缩Texure 单张图占用量2.8MB----空间占用量70.2MB----IPA大小22.9MB&lt;/p&gt;

&lt;p&gt;3.10张1200&lt;em&gt;520压缩成1024&lt;/em&gt;1024PVRTC4 单张图占用量0.5MB----空间占用量47.3MB----IPA大小13.2MB&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;10张1024*1024无压缩Texture 单张图占用量4MB----空间占用量82.3MB----IPA大小14.6MB&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;5.10张1024*1024压缩为PVRTC4格式 单张图占用量0.5MB----空间占用量47.3MB----IPA大小11.6MB&lt;/p&gt;

&lt;p&gt;宗上数据总结：&lt;/p&gt;

&lt;p&gt;一、2的N次方大小的图片会得到引擎更大的支持，包括压缩比率，内存消耗，打包压缩大小，而且支持的力度非常大。&lt;/p&gt;

&lt;p&gt;二、减小图片的占用大小和内存方式有:图片大小变化(Maxsize),色彩位数变化(16位，32位)，压缩(PVRC)。&lt;/p&gt;

&lt;p&gt;三、U3D对于图片的格式是自己生成的，而并不是你给他什么格式，他就用什么格式，一张1024&lt;em&gt;1024图在无压缩格式下，它会被U3D以无压缩文件形式存放，也就是说U3D里的Texture Preview里显示的占用大小&lt;/em&gt;*MB不只是内存占用大小，还是空间占用大小。如下图所示：
&lt;img class=&quot;alignnone size-full wp-image-310&quot; src=&quot;/assets/uploads/2014/05/QQ截图20140521102030.png&quot; alt=&quot;QQ截图20140521102030&quot; width=&quot;626&quot; height=&quot;726&quot; /&gt;&lt;/p&gt;

&lt;p&gt;U3D的内部机制为自动生成图片类型来替换我们给的图片，在图片的压缩方式上需要进行谨慎的选择。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;压缩格式在U3D的&lt;a href=&quot;http://docs.unity3d.com/Documentation/Components/class-Texture2D.html&quot;&gt;Component Reference&lt;/a&gt;里有介绍我就不再详细介绍，只介绍几个重点的:&lt;/p&gt;

&lt;p&gt;RGBA32格式为无压缩最保真格式，但也是最浪费内存和空间的格式。Automatic Turecolor和它一个意思。&lt;/p&gt;

&lt;p&gt;RGBA16格式为无压缩16位格式，比32位节省一半的空间和内存。Automatic 16bits和它一个意思。&lt;/p&gt;

&lt;p&gt;RGBA Compressed PVRTC 4bits格式为PVRTC图片格式，它相当于把图片更改了压缩方式新生成了一个图片来替换原来的我们给的图片格式(比如我们给的是PNG格式)。&lt;/p&gt;

&lt;p&gt;注意：U3D所有图片的压缩格式都会以另一种方式来存储，不会以你给的方式来存储，只有你指定了某种格式，它才会转成你要的格式。而且压缩格式在Android里并不一定有效，因为Android的机型多，GPU的渲染方式也不一样，有的是Nvidia，有的是PowerVR，最最好的在安卓机子上启用RGBA16方式，因为这个是适应所有机型的，并且比32位占用量少一半，但也需要因项目而异，只是推荐使用的格式，可以多用。&lt;/p&gt;

&lt;p&gt;转载请注明出自：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>WEB游戏服务器架构(HTTP)</title>
   <link href="http://www.luzexi.com/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2014/04/18/WEB%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84(HTTP).html"/>
   <updated>2014-04-18T11:13:33+08:00</updated>
   <id>http://www.luzexi.com/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2014/04/18/WEB游戏服务器架构(HTTP)</id>
   <content type="html">&lt;p&gt;WEB游戏服务器架构(HTTP)。在如今游戏中，越来越多使用WEB架构方式来做游戏，《临兵斗者三国志》也是其中一个。我使用了PHP来做WEB服务器主逻辑语言，原因为他的开发速度快，并且容易招人容易上手。
接下来主要来介绍下WEB服务器游戏架构的方式。(本文以PHP+MYSQL+MEMCACHE+NGINX为例)&lt;/p&gt;

&lt;p&gt;PHP可以选用任何你熟悉的框架，能站在别人肩膀上的就站上去吧，自己写时间过长。我们选用的是Yii框架，特点不多没有刻意去挑选。Memcache主要存储数据表的内存，因为PHP没有内存可控制，所以结合Memchache是最好的选择，也可以用Redis，功能上都一样，不过Redis有排序而已。用NGINX主要用来做WEB端的负载平衡，也可以在测试时做IP过滤，以及维护时的IP封锁。&lt;/p&gt;

&lt;p&gt;WEB架构图：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;----------------------------------------------------------
GAME_DB1(Mysql-master&amp;amp;slave)---|
GAME_DB2(Mysql-master&amp;amp;slave)   |  
GAME_DB3(Mysql-master&amp;amp;slave)   |---------------|
GAME_DB4(Mysql-master&amp;amp;slave)---|               |
                                               |
Memcache1(master&amp;amp;slave)                        |
Memcache2(master&amp;amp;slave)                        |
Memcache3(master&amp;amp;slave)                        |
Memcache4(master&amp;amp;slvae)                        |
/       \                                      |
GameServerPHP1                                 |
GameServerPHP2---------------------------------|
GameServerPHP3  
|     /  
Nginx  
------------------------------------------  
GB_DB(Mysql)  
|  
GM_ADMIN_PHP+(memcache)  
------------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;描述：&lt;/p&gt;

&lt;p&gt;Ngix起负载均衡作用。&lt;/p&gt;

&lt;p&gt;Memcache起数据缓冲作用，当PHP从Memcache中读取数据发现Memcache没有，就从MYSQL里读并且存到Memcahe，查看Memcache玩家数据是否大于某个数(主要是限制内存，不能让Memcache内存无限增加最后导致奔溃)，当PHP需要更新和插入时，PHP先插入或更新到MYSQL，然后再插入或更新到Memcache，使得两边数据能够同步，抑或只插入或更新到MYSQL，在查询时再进行Memcache加载也可以。
Mysql和Memcache设置为多台，主要是用于当数据过大时的对数据库做的数据散列处理，就是将某块功能数据单独放在某个数据库上，抑或将主键以某种方式分段拆分，例如按每100万主键拆分Mysql,0-100万为1台Mysql,101-200万为另一台Mysql以此类推。&lt;/p&gt;

&lt;p&gt;关于PHP框架的改造，我们需要遵循框架的接口，这样我们才能对底层的框架进行改造并且不影响上层的逻辑。例如上面提到的当查询时，先对Memcache进行操作，查看是否有数据，如没有再对Mysql操作，这种写法的基本条件就是接口必须使用框架固有的，而不是直接写sql语句来执行，但凡只用使用sql语句的都需要被改成框架接口，并且尽量不使用合并操作和查询嵌套。&lt;/p&gt;

&lt;p&gt;关于数据统计，由于WEB没有逻辑线程，所以我使用Linux的任务或Windows的计划代替，每天执行一次某PHP脚本，每周执行一次某PHP脚本，以达到统计数据的要求。
这个框架是一般游戏服务器的架构，在即时上线时，因为前期人数并不多，服务器的台数可以自由调整，随着人数上线的增多可以动态得进行扩充GameServerPhp服务器的数量，Memcache服务器的数量，最后实在抗不住，也可以增加DB的数量。&lt;/p&gt;

&lt;p&gt;转载请注明出处：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D之AssetBundle资源加载封装</title>
   <link href="http://www.luzexi.com/2014/04/16/Unity3D%E4%B9%8BAssetBundle%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E5%B0%81%E8%A3%85.html"/>
   <updated>2014-04-16T21:07:53+08:00</updated>
   <id>http://www.luzexi.com/2014/04/16/Unity3D之AssetBundle资源加载封装</id>
   <content type="html">&lt;p&gt;Unity3D之AssetBundle资源加载封装。在《临兵斗者三国志》中我使用了U3D的AssetBundle资源动态加载机制，原因是某些画面资源太多，IO阻塞过慢会造成游戏奔溃。在开发过程中，遇到点问题:&lt;/p&gt;

&lt;p&gt;1.当资源更改变化时，如何能快速得反应到开发中。&lt;/p&gt;

&lt;p&gt;解决方案:&lt;/p&gt;

&lt;p&gt;我使用宏定义UNITY_EDITOR来判断是否是开发编辑状态。当处于开发编辑状态时，自动读取指定目录下U3D本身资源，而不使用AssetBundle。这样就达到了当prefb变化时能快速反应到开发编辑中。而当不是处于编辑状态时，则正常使用异步加载读取AssetBundle。这个方式唯一的毛病就是，必须让所有U3D程序员都非常清除明白，如果写错，编辑模式下会没问题，发布后会出问题，所以需要检查。&lt;/p&gt;

&lt;p&gt;2.当不同资源之间有重复的资源时如何将AssetBundle空间占有量最小化。&lt;/p&gt;

&lt;p&gt;解决方案:&lt;/p&gt;

&lt;p&gt;GUI资源之间有特别多的重复的问题，挑出几个重复得特别厉害的，比如ICON图集，公用图集。在打包期间把他们设为共享资源，并在加载时首先加载共享资源，这样既节省了AssetBundle空间占有量，也节省了内存。这个方式的毛病是当你将资源更改要打包某个资源时，需要将所有与共享有关的资源重新打包一遍。&lt;/p&gt;

&lt;p&gt;3.如何应对自动释放资源问题。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;解决方案:&lt;/p&gt;

&lt;p&gt;在游戏中有指定资源释放和自动释放所有AssetBundle资源以销毁内存(这里不是指销毁U3D内存，而是AssetBundle内存，U3D内存管理分图片内存，AssetBundle内存，编译程序)。销毁指定资源就按正常来没有争议。销毁所有资源就要有点措施了，因为有些资源是不能被销毁的，因为它们是共享资源，需要全程跟着游戏走，所以当自动销毁所有资源时，将共享资源排除在外。并且在销毁后调用Resources.UnloadUnusedAssets();和GC.Collect();&lt;/p&gt;

&lt;p&gt;4.打包AssetBundle方式。&lt;/p&gt;

&lt;p&gt;解决方案:&lt;/p&gt;

&lt;p&gt;打包AssetBundle方式有几种:1.单资源打包，也就是说一个.prefb或Texture打一个包。2.多个资源打包，将某些资源都打成一个AssetBundle，节省了几个资源包之间的共享资源也减小了多个AssetBundle引起的空间扩大问题。但并不是说所有项目都是多个资源打成一个AssetBundle是好的。《临兵斗者三国志》就是一大部分使用单一打包，而共享资源使用多个资源打成一个AssetBundle的方式。&lt;/p&gt;

&lt;p&gt;最后奉上本人对AssetBundle封装的源码。&lt;a href=&quot;https://github.com/luzexi/Unity3DGameResource&quot;&gt;https://github.com/luzexi/Unity3DGameResource&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;你也可以去我的&lt;a href=&quot;https://github.com/luzexi&quot;&gt;github&lt;/a&gt;上查看找我做的一些源码插件，如果喜欢的话可以star或者fllow。&lt;/p&gt;

&lt;p&gt;转发请注明出自：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3d优化之路</title>
   <link href="http://www.luzexi.com/2014/02/22/Unity3d%E4%BC%98%E5%8C%96%E4%B9%8B%E8%B7%AF.html"/>
   <updated>2014-02-22T19:43:01+08:00</updated>
   <id>http://www.luzexi.com/2014/02/22/Unity3d优化之路</id>
   <content type="html">&lt;p&gt;U3D的架构部分已经讲了很多了，这里我想讲讲对于U3D优化的亲身体验。从渲染优化，包体大小，再到内存，深入分析与解释如何进行游戏优化。&lt;/p&gt;

&lt;p&gt;优化之路分三块：&lt;/p&gt;

&lt;p&gt;一.渲染级别。&lt;/p&gt;

&lt;p&gt;GUI部分：我使用的是NGUI，它对动态移动、旋转、缩放GUI支持的是比较差的，所以我尽量不要把过多的移动旋转缩放的部分写在GUI中，但很多情况下是避免不了的，比如：大量的伤害数字，物品掉落，图标的移动和旋转等，为了不让GUI去控制这些渲染物体，一小部分我使用3D面片代替，而大部分使用程序去生成面片渲染脱离了GUI的控制。另外在那些静态的GUI中，我使用了静态物体优化的属性，加上排除不必要的GUI设置，使得GUI部分效率足够高。&lt;/p&gt;

&lt;p&gt;3D部分：&lt;/p&gt;

&lt;p&gt;1.特效是对画面效果最最有影响的部分，尽量少使用粒子或者将粒子的数量减少到最小。&lt;/p&gt;

&lt;p&gt;2.尽量减少灯光的使用，而使用烘培后的图来代替。但烘培贴图用多了内存就爆，所以还是要谨慎。&lt;/p&gt;

&lt;p&gt;3.使用静态批处理，将那些不动的物体设置为静态，以降低CPU。但unity说静态批处理会增加更多内存。这里也需要权衡。&lt;/p&gt;

&lt;p&gt;4.尽可能的将多个物体使用同一个材质球。这样可以有效降低drawcall。虽然在实际操作中比较困难，但还是需要做的。&lt;/p&gt;

&lt;p&gt;5.使用动态批处理。将多个不动的，使用相同材质球的物体合并mesh。这个更加有效得降低drawcall。&lt;/p&gt;

&lt;p&gt;6.尽量多的关闭的阴影渲染。这个会降低不少drawcall。减少对阴影的计算。&lt;/p&gt;

&lt;p&gt;2D部分：&lt;/p&gt;

&lt;p&gt;1.将同一页面或者同一类型的ui图合并成一个图集，减少渲染时的drawcall。&lt;/p&gt;

&lt;p&gt;2.将需要alpha和不需要alpha的图拆分开来做图集，不需要alpha的的图集可以大幅度的做压缩处理，因为这些图像压缩后看起来不会太糟糕。而有alpha的图集压缩会使得图像差别比较大。这样可以减少内存占用。&lt;/p&gt;

&lt;p&gt;3.在以上基础上，尽量将图集做压缩处理。只有那些需要高精度的图才不做压缩。这样做可以大幅度减少内存占用。&lt;/p&gt;

&lt;p&gt;二.减少占用空间大小。&lt;/p&gt;

&lt;p&gt;你可以参考这篇文章 &lt;a href=&quot;/unity3d/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2014/06/06/Unity3D%E4%B9%8B%E5%A6%82%E4%BD%95%E5%B0%86%E5%8C%85%E5%A4%A7%E5%B0%8F%E5%87%8F%E5%B0%91%E5%88%B0%E6%9E%81%E8%87%B4.html&quot;&gt;《Unity3D之如何将包大小减少到极致》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.我使用的是动态资源的加载方式WWW方式。所以在导出资源时我使用BuildAssetBundleOptions.DisableWriteTypeTree 的打包方式，减少包的大小。&lt;/p&gt;

&lt;p&gt;2.对每张Texture，都设置对图片进行压缩。&lt;/p&gt;

&lt;p&gt;3.让美术减少模型面片数，并在fbx模型设置中，设置对模型进行压缩&lt;/p&gt;

&lt;p&gt;4.让美术减少动画帧数，并在动画设置中，设置对动画进行压缩&lt;/p&gt;

&lt;p&gt;三.内存&lt;/p&gt;

&lt;p&gt;1.最基本的就是对需要的资源进行加载，使用完毕后，释放。&lt;/p&gt;

&lt;p&gt;2.GUI部分在GUIManager管理类中增加 对GUI进行定时检查的部分，对不展示的GUI资源进行释放。对于一些ui出现时的释放资源卡顿的问题，可以在ui出现后1秒再释放资源。其他策略可以自己想下，有效就好。&lt;/p&gt;

&lt;p&gt;3.因为有些时候一次性加载的资源过多，内存一下子会膨胀，IO过慢导致奔溃，所以我选择资源异步加载。使得加载这么多资源不那么可怕，并且平滑。&lt;/p&gt;

&lt;p&gt;4.内存释放：这里有个重点，我重点测试了一下内存释放的忽视点。在我们利用ngui,或者2dtoolkit进行gui编程时，在释放其gui节点时通常会忘记将gui引用置为null，这就导致了内存泄漏。一些不再使用的贴图或者实例数据仍然继续存留在内存中。对于是否有需要将这些gui变量置为null的说法，我还做了一个实验。&lt;/p&gt;

&lt;p&gt;首先将屏幕置空，没有任何多余内存，再将gui展示，接着隐藏gui销毁gameobject，先将所有引用变量置为null，然后再展示，再销毁，这次销毁，不将变量置为null。得出得内存结论就是，不将gui组件变量置为null的，贴图内存还会滞留。如下图：&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-355&quot; src=&quot;/assets/uploads/2014/02/48391BD3-BEAC-4E45-B6C4-17AA7B5B0428.png&quot; alt=&quot;48391BD3-BEAC-4E45-B6C4-17AA7B5B0428&quot; width=&quot;568&quot; height=&quot;211&quot; /&gt;&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;测试代码如下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;UnityEngine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Collections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;testgui&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tk2dSprite&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tk2dSprite&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tex1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tk2dSprite&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tex2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GameObject&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ROOT/MIDDLE_CENTER&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tk2dSprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GameObject1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ROOT/MIDDLE_CENTER&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tex1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tk2dSprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GameObject2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ROOT/MIDDLE_CENTER&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tex2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tk2dSprite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hiden1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnloadUnusedAssets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hiden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Destroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;root2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tex1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tex2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UnloadUnusedAssets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;请看红框内绿色曲线，第一次是置空的情况，内存立刻销毁，而第二次是不置空的情况，内存仍然驻留。结论很明显了，所以，在你编程时，将引用置空是件非常重要的事，这会直接影响到你的内存使用量。这也事c#垃圾回收机制引起的，当实例没有引用数量时内存才会被回收，并且彻底销毁。&lt;/p&gt;

&lt;p&gt;笔者最后提醒优化无极限，其实都在细节中，能省一点CPU是一点，能省一点内存是一点。你不打败99.5%的其他人，你就没有机会功成名就。&lt;/p&gt;

&lt;p&gt;转载请注明出处:http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D-HTTP网络层封装</title>
   <link href="http://www.luzexi.com/2014/02/15/Unity3D-HTTP%E7%BD%91%E7%BB%9C%E5%B1%82%E5%B0%81%E8%A3%85.html"/>
   <updated>2014-02-15T15:59:57+08:00</updated>
   <id>http://www.luzexi.com/2014/02/15/Unity3D-HTTP网络层封装</id>
   <content type="html">&lt;p&gt;Unity3D-HTTP网络层封装。短连接的C#封装在这里做些分享。我把网络层封装成DLL在项目中使用，所以在设计时要将接口封装的很好。 我又对HTTP部分进行了改造不再使用DDL封装了（所以去除文章部分暂时用横线做标记），所有源码都以git的submodule形式作为项目的模块。源码会再文章的最后给出来。这次改装主要是针对程序员是否能快速理解，快速上手的方面来进行的。随着对HTTP网络层不断的理解加深，我将给出更加全面的HTTP源码模块，我还对本HTTP模块写了测试案例，你们可以看测试案例，进行使用。谢谢各位的关注，再次感谢不断得支持。&lt;/p&gt;

&lt;p&gt;一.首先说下网络层需要的一些接口，在游戏里需要用到的网络层都具有大部分的共同点，无论是TCP长连接还是HTTP短连接有部分区别，HTTP的网络事件要相对少一点。&lt;/p&gt;

&lt;p&gt;HTTP接口基本为：数据发送Send接口，网络错误事件，数据包回调执行句柄。HTTP网络层的数据包预发送接口被我去除，因为我回想，这个功能完全可以用模块外部的程序代替，而且可以针对每个界面来写，这样更加清晰，而且主要是这个功能障碍了程序员对程序的理解。&lt;/p&gt;

&lt;p&gt;二.说明下网络层中几个类的用途和作用。 HTTPSession类，是整个网络层的主类，承载了发送，接受，事件相应的事务。&lt;/p&gt;

&lt;p&gt;HTTPPacketRequest类，网络请求数据包基础类。每个请求数据包的最基础的数据，包含一个m_strAction地址变量，这个是因为每个HTTP请求的地址不同而设的变量，每个请求地址前缀都相同比如：http://luzexi.com/ ，而后缀有可能变化，比如author/regist/。所以这个变量要在你创建的时候在构建函数里进行设置。&lt;/p&gt;

&lt;p&gt;HTTPPacketAck类，网络回调数据包基础类。每个回调数据包的基础数据，每个数据包都含有几个基础的变量，我现在写的是code错误码 和 desc错误描述，你也可以改成其他你想要的，如果你理解整这段程序。总之，继承这个回调数据类的类中可以放置本次回调的数据，有数据回调时，系统将自动解析成这个类。&lt;/p&gt;

&lt;p&gt;HTTPSession类，会话类是网络层的主类，有发送接口和网络主地址，还有一个报错接口。是整个HTTP网络层的接入口。&lt;/p&gt;

&lt;p&gt;HttpDummySession类，我还做了虚拟会话，主要是给HTTP和单机切换用，有些游戏想做网络和单机一起兼顾，可以用HTTP虚拟类来实现，不需要改原来写好的HTTP请求，只要你对加个请求句柄处理就可以了。不过一般人不会用到。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;三.网络层最重要的是能够快速，方便使用，能够适应变化多端的需求改变。&lt;/p&gt;

&lt;p&gt;每个请求类（HTTPPacketRequest子类）和回调类（HTTPPacketAck子类）都是自动生成参数和自动映射回调类实例的，但千万记住，回调过来的数据和HTTPPacketAck子类里的变量名必须一致。&lt;/p&gt;

&lt;p&gt;四.关于HTTP的Head数据部分&lt;/p&gt;

&lt;p&gt;HEAD部分我已经写好了，但是一个统一的HEAD变量，在session类中你可以找到。因为head部分都是统一的参数变量，动的比较少，所以才这么做。在游戏项目里，可以用HEAD部分的数据也可以不用，因为完全可以用数据包的形式代替。&lt;/p&gt;

&lt;p&gt;最后奉上源码：&lt;a href=&quot;https://github.com/luzexi/Unity3DNetwork-http&quot;&gt;Unity3D-HTTP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;测试案例：&lt;a href=&quot;https://github.com/luzexi/Unity3DNetwork-http-Test&quot;&gt;Unity3D-HTTP-Test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处:http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D AssetBundle 资源加载注意事项</title>
   <link href="http://www.luzexi.com/2014/02/15/Unity3D-AssetBundle-%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html"/>
   <updated>2014-02-15T14:47:57+08:00</updated>
   <id>http://www.luzexi.com/2014/02/15/Unity3D AssetBundle 资源加载注意事项</id>
   <content type="html">&lt;p&gt;Unity3D AssetBundle 资源加载注意事项.U3d资源打包以及加载出过很多问题，在这里把所有该注意的东西列出来分享下。&lt;/p&gt;

&lt;p&gt;1.由于Unity3D的自身的问题，在资源打包时会遗漏一些引用的资源，导致在游戏加载 AssetBundle 时没有问题，但在把资源实例化时出现资源找不到，或者资源缺少引用资源等问题。&lt;/p&gt;

&lt;p&gt;解决办法： 在打包获取资源时，分3个步骤做：1.创建空的临时的预置体Prefab 2.把要打包的资源实例化进场景 3.把实例化后的物体装进刚创建的空的预置体Prefab 4.最后再用该预置体打包成AssetBundle（注意多资源打包最好用BuildAssetBundleExplicitAssetNames接口，原先使用BuildAssetBundle出现过很多问题）&lt;/p&gt;

&lt;p&gt;2.WWW资源url加载AssetBundle时会遇到版本资源更新的问题。U3D自4.0后就不再有删除某缓存资源的接口，所以资源更新时遇到麻烦。&lt;/p&gt;

&lt;p&gt;解决办法： &lt;/p&gt;

&lt;del&gt;1.客户端记录由服务器发过来的MD5码，倘若与本地存储的MD5码不同则增加自动增加一个版本号。这个办法方便但会积累很多的旧的无用的资源占用手机，导致用户有可能因为游戏占用太多硬盘资源而删除游戏。 2.客户端记录由服务器发过来的CRC校验码，用CRC校验码来判定当前资源是否需要重新加载，调用接口为static function LoadFromCacheOrDownload(url: string, version: int, crc: uint = 0): WWW; 这个办法可以解决旧资源删除问题，但最主要的问题是资源在打包后由于U3D的资源CRC校验码并不是普通的校验码，所以只能根据他的接口来判定，4.2以及4.2以前都没有获取CRC校验码的接口，所以每次打包资源后，都需要校对校验码。如何校对CRC校验码请自己去搜索资料。&lt;/del&gt;

&lt;p&gt;2015-09-28: 我这里做一下修正，其实这个问题就是assetbundle版本更新解决方案。答案可以在这里找到&lt;a href=&quot;/unity3d/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2014/06/06/Unity3D%E4%B9%8B%E5%A6%82%E4%BD%95%E5%B0%86%E5%8C%85%E5%A4%A7%E5%B0%8F%E5%87%8F%E5%B0%91%E5%88%B0%E6%9E%81%E8%87%B4.html&quot;&gt;Unity3D之如何将包大小减少到极致&lt;/a&gt; &lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;3.如何知道哪些资源包需要加载以及加载地址和版本号。&lt;/p&gt;

&lt;del&gt;解决办法： 1.使用XML，将所有需要加载的资源信息写入XML文件。每次游戏开始，先读取该文件。 2.由服务器的逻辑服务器提供需要加载的资源信息。&lt;/del&gt;

&lt;p&gt;在那1年后的我写了一个关于资源更新的解决方案&lt;a href=&quot;https://github.com/luzexi/version_update&quot;&gt;https://github.com/luzexi/version_update&lt;/a&gt; 是一个用php写的脚本，将资源进行记录，每次生成版本，对比资源是否有被修改，或删除，或增加，有兴趣可以看看。&lt;/p&gt;

&lt;p&gt;转载请注明出处：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>游戏物品系统通用架构</title>
   <link href="http://www.luzexi.com/2013/12/31/%E6%B8%B8%E6%88%8F%E7%89%A9%E5%93%81%E7%B3%BB%E7%BB%9F%E9%80%9A%E7%94%A8%E6%9E%B6%E6%9E%84.html"/>
   <updated>2013-12-31T23:24:47+08:00</updated>
   <id>http://www.luzexi.com/2013/12/31/游戏物品系统通用架构</id>
   <content type="html">&lt;p&gt;游戏物品系统通用架构，物品系统是游戏中最最常用的功能之一，面对各种纷繁复杂的游戏物品系统，在具体项目中如何顺手拈来、驾驭自如？请容我一一到来。在内容前我有必要说明几点，所有内容都是基于我最大的架构思想之下，其中 客户端U3D架构思想的文章地址为 &lt;a href=&quot;/unity3d/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF//2013/10/29/Unity3D%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84.html&quot;&gt;Unity3D游戏架构&lt;/a&gt; ，以及服务器架构：&lt;a href=&quot;%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2013/08/24/%E7%8E%8B%E9%80%94%E9%9C%B8%E4%B8%9A-%E6%88%98%E4%BA%89%E7%AD%96%E7%95%A5%E6%B8%B8%E6%88%8F%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html&quot;&gt;《王图霸业》战争策略游戏服务器架构&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;直入主题&lt;/p&gt;

&lt;p&gt;首先，我们先归纳一下物品的基本属性。
    物品基本属性：名字，描述，数量，最大可叠加数，图标
    装备物品扩展属性：装备位置，攻击力，防御力，暴击率，魔力，血量，等等
    消耗物品扩展属性：BUFF增加，HP增加，最大HP增加，等等&lt;/p&gt;

&lt;p&gt;在游戏项目中，把这些物品的扩展属性，单个提取出来组合成各种游戏中需要的物品，如何做到？&lt;/p&gt;

&lt;p&gt;1.把所有属性都写进物品数据配置表中？数据表过大，导致最终项目人员更改数据缓慢，错误不断，甚至连写此系统的程序员自己也吃不消。&lt;/p&gt;

&lt;p&gt;2.把每个物品都按单各类进行特殊处理？假设物品有100种，那程序员就得写100各类实例，每增加一个写一个，浪费人力浪费时间。&lt;/p&gt;

&lt;p&gt;3.以物品基类的继承的形式，将各种物品分类处理，归类，派生？繁琐，分类时间过长，效率过低，程序员最终会为物品该归到哪一类和策划人员而打起来。&lt;/p&gt;

&lt;p&gt;如何才能做到物品系统适应不同的游戏需要，又能使得物品配置方便扩展性强？在这里我引入一个Action概念，Action以动作的概念来理解。当物品使用时，就调用不同的Action来达到不同的效果，例如：加血100加魔法200的物品，点击后，该物品执行加血100的Action实例，接着执行加魔200的实例，完毕后我们就能看到我们需要的效果了。所以物品只需要对应N各Action就可以完全做到你想做的，甚至可以做到你想不到的。&lt;/p&gt;

&lt;p&gt;我们能发现，其实物品的很多功能是可以用不同单个功能组合起来的，比如加血,比如加魔，比如加BUFF状态，把这些相同功能的Action都做成一个，然后把不同的Action做成一个集合是多么完美的事，既达到了数据持续化存储和更新能力，又可使得物品功能完全由策划人员自行配置，发挥他们的无限想象力。&lt;/p&gt;

&lt;p&gt;现在来看看实际中Action是如何编写的。把加血动作写成 类ActionAddHp，类中参数一个:HP，把加魔法动作写成 类ActionAddMP，类中参数一个：MP，这两个Action从数据表中读取相应的参数数据，变成众多Action实例里的一个，由ActionManager管理存储。到此回头看看，所有继承自Action类的扩展类拥有几个共同的属性：ID（唯一标识，用来区分所有Action），RunType（用来区分不同类型的Action），Read接口（用来读取数据），Excute接口（用来执行Action）。我在此之上加上一个Action类型，把所有Action拆分为条件类Action和执行类Action，条件类Action主要用来判断该物品的使用条件是否满足，执行类Action主要用来执行该动作的效果。因此Action基类就成了这样:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Collections.Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  

&lt;span class=&quot;c1&quot;&gt;//  CAction.cs  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  Author: Lu Zexi  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  2013-12-24    &lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//base action  &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CAction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAction&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_iID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//id  &lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// id (0-99999) , actionType(0-99) , runType(0-99)  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_iID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10000000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionError&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Excute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionInput&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  

    &lt;span class=&quot;c1&quot;&gt;//roll back action  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionError&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RollBack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionInput&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;c1&quot;&gt;//get id  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_iID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有人会问，那如何让物品对应好几个Action呢？我再引入一个Action事件类，把它定义为类EventAction，他里面存储着16个Action ID，前8个ActionID是条件型动作，后8个ActionID为执行型动作。物品的数据中就有一个EventAction的ID，由这个EventAction来判断该执行那些Action，是否满足物品执行条件。当EventAction执行时，首先执行前8个Action，看看是否满足物品执行条件，如果不满足，则不执行后8个效果，如果满足再去执行后8个Action效果。因此EventAction也有很多各实例，由ID来区分不同的EventAction，由EventActionManager来管理所有事件Action。EventAction类结构：&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Collections.Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  


&lt;span class=&quot;c1&quot;&gt;//  EventAction.cs  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  Author: Lu zexi  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  2013-12-24  &lt;/span&gt;



&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Action event  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;  &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventAction&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_iID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//ID  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vecActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Action ID list  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m_vecReqActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Require Action ID list  &lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EventAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vecActions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vecReqActions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;c1&quot;&gt;// id (0-99999) , actionType(0-99) , runType(0-99)  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EventAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_iID&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10000000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;c1&quot;&gt;//get id  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ID&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_iID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;c1&quot;&gt;//set action  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vecActions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;c1&quot;&gt;//set require  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetRequire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vecReqActions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;c1&quot;&gt;//excute action  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionError&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Excute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionInput&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vecActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;CAction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vecActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
                &lt;span class=&quot;n&quot;&gt;ActionError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Excute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACTION_ERROR_CODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;c1&quot;&gt;//action require  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionError&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionInput&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vecReqActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;CAction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vecReqActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
                &lt;span class=&quot;n&quot;&gt;ActionError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Excute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACTION_ERROR_CODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;c1&quot;&gt;//action roll back  &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionError&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RollBack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ActionInput&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vecActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;CAction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m_vecActions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
                &lt;span class=&quot;n&quot;&gt;ActionError&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RollBack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ACTION_ERROR_CODE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NONE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上描述解决了物品中消耗品的问题，物品素材本身就是没有功能的消耗品，在这里我就不介绍了。而下面，我们来看看如何解决物品装备。
装备物品在消耗品上多了几样关于英雄角色的属性，这些属性有的明，有的暗，那我们就把那些明的属性提取出来，例如加增攻击力，增加防御力。而那些暗的属性，再拆分两种，一种是直接写进明的配置表中而不显示在界面上，另一个是直接写进动作Action里，当需要时执行相应EventAction实例。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;最后，我们看看整个物品系统数据配置和系统源码。
物品类：名字，物品类型(消耗品，装备，素材)，描述，数量，最大叠加数量，使用等级,EventActionID,装备位置,攻击力，防御力，HP，MP
Action表: ID , 描述 , ActionType , RunType , 参数1，参数2...
EventAction表: ID,描述,
ReqActionID1,ReqActionID2,...ReqActionID8,
ActionID9,ActionID10,...ActionID16.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;源码：&lt;a href=&quot;https://github.com/luzexi/Unity3DItemSystem&quot;&gt;https://github.com/luzexi/Unity3DItemSystem&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;测试案例：&lt;a href=&quot;https://github.com/luzexi/Unity3DItemSystem-Test&quot;&gt;https://github.com/luzexi/Unity3DItemSystem-Test&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D-深入剖析NGUI的游戏UI架构</title>
   <link href="http://www.luzexi.com/2013/12/14/Unity3D-%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90NGUI%E7%9A%84%E6%B8%B8%E6%88%8FUI%E6%9E%B6%E6%9E%84.html"/>
   <updated>2013-12-14T13:00:54+08:00</updated>
   <id>http://www.luzexi.com/2013/12/14/Unity3D-深入剖析NGUI的游戏UI架构</id>
   <content type="html">&lt;p&gt;Unity3D-NGUI分析，使用NGUI做UI需要注意的几个要点在此我想罗列一下，对我在U3D上做UI的一些总结，最后解剖一下NGUI的源代码，它是如果架构和运作的。&lt;/p&gt;

&lt;p&gt;在此前我介绍了自己项目的架构方式，所以在NGUI的利用上也是同样的做法，UI逻辑的程序不被绑定在物体上。那么如何做到GUI输入消息的传递呢，答案是：我封装了一个关于NGUI输入消息的类，由于NGUI的输入消息传递方式是U3D中的SendMessage方式，所以在每个需要接入输入的物体上动态的绑定该封装脚本。在这个消息封装类中，加入消息传递的委托方法后，所有关于该物体的输入消息将通过封装类直接传递到方法上，再通过消息类型的识别就可以脱离传统脚本绑定的束缚了。&lt;/p&gt;

&lt;p&gt;在用NGUI制作UI时需要注意的几点：&lt;/p&gt;

&lt;p&gt;1.每个GUI以1各UIPanel为标准，过多的UIPanel首先会导致DrawCall的增多，其次是导致UI逻辑的混乱。&lt;/p&gt;

&lt;p&gt;2.UITexture不能使用的过于平凡，因为每个UITexture都会增加1各DrawCall，所以一般会作为背景图出现在UI上，小背景，大背景都可以。&lt;/p&gt;

&lt;p&gt;3.图集不宜过大，过大的图集，不要把很多个GUI都放在一个图集里，在UI显示时加载资源IO速度会非常慢。我尝试了各种方式来管理图集，例如每个GUI一个图集，大雨300*100宽度的图不做图集，抑或一个系统模块2个图集，甚至我有尝试过以整个游戏为单位划分公共图集，按钮图集，头像图集，问题图集，但这种方式最终以图集过大IO过慢而放弃，这些图集的管理方式都是应项目而适应的，并没有固定的方式，最主要是你怎么理解程序读取资源时的IO操作时间。&lt;/p&gt;

&lt;p&gt;4.在开发中，尽量用Free分辨率来测试项目的适配效果，不要到上线才发现适配问题。&lt;/p&gt;

&lt;p&gt;适配源码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultWHRate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;800f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;480f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScreenWHRate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isUseHResize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultWHRate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScreenWHRate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UIRoot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ROOT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUseHResize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curScreenH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultWHRate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hrate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curScreenH&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Screen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manualHeight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;480f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manualHeight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5.拆分以及固定各个锚点，上，左上，右上，中，左中，右中，下，左下，右下&lt;/p&gt;

&lt;p&gt;6.拆分GUI层级，层级越高，显示越靠前。层级的正确拆分能有效管理GUI的显示方式。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// GUI层级&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GUILAYER&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUI_BACKGROUND&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//背景层&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUI_MENU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;//菜单层0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUI_MENU1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;//菜单层1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUI_PANEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;//面板层&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUI_PANEL1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//面板1层&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUI_PANEL2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//面板2层&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUI_PANEL3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//面板3层&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUI_FULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;//满屏层&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUI_MESSAGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//消息层&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUI_MESSAGE1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//消息层&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUI_GUIDE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;//引导层&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GUI_LOADING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;//加载层&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;8.要充分的管理GUI，不然过多的GUI会导致内存加速增长，而每次都销毁不用的GUI则会让IO过于频繁降低运行速度。我的方法是找到两者间的中间态，给予隐藏的GUI一个缓冲带,当每次某各GUI进行隐藏时判断是否有需要销毁的GUI。或者也可以这么做，每时每刻去监控隐藏的GUI，哪些GUI内存时间驻留过长就销毁。关于内存优化问题，可以参考&lt;a href=&quot;/unity3d/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2014/05/21/Unity3D-Texture%E5%9B%BE%E7%89%87%E7%A9%BA%E9%97%B4%E5%92%8C%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E5%88%86%E6%9E%90.html&quot;&gt;《unity3d-texture图片空间和内存占用分析》&lt;/a&gt;和 &lt;a href=&quot;/unity3d/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2014/02/22/Unity3d%E4%BC%98%E5%8C%96%E4%B9%8B%E8%B7%AF.html&quot;&gt;《unity3d优化之路》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;9.另外关于图标，像头像，物品，数量过多的，可以用打成几个图集，按一定规则进行排列，减小文件大小减少一次性读取的IO时间。&lt;/p&gt;

&lt;p&gt;10.尽量减少不必要的UI更改，NGUI一旦有UI进行更改，它就得重新绘制MESH和贴图，比起cocos2d耗得CPU大的多。&lt;/p&gt;

&lt;p&gt;11.如果可以不用动态字体就不要用动态字体，因为动态字体每次都会做IO操作读取相应的图片，这个是NGUI一个问题，费cpu，费内存。&lt;/p&gt;

&lt;p&gt;12.设置脚本执行次序，在U3D的Project setting-&amp;gt;Script Execution Order 中。由于NGUI以UIPanel为主要渲染入口，所以，所有关于游戏渲染处理的程序最好放在渲染之后，也就是UIPanel之后。UIPanel以LateUpdate为接口入口，所以关于渲染方面的程序还得斟酌是否方在LateUpdate里。&lt;/p&gt;

&lt;p&gt;13.NGUI对于动态的移动旋转等的UI操作支持性很差，当有这种操作过多的时候，会使得屏幕很卡。解决办法就是，自己用程序生成面片，面片的渲染不再受到NGUI的控制。&lt;/p&gt;

&lt;p&gt;以上是我能想起来的注意点，若有没想起来的，在以后的时间想到的也将补充进去。口无遮拦的说了这么多，不剖析一下源码怎么说的过去，之前对NGUI输入消息进行了封装，对2D动画序列帧进行了封装，却一直没能完整剖析它的底层源码，着实遗憾。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;NGUI中UIPanel是渲染的关键，他承载了在他下面的子物体的所有渲染工作，每个渲染元素都是由UIWidget继承而来，每个UI物体的渲染都是由面片、材质球、UV点组成，每个种材质由一个UIDrawCall完成渲染工作，UIDrawCall中自己创建Mesh和MeshRender来进行统一的渲染工作。这些都是对NGUI底层的简单的介绍，下面将进行更加细致的分析。&lt;/p&gt;

&lt;p&gt;首先我们来看UIWidget这个组件基类，从它拥有的类内部变量就能知道它承担得怎样的责任:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Cached and saved values&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[HideInInspector]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerializeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Material&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//材质&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[HideInInspector]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerializeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Texture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//贴图&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[HideInInspector]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerializeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//颜色&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[HideInInspector]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerializeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pivot&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPivot&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//对齐位置&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[HideInInspector]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerializeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mDepth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//深度&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Transform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTrans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//坐标转换&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIPanel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPanel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//相应的UIPanel&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//是否更改&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mPlayMode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//模式&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mDiffPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//位置差异&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Quaternion&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mDiffRot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//旋转差异&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mDiffScale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//缩放差异&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mVisibleFlag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//可见标志&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Widget&amp;#39;s generated geometry&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UIGeometry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mGeom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIGeometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//多变形实例&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;UIWidget承担了存储显示内容，颜色调配，显示深度，显示位置，显示大小，显示角度，显示的多边形形状，归属哪个UIPanel。这就是UIWidget所要承担的内容，在UIWidget的所有子类中都具有以上相同的属性和任务。UIWidget和UIPanel的关系非常密切，因为UIPanel承担了UIWidget的所有渲染工作，而UIWidget只是承担了存储需要渲染数据。所以，在UIWidget在更换贴图，材质球，甚至更换UIPanel父节点时它会及时通知UIPanel说：&amp;quot;我更变配置了，你得重新获取我的渲染数据&amp;quot;。&lt;/p&gt;

&lt;p&gt;UIWidget中最重要的虚方法为 virtual public void OnFill(BetterList&lt;Vector3&gt; verts, BetterList&lt;Vector2&gt; uvs, BetterList&lt;Color32&gt; cols) { } 它是区分子类的显示内容的重要方法。它的工作就是填写如何显示，显示什么。&lt;/p&gt;

&lt;p&gt;UIWidget中在使用OnFill方法的重要的方法是 更新渲染多边型方法：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UpdateGeometry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix4x4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;worldToPanel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMoved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateNormals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;material&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mGeom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OnFill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mGeom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mGeom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uvs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mGeom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mGeom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasVertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivotOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;relativeSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;mGeom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplyOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mGeom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplyTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worldToPanel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cachedTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localToWorldMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateNormals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mGeom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasVertices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parentMoved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mGeom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplyTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worldToPanel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cachedTransform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localToWorldMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateNormals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;它的作用就是，当需要重新组织多边型展示内容时，进行多边型的重新规划。&lt;/p&gt;

&lt;p&gt;接着，我们来看看UINode，这个类很容易被人忽视，而他的作用也很重要。它是在UIPanel被告知有新的UIWidget显示元素时被创建的，它的创建主要是为了监视被创建的UIWidget的位置，旋转，大小是否被更改，若被更改，将由UIPanel进行重新的渲染工作。
HasChanged这是UINode唯一重要的方法之一，它的作用就是被UIPanel用来监视每个元素是否改变了进而进行重新渲染。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HasChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#if UNITY_3 || UNITY_4_0&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isActive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NGUITools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mGo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastActive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isActive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isActive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastPos&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localPosition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lastRot&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localRotation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;lastScale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localScale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lastActive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lastPos&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lastRot&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localRotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lastScale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localScale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finalAlpha&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mLastAlpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mLastAlpha&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finalAlpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;trans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接着，来看UIDrawCall，它是被NGUI隐藏起来的类。他的内部变量来看看：&lt;/p&gt;

&lt;p&gt;Transform        mTrans;            //坐标转换类&lt;/p&gt;

&lt;p&gt;Material        mSharedMat;        // 渲染材质&lt;/p&gt;

&lt;p&gt;Mesh            mMesh0;            //首个MESH&lt;/p&gt;

&lt;p&gt;Mesh            mMesh1;            //用于更换的Mesh&lt;/p&gt;

&lt;p&gt;MeshFilter        mFilter;        //绘制的MeshFilter&lt;/p&gt;

&lt;p&gt;MeshRenderer    mRen;            //渲染MeshRender组件&lt;/p&gt;

&lt;p&gt;Clipping        mClipping;        //裁剪类型&lt;/p&gt;

&lt;p&gt;Vector4            mClipRange;        //裁剪范围&lt;/p&gt;

&lt;p&gt;Vector2            mClipSoft;        //裁剪缓冲方位&lt;/p&gt;

&lt;p&gt;Material        mMat;            //实例化材质&lt;/p&gt;

&lt;p&gt;int[]            mIndices;        //做为Mesh三角型索引点&lt;/p&gt;

&lt;p&gt;由这些内部变量可知，UIDrawCall是负责NGUI的最重要的渲染类。他制造Mesh制造Material，设置裁剪范围，为NGUI提供渲染底层。
他最重要的方法是：&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BetterList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BetterList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BetterList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BetterList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BetterList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Safety check to ensure we get valid values&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Cache all components&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mFilter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mFilter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MeshFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mFilter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mFilter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MeshFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mRen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mRen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MeshRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mRen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mRen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gameObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MeshRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
      &lt;span class=&quot;cp&quot;&gt;#if UNITY_EDITOR&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mRen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enabled&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;UpdateMaterials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mMat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainTexture&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mSharedMat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;UpdateMaterials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;65000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexCount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rebuildIndices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mIndices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mIndices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Populate the index buffer&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rebuildIndices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// It takes 6 indices to draw a quad of 4 vertices&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mIndices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;mIndices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;mIndices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;mIndices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

          &lt;span class=&quot;n&quot;&gt;mIndices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;mIndices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;mIndices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Set the mesh values&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Mesh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetMesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rebuildIndices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vertices&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norms&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normals&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;norms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tans&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tangents&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uvs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;colors32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rebuildIndices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triangles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mIndices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RecalculateBounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Too many vertices on one panel: &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mFilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;UIWidgets must fill the buffer with 4 vertices per quad. Found &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个方法里，它制造Mesh,MeshFilter,MeshRender,Materials。&lt;/p&gt;

&lt;p&gt;最后，我们来说说最重要的UI渲染入口UIPanel。
    UIPanel的渲染步骤：
    1.当有任何形式的UI组件启动渲染时加入UIPanel的渲染队列，当有新的渲染组件需要有新的UIDrawCall时，进行生成新的UIDrawCall.
    2.对所有UIPanel的渲染队列进行检查，是否队列中渲染组件需要重新渲染，包括位移，缩放，更改图片，启用，关闭.
    3.获取渲染组件对应的UIDrawCall，更新Mesh,贴图,UV，位置，大小
    4.对需要更新的UIDrawCall进行重新渲染
    5.最后标记已经渲染的渲染组件，告诉他们已经渲染，为下次判断更新做好准备。删除不再需要渲染的UIDrawCall，销毁渲染冗余。
    注意：所有的渲染都是在LateUpdate下进行，也就是它是进行的延迟渲染。&lt;/p&gt;

&lt;p&gt;接口源码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LateUpdate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Only the very first panel should be doing the update logic&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Update all panels&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;UIPanel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mUpdateTime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UpdateTransformMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UpdateLayers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UpdateWidgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Fill the draw calls for all of the changed materials&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mFullRebuild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;UIWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompareFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDrawCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UIDrawCall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDrawCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isDirty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DestroyDrawCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Update the clipping rects&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UIPanel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UpdateDrawcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mFullRebuild&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fill()接口源码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Fill the geometry fully, processing all widgets and re-creating all draw calls.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Fill&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIDrawCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DestroyDrawCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIDrawCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;UIPanel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Material&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;UIDrawCall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UIWidget&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;UIWidget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoveAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isVisible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasVertices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mVerts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;pan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SubmitDrawCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;pan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetDrawCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drawCall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generateNormals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteToBuffers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mVerts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mUvs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mNorms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTans&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WriteToBuffers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mVerts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mUvs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drawCall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mVerts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SubmitDrawCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;转载请注明出处：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D游戏架构</title>
   <link href="http://www.luzexi.com/2013/10/29/Unity3D%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84.html"/>
   <updated>2013-10-29T15:32:51+08:00</updated>
   <id>http://www.luzexi.com/2013/10/29/Unity3D游戏架构</id>
   <content type="html">&lt;p&gt;Unity3D虽然是一款3D的引擎，但由于一部分开发者提供了GUI的插件，所以它也是可以用来开发2D游戏的，但我还需要改造一下。《王途霸业》就是完完全全在U3D上架构起来的2D游戏，在去年年底前完成这款游戏的架构底层后，开发速度直线上升，这也同样证明了我的这套架构的可行性。下面我将介绍如何用U3D和GUI插件架构一套2D游戏。&lt;/p&gt;

&lt;p&gt;《王途霸业》U3D项目中有个最大的特点就是不再有纷繁复杂的脚本绑定，整个游戏逻辑不再依赖众多的 MonoBehaviour ，所有GUI不存在脚本绑定一说。我这样做最主要的原因是要将美术，策划，程序的工作完全拆分开来，美术看不到程序，程序不需要管美术，策划更是不需要去顾及那些纷繁复杂的美术和程序专业技术。这样做最直接提升了游戏项目开发效率，用一句话代表这种架构意图：各顾各的，却能成事。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;文章停在这里，我一时不知道如何表达这种架构，因为我想说的东西太多，介于我的书面表达能力，能清晰的表达清楚这种架构不太可能。那我就讲最最最重要的部分，我的心理想法和架构思路。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一.&lt;strong&gt;架构必须符合安全性&lt;/strong&gt;。关于项目安全性，很多人第一时间都会跟我说&amp;#39;在项目还没成型前，安全性并不重要&amp;#39;。确实当项目没有可看到的东西的情况下，这些所谓的资源都是没有价值的。但当项目看到有价值的时候，你再去做安全性还来得及吗，我能非常确认的说，那时你根本来不及做安全性的问题，即使你确实非常想推动这事，也会极其缓慢，而且在所有人眼里吃力不讨好，因为程序架构本身就决定了安全性的问题。C++项目里这问题并不十分严重，因为他不属于脚本语言，而U3D不同的是它全篇都是脚本。&lt;/p&gt;

&lt;p&gt;二.&lt;strong&gt;分离美术与程序的工作&lt;/strong&gt;。本架构的第一思想就是分离部门之间的工作。美术和程序之间有不可分割的交点，但项目必须保证程序不用去做美术的工作，不用去担心美术的问题，美术也不需要获得程序的工作内容，更不需要美术去学习程序。这最大限度保证了部门之间合作效率，也是我一直提倡的架构意图：各顾各的，却能成事。&lt;/p&gt;

&lt;p&gt;三.&lt;strong&gt;消除程序员代码上的交点&lt;/strong&gt;。架构本身就是解决程序员与程序员之间的问题。&amp;quot;为什么要把解决程序员与程序员的事做为重点问题?&amp;quot;：游戏项目的进度，技术起了主导作用，程序员的工作效率直接决定了整个项目的速度，所以如何让程序员保持良好的效率也就成为了项目程序架构需要解决和考虑的范畴之一了。程序员之间在编写代码的时候，都会有这样那样的交点，有些交点是不应该被其他人修改的或删除的，这些错综复杂的交点会使得整个项目随着时间的推进越来越混乱的局面，致使项目后期进度缓慢效率低下，优秀的程序架构本身就提前考虑了交点问题，将交点以拆分，消除，或合并成组件等形式融入到整体设计当中。如果一个人就能搞定整套程序那也用不着这么多架构思想了，怎么写都是一个人在工作，他可以用无数种方式来编写自己的程序。但事实并非如此，毕竟人脑是有极限的，再牛的人也抗不住错综复杂的逻辑关系和单调的重复劳动。一个优秀的架构能够支撑整个程序团队快速高效并且持续地往前推进，每个人都心情舒畅，工作愉快，富有激情，何乐而不为呢。&lt;/p&gt;

&lt;p&gt;四.&lt;strong&gt;分层结构设计全面可扩展&lt;/strong&gt;。架构最重要的部分之一就是能够适应变化不断的项目需求，优秀的架构能够尽量减少当需求变化而引起的程序上的修改或删除而引起的整体架构更改。项目的需求变化并不是由我们可以控制，在不断变化的情况下，甚至是当程序员已经适应当前架构的情况下，架构这块基石仍是稳如泰山。我在架构设计时最看重分层设计，每一层都有统一的意图，且只可被上一层调用，必要时以动态库形式存在。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;架构思想就谈到这里，接下来讲如何将这些架构思想融入到实际的Uniyt3D项目当中去。&lt;/p&gt;

&lt;p&gt;一.&lt;strong&gt;SVN与AssetServer结合控制版本&lt;/strong&gt;。这是分离美术与程序的第一步，也是保证安全性的重要手段。SVN更适合做代码版本控制，而AssetServer更适合做U3D的资源版本控制，两者相结合能够让项目管理更加出彩。&lt;/p&gt;

&lt;p&gt;二.&lt;strong&gt;整个架构只有一个入口点&lt;/strong&gt;。《王途霸业》中用只有GameClient类继承了MonoBehaviour，它也不再被其他类继承。它就是唯一一个入口点。各大系统，各大模块的初始化，逻辑更新，销毁，调用，都需要它的直接或者间接的调用。这就是为什么其他需要用到MonoBehaviour特性的程序不需要继承MonoBehaviour的原因。这是分离美术与程序的第二步，程序员不需要再去管理纷繁复杂的物体绑定脚本。&lt;/p&gt;

&lt;p&gt;三.&lt;strong&gt;动态资源生成与管理&lt;/strong&gt;。每个显示实例都由各系统独立承担生成，更新，销毁的管理，例如《王途霸业》中的GUI系统，每个GUI在展示时才进行资源生成，在隐藏时判断资源是否需要销毁，这不仅解决的动态资源控制问题也解决了内存控制问题。每个程序员只需要关注自己正在编写的GUI界面，而不需要估计其他GUI的资源问题。这是消除程序员交点的一个方式，也是分离美术与程序的工作。&lt;/p&gt;

&lt;p&gt;四.&lt;strong&gt;独立模块以DLL形式存在&lt;/strong&gt;。《王途霸业》中以DLL形式存在的独立模块有，2D动画系统模块、人物运动控制模块、基础模块、网络通信模块，GUI通用层模块。将《王途霸业》游戏分割为，网络层，基础层，专业领域层，数据层，安卓第三方SDK接口层，渲染层，工具层。渲染层又分为GUI层，动画层。做这些的层级的划分主要是为了能够架构成MVC模式。以MVC形式呈现的分层架构是一种效率比较高的架构，我在架构时尽量向此种架构靠拢，所以在项目后期确保了项目的安全性，也保证了程序部工作效率，架构越是到后期，发挥的作用越大。正所谓&amp;quot;人不可貌相，架构不可斗量&amp;quot;，架构的威力就是体现在更加宏观的层面上。&lt;/p&gt;

&lt;p&gt;五.&lt;strong&gt;尽量编写方便的工具&lt;/strong&gt;。游戏架构不仅需要游戏主逻辑本身的规范，还需要这些周边工具的支撑，有了这些工具能让项目进度快速提升，加上优秀的架构思想，项目完工指日可待。&lt;/p&gt;

&lt;p&gt;文笔过烂，持续更新中----往各位见谅。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;2013051412202849588237.gif&quot; class=&quot;alignnone size-full wp-image-48&quot; height=&quot;480&quot; src=&quot;/assets/uploads/2013/08/2013051412202849588237.gif.jpg&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>游戏服务端优化</title>
   <link href="http://www.luzexi.com/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2013/10/22/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BC%98%E5%8C%96.html"/>
   <updated>2013-10-22T13:42:14+08:00</updated>
   <id>http://www.luzexi.com/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2013/10/22/游戏服务端优化</id>
   <content type="html">&lt;p&gt;完成《王途霸业》后，慢慢地开始整理客户端，服务端的架构思路和优化思路。虽然1年来项目工作非常累，但我还是不想放弃这个整理资料，梳理知识的绝佳机会。废话不多说，直接开始游戏服务端优化思路。&lt;/p&gt;

&lt;p&gt;1.整体架构决定承载量。想要完全突破游戏用户承载量，你必须尽快即使调整自己服务器的架构，这个非常不容易，特别是在项目开发后期，在过多的代码积累的情况下，你很难对当前的架构进行调整。基本上，当时的情况都是，不动则已，一动一发不可收拾。架构调整主要是为了分担服务器的 游戏逻辑处理，数据存储，第三方接口处理。&lt;/p&gt;

&lt;p&gt;2.用户集中短时间使用的优化。比如帐号登录，帐号修改，角色获取，角色选择，角色创建等，在一个相对比较短的时间里完成的东西，又有可能会借助第三放接口的，需要进行统一管理和拆分，在用户量扩大时可以使用扩充服务器来对承载量扩充。一句话来表明：对于这种时间较短，用户会集中冲击承载量的，把它做成能扩充服务器就可以达到效果的架构，这种架构只要花钱就能解决。但凡能走上只要花钱就能解决承载量的架构，一定没有问题。&lt;/p&gt;

&lt;p&gt;3.大量用户集中使用同一功能的优化。《王途霸业》的挂机系统就遇到这样的情况，大部分玩家都会使用这个功能，而且这是机器与机器的交互，大部分玩家都会在长时间里使用这个功能。当大量用户时，这个挂机战斗功能，对数据存储服务器的SQL语句执行冲击很大，类似的情况还有很多。像这样的功能呢，就需要我们进一步优化，不但是优化逻辑处理，还要优化数据存储方式，不可以加大了逻辑服务器的承载，却忽视了数据服务器的承载。优化方法很多，比如当前功能不存储数据，只在玩家下线时操作数据存储更新，还有数据差异化存储，当数据有变化才进行储存更新，去除了很多不必要的存储SQL执行时间。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;4.HTTP与TCP结合的优化。《王途霸业》一开始尝试过只使用TCP长连接的架构方式，但最终以不方便，不好用的试用结果落败。TCP与WEB的HTTP结合的方式优化架构是个非常好的方式。首先WEB的HTTP本身就是个大众化稳定的架构体系，它在帐号管理，数据记录，需求变化的适应力等方面都有非常好的表现。其实就是人们口中所有的短连接和长连接的结合。《王途霸业》使用HTTP方式做了帐号认证系统是为了所有服务器的帐号获取方式，又用HTTP方式做了服务器列表，全服公告，网关轮询等做为中心服务器，这个中心服务器还配备了后台管理界面，让运营人员非常舒服，最后还用HTTP方式为《王途霸业》的数据统计做了一个统计管理的WEB后台管理，让市场人员能清晰得看到整个游戏数据的起伏变化情况。&lt;/p&gt;

&lt;p&gt;5.循环驱动更改为事件驱动。很多时候我们服务器里会有一些需要用逻辑帧循环来做的事情，《王途霸业》中就有很多，比如建筑时间完成判断，常胜峰战斗奖励判断，玩家当前资源量计算，盘丝洞挂机计算，这些程序逻辑倘若都用服务器的主逻辑帧来做，那将是个非常损耗CPU的事情，并且它还会影响到DB存储服务器的效率。这时候我们就要好好利用事件驱动，在玩家下线时，上线时，玩家获取信息时，更或者在玩家退出某个场景时，进行操作。这样不仅省去了主逻辑帧的循环CPU损耗，更让DB服务器有了更多的力量去处理更重要的事，大大提高了整个游戏服务器的承载量。&lt;/p&gt;

&lt;p&gt;PS:一点点小分享，大神切莫嘲笑。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unity3D架构设计NavMesh寻路</title>
   <link href="http://www.luzexi.com/2013/10/06/Unity3D%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1NavMesh%E5%AF%BB%E8%B7%AF.html"/>
   <updated>2013-10-06T18:04:28+08:00</updated>
   <id>http://www.luzexi.com/2013/10/06/Unity3D架构设计NavMesh寻路</id>
   <content type="html">&lt;p&gt;国庆闲来没事把NavMesh巩固一下。以Unity3D引擎为例写一个底层c# NavMesh寻路。因为Unity3D中本身自带的NavMesh寻路不能很好的融入到游戏项目当中，所以重写一个NavMesh寻路是个必经之路。NavMesh在很多游戏中应用广泛，不同种类的框架下NavMesh寻路发挥的淋漓尽致。与传统的A星寻路相比，NavMesh不仅减少了内存空间占有量，加快了寻路速度，还可以加入寻路角色的宽高限制，以及动态物体寻路等功能，基本上适应了大部分项目变化多端的需求。&lt;/p&gt;

&lt;p&gt;我把写NavMesh的过程分成好几个部分，一一进行描述：&lt;/p&gt;

&lt;p&gt;一.首先要理解NavMesh核心算法。NavMesh的核心算法就是用三角形代替传统寻路的方格，用计算拐点优化寻路路径来代替合并路径直线。
如下图1NavMesh寻路:
&lt;img class=&quot;alignnone wp-image-91 size-full&quot; src=&quot;/assets/uploads/2013/10/2303121.jpg&quot; alt=&quot;&quot; width=&quot;479&quot; height=&quot;312&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以及如下图2传统的方格寻路:
&lt;img class=&quot;alignnone wp-image-94 size-full&quot; src=&quot;/assets/uploads/2013/10/20131006173445.jpg&quot; alt=&quot;&quot; width=&quot;621&quot; height=&quot;568&quot; /&gt;&lt;/p&gt;

&lt;p&gt;看到两者的差别了吧，NavMesh已三角形为寻路块，而传统以方格为寻路块。其实两者都使用A*寻路，但就是其网格生成不一样，导致当有大范围寻路时，其效率和要求也不一样。&lt;/p&gt;

&lt;p&gt;二.NavMesh寻路中的路径优化之拐点计算。其实NavMesh中比较常用的是&lt;strong&gt;光照射线法，&lt;/strong&gt;但这里不做详细介绍，光照射浅法详细内容地址:&lt;a href=&quot;http://www.cnblogs.com/neoragex2002/archive/2007/09/09/887556.html&quot;&gt;http://www.cnblogs.com/neoragex2002/archive/2007/09/09/887556.html&lt;/a&gt;
拐点计算优化路径就是到达目的地需要经过的一堆三角形中计算出最简洁的移动方式。其核心算法就是从当前点到另一个三角形中的点之间的线段，与这条线段相交的线段全部是路径所穿越的线段，就是拐点，把所有的拐点找出来，并得到一条最长的拐点，那个拐点就是最佳的拐点位置。&lt;/p&gt;

&lt;p&gt;三.NavMesh类设计详解(这里只设计2D的寻路，对于3D方向的寻路，其实是可以2D寻路代替的)：&lt;/p&gt;

&lt;p&gt;1.所有类都在同一的命名空间NavMesh内 namespace NavMesh
Triangle 三角形基础类
NavTriangle 寻路三角形类 (继承Triangle)
Line2D 线段类
Polygon 多边形类
Seeker 寻路主算法类&lt;/p&gt;

&lt;p&gt;----------------------------------------- 让大家久等了 ------------------------------------&lt;/p&gt;

&lt;p&gt;在寻路前，我们需要建立MESH三角形网格，这是NAV_MESH的重点之一。&lt;/p&gt;

&lt;p&gt;1.首先我们先要画出一个范围来确定我们的可行走范围。&lt;/p&gt;

&lt;p&gt;2.再在可行走范围中去添加不可行走的范围。&lt;/p&gt;

&lt;p&gt;3.我们用多个多边形Polygon代替以上的范围，也就是说，一个大的可行走Polygon内包含了若干个小的不可行走的Polygon。&lt;/p&gt;

&lt;p&gt;这是生成MESH前我们需要知道的生成范围，然后再由这些多边形的各个顶点来生成三角形网格,三角形网格的生成算法如下：&lt;/p&gt;

&lt;p&gt;Step 1 :  用可行走Polygon的任意一条边作为起点，将其推入堆栈列表。到Step2.&lt;/p&gt;

&lt;p&gt;Step 2:  从堆栈中推出一条边，在所有三角形中计算出边的DT点，构成约束Delaunay三角形，到Step3。如果没有DT点就重复做Step2，直到堆栈为空就结束整个程序。&lt;/p&gt;

&lt;p&gt;Step 3:  将所构成的三角形，另两边做如下处理：检查堆栈中是否已存在，如果存在就删除该边，如果不存在就加入到堆栈中。&lt;/p&gt;

&lt;p&gt;生成mesh后如图：（绿色的为多边形边框，蓝色的为寻路路径，红色的为编辑器选中的多边形）
&lt;img class=&quot;alignnone size-full wp-image-376&quot; src=&quot;/assets/uploads/2013/10/OD04RIKAWEMUTM_3MSBQ.jpg&quot; alt=&quot;OD04[RIKAWEMUTM_3MS}B$Q&quot; width=&quot;475&quot; height=&quot;312&quot; /&gt;&lt;/p&gt;

&lt;p&gt;核心源码为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// 创建导航网格&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// 所有阻挡区域&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// 输出的导航网格&amp;lt;/param&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NavResCode&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateNavMesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Polygon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polyAll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groupid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Triangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;triAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Line2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allLines&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Line2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//线段堆栈&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//Step1 保存顶点和边&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;NavResCode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initRes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InitData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polyAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initRes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NavResCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastNeighborId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Triangle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastTri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;//Step2.遍历边界边作为起点&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Line2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sEdge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startEdge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;allLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sEdge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Line2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;//Step3.选出计算出边的DT点，构成约束Delaunay三角形&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;allLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isFindDt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindDT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFindDt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Line2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lAD&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Line2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStartPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Line2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lDB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Line2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dtPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetEndPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

                    &lt;span class=&quot;c1&quot;&gt;//创建三角形&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Triangle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delaunayTri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Triangle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStartPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetEndPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groupid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// 保存邻居节点&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// if (lastNeighborId != -1)&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// {&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// delaunayTri.SetNeighbor(lastNeighborId);&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// if(lastTri != null)&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// lastTri.SetNeighbor(delaunayTri.ID);&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;// }&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;//save result triangle&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;triAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delaunayTri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                    &lt;span class=&quot;c1&quot;&gt;// 保存上一次的id和三角形&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;lastNeighborId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delaunayTri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;lastTri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delaunayTri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;//Step4.检测刚创建的的线段ad,db；如果如果它们不是约束边&lt;/span&gt;
                    &lt;span class=&quot;c1&quot;&gt;//并且在线段堆栈中，则将其删除，如果不在其中，那么将其放入&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Line2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CheckLineIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allEdges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Line2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CheckLineIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;allLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lAD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;allLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoveAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lineIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Line2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CheckLineIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allEdges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Line2D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CheckLineIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lineIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;allLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lDB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;allLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RemoveAt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lineIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;c1&quot;&gt;//Step5.如果堆栈不为空，则转到第Step3.否则结束循环&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allLines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// 计算邻接边和每边中点距离&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Triangle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//// 计算每个三角形每边中点距离&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//tri.calcWallDistance();&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// 计算邻居边&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Triangle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triNext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isNeighbor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;tri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SetNeighbor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NavResCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;这里对如何计算DT点进行一个说明：&lt;/p&gt;

&lt;p&gt;Step1. 构造三角形的外接圆，以及外接圆的包围盒&lt;/p&gt;

&lt;p&gt;Step2. 依次访问网格包围盒内的每个网格单元：&lt;/p&gt;

&lt;p&gt;若某个网格单元中存在可见点 p, 并且 &amp;ang;p1pp2 &amp;gt; &amp;ang;p1p3p2，则令 p3=p，转Step1；&lt;/p&gt;

&lt;p&gt;否则，转Step3.&lt;/p&gt;

&lt;p&gt;Step3. 若当前网格包围盒内所有网格单元都已被处理完,也即C（p1，p2，p3）内无可见点，则 p3 为的 p1p2 的 DT 点.&lt;/p&gt;

&lt;p&gt;核心源码为：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c#&quot; data-lang=&quot;c#&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// 找到指定边的约束边DT&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;param name=&amp;quot;line&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindDT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Line2D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dtPoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStartPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetEndPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visiblePnts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allPoints&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsPointVisibleOfLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;visiblePnts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;visiblePnts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bContinue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dtPoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visiblePnts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;bContinue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Step1.构造三角形的外接圆，以及外接圆的包围盒&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NMath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CreateCircle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Rect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boundBox&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NMath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCircleBoundBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//Step2. 依次访问网格包围盒内的每个网格单元：&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//若某个网格单元中存在可见点 p, 并且 &amp;amp;ang;p1pp2 &amp;gt; &amp;amp;ang;p1p3p2，则令 p3=p，转Step1；&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//否则，转Step3.&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;angOld&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NMath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LineRadian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vector2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pnt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;visiblePnts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pnt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pnt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pnt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;boundBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;angNew&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NMath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LineRadian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angNew&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;angOld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dtPoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;bContinue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//false 转Step3&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bContinue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//Step3. 若当前网格包围盒内所有网格单元都已被处理完，&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 也即C（p1，p2，p3）内无可见点，则 p3 为的 p1p2 的 DT 点&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;为了让各位能更容易读懂此文，此文仍会继续补充。&lt;/p&gt;

&lt;p&gt;现在我将所有源码都存放在了Github上，请各位跟随我到Github去取源码：&lt;a href=&quot;https://github.com/luzexi/Unity3DNavMesh&quot;&gt;https://github.com/luzexi/Unity3DNavMesh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处：http://www.luzexi.com&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>赌博游戏程序设计中如何运用数学概率论</title>
   <link href="http://www.luzexi.com/%E6%B8%B8%E6%88%8F%E9%80%9A%E7%94%A8%E6%A8%A1%E5%9D%97/2013/09/04/%E8%B5%8C%E5%8D%9A%E6%B8%B8%E6%88%8F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E5%A6%82%E4%BD%95%E8%BF%90%E7%94%A8%E6%95%B0%E5%AD%A6%E6%A6%82%E7%8E%87%E8%AE%BA.html"/>
   <updated>2013-09-04T21:07:10+08:00</updated>
   <id>http://www.luzexi.com/%E6%B8%B8%E6%88%8F%E9%80%9A%E7%94%A8%E6%A8%A1%E5%9D%97/2013/09/04/赌博游戏程序设计中如何运用数学概率论</id>
   <content type="html">&lt;p&gt;我们在《王途霸业》中加入了一个非常有特色的系统，叫做&amp;quot;通吃谷&amp;quot;，它是一个类似于街机中的水果机那样的游戏系统。每盘玩家可以押注8个元素中任意个数，按开始后，轮盘开始转动，一旦停下来，停在某个元素上，该元素就算中奖，奖励的倍数由所在的元素显示的倍数决定。这种类似的押宝游戏我一直想做，但一直没有机会，所以这个押宝系统一直对我笼罩着一层神秘感。随着研究的深入，这层神秘感渐渐消除。&lt;/p&gt;

&lt;p&gt;首先说说，如何将概率的准确性达到最高。内容在最下面的转载内容部分。请细细品尝。&lt;/p&gt;

&lt;p&gt;再着，先把大部分人认定的那些误区给去除，水果机并不是由算法支撑核心的，那是数学概率论的一部分。每个元素都有一个概率，准确定义这个概率，再加上一定的算法技巧，就会有一个可玩性，体验好，庄家必赢的赌博系统。&lt;/p&gt;

&lt;p&gt;首先给8个元素定义一个赔率，5倍，10倍，15倍，20倍，30倍，40倍，50倍，100倍。漫无目的的调整中奖概率是件很痛苦的事情，那我就用一个方法去定义，提取这些倍率的公倍数，在将他们各自的倍率去除以这个公倍数，得到一个基础的中奖概率。这样就得到一个总和加起来并不是百分之一百的概率体系。为什么要是总和不是100%的概率体系呢？我把剩余的未中奖的概率设定为吞吃比率，也就是在这些中奖概率后，有一个一定吞吃所有的概率，当这个吞吃概率被命中时，我们就需要用一定的算法来获得一个不一定不让玩家赢的中奖位置，这个中奖位置也可能是玩家选择的位置，也可以是玩家没有选择的赔率，为了让游戏体验更加的有趣，这个算法非常重要。&lt;/p&gt;

&lt;p&gt;其实整个游戏所用到的知识非常简单，而如何让玩家能有一个非常良好的体验，是从吞吃算法和概率调整上下手。我并没有去细致的调整概率，而是做了一个整体概率调整的方案，也就是一个浮点数调整所有概率，当浮点数为1时，是基础的概率，浮点数越大，各元素的中奖概率越大，玩家中奖机会也越大，再加上吞吃算法，整个游戏体验将会是非常切合人的本性。这样，既实现了游戏了娱乐性，也实现了庄家必赢的局面，最重要的是，整个游戏调整起来非常便捷，无需了解很多知识，这也是对项目灵活性的一个很大帮助。&lt;/p&gt;

&lt;p&gt;以下内容转载网络，由于页面不复存在，所以只能贴出来：
计算机随机模拟方法，是一种基于&amp;quot;随机数&amp;quot;的计算方法。这一方法源于美国在第二次世界大战中研制原子弹的&amp;quot;曼哈顿计划&amp;quot;。该计划的主持人之一、数学家冯诺伊曼用驰名世界的赌城-摩纳哥的Monte Carlo-来命名这种方法，为它蒙上了一层神秘色彩。Monte Carlo方法的基本思想很早以前就被人们所发现和利用。早在17世纪，人们就知道用事件发生的&amp;quot;频率&amp;quot;来决定事件的&amp;quot;概率&amp;quot;。19世纪人们用投针试验的方法来决定圆周率pi。本世纪40年代电子计算机的出现，特别是近年来高速电子计算机的出现，使得用数学方法在计算机上大量、快速地模拟这样的试验成为可能。考虑平面上的一个边长为1的正方形及其内部的一个形状不规则的&amp;quot;图形&amp;quot;，如何求出这个&amp;quot;图形&amp;quot;的面积呢？Monte Carlo方法是这样一种&amp;quot;随机化&amp;quot;的方法：向该正方形&amp;quot;随机地&amp;quot;投掷N个点,其中有M个点落于&amp;quot;图形&amp;quot;内，则该&amp;quot;图形&amp;quot;的面积近似为M/N。可用民意测验来作一个不严格的比喻。民意测验的人不是征询每一个登记选民的意见，而是通过对选民进行小规模的抽样调查来确定可能的优胜者。其基本思想是一样的。科技计算中的问题比这要复杂得多。比如金融衍生产品（期权、期货、掉期等）的定价及交易风险估算，问题的维数（即变量的个数）可能高达数百甚至数千。对这类问题，难度随维数的增加呈指数增长，这就是所谓的&amp;quot;维数的灾难&amp;quot;(Course Dimensionality)，传统的数值方法难以对付（即使使用速度最快的计算机）。Monte Carlo方法能很好地用来对付维数的灾难，因为该方法的计算复杂性不再依赖于维数。以前那些本来是无法计算的问题现在也能够计算量。为提高方法的效率，科学家们提出了许多所谓的&amp;quot;方差缩减&amp;quot;技巧。另一类形式与Monte Carlo方法相似，但理论基础不同的方法-&amp;quot;拟蒙特卡罗方法&amp;quot;(Quasi-Monte Carlo方法)-近年来也获得迅速发展。我国数学家华罗庚、王元提出的&amp;quot;华-王&amp;quot;方法即是其中的一例。这种方法的基本思想是&amp;quot;用确定性的超均匀分布序列(数学上称为Low Discrepancy Sequences)
代替Monte Carlo方法中的随机数序列。对某些问题该方法的实际速度一般可比Monte Carlo方法提出高数百倍，并可计算精确度。&lt;/p&gt;

&lt;p&gt;高精度概率事件，程序实现如下：&lt;/p&gt;

&lt;p&gt;设P(i)，其中i=1..n，为n个个体被选择的概率，在轮盘上表示为所占扇区的面积百分比，这里显然sum(P)=1。select用来保存n次选择的结果。&lt;/p&gt;

&lt;p&gt;1） 第一种实现办法：可以想象一个转动的轮盘，注意这里轮盘最多只转一圈。每次转轮盘前，把色子随机放到轮盘外缘的某处，即色子不随轮盘转动，以一个随机数sel代表它所处的位置。轮盘转动后，色子所指示的轮盘扇区号不断变化，轮盘停止时色子所指示的轮盘上扇区号，即为本次轮盘赌所选中的个体号。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;第i次掷色子&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;产生一个0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;之间的随机数&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;代表色子在轮盘外缘所指示的位置&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sumPs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;轮盘初始转动的位置&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;从0变化到1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;轮盘初始指示的位置&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumPs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sel&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;终止条件为轮盘转动的位置超过色子位置&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sumPs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumPs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;轮盘转动&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;；&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;轮盘指示位置&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;轮盘停止时色子停留位置所指示的个体&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;循环终了&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;会对轮盘上由P所划分出来的n个区间产生n次随机选择&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;扇区越大&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;该扇区被选中的几率也越大&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;还需要注意的是：上面的程序中，我们当然可以把n改成2&lt;em&gt;n或者10&lt;/em&gt;n，产生的结果都是&amp;#39;个体概率所表示扇区越大，该个体被选中的几率也越大&amp;#39;，并且随着实验次数的增大，这一结果越精确。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;2）这种方法可以想象成往划分好扇区的轮盘里扔色子，事先生成一组满足均匀分布的随机数，代表n次掷色子或者n个色子一起扔，轮盘不动，色子所在区域为选择结果。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;预先产生n个色子的位置&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;注意这里r服从0&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;、&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;之间均匀分布&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;第i次轮盘赌&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;本次轮盘赌的结果初始化为n&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;轮盘开始转动&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;若色子停在轮盘第j扇区&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;则第i次轮盘赌的结果为j&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;第i次轮盘赌结束&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;第i次轮盘赌结束&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;第i次轮盘赌结束&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n次轮盘赌结束&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%%%%%%%%%%%%%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;下面为完整的matlab程序实现&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%%%%%%%%%%%%%%%&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Roulette&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;按轮盘赌策略选择下一点&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;返回num次轮盘赌结果&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;第一种轮盘赌方法&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;精度很低&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;初始化为最后一个&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;按概率选择&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;第二种轮盘赌方法&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;精度较高&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sumP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;产生1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m之间的随机整数&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sumP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;本程序中轮盘赌方法的准确程度可由如下程序验证&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;./&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Roulette&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1e6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;Ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)=(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1e6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;最后验证该轮盘赌方法准确程度&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;比较P和Ps差异大小&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;例&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>《王途霸业》战争策略游戏的服务器架构设计</title>
   <link href="http://www.luzexi.com/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2013/08/24/%E7%8E%8B%E9%80%94%E9%9C%B8%E4%B8%9A-%E6%88%98%E4%BA%89%E7%AD%96%E7%95%A5%E6%B8%B8%E6%88%8F%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html"/>
   <updated>2013-08-24T15:54:22+08:00</updated>
   <id>http://www.luzexi.com/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2013/08/24/《王途霸业》战争策略游戏的服务器架构设计</id>
   <content type="html">&lt;p&gt;王途霸业的服务器架构设计从2012年11月份开始历时10个月从6月份的V1.0.0第一次于玩家见面，到现在V1.1.5版本，这10个月里《王途霸业》经历了很多次架构的调整，客户端和服务端都已经有成型的架构体系，特别是服务器的架构，似乎从一个无知的少年经过1年的时间成长为了一个成熟的白领，可以正式抗起整个家庭的重担。&lt;/p&gt;

&lt;p&gt;服务端：&lt;/p&gt;

&lt;p&gt;服务端整个架构由4个部分组成,分别是：数据缓冲服务器，逻辑服务器，认证服务器，中心服务器&lt;/p&gt;

&lt;p&gt;数据缓冲服务器：对MYSQL数据库从内存上的数据存储优化，将更大程度上优化数据读取和存储效率。&lt;/p&gt;

&lt;p&gt;逻辑服务器：不言而明，这是《王途霸业》的核心服务器，对《王途霸业》的游戏正常运行起到了关键性的作用&lt;/p&gt;

&lt;p&gt;认证服务器：《王途霸业》是一款面向多平台，多渠道的游戏。她的帐号系统面向《王途霸业》中的所有服务器。也就是说，你只要注册一个帐号，就可以登录任何一个服务器进行游戏。&lt;/p&gt;

&lt;p&gt;中心服务器：主要负责对《王途霸业》的服务器地址管理，版本更新和公告内容。她是整个游戏的入口点，就像个看门人，对所有进入游戏的手机终端，检查他们的版本是否最新，并给予当前的全服公告和现有服务器的状态。&lt;/p&gt;

&lt;p&gt;《王途霸业》中缓冲服务器有，DB缓冲服务器，日志缓冲服务器&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;这两个服务器分别分则对游戏数据存储和游戏日志数据存储。&lt;/p&gt;

&lt;p&gt;《王途霸业》中逻辑服务器有，GAME游戏服务器，LOGIN登录服务器&lt;/p&gt;

&lt;p&gt;游戏服务器对负责游戏的逻辑，而LOGIN服务器负责对帐号验证分流一部分HTTP访问造成的延迟。&lt;/p&gt;

&lt;p&gt;《王途霸业》中认证服务器主要负责对所有平台的帐号进行验证，并提供帐号所对应的ID，这里启用HTTP连接，短连接的好处就是不必担心个服务器之间的长连接中断问题，并且能够承载更多的用户，统一所有服务器的帐号。&lt;/p&gt;

&lt;p&gt;《王途霸业》中的中心服务器是HTTP方式，也是因为这样能更好的承载客户端入口点，快速让客户端获得最新的更新内容和最新的服务器列表状态。将入口功能集成于一身。&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;ddd&quot; class=&quot;alignnone size-full wp-image-56&quot; height=&quot;761&quot; src=&quot;/assets/uploads/2013/08/ddd.png&quot; width=&quot;1035&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>使用行为树(Behavior Tree)实现游戏AI</title>
   <link href="http://www.luzexi.com/%E6%B8%B8%E6%88%8F%E9%80%9A%E7%94%A8%E6%A8%A1%E5%9D%97/2013/01/26/%E4%BD%BF%E7%94%A8%E8%A1%8C%E4%B8%BA%E6%A0%91(Behavior-Tree)%E5%AE%9E%E7%8E%B0%E6%B8%B8%E6%88%8FAI.html"/>
   <updated>2013-01-26T19:09:33+08:00</updated>
   <id>http://www.luzexi.com/%E6%B8%B8%E6%88%8F%E9%80%9A%E7%94%A8%E6%A8%A1%E5%9D%97/2013/01/26/使用行为树(Behavior Tree)实现游戏AI</id>
   <content type="html">&lt;p&gt;使用行为树(Behavior Tree)实现游戏AI&lt;/p&gt;

&lt;h1&gt;by AKara 2010-12-09 @ http://blog.csdn.net/akara @ akaras@163.com&lt;/h1&gt;

&lt;p&gt;谈到游戏AI，很明显智能体拥有的知识条目越多，便显得更智能，但维护庞大数量的知识条目是个噩梦：使用有限状态机(FSM)，分层有限状态机(HFSM)，
决策树(Decision Tree)来实现游戏AI总有那么些不顺意。试试Next-Gen AI的行为树(Behavior Tree)吧。虽说Next-Gen AI，但距其原型提出已有约10年时间，而微软Halo系列估计已用了超过8年了，Spore和一些著名游戏也早已使用行为树作为它们的AI结构。如从未接触，那wikipedia(http://en.wikipedia.org/wiki/Behavior_Trees) 绝对是入门好资料。&lt;/p&gt;

&lt;p&gt;先贴本文最具价值图(配色可花了不少时间)&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;alignnone size-full wp-image-20&quot; src=&quot;/assets/uploads/2013/01/213345_1292157838h3CY.jpg&quot; alt=&quot;213345_1292157838h3CY&quot; width=&quot;444&quot; height=&quot;768&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为显美观：BT被横放，Node层次被刻意减少，Dec被刻意安插，Cond被刻意捏造。&lt;/p&gt;

&lt;p&gt;PS：其实真正的高效的Node Group剔除应多加一层Sequence Node。&lt;/p&gt;

&lt;p&gt;行为树(Behavior Tree)具有如下的特性：
* 它只有4大类型的Node：
* Composite Node
* Decorator Node
* Condition Node
* Action Node&lt;/p&gt;

&lt;p&gt;任何Node被执行后，必须向其Parent Node报告执行结果：成功 / 失败.&lt;/p&gt;

&lt;p&gt;这简单的成功 / 失败汇报原则被很巧妙地用于控制整棵树的决策方向。&lt;/p&gt;

&lt;p&gt;先看Composite Node，其实它按复合性质还可以细分为3种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Selector Node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当执行本类型Node时，它将从begin到end迭代执行自己的Child Node：&lt;/p&gt;

&lt;p&gt;如遇到一个Child Node执行后返回True，那停止迭代，&lt;/p&gt;

&lt;p&gt;本Node向自己的Parent Node也返回True；否则所有Child Node都返回False，&lt;/p&gt;

&lt;p&gt;那本Node向自己的Parent Node返回False。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sequence Node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当执行本类型Node时，它将从begin到end迭代执行自己的Child Node：&lt;/p&gt;

&lt;p&gt;如遇到一个Child Node执行后返回False，那停止迭代，&lt;/p&gt;

&lt;p&gt;本Node向自己的Parent Node也返回False；否则所有Child Node都返回True，&lt;/p&gt;

&lt;p&gt;那本Node向自己的Parent Node返回True。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parallel Node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;并发执行它的所有Child Node。&lt;/p&gt;

&lt;p&gt;而向Parent Node返回的值和Parallel Node所采取的具体策略相关：&lt;/p&gt;

&lt;p&gt;Parallel Selector Node: 一False则返回False，全True才返回True。&lt;/p&gt;

&lt;p&gt;Parallel Sequence Node: 一True则返回True，全False才返回False。&lt;/p&gt;

&lt;p&gt;Parallel Hybird Node: 指定数量的Child Node返回True或False后才决定结果。&lt;/p&gt;

&lt;p&gt;Parallel Node提供了并发，提高性能。&lt;/p&gt;

&lt;p&gt;不需要像Selector/Sequence那样预判哪个Child Node应摆前，哪个应摆后，&lt;/p&gt;

&lt;p&gt;常见情况是：&lt;/p&gt;

&lt;p&gt;(1)用于并行多棵Action子树。&lt;/p&gt;

&lt;p&gt;(2)在Parallel Node下挂一棵子树，并挂上多个Condition Node，&lt;/p&gt;

&lt;p&gt;以提供实时性和性能。&lt;/p&gt;

&lt;p&gt;Parallel Node增加性能和方便性的同时，也增加实现和维护复杂度。&lt;/p&gt;

&lt;p&gt;PS：上面的Selector/Sequence准确来说是Liner Selector/Liner Sequence。&lt;/p&gt;

&lt;p&gt;AI术语中称为strictly-order：按既定先后顺序迭代。&lt;/p&gt;

&lt;p&gt;Selector和Sequence可以进一步提供非线性迭代的加权随机变种。&lt;/p&gt;

&lt;p&gt;Weight Random Selector提供每次执行不同的First True Child Node的可能。&lt;/p&gt;

&lt;p&gt;Weight Random Sequence则提供每次不同的迭代顺序。&lt;/p&gt;

&lt;p&gt;AI术语中称为partial-order，能使AI避免总出现可预期的结果。&lt;/p&gt;

&lt;p&gt;=============================================================&lt;/p&gt;

&lt;p&gt;再看Decorator Node，它的功能正如它的字面意思：它将它的Child Node执行&lt;/p&gt;

&lt;p&gt;后返回的结果值做额外处理后，再返回给它的Parent Node。很有些AOP的味道。&lt;/p&gt;

&lt;p&gt;比如Decorator Not/Decorator FailUtil/Decorator Counter/Decorator Time...&lt;/p&gt;

&lt;p&gt;更geek的有Decorator Log/Decorator Ani/Decorator Nothing...&lt;/p&gt;

&lt;p&gt;====================================================================&lt;/p&gt;

&lt;p&gt;然后是很直白的Condition Node，它仅当满足Condition时返回True。&lt;/p&gt;

&lt;p&gt;====================================================================&lt;/p&gt;

&lt;p&gt;最后看Action Node，它完成具体的一次(或一个step)的行为，视需求返回值。&lt;/p&gt;

&lt;p&gt;而当行为需要分step/Node间进行时，可引入Blackboard进行简单数据交互。&lt;/p&gt;

&lt;p&gt;====================================================================&lt;/p&gt;

&lt;p&gt;整棵行为树中，只有Condition Node和Action Node才能成为Leaf Node，而也&lt;/p&gt;

&lt;p&gt;只有Leaf Node才是需要特别定制的Node；Composite Node和Decorator Node均&lt;/p&gt;

&lt;p&gt;用于控制行为树中的决策走向。(所以有些资料中也统称Condition Node和Action&lt;/p&gt;

&lt;p&gt;Node为Behavior Node，而Composite Node和Decorator Node为Decider Node。)&lt;/p&gt;

&lt;p&gt;更强大的是可以加入Stimulus和Impulse，通过Precondition来判断masks开关。&lt;/p&gt;

&lt;p&gt;通过上述的各种Nodes几乎可以实现所有的决策控制：if, while, and, or,&lt;/p&gt;

&lt;p&gt;not, counter, time, random, weight random, util...&lt;/p&gt;

&lt;p&gt;====================================================================&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;总的来说，行为树具有如下几种优点，确实是实现AI框架的利器，甚至是一种&lt;/p&gt;

&lt;p&gt;通用的可维护的复杂流程管理利器：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;静态性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;越复杂的功能越需要简单的基础，否则最后连自己都玩不过来。&lt;/p&gt;

&lt;p&gt;静态是使用行为树需要非常着重的一个要点：即使系统需要某些&amp;quot;动态&amp;quot;性。&lt;/p&gt;

&lt;p&gt;其实诸如Stimulus这类动态安插的Node看似强大，&lt;/p&gt;

&lt;p&gt;但却破坏了本来易于理解的静态性，弊大于利。&lt;/p&gt;

&lt;p&gt;Halo3相对于Halo2对BT AI的一个改进就是去除Stimulus的动态性。&lt;/p&gt;

&lt;p&gt;取而代之的做法是使用Behavior Masks，Encounter Attitude，Inhibitions。&lt;/p&gt;

&lt;p&gt;原则就是保持全部Node静态，只是根据事件和环境来检查是否启用Node。&lt;/p&gt;

&lt;p&gt;静态性直接带来的好处就是整棵树的规划无需再运行时动态调整，为很多优化&lt;/p&gt;

&lt;p&gt;和预编辑都带来方便。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;直观性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;行为树可以方便地把复杂的AI知识条目组织得非常直观。&lt;/p&gt;

&lt;p&gt;默认的Composite Node的从begin往end的Child Node迭代方式就像是处理一个&lt;/p&gt;

&lt;p&gt;预设优先策略队列，也非常符合人类的正常思考模式：先最优再次优。&lt;/p&gt;

&lt;p&gt;行为树编辑器对优秀的程序员来说也是唾手可得。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;复用性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;各种Node，包括Leaf Node，可复用性都极高。&lt;/p&gt;

&lt;p&gt;实现NPC AI的个性区别甚至可以通过在一棵共用的行为树上不同的位置来&lt;/p&gt;

&lt;p&gt;安插Impulse来达到目的。&lt;/p&gt;

&lt;p&gt;当然，当NPC需要一个完全不同的大脑，比如70级大BOSS，&lt;/p&gt;

&lt;p&gt;与其绞尽脑汁在一棵公用BT安插Impulse，不如重头设计一棵专属BT。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;扩展性&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然上述Node之间的组合和搭配使用几乎覆盖所有AI需求。&lt;/p&gt;

&lt;p&gt;但也可以容易地为项目量身定做新的Composite Node或Decorator Node。&lt;/p&gt;

&lt;p&gt;还可以积累一个项目相关的Node Lib，长远来说非常有价值。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>游戏服务端架构</title>
   <link href="http://www.luzexi.com/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2013/01/26/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9E%B6%E6%9E%84.html"/>
   <updated>2013-01-26T18:47:21+08:00</updated>
   <id>http://www.luzexi.com/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E6%B8%B8%E6%88%8F%E6%9E%B6%E6%9E%84/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF/2013/01/26/游戏服务端架构</id>
   <content type="html">&lt;p&gt;本文引用自网络.这里讨论的游戏服务器架构大概是目前国内乃至世界上的网游通用的一种架构了：&lt;/p&gt;

&lt;p&gt;有段时间没有研究技术了，这次正好看到了新版的mangos，较之以前我看的版本有了比较大的完善，于是再次浏览了下他的代码，也借此机会整理下我在游戏服务器开发方面的一些心得，与大家探讨。
另外由于为避免与公司引起一些不必要的纠纷，我所描述的全都是通过google能够找到的资料，所以也可以认为我下面的内容都是网上所找资料的整理合 集。在平时的开发中我也搜索过相关的中文网页，很少有讲游戏服务器相关技术的，大家的讨论主要还是集中在3D相关技术，所以也希望我将开始的这几篇文章能 够起到抛砖引玉的作用，潜水的兄弟们也都上来透透气。&lt;/p&gt;

&lt;p&gt;要描述一项技术或是一个行业，一般都会从其最古老的历史开始说起，我本也想按着这个套路走，无奈本人乃一八零后小辈，没有经历过那些苦涩的却令人羡慕的 单机游戏开发，也没有响当当的拿的出手的优秀作品，所以也就只能就我所了解的一些技术做些简单的描述。一来算是敦促自己对知识做个梳理，二来与大家探讨的 过程也能够找到我之前学习的不足和理解上的错误，最后呢，有可能的话也跟业内的同行们混个脸熟，哪天要是想换个工作了也好有个人帮忙介绍下。最后的理由有 些俗了。&lt;/p&gt;

&lt;p&gt;关于游戏开发，正如云风在其blog上 所说，游戏项目始终只是个小工程，另外开发时间还是个很重要的问题，所以软件工程的思想及方法在大部分的游戏公司中并不怎么受欢迎。当然这也只是从我个人 一些肤浅的了解所得，可能不够充分。从游戏开发的程序团队的人员构成上也可看出来，基本只能算作是小开发团队。有些工作室性质的开发团队，那就更简单了。&lt;/p&gt;

&lt;p&gt;我所了解的早些的开发团队，其成员间没有什么严格的分工，大家凭兴趣自由选择一些模块来负责，完成了再去负责另一模块，有其他同事的工作需要接手或协助 的也会立即转入。所以游戏开发人员基本都是多面手，从网络到数据库，从游戏逻辑到图形图象，每一项都有所了解，并能实际应用。或者说都具有非常强的学习能 力，在接手一项新的任务后能在很短的时间内对该领域的技术迅速掌握并消化，而且还能现炒现卖。当然，这也与早期2D游戏的技术要求相对比较简单，游戏逻辑 也没有现在这般复杂有关。而更重要的可能是，都是被逼出来的吧！:)&lt;/p&gt;

&lt;p&gt;好了，闲话少说，下一篇，也就是第一篇了，主题为，服务器结构探讨。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;服务器结构探讨 -- 最简单的结构&lt;/p&gt;

&lt;p&gt;所谓服务器结构，也就是如何将服务器各部分合理地安排，以实现最初的功能需求。所以，结构本无所谓正确与错误；当然，优秀的结构更有助于系统的搭建，对系统的可扩展性及可维护性也有更大的帮助。&lt;/p&gt;

&lt;p&gt;好的结构不是一蹴而就的，而且每个设计者心中的那把尺都不相同，所以这个优秀结构的定义也就没有定论。在这里，我们不打算对现有游戏结构做评价，而是试着从头开始搭建一个我们需要的MMOG结构。&lt;/p&gt;

&lt;p&gt;对于一个最简单的游戏服务器来说，它只需要能够接受来自客户端的连接请求，然后处理客户端在游戏世界中的移动及交互，也即游戏逻辑处理即可。如果我们把这两项功能集成到一个服务进程中，则最终的结构很简单：&lt;/p&gt;

&lt;p&gt;client ----- server&lt;/p&gt;

&lt;p&gt;嗯，太简单了点，这样也敢叫服务器结构？好吧，现在我们来往里面稍稍加点东西，让它看起来更像是服务器结构一些。&lt;/p&gt;

&lt;p&gt;一般来说，我们在接入游戏服务器的时候都会要提供一个帐号和密码，验证通过后才能进入。关于为什么要提供用户名和密码才能进入的问题我们这里不打算做过 多讨论，云风曾对此也提出过类似的疑问，并给出了只用一个标识串就能进入的设想，有兴趣的可以去看看他们的讨论。但不管是采用何种方式进入，照目前看来我 们的服务器起码得提供一个帐号验证的功能。&lt;/p&gt;

&lt;p&gt;我们 把观察点先集中在一个大区内。在大多数情况下，一个大区内都会有多组游戏服，也就是多个游戏世界可供选择。简单点来实现，我们完全可以抛弃这个大区的概 念，认为一个大区也就是放在同一个机房的多台服务器组，各服务器组间没有什么关系。这样，我们可为每组服务器单独配备一台登录服。最后的结构图应该像这 样：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;loginServer   gameServer
|           /
|         /
client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该结构下的玩家操作流程为，先选择大区，再选择大区下的某台服务器，即某个游戏世界，点击进入后开始帐号验证过程，验证成功则进入了该游戏世界。但是，如果玩家想要切换游戏世界，他只能先退出当前游戏世界，然后进入新的游戏世界重新进行帐号验证。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;早期的游戏大都采用的是这种结构，有些游戏在实现时采用了一些技术手段使得在切换游戏服时不需要再次验证帐号，但整体结构还是未做改变。&lt;/p&gt;

&lt;p&gt;该结构存在一个服务器资源配置的问题。因为登录服处理的逻辑相对来说比较简单，就是将玩家提交的帐号和密码送到数据库进行验证，和生成会话密钥发送给游 戏服和客户端，操作完成后连接就会立即断开，而且玩家在以后的游戏过程中不会再与登录服打任何交道。这样处理短连接的过程使得系统在大多数情况下都是比较 空闲的，但是在某些时候，由于请求比较密集，比如开新服的时候，登录服的负载又会比较大，甚至会处理不过来。&lt;/p&gt;

&lt;p&gt;另外在实际的游戏运营中，有些游戏世界很火爆，而有些游戏世界却非常冷清，甚至没有多少人玩的情况也是很常见的。所以，我们能否更合理地配置登录服资源，使得整个大区内的登录服可以共享就成了下一步改进的目标。&lt;/p&gt;

&lt;p&gt;服务器结构探讨 -- 登录服的负载均衡&lt;/p&gt;

&lt;p&gt;回想一下我们在玩wow时的操作流程：运行wow.exe进入游戏后，首先就会要求我们输入用户名和密码进行验证，验证成功后才会出来游戏世界列表，之后是排队进入游戏世界，开始游戏...&lt;/p&gt;

&lt;p&gt;可以看到跟前面的描述有个很明显的不同，那就是要先验证帐号再选择游戏世界。这种结构也就使得登录服不是固定配备给个游戏世界，而是全区共有的。&lt;/p&gt;

&lt;p&gt;我们可以试着从实际需求的角度来考虑一下这个问题。正如我们之前所描述过的那样，登录服在大多数情况下都是比较空闲的，也许我们的一个拥有20个游戏世 界的大区仅仅使用10台或更少的登录服即可满足需求。而当在开新区的时候，或许要配备40台登录服才能应付那如潮水般涌入的玩家登录请求。所以，登录服在 设计上应该能满足这种动态增删的需求，我们可以在任何时候为大区增加或减少登录服的部署。&lt;/p&gt;

&lt;p&gt;当然，在这里也不会存在要求添加太多登录服的情况。还是拿开新区的情况来说，即使新增加登录服满足了玩家登录的请求，游戏世界服的承载能力依然有限，玩家一样只能在排队系统中等待，或者是进入到游戏世界中导致大家都卡。&lt;/p&gt;

&lt;p&gt;另外，当我们在增加或移除登录服的时候不应该需要对游戏世界服有所改动，也不会要求重启世界服，当然也不应该要求客户端有什么更新或者修改，一切都是在背后自动完成。&lt;/p&gt;

&lt;p&gt;最后，有关数据持久化的问题也在这里考虑一下。一般来说，使用现有的商业数据库系统比自己手工技术先进要明智得多。我们需要持久化的数据有玩家的帐号及密码，玩家创建的角色相关信息，另外还有一些游戏世界全局共有数据也需要持久化。&lt;/p&gt;

&lt;p&gt;好了，需求已经提出来了，现在来考虑如何将其实现。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;对于负载均衡来说，已有了成熟的解决方案。一般最常用，也最简单部署的应该是基于DNS的负载均衡系统了，其通过在DNS中为一个域名配置多个IP地址 来实现。最新的DNS服务已实现了根据服务器系统状态来实现的动态负载均衡，也就是实现了真正意义上的负载均衡，这样也就有效地解决了当某台登录服当机 后，DNS服务器不能立即做出反应的问题。当然，如果找不到这样的解决方案，自己从头打造一个也并不难。而且，通过DNS来实现的负载均衡已经包含了所做 的修改对登录服及客户端的透明。&lt;/p&gt;

&lt;p&gt;而对于数据库的应用，在这种结构下，登录服及游戏世界服都会需要连接数据库。从数据库服务器的部署上来说，可以将帐号和角色数据都放在一个中心数据库中，也可分为两个不同的库分别来处理，基到从物理上分到两台不同的服务器上去也行。&lt;/p&gt;

&lt;p&gt;但是对于不同的游戏世界来说，其角色及游戏内数据都是互相独立的，所以一般情况下也就为每个游戏世界单独配备一台数据库服务器，以减轻数据库的压力。所 以，整体的服务器结构应该是一个大区有一台帐号数据库服务器，所有的登录服都连接到这里。而每个游戏世界都有自己的游戏数据库服务器，只允许本游戏世界内 的服务器连接。&lt;/p&gt;

&lt;p&gt;最后，我们的服务器结构就像这样：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;大区服务器
/   　 |       
/       |       　
登录服1   登录服2   世界服1   世界服2
     　   |       　 |     　 |
   　   |       　 |         |
帐号数据库         DBS     DBS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里既然讨论到了大区及帐号数据库，所以顺带也说一下关于激活大区的概念。wow中一共有八个大区，我们想要进入某个大区游戏之前，必须到官网上激活这个区，这是为什么呢？&lt;/p&gt;

&lt;p&gt;一般来说，在各个大区帐号数据库之上还有一个总的帐号数据库，我们可以称它为中心数据库。比如我们在官网上注册了一个帐号，这时帐号数据是只保存在中心 数据库上的。而当我们要到一区去创建角色开始游戏的时候，在一区的帐号数据库中并没有我们的帐号数据，所以，我们必须先到官网上做一次激活操作。这个激活 的过程也就是从中心库上把我们的帐号数据拷贝到所要到的大区帐号数据库中。&lt;/p&gt;

&lt;p&gt;服务器结构探讨 -- 简单的世界服实现&lt;/p&gt;

&lt;p&gt;讨论了这么久我们一直都还没有进入游戏世界服务器内部，现在就让我们来窥探一下里面的结构吧。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;对于现在大多数MMORPG来说，游戏服务器要处理的基本逻辑有移动、聊天、技能、物品、任务和生物等，另外还有地图管理与消息广播来对其他高级功能做支撑。如纵队、好友、公会、战场和副本等，这些都是通过基本逻辑功能组合或扩展而成。&lt;/p&gt;

&lt;p&gt;在所有这些基础逻辑中，与我们要讨论的服务器结构关系最紧密的当属地图管理方式。决定了地图的管理方式也就决定了我们的服务器结构，我们仍然先从最简单的实现方式开始说起。&lt;/p&gt;

&lt;p&gt;回想一下我们曾战斗过无数个夜晚的暗黑破坏神，整个暗黑的世界被分为了若干个独立的小地图，当我们在地图间穿越时，一般都要经过一个叫做传送门的装置。 世界中有些地图间虽然在地理上是直接相连的，但我们发现其游戏内部的逻辑却是完全隔离的。可以这样认为，一块地图就是一个独立的数据处理单元。&lt;/p&gt;

&lt;p&gt;既然如此，我们就把每块地图都当作是一台独立的服务器，他提供了在这块地图上游戏时的所有逻辑功能，至于内部结构如何划分我们暂不理会，先把他当作一个黑盒子吧。&lt;/p&gt;

&lt;p&gt;当两个人合作做一件事时，我们可以以对等的关系相互协商着来做，而且一般也都不会有什么问题。当人数增加到三个时，我们对等的合作关系可能会有些复杂， 因为我们每个人都同时要与另两个人合作协商。正如俗语所说的那样，三个和尚可能会碰到没水喝的情况。当人数继续增加，情况就变得不那么简单了，我们得需要 一个管理者来对我们的工作进行分工、协调。游戏的地图服务器之间也是这么回事。&lt;/p&gt;

&lt;p&gt;一般来说，我们的游戏世界不可能会只有一块或者两块小地图，那顺理成章的，也就需要一个地图管理者。先称它为游戏世界的中心服务器吧，毕竟是管理者嘛，大家都以它为中心。&lt;/p&gt;

&lt;p&gt;中心服务器主要维护一张地图ID到地图服务器地址的映射表。当我们要进入某张地图时，会从中心服上取得该地图的IP和port告诉客户端，客户端主动去 连接，这样进入他想要去的游戏地图。在整个游戏过程中，客户端始终只会与一台地图服务器保持连接，当要切换地图的时候，在获取到新地图的地址后，会先与当 前地图断开连接，再进入新的地图，这样保证玩家数据在服务器上只有一份。&lt;/p&gt;

&lt;p&gt;我们来看看结构图是怎样的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;中心服务器
/                
/                  
登录服     地图1     地图2   地图n
         |         /       /
       |         /       /
客户端
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;很简单，不是吗。但是简单并不表示功能上会有什么损失，简单也更不能表示游戏不能赚钱。早期不少游戏也确实采用的就是这种简单结构。&lt;/p&gt;

&lt;p&gt;服务器结构探讨 -- 继续世界服&lt;/p&gt;

&lt;p&gt;都已经看出来了，这种每切换一次地图就要重新连接服务器的方式实在是不够优雅，而且在实际游戏运营中也发现，地图切换导致的卡号，复制装备等问题非常多，这里完全就是一个事故多发地段，如何避免这种频繁的连接操作呢？&lt;/p&gt;

&lt;p&gt;最直接的方法就是把那个图倒转过来就行了。客户端只需要连接到中心服上，所有到地图服务器的数据都由中心服来转发。很完美的解决方案，不是吗？&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;这种结构在实际的部署中也遇到了一些挑战。对于一般的MMORPG服务器来说，单台服务器的承载量平均在2000左右，如果你的服务器很不幸地只能带 1000人，没关系，不少游戏都是如此；如果你的服务器上跑了3000多玩家依然比较流畅，那你可以自豪地告诉你的策划，多设计些大量消耗服务器资源的玩 法吧，比如大型国战、公会战争等。&lt;/p&gt;

&lt;p&gt;2000人，似乎我们的策划朋友们不大愿意接受这个数字。我们将地图服务器分开来原来也是想将负载分开，以多带些客户端，现在要所有的连接都从中心服上转发，那连接数又遇到单台服务器的可最大承载量的瓶颈了。&lt;/p&gt;

&lt;p&gt;这里有必要再解释下这个数字。我知道，有人一定会说，才带2000人，那是你水平不行，我随便写个TCP服务器都可带个五六千连接。问题恰恰在于你是随 便写的，而MMORPG的服务器是复杂设计的。如果一个演示socket API用的echo服务器就能满足MMOG服务器的需求，那写服务器该是件多么惬意的事啊。&lt;/p&gt;

&lt;p&gt;但我们所遇到的事实是，服务器收到一个移动包后，要向周围所有人广播，而不是echo服务器那样简单的回应；服务器在收到一个连接断开通知时要向很多人 通知玩家退出事件，并将该玩家的资料写入数据库，而不是echo服务器那样什么都不需要做；服务器在收到一个物品使用请求包后要做一系列的逻辑判断以检查 玩家有没有作弊；服务器上还启动着很多定时器用来更新游戏世界的各种状态......&lt;/p&gt;

&lt;p&gt;其实这么一比较，我们也看出资源消耗的所在了：服务器上大量的复杂的逻辑处理。再回过头来看看我们想要实现的结构，我们既想要有一个唯一的入口，使得客户端不用频繁改变连接，又希望这个唯一入口的负载不会太大，以致于接受不了多少连接。&lt;/p&gt;

&lt;p&gt;仔细看一看这个需求，我们想要的仅仅只是一台管理连接的服务器，并不打算让他承担太多的游戏逻辑。既然如此，那五六千个连接也还有满足我们的要求。至少 在现在来说，一个游戏世界内，也就是一组服务器内同时有五六千个在线的玩家还是件让人很兴奋的事。事实上，在大多数游戏的大部分时间里，这个数字也是很让 人眼红的。&lt;/p&gt;

&lt;p&gt;什么？你说梦幻、魔兽还有史先生的那个什么征途远不止这么点人了！噢，我说的是大多数，是大多数，不包括那些明星。你知道大陆现在有多少游戏在运营吗？或许你又该说，我们不该在一开始就把自己的目标定的太低！好吧，我们还是先不谈这个。&lt;/p&gt;

&lt;p&gt;继续我们的结构讨论。一般来说，我们把这台负责连接管理的服务器称为网关服务器，因为内部的数据都要通过这个网关才能出去，不过从这台服务器提供的功能来看，称其为反向代理服务器可能更合适。我们也不在这个名字上纠缠了，就按大家通用的叫法，还是称他为网关服务器吧。&lt;/p&gt;

&lt;p&gt;网关之后的结构我们依然可以采用之前描述的方案，只是，似乎并没有必要为每一个地图都开一个独立的监听端口了。我们可以试着对地图进行一些划分，由一个 Master Server来管理一些更小的Zone Server，玩家通过网关连接到Master Server上，而实际与地图有关的逻辑是分派给更小的Zone Server去处理。&lt;/p&gt;

&lt;p&gt;最后的结构看起来大概是这样的：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;Zone Server         Zone Server
             /
           /
Master Server           Master Server
/                          /
/                          /
Gateway Server                        /
|                               /
|                             /
|               Center Server
|
|
Client
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;服务器结构探讨 -- 最终的结构&lt;/p&gt;

&lt;p&gt;如果我们就此打住，可能马上就会有人要嗤之以鼻了，就这点古董级的技术也敢出来现。好吧，我们还是把之前留下的问题拿出来解决掉吧。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;一般来说，当某一部分能力达不到我们的要求时，最简单的解决方法就是在此多投入一点资源。既然想要更多的连接数，那就再加一台网关服务器吧。新增加了网 关服后需要在大区服上做相应的支持，或者再简单点，有一台主要的网关服，当其负载较高时，主动将新到达的连接重定向到其他网关服上。&lt;/p&gt;

&lt;p&gt;而对于游戏服来说，有一台还是多台网关服是没有什么区别的。每个代表客户端玩家的对象内部都保留一个代表其连接的对象，消息广播时要求每个玩家对象使用 自己的连接对象发送数据即可，至于连接是在什么地方，那是完全透明的。当然，这只是一种简单的实现，也是普通使用的一种方案，如果后期想对消息广播做一些 优化的话，那可能才需要多考虑一下。&lt;/p&gt;

&lt;p&gt;既然说到了优化，我们也稍稍考虑一下现在结构下可能采用的优化方案。&lt;/p&gt;

&lt;p&gt;首先是当前的Zone Server要做的事情太多了，以至于他都处理不了多少连接。这其中最消耗系统资源的当属生物的AI处理了，尤其是那些复杂的寻路算法，所以我们可以考虑把这部分AI逻辑独立出来，由一台单独的AI服务器来承担。&lt;/p&gt;

&lt;p&gt;然后，我们可以试着把一些与地图数据无关的公共逻辑放到Master Server上去实现，这样Zone Server上只保留了与地图数据紧密相关的逻辑，如生物管理，玩家移动和状态更新等。&lt;/p&gt;

&lt;p&gt;还有聊天处理逻辑，这部分与游戏逻辑没有任何关联，我们也完全可以将其独立出来，放到一台单独的聊天服务器上去实现。&lt;/p&gt;

&lt;p&gt;最后是数据库了，为了减轻数据库的压力，提高数据请求的响应速度，我们可以在数据库之前建立一个数据库缓存服务器，将一些常用数据缓存在此，服务器与数据库的通信都要通过这台服务器进行代理。缓存的数据会定时的写入到后台数据库中。&lt;/p&gt;

&lt;p&gt;好了，做完这些优化我们的服务器结构大体也就定的差不多了，暂且也不再继续深入，更细化的内容等到各个部分实现的时候再探讨。&lt;/p&gt;

&lt;p&gt;好比我们去看一场晚会，舞台上演员们按着预定的节目单有序地上演着，但这就是整场晚会的全部吗？显然不止，在幕后还有太多太多的人在忙碌着，甚至在晚会前和晚会后都有。我们的游戏服务器也如此。&lt;/p&gt;

&lt;p&gt;在之前描述的部分就如同舞台上的演员，是我们能直接看到的，幕后的工作人员我们也来认识一下。&lt;/p&gt;

&lt;p&gt;现实中有警察来维护秩序，游戏中也如此，这就是我们常说的GM。GM可以采用跟普通玩家一样的拉入方式来进入游戏，当然权限会比普通玩家高一些，也可以提供一台GM服务器专门用来处理GM命令，这样可以有更高的安全性，GM服一般接在中心服务器上。&lt;/p&gt;

&lt;p&gt;在以时间收费的游戏中，我们还需要一台计费的服务器，这台服务器一般接在网关服务器上，注册玩家登录和退出事件以记录玩家的游戏时间。&lt;/p&gt;

&lt;p&gt;任何为用户提供服务的地方都会有日志记录，游戏服务器当然也不例外。从记录玩家登录的时间，地址，机器信息到游戏过程中的每一项操作都可以作为日志记录下来，以备查错及数据挖掘用。至于搜集玩家机器资料所涉及到的法律问题不是我们该考虑的。&lt;/p&gt;

&lt;p&gt;差不多就这么多了吧，接下来我们会按照这个大致的结构来详细讨论各部分的实现。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;服务器结构探讨 -- 一点杂谈&lt;/p&gt;

&lt;p&gt;再强调一下，服务器结构本无所谓好坏，只有是否适合自己。我们在前面探讨了一些在现在的游戏中见到过的结构，并尽我所知地分析了各自存在的一些问题和可以做的一些改进，希望其中没有谬误，如果能给大家也带来些启发那自然更好。&lt;/p&gt;

&lt;p&gt;突然发现自己一旦罗嗦起来还真是没完没了。接下来先说说我在开发中遇到过的一些困惑和一基础问题探讨吧，这些问题可能有人与我一样，也曾遇到过，或者正在被困扰中，而所要探讨的这些基础问题向来也是争论比较多的，我们也不评价其中的好与坏，只做简单的描述。&lt;/p&gt;

&lt;p&gt;首先是服务器操作系统，linux与windows之争随处可见，其实在大多数情况下这不是我们所能决定的，似乎各大公司也基本都有了自己的传统，如网易的freebsd，腾讯的linux等。如果真有权利去选择的话，选自己最熟悉的吧。&lt;/p&gt;

&lt;p&gt;决定了OS也就基本上确定了网络IO模型，windows上的IOCP和linux下的epool，或者直接使用现有的网络框架，如ACE和asio等，其他还有些商业的网络库在国内的使用好像没有见到，不符合中国国情嘛。:)&lt;/p&gt;

&lt;p&gt;然后是网络协议的选择，以前的选择大多倾向于UDP，为了可靠传输一般自己都会在上面实现一层封装，而现在更普通的是直接采用本身就很可靠的TCP，或 者TCP与UDP的混用。早期选择UDP的主要原因还是带宽限制，现在宽带普通的情况下TCP比UDP多出来的一点点开销与开发的便利性相比已经不算什么 了。当然，如果已有了成熟的可靠UDP库，那也可以继续使用着。&lt;/p&gt;

&lt;p&gt;还有消息包格式的定义，这个曾在云风的blog上展开过激烈的争论。消息包格式定义包括三段，包长、消息码和包体，争论的焦点在于应该是消息码在前还是包长在前，我们也把这个当作是信仰问题吧，有兴趣的去云风的blog上看看，论论。&lt;/p&gt;

&lt;p&gt;另外早期有些游戏的包格式定义是以特殊字符作分隔的，这样一个好处是其中某个包出现错误后我们的游戏还能继续。但实际上，我觉得这是完全没有必要的，真 要出现这样的错误，直接断开这个客户端的连接可能更安全。而且，以特殊字符做分隔的消息包定义还加大了一点点网络数据量。&lt;/p&gt;

&lt;p&gt;最后是一个纯技术问题，有关socket连接数的最大限制。开始学习网络编程的时候我犯过这样的错误，以为port的定义为unsigned short，所以想当然的认为服务器的最大连接数为65535，这会是一个硬性的限制。而实际上，一个socket描述符在windows上的定义是 unsigned int，因此要有限制那也是四十多亿，放心好了。&lt;/p&gt;

&lt;p&gt;在服务器上port是监听用的，想象这样一种情况，web server在80端口上监听，当一个连接到来时，系统会为这个连接分配一个socket句柄，同时与其在80端口上进行通讯；当另一个连接到来时，服务 器仍然在80端口与之通信，只是分配的socket句柄不一样。这个socket句柄才是描述每个连接的唯一标识。按windows网络编程第二版上的说 法，这个上限值配置影响。&lt;/p&gt;

&lt;p&gt;好了，废话说完了，下一篇，我们开始进入登录服的设计吧。&lt;/p&gt;

&lt;p&gt;登录服的设计 -- 功能需求&lt;/p&gt;

&lt;p&gt;正如我们在前面曾讨论过的，登录服要实现的功能相当简单，就是帐号验证。为了便于描述，我们暂不引入那些讨论过的优化手段，先以最简单的方式实现，另外也将基本以mangos的代码作为参考来进行描述。&lt;/p&gt;

&lt;p&gt;想象一下帐号验证的实现方法，最容易的那就是把用户输入的明文用帐号和密码直接发给登录服，服务器根据帐号从数据库中取出密码，与用户输入的密码相比较。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;这个方法存在的安全隐患实在太大，明文的密码传输太容易被截获了。那我们试着在传输之前先加一下密，为了服务器能进行密码比较，我们应该采用一个可逆的 加密算法，在服务器端把这个加密后的字串还原为原始的明文密码，然后与数据库密码进行比较。既然是一个可逆的过程，那外挂制作者总有办法知道我们的加密过 程，所以，这个方法仍不够安全。&lt;/p&gt;

&lt;p&gt;哦，如果我们只 是希望密码不可能被还原出来，那还不容易吗，使用一个不可逆的散列算法就行了。用户在登录时发送给服务器的是明文的帐号和经散列后的不可逆密码串，服务器 取出密码后也用同样的算法进行散列后再进行比较。比如，我们就用使用最广泛的md5算法吧。噢，不要管那个王小云的什么论文，如果我真有那么好的运气，早 中500w了，还用在这考虑该死的服务器设计吗？&lt;/p&gt;

&lt;p&gt;似乎是一个很完美的方案，外挂制作者再也偷不到我们的密码了。慢着，外挂偷密码的目的是什么？是为了能用我们的帐号进游戏！如果我们总是用一种固定的算法来对密码做散列，那外挂只需要记住这个散列后的字串就行了，用这个做密码就可以成功登录。&lt;/p&gt;

&lt;p&gt;嗯，这个问题好解决，我们不要用固定的算法进行散列就是了。只是，问题在于服务器与客户端采用的散列算法得出的字串必须是相同的，或者是可验证其是否匹 配的。很幸运的是，伟大的数学字们早就为我们准备好了很多优秀的这类算法，而且经理论和实践都证明他们也确实是足够安全的。&lt;/p&gt;

&lt;p&gt;这其中之一是一个叫做SRP的算法，全称叫做Secure Remote Password，即安全远程密码。wow使用的是第6版，也就是SRP6算法。有关其中的数学证明，如果有人能向我解释清楚，并能让我真正弄明白的话， 我将非常感激。不过其代码实现步骤倒是并不复杂，mangos中的代码也还算清晰，我们也不再赘述。&lt;/p&gt;

&lt;p&gt;登录服除了帐号验证外还得提供另一项功能，就是在玩家的帐号验证成功后返回给他一个服务器列表让他去选择。这个列表的状态要定时刷新，可能有新的游戏世 界开放了，也可能有些游戏世界非常不幸地停止运转了，这些状态的变化都要尽可能及时地让玩家知道。不管发生了什么事，用户都有权利知道，特别是对于付过费 的用户来说，我们不该藏着掖着，不是吗？&lt;/p&gt;

&lt;p&gt;这个游戏世界列表的功能将由大区服来提供，具体的结构我们在之前也描述过，这里暂不做讨论。登录服将从大区服上获取到的游戏世界列表发给已验证通过的客户端即可。好了，登录服要实现的功能就这些，很简单，是吧。&lt;/p&gt;

&lt;p&gt;确实是太简单了，不过简单的结构正好更适合我们来看一看游戏服务器内部的模块结构，以及一些服务器共有组件的实现方法。这就留作下一篇吧。&lt;/p&gt;

&lt;p&gt;服务器公共组件实现 -- mangos的游戏主循环&lt;/p&gt;

&lt;p&gt;当阅读一项工程的源码时，我们大概会选择从main函数开始，而当开始一项新的工程时，第一个写下的函数大多也是main。那我们就先来看看，游戏服务器代码实现中，main函数都做了些什么。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;由于我在读技术文章时最不喜看到的就是大段大段的代码，特别是那些直接Ctrl+C再Ctrl+V后未做任何修改的代码，用句时髦的话说，一点技术含量 都没有！所以在我们今后所要讨论的内容中，尽量会避免出现直接的代码，在有些地方确实需要代码来表述时，也将会选择使用伪码。&lt;/p&gt;

&lt;p&gt;先从mangos的登录服代码开始。mangos的登录服是一个单线程的结构，虽然在数据库连接中可以开启一个独立的线程，但这个线程也只是对无返回结果的执行类SQL做缓冲，而对需要有返回结果的查询类SQL还是在主逻辑线程中阻塞调用的。&lt;/p&gt;

&lt;p&gt;登录服中唯一的这一个线程，也就是主循环线程对监听的socket做select操作，为每个连接进来的客户端读取其上的数据并立即进行处理，直到服务器收到SIGABRT或SIGBREAK信号时结束。&lt;/p&gt;

&lt;p&gt;所以，mangos登录服主循环的逻辑，也包括后面游戏服的逻辑，主循环的关键代码其实是在SocketHandler中，也就是那个Select函数 中。检查所有的连接，对新到来的连接调用OnAccept方法，有数据到来的连接则调用OnRead方法，然后socket处理器自己定义对接收到的数据 如何处理。&lt;/p&gt;

&lt;p&gt;很简单的结构，也比较容易理解。&lt;/p&gt;

&lt;p&gt;只是，在对性能要求比较高的服务器上，select一般不会是最好的选择。如果我们使用windows平台，那IOCP将是首选；如果是 linux，epool将是不二选择。我们也不打算讨论基于IOCP或是基于epool的服务器实现，如果仅仅只是要实现服务器功能，很简单的几个API 调用即可，而且网上已有很多好的教程；如果是要做一个成熟的网络服务器产品，不是我几篇简单的技术介绍文章所能达到。&lt;/p&gt;

&lt;p&gt;另外，在服务器实现上，网络IO与逻辑处理一般会放在不同的线程中，以免耗时较长的IO过程阻塞住了需要立即反应的游戏逻辑。&lt;/p&gt;

&lt;p&gt;数据库的处理也类似，会使用异步的方式，也是避免耗时的查询过程将游戏服务器主循环阻塞住。想象一下，因某个玩家上线而发起的一次数据库查询操作导致服务器内所有在线玩家都卡住不动将是多么恐怖的一件事！&lt;/p&gt;

&lt;p&gt;另外还有一些如事件、脚本、消息队列、状态机、日志和异常处理等公共组件，我们也会在接下来的时间里进行探讨。&lt;/p&gt;

&lt;p&gt;服务器公共组件实现 -- 继续来说主循环&lt;/p&gt;

&lt;p&gt;前面我们只简单了解了下mangos登录服的程序结构，也发现了一些不足之处，现在我们就来看看如何提供一个更好的方案。&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;正如我们曾讨论过的，为了游戏主逻辑循环的流畅运行，所有比较耗时的IO操作都会分享到单独的线程中去做，如网络IO，数据库IO和日志IO等。当然，也有把这些分享到单独的进程中去做的。&lt;/p&gt;

&lt;p&gt;另外对于大多数服务器程序来说，在运行时都是作为精灵进程或服务进程的，所以我们并不需要服务器能够处理控制台用户输入，我们所要处理的数据来源都来自网络。&lt;/p&gt;

&lt;p&gt;这样，主逻辑循环所要做的就是不停要取消息包来处理，当然这些消息包不仅有来自客户端的玩家操作数据包，也有来自GM服务器的管理命令，还包括来自数据库查询线程的返回结果消息包。这个循环将一直持续，直到收到一个通知服务器关闭的消息包。&lt;/p&gt;

&lt;p&gt;主逻辑循环的结构还是很简单的，复杂的部分都在如何处理这些消息包的逻辑上。我们可以用一段简单的伪码来描述这个循环过程：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;while (Message* msg = getMessage())
{
if (msg为服务器关闭消息)
break;
处理msg消息;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里就有一个问题需要探讨了，在getMessage()的时候，我们应该去哪里取消息？前面我们考虑过，至少会有三个消息来源，而我们还讨论过，这些消息源的IO操作都是在独立的线程中进行的，我们这里的主线程不应该直接去那几处消息源进行阻塞式的IO操作。&lt;/p&gt;

&lt;p&gt;很简单，让那些独立的IO线程在接收完数据后自己送过来就是了。好比是，我这里提供了一个仓库，有很多的供货商，他们有货要给我的时候只需要交到仓库， 然后我再到仓库去取就是了，这个仓库也就是消息队列。消息队列是一个普通的队列实现，当然必须要提供多线程互斥访问的安全性支持，其基本的接口定义大概类 似这样：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;IMessageQueue
{
void putMessage(Message*);
Message* getMessage();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;网络IO，数据库IO线程把整理好的消息包都加入到主逻辑循环线程的这个消息队列中便返回。有关消息队列的实现和线程间消息的传递在ACE中有比较完全的代码实现及描述，还有一些使用示例，是个很好的参考。&lt;/p&gt;

&lt;p&gt;这样的话，我们的主循环就很清晰了，从主线程的消息队列中取消息，处理消息，再取下一条消息......&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
    if (/(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent))
    { //移动端
        /*mobile-20:5*/
        var cpro_id = &quot;u3493987&quot;;
        document.write(&quot;\&lt;script type=\&quot;text\/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/cm.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
    else
    {
         /*700*200信息流*/
        var cpro_id = &quot;u3469788&quot;;
        document.write(&quot;\&lt;script type=\&quot;text/javascript\&quot; src=\&quot;//cpro.baidustatic.com/cpro/ui/c.js\&quot;\&gt;\&lt;\/script\&gt;&quot;);
    }
&lt;/script&gt;

&lt;p&gt;服务器公共组件实现 -- 消息队列&lt;/p&gt;

&lt;p&gt;既然说到了消息队列，那我们继续来稍微多聊一点吧。&lt;/p&gt;

&lt;p&gt;我们所能想到的最简单的消息队列可能就是使用stl的list来实现了，即消息队列内部维护一个list和一个互斥锁，putMessage时将 message加入到队列尾，getMessage时从队列头取一个message返回，同时在getMessage和putMessage之前都要求先 获取锁资源。&lt;/p&gt;

&lt;p&gt;实现虽然简单，但功能是绝对满足需求的，只是性能上可能稍稍有些不尽如人意。其最大的问题在频繁的锁竞争上。&lt;/p&gt;

&lt;p&gt;对于如何减少锁竞争次数的优化方案，Ghost Cheng提出了一种。提供一个队列容器，里面有多个队列，每个队列都可固定存放一定数量的消息。网络IO线程要给逻辑线程投递消息时，会从队列容器中取 一个空队列来使用，直到将该队列填满后再放回容器中换另一个空队列。而逻辑线程取消息时是从队列容器中取一个有消息的队列来读取，处理完后清空队列再放回 到容器中。&lt;/p&gt;

&lt;p&gt;这样便使得只有在对队列容器进行操作时才需要加锁，而IO线程和逻辑线程在操作自己当前使用的队列时都不需要加锁，所以锁竞争的机会大大减少了。&lt;/p&gt;

&lt;p&gt;这里为每个队列设了个最大消息数，看来好像是打算只有当IO线程写满队列时才会将其放回到容器中换另一个队列。那这样有时也会出现IO线程未写满一个队 列，而逻辑线程又没有数据可处理的情况，特别是当数据量很少时可能会很容易出现。Ghost Cheng在他的描述中没有讲到如何解决这种问题，但我们可以先来看看另一个方案。&lt;/p&gt;

&lt;p&gt;这个方案与上一个方案基本类似，只是不再提供队列容器，因为在这个方案中只使用了两个队列，arthur在他的一封邮件中描述了这个方案的实现及部分代 码。两个队列，一个给逻辑线程读，一个给IO线程用来写，当逻辑线程读完队列后会将自己的队列与IO线程的队列相调换。所以，这种方案下加锁的次数会比较 多一些，IO线程每次写队列时都要加锁，逻辑线程在调换队列时也需要加锁，但逻辑线程在读队列时是不需要加锁的。&lt;/p&gt;

&lt;p&gt;虽然看起来锁的调用次数是比前一种方案要多很多，但实际上大部分锁调用都是不会引起阻塞的，只有在逻辑线程调换队列的那一瞬间可能会使得某个线程阻塞一下。另外对于锁调用过程本身来说，其开销是完全可以忽略的，我们所不能忍受的仅仅是因为锁调用而引起的阻塞而已。&lt;/p&gt;

&lt;p&gt;两种方案都是很优秀的优化方案，但也都是有其适用范围的。Ghost Cheng的方案因为提供了多个队列，可以使得多个IO线程可以总工程师的，互不干扰的使用自己的队列，只是还有一个遗留问题我们还不了解其解决方法。 arthur的方案很好的解决了上一个方案遗留的问题，但因为只有一个写队列，所以当想要提供多个IO线程时，线程间互斥地写入数据可能会增大竞争的机 会，当然，如果只有一个IO线程那将是非常完美的&lt;/p&gt;
</content>
 </entry>
 

</feed>
