<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title></title>
        <description>技术，哲学，金融</description>
        <link>http://www.luzexi.com</link>
        <atom:link href="http://www.luzexi.com/assets/feed.xml" rel="self" type="application/rss+xml" />
        
            <item>
               <title>读书笔记(二十六) 《C++ Primer》#2</title>
               <description>&lt;h2 id=&quot;背景&quot;&gt;背景：&lt;/h2&gt;

&lt;p&gt;我为什么要重学C++？第一是巩固核心，软件编程有三大核心，语言、操作系统、框架设计，语言首当其冲，核心能力大都看不见摸不着只有你自己知道的东西。第二是将分散的知识串联起来，这样就能产生新的知识和新的创意。第三是当我们在巩固时创造出了新的知识，那么这些新的知识和旧的知识将同时变成智慧融合到身体中。&lt;/p&gt;

&lt;p&gt;本系列基于《C++ Primer》学习，由于重点放在“重学”，我略过了滚瓜烂熟的部分挑出以前常忽略的部分，以及记忆没有那么深刻的部分，特别是那些重要的但没有上心的部分。&lt;/p&gt;

&lt;h2 id=&quot;开始&quot;&gt;开始&lt;/h2&gt;

&lt;h2 id=&quot;1const限定&quot;&gt;1.const限定&lt;/h2&gt;

&lt;p&gt;关键字const对变量的类型加以限定，因此它的值在初始化后不能被改变。&lt;/p&gt;

&lt;p&gt;const默认情况下只在文件内生效，当需要支持多个文件共享时，则使用extern关键字，不管定义和声明都添加extern关键字，并且只需要定义一次。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//a.cpp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_constVar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fcn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//b.cpp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_constVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;通过添加extern共享const变量。&lt;/p&gt;

&lt;h2 id=&quot;const引用常量引用&quot;&gt;const引用（常量引用）&lt;/h2&gt;

&lt;p&gt;与普通引用不同的是，常量引用不能被用作它修改它所绑定的对象。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//错误，常量引用不能修改绑定对象&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ci&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//错误，普通引用无法赋值常量&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;严格来说，并不存在常量引用。因为引用不是一个对象，所以我们没法让引用本身恒定不变。
事实上，由于c++语言并不允许随意改变引用所绑定的对象，所以从这层意义上理解所有的引用又都算是常量。
引用的对象是常量还是非常量可以决定其所能参与的操作，却无论如何都不会影响到引用和对象的绑定关系。
简单来说，由于绑定对象无法改变，所以要求引用对象也不能改变。&lt;/p&gt;

&lt;p&gt;但const引用可以绑定一个非const对象，其意义为，绑定后const引用无法改变，只能由所绑定的对象来决定内容。&lt;/p&gt;

&lt;h2 id=&quot;const指针常量指针&quot;&gt;const指针（常量指针）&lt;/h2&gt;

&lt;p&gt;const指针与const引用有同样的规则。
const指针在初始化后无法改变，const指针不能改变所指对象的值，但可以指向非常量变量。
当指向非常量时，const指针所指向的对象的值，只能由对象本身来决定。&lt;/p&gt;

&lt;p&gt;C++11中，用constexpr来表示常量表达式，声明为constexpr的变量是一个常量，编译器会验证变量的值是否为常量表达式并离线计算该值。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//离线计算&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//离线计算&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;constexpr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// size()必须是constexpr函数&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;2类型别名&quot;&gt;2.类型别名&lt;/h2&gt;

&lt;p&gt;类型别名是某种类型的同义词。&lt;/p&gt;

&lt;p&gt;使用类型别名是为了让复杂的类型名字变得简单明了、易于理解和使用。&lt;/p&gt;

&lt;p&gt;C++11新标准中，使用using来定义类型的别名&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//wages是double的同义词&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wages&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//base是double的同义词，并且p是double*的同义词&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//pstring 是char*的同义词&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Item_test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// It 是Item_test的同义词&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//定义&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wages&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//定义double 变量&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;It&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//定义Item_test 变量&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pstring&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cstr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//定义一个char *&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;3其他&quot;&gt;3.其他&lt;/h2&gt;

&lt;p&gt;auto和decltype都是用来让编译器在离线下自动识别类型的关键字。
其中decltype着重识别结果类型与表达式的关系。&lt;/p&gt;

&lt;p&gt;预处理器能确保头文件多次包含仍能安全工作，它在编译之前被执行。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt; &lt;span class=&quot;cp&quot;&gt;#include、#define、#ifdef、#ifndef都是预处理关键字。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;第3章&quot;&gt;第3章&lt;/h2&gt;

&lt;h2 id=&quot;1string字符串类&quot;&gt;1.string字符串类&lt;/h2&gt;

&lt;p&gt;前面说using可以用于类型别名，using也可以用于声明命名空间。
using namespace::name
不过头文件中不应包含using声明，因为这会导致头文件在被拷贝时多次重复声明using。&lt;/p&gt;

&lt;p&gt;string是标准库中的类对象。
string在使用中最容易发生的问题就是拷贝。
特别是等号(=、+)引起的合并和拷贝需要注意。
string在比较时(==、!=、&amp;lt;、&amp;lt;=、&amp;gt;、&amp;gt;=)有比较算法但每个字符都会比较。&lt;/p&gt;

&lt;p&gt;严格来说string对象不属于容器类型，但string支持很多与容器类似的操作，比如下标、迭代器等。&lt;/p&gt;

&lt;h2 id=&quot;2vector动态数组&quot;&gt;2.vector动态数组&lt;/h2&gt;

&lt;p&gt;vector是标准中的动态数组模版库。
模版本身不是类或函数，可以把模版看成编译器生成的类或函数。编译器根据模版创建类或函数的过程称为实例化。因此使用模版时，我们要指出编译器应把类或函数实例化成何种类型。
因此vector是模版而非类型，由vector生成的类才叫类型。&lt;/p&gt;

&lt;p&gt;vector容器本身就是对象，因此也能通过拷贝初始化。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 初始化3个元素，1、2、3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 初始化10个元素，都是-1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 用拷贝来初始化，将v1中的数据拷贝到v3，完成后v3拥有独立的数据&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 提前预备20个值，每个值都是0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;由于vector是动态数组，因此如果能在初始化时提前告知vector的话，vector就不用扩容了，运行时性能会更好。&lt;/p&gt;

&lt;h2 id=&quot;3迭代器&quot;&gt;3.迭代器&lt;/h2&gt;

&lt;p&gt;迭代器有三种不同含意，一是迭代器概念本身，二是容器定义的迭代器类型，三是指某个迭代器对象。&lt;/p&gt;

&lt;p&gt;有时她跟指针很像，但又完全不一样。&lt;/p&gt;

&lt;p&gt;其实迭代器是个由模版封装过的类，根据不同的类型的容器，编译器生成功能相似但命名不同的类。&lt;/p&gt;

&lt;p&gt;迭代器又重写了==、&amp;gt;、&amp;lt;、!=、&amp;lt;=、&amp;gt;=、+=、-=运算符，使得我们在编写代码时更加方便。&lt;/p&gt;

&lt;p&gt;共识：当使用迭代器时如果对容器做了增删操作，则会使得迭代器失效，甚至报错和崩溃。&lt;/p&gt;

&lt;p&gt;迭代器对象是实时生成的，当我们获取迭代器对象时，容器会实时生成一个迭代器对象，我们再通过操作这个迭代器对象达成我们的目的。&lt;/p&gt;

&lt;h2 id=&quot;4数组&quot;&gt;4.数组&lt;/h2&gt;

&lt;p&gt;一些复杂的数组声明难以理解，因此如果能从数组的名字开始按照由内向外的顺序阅读会更加容易些。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 普通数组含有10个整数&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ptrs是含有10个整数指针的数组&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Parray指向一个含有10个整数的数组&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// arrRef引用一个含有10个整数的数组&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//arry是数组的引用，该数组含有10个整数指针&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;数组真正使用的时候编译器会把它转成指针。
因此指向数组的指针可以使用+、-、==、!=运算符号来操作数组。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// e指向arr元素的下一位置&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;至于多维数组，严格来说C++中没有多维数组，通常所说的多维数组其实是数组的数组，也就是用数组类型组成的数组。&lt;/p&gt;

&lt;p&gt;其中要注意的是在多维数组遍历时，其遍历顺序应该按照数组的整块内存来遍历，否则命中效率比较低。&lt;/p&gt;
</description>
               <pubDate>Sat, 12 Jun 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/06/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B026</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/06/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B026</guid>
            </item>
        
            <item>
               <title>读书笔记(二十五) 《C++ Primer》#1</title>
               <description>&lt;h2 id=&quot;背景&quot;&gt;背景：&lt;/h2&gt;

&lt;p&gt;我为什么要重学C++？第一是巩固核心，软件编程有三大核心，语言、操作系统、框架设计，语言首当其冲，核心能力大都看不见摸不着只有你自己知道的东西。第二是将分散的知识串联起来，这样就能产生新的知识和新的创意，将这些知识变成智慧融合到身体中。&lt;/p&gt;

&lt;p&gt;本系列基于《C++ Primer》学习，重学的时候，我略过了滚瓜烂熟的部分，挑出以前忽略的，以及记忆没有那么深刻的，特别是那些重要的但以前没有上心的部分。&lt;/p&gt;

&lt;h2 id=&quot;开始&quot;&gt;开始&lt;/h2&gt;

&lt;p&gt;使用命令行界面来学习c++会更好一些，这种学习方式可以让你将精力集中在c++语言本身上，一旦掌握了语言，使用和学习IDE编辑器通常也更容易些。&lt;/p&gt;

&lt;p&gt;.h文件作为头文件只是程序员的习惯，头文件后缀并没有特定的规范，通常为了方便查看都以.h为后缀。&lt;/p&gt;

&lt;p&gt;编译器一般不关心文件名的形式，但有的IDE对此有特定要求。&lt;/p&gt;

&lt;h2 id=&quot;c基础&quot;&gt;c++基础&lt;/h2&gt;

&lt;p&gt;c++是一种静态数据类型语言，它的类型检查发生在编译时。因此，编译器必须知道程序中每一个变量对应的数据类型。&lt;/p&gt;

&lt;p&gt;c++提供了一组内置数据类型、相应的运算符、以及为数不多的程序流控制语句，这些元素共同构成了c++语言的基本形态。&lt;/p&gt;

&lt;p&gt;仅就c++的基本形态来说，它是一种简单的编程语言。&lt;/p&gt;

&lt;p&gt;但其强大的能力显示于它对程序员自定义数据结构的支持，程序员可以通过自主定义新的数据结构来使语言满足他们各自的需求。&lt;/p&gt;

&lt;p&gt;省略掉一些简单变量类型的内容，将一些特别需要注意，以及大家常忽略又比较重要的内容提取出来。&lt;/p&gt;

&lt;p&gt;类型转换&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;char在一些机器上是有符号的，另一些机器上则是无符号的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当我们赋值给一个无符号类型的变量一个超出它范围的值时，结果是总数取模后的余数。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当我们赋值给带符号类型一个超出他范围的值时，结果是未定义（不可预测）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;切勿混用有符号和无符号的类型，如果表达式里既有带符号又有无符号类型，带符号的数会自动转换成无符号，如果是个负数则会出现异常结果。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;无法预知的行为源于编译器无须检查的错误。在某些情况或某些编译器下，含有无法预知行为的程序也能正确执行。&lt;/p&gt;

&lt;p&gt;不可移植通常都是程序依赖了环境，或操作系统环境或编译器环境，程序应该尽量避免依赖于实现环境的行为。例如我们把 int 的尺寸看成一个固定不变的值，这样的程序就称为不可移植。&lt;/p&gt;

&lt;h2 id=&quot;变量&quot;&gt;变量&lt;/h2&gt;

&lt;p&gt;何为对象？对象就是指一块能存储数据并具有某种类型的内存空间。&lt;/p&gt;

&lt;p&gt;初始化是一个复杂的过程，很多程序员对于初始化的认识，停留在=等号赋值的认知上。事实上它完全不是这样的。&lt;/p&gt;

&lt;p&gt;它有构造、拷贝、赋值三种途径，且有默认构造、未初始化、定义与声明三个容易出错的地方。&lt;/p&gt;

&lt;p&gt;初始化并不一定被默认执行，这是因为并对象不一定有默认构造函数，且有些编译器构造的默认构造函数并不一定会去初始化变量，这导致一个未被初始化的变量在拷贝和访问时就会引发错误，因此我们最好自己主动的去初始化每个变量。&lt;/p&gt;

&lt;p&gt;c++支持分离式编译，允许将程序分为若干个文件，每个文件可被独立编译。&lt;/p&gt;

&lt;p&gt;因此我们可以把变量的定义和声明区分开来，即在某个文件中定义，在另一些文件中声明后再使用。&lt;/p&gt;

&lt;p&gt;变量能且只能定义一次，但可以被多次声明，在声明时不能重复初始化：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// a.cpp&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//定义&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// b.cpp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//声明&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;global_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// c.cpp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;global_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//声明&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;global_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;如上代码中，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;中定义了&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global_index&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;并初始化为&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，在&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;和&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;中使用。&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;复合类型&quot;&gt;复合类型&lt;/h2&gt;

&lt;p&gt;复合类型有两种，即引用和指针。&lt;/p&gt;

&lt;p&gt;引用特点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	引用本身不是对象，而它必须绑定一个对象。

	引用在定义时必须被初始化，它不能为空。

	引用在初始化后，与它的值绑定在一起，并且无法再重新绑定到另外的对象上。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指针特点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	指针本身就有自己的对象概念，存放的是对象的地址，可为null也可以为具体的指针值。

	指针无须在定义时初始化（未初始化有风险），可以为空，也可以指向某个对象，也可能是无效的野指针。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;引用和指针通过，取地址符（&amp;amp;），解引用（*）来操作，我们来举个例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 初始化&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 绑定dval&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 取地址，赋值给指针&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 此时dval 为3，tval也为3，*pd也为3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;特殊指针：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	1.c++11中引入了nullptr的空指针类型，以前用的NULL空指针，其实质是一个宏预处理，NULL定义在cstdlib中值为0。
	
	2.void*也是特殊指针，可用于存放任意对象地址。但不能操作void*指针所指的对象，因为我们并不知道这个对象到底是什么类型，它仅仅是内存空间。
&lt;/code&gt;&lt;/pre&gt;

</description>
               <pubDate>Mon, 07 Jun 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/06/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B025</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/06/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B025</guid>
            </item>
        
            <item>
               <title>读书笔记(二十四) 《如何高效阅读 - 中》</title>
               <description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247484709&amp;amp;idx=1&amp;amp;sn=4c609d7afb6e41db78948f7797e31de6&amp;amp;chksm=fc226022cb55e934935d6df6b188978331f28a6854abd70eec313fc71d225a709bdcbd291af0&amp;amp;token=679775473&amp;amp;lang=zh_CN#rd&quot;&gt;原文发布在微信公众号上，点击跳转到网页地址&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景：&lt;/h2&gt;

&lt;p&gt;看了很多书，也总结过很多书，对如何看书以及如何总结书本仍然迷茫。
所以自己找了3本书，《如何阅读》、《如何阅读一本书》、《如何高效阅读一本书》，专门针对这三本书做了仔细的总结和分析。
我把文章分为上、中、下三篇，本篇为中篇，讲的是《如何阅读一本书》这本书。&lt;/p&gt;

&lt;p&gt;书中有几个方法和框架，无论你是完全照做，或只是掌握个形式，你都得了解要如何跟着规则走，这是第一步。&lt;/p&gt;

&lt;p&gt;只有了解规则怎么走，熟悉了规则，才会能逐渐掌握。就像我们在学习新知识的时候那样，可能一开始只是模仿，只是形式上的掌握，没有触及技巧的灵魂。随着我们熟练度的深入，规则越来越熟悉，技巧越来越熟练，也就慢慢地将技巧的灵魂融入到我们的身体中甚至生活习惯中。&lt;/p&gt;

&lt;p&gt;下面我们就来看看书中是怎么论述阅读规则和技巧的。&lt;/p&gt;

&lt;h2 id=&quot;简要总结&quot;&gt;简要总结：&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;阅读有四个层次，基础阅读、检视阅读、分析阅读、主题阅读。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主动阅读就是带着目的阅读，在阅读前提出问题，带着问题阅读，并且在多次重复阅读中回答问题。最后阅读完成用自己的语言写大纲和评价。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主题阅读需要阅读很多同一主题的书，然后再做分析和讨论。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;针对不同类型的读物，我们需要用不同类型的方法。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;珍惜一本好书的方法，就是读很多遍，甚至是一辈子都在读。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主动阅读对我们各方面的帮助都会很大。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文：&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247484709&amp;amp;idx=1&amp;amp;sn=4c609d7afb6e41db78948f7797e31de6&amp;amp;chksm=fc226022cb55e934935d6df6b188978331f28a6854abd70eec313fc71d225a709bdcbd291af0&amp;amp;token=679775473&amp;amp;lang=zh_CN#rd&quot;&gt;原文发布在微信公众号上，点击跳转到网页地址&lt;/a&gt;&lt;/p&gt;

</description>
               <pubDate>Sat, 29 May 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/05/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B024</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/05/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B024</guid>
            </item>
        
            <item>
               <title>读书笔记(二十三) 《如何高效阅读 - 上》</title>
               <description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247484653&amp;amp;idx=1&amp;amp;sn=f16e52ea17560947ace74b8a7ecfaefb&amp;amp;chksm=fc2261eacb55e8fc2d96d43bcf8dc1978cfa67e678d5003b793d33a7adb7bdf7b4859e28c740&amp;amp;token=2074622695&amp;amp;lang=zh_CN#rd&quot;&gt;原文发布在微信公众号上，点击跳转到网页地址&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景：&lt;/h2&gt;

&lt;p&gt;看了很多书，也总结了很多书，但对读书这个词语越来越迷茫。&lt;/p&gt;

&lt;p&gt;迷茫的是，不知道自己的阅读习惯是否真的好，自己的阅读效率是否真的高，我对自己的阅读能力不自信。&lt;/p&gt;

&lt;p&gt;因此买了三本经典阅读技巧书，一本是《如何阅读一本书》、另一个本是《如何阅读》，再加上去年读过的《如何有效阅读一本书》，&lt;/p&gt;

&lt;p&gt;三本书加起来，对阅读的技巧和效率做一个巩固和总结。因此我把此系列总结文章分成三部分，上、中、下，本文是上篇。&lt;/p&gt;

&lt;p&gt;本文总结的是《如何阅读》这本书，它主要讲的主题是，如何提高我们的阅读速度。&lt;/p&gt;

&lt;p&gt;阅读速度是否是阅读的关键呢，我认为是的，但也认为不是。关键在于你怎么理解和运用。我们来看看作者是怎么认为的。&lt;/p&gt;

&lt;p&gt;文中并没有详细的提到带着目的去阅读的具体方法，但全文都在提倡带着目的去阅读，我认为这是个重要方法，这个重要的方法我打算在另一本书《如何阅读一本书》的总结里做分析。&lt;/p&gt;

&lt;h2 id=&quot;简要总结&quot;&gt;简要总结：&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;不一定什么书都要细读，针对不同的书要使用不同的阅读方式。

提高阅读速度的技巧有很多种，针对不同的内容使用不同阅读速度。

阅读的环境和习惯是提高效率的一个重要关键点。

理解力是阅读效率的一个重要指标，它要求我们和作者不断对话，彼此交流达到沟通理解的地步。

阅读笔记是增加理解力，加强注意力，提高回顾效率的一个有效方式。
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文：&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247484653&amp;amp;idx=1&amp;amp;sn=f16e52ea17560947ace74b8a7ecfaefb&amp;amp;chksm=fc2261eacb55e8fc2d96d43bcf8dc1978cfa67e678d5003b793d33a7adb7bdf7b4859e28c740&amp;amp;token=2074622695&amp;amp;lang=zh_CN#rd&quot;&gt;原文发布在微信公众号上，点击跳转到网页地址&lt;/a&gt;&lt;/p&gt;

</description>
               <pubDate>Sun, 23 May 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/05/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B023</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/05/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B023</guid>
            </item>
        
            <item>
               <title>思路探讨(六十五) 人生的框架</title>
               <description>&lt;p&gt;目标管理从2月份到现在已经实践了有一段时间了，它给我带来了很多震撼的效果，也开阔了我不少视野。&lt;/p&gt;

&lt;p&gt;我慢慢发现行为习惯和思维习惯的改变就像脱胎换骨一样，是极难的，也是极其痛苦的过程。&lt;/p&gt;

&lt;p&gt;当然这也意味着，目标管理的这3个月折磨的我很痛苦，不过这些都是值得的，都是改变行为习惯和思维习惯所必须经历。人就是这样的，改变的太多太快，身体就会承受很大的痛苦，心思上和肉体上都会有。&lt;/p&gt;

&lt;h3 id=&quot;最大的体会是目标给我提供了动力和方向&quot;&gt;最大的体会是，目标给我提供了动力和方向。&lt;/h3&gt;

&lt;p&gt;这给了我很多提示，很多旧思想和旧习惯在我脑海中浮现。&lt;/p&gt;

&lt;p&gt;以前经常会去寻找安全感，去为获得安全感而努力，比如想着有一天能安心躺着赚钱，或者存够钱去农村养老，或者找到一份安逸稳定的饭碗，还有我们总是想早点完成手头上的工作来获得安全感。&lt;/p&gt;

&lt;p&gt;这其实就是人性的一面，为获得安全感而活，所以很多新闻标题都以恐吓人的方式来命名，以吸引人来关注。&lt;/p&gt;

&lt;h3 id=&quot;这些年的经历告诉我不要试图去追求安全感周遭的环境从来都不会有绝对的安全如果有那肯定是陷进你安全的越久就会陷的越深越无法自拔&quot;&gt;这些年的经历告诉我，不要试图去追求安全感，周遭的环境从来都不会有绝对的安全，如果有，那肯定是陷进，你安全的越久，就会陷的越深越无法自拔。&lt;/h3&gt;

&lt;h3 id=&quot;只有不断的挑战不断努力不断拼搏才能让自己有永恒的动力才会有不灭的优势&quot;&gt;只有不断的挑战，不断努力，不断拼搏，才能让自己有永恒的动力，才会有不灭的优势。&lt;/h3&gt;

&lt;p&gt;也体会到，人越老，年龄越大就越对周围的事物失去兴趣，保持热情变得越来越困难。&lt;/p&gt;

&lt;p&gt;年轻时对周围的事物都充满了新鲜感，社会生活了10几年后，这层新鲜感就不在了，留下的都是枯燥和乏味。有些人沉沦，有些人走偏，这也都是在预料之中的事。&lt;/p&gt;

&lt;p&gt;保持热情，就要保持好奇。而保持好奇心最好的方式，就要有目标，这些都是一环扣一环的，有目标，可量化，就能得到反馈，有反馈就有令人兴奋的动力。&lt;/p&gt;

&lt;p&gt;这些我都写在《目标管理》的一篇文章中，这些年我建立了自己的框架，框架中包含了做人做事的心态，家庭，价值观，目标，行为习惯和思维习惯等方方面面，我希望我的人生是平衡的，这样走下去才会更加的稳。&lt;/p&gt;

&lt;p&gt;什么是更加稳的人生呢？&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.更少的情绪波动（外部波动可能很大，内部波动则更小）

2.要事优先，做更重要的事情

3.朝着正确的人生方向不偏离

4.帮助周围的人一起往更好的方向奔去
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同时这个框架让我所做的事情变得可积累，甚至是把原本不可积累事情的变成了可积累。这样，在这个框架中，我积累的越多，框架就越强大，我也会活的更好些。&lt;/p&gt;

&lt;h3 id=&quot;当然框架不是一蹴而就的可能需要建设10年20年甚至一辈子所以我一直在完善这个框架不断去调整它加入更好的元素去掉错误的理解调整偏离的方向&quot;&gt;当然，框架不是一蹴而就的，可能需要建设10年20年甚至一辈子，所以我一直在完善这个框架，不断去调整它，加入更好的元素，去掉错误的理解，调整偏离的方向。&lt;/h3&gt;

&lt;p&gt;框架也同时成为了我人生中的可以一直感兴趣的事情，因为我在不断研究它完善它，我相信这个框架会给我带来越来越好的人生。也希望各位能共同努力，往更好的人生方向奔去。&lt;/p&gt;

&lt;p&gt;一点点小总结，希望能给大家带去一些参考价值。&lt;/p&gt;
</description>
               <pubDate>Fri, 14 May 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/05/14/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A865</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/05/14/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A865</guid>
            </item>
        
            <item>
               <title>读书笔记(二十二) 《金字塔原理》下</title>
               <description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247484626&amp;amp;idx=1&amp;amp;sn=cdbe54838b9b0207441663acb49bec6f&amp;amp;chksm=fc2261d5cb55e8c3185818b45f69941cffe1cfe7466b901b907c08d16576a04a3eb11890b6e0&amp;amp;token=1892444225&amp;amp;lang=zh_CN#rd&quot;&gt;原文发布在微信公众号上，点击跳转到网页地址&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景：&lt;/h2&gt;

&lt;p&gt;上一篇，我们总结了《金字塔原理》上半部分，这一篇继续了解思考、表达的逻辑。&lt;/p&gt;

&lt;p&gt;本书我们主要学习的是框架，以前都是没有章法的去思考、去表达、去分析，看了这本书后就知道思考、表达、分析、和解决问题的框架。
当然理论和实践差距比较大，我们应该把这些理论落地到实践中去。&lt;/p&gt;

&lt;p&gt;建立起自己在现实中的框架，这样我们在学习和工作中会更稳一些，倘若我们发现自己的框架有问题，
我们则需要停下来先修理自己的框架，这样就能逐渐形成自己的体系，从而让你更有章法、更有节奏、更有效率的去解决问题。&lt;/p&gt;

&lt;h2 id=&quot;概述&quot;&gt;概述：&lt;/h2&gt;

&lt;p&gt;回顾一下前面的知识，前面我们说了，我们在表达时的逻辑，表达时要以金字塔的形式叙述，这样能让听者和读者更容易接受。&lt;/p&gt;

&lt;p&gt;序言的故事结构，就很好的契合了这种表达目的，由于序言常以故事结构作为表达形式，而人更容易接受以故事形式叙述的事情，所以它更能让人接受和吸收。&lt;/p&gt;

&lt;p&gt;序言有4个要素组成，即背景、冲突、疑问、答案，遵照这4个要素，我们在表达时就会更容易些。&lt;/p&gt;

&lt;p&gt;表达逻辑之后，也讲到思考的逻辑。我们在应用逻辑顺序时，会用到逻辑的时间顺序、结构顺序、程度顺序去分析和归纳问题。&lt;/p&gt;

&lt;p&gt;当然，采用各种逻辑思考最终目的是要产生新的思想，那么如何提高产生新的思想的概率呢，我们可以通过分析和归纳的方法。&lt;/p&gt;

&lt;p&gt;即，列出值得思考的思想、找出思想之间的共同点、提出新的思想。&lt;/p&gt;

&lt;p&gt;简单回顾到这里，现在继续下篇的总结，内容包括：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;解决问题的逻辑
    &lt;ul&gt;
      &lt;li&gt;界定问题的框架&lt;/li&gt;
      &lt;li&gt;结构化分析问题&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;演示的逻辑
    &lt;ul&gt;
      &lt;li&gt;书面上的金字塔&lt;/li&gt;
      &lt;li&gt;PPT上的金字塔&lt;/li&gt;
      &lt;li&gt;字里行间的金字塔&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文：&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247484626&amp;amp;idx=1&amp;amp;sn=cdbe54838b9b0207441663acb49bec6f&amp;amp;chksm=fc2261d5cb55e8c3185818b45f69941cffe1cfe7466b901b907c08d16576a04a3eb11890b6e0&amp;amp;token=1892444225&amp;amp;lang=zh_CN#rd&quot;&gt;原文发布在微信公众号上，点击跳转到网页地址&lt;/a&gt;&lt;/p&gt;

</description>
               <pubDate>Sun, 09 May 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/05/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B022</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/05/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B022</guid>
            </item>
        
            <item>
               <title>思路探讨(六十四) 习惯养成-阅读技巧-要事优先</title>
               <description>&lt;p&gt;看到了越来越多人的努力和奋进，因此不要以为自己是最努力的那个。&lt;/p&gt;

&lt;p&gt;当然努力只是开始，为了能有一个好的结果，我们不只是努力就够了，还要有目标和策略。&lt;/p&gt;

&lt;p&gt;人总是对自己当前的能力高估，对自己的未来低估。这是自然反应，反人性的。&lt;/p&gt;

&lt;p&gt;为了能做反人性的事做的更好，我们需要形成好习惯，这样才能在反人性的事情上，做起来更容易些。&lt;/p&gt;

&lt;p&gt;最近开始整理读书技巧，以前看过《如何有效阅读一本书》改进了下自己在阅读时的习惯和技巧，现在正在看《如何阅读一本书》，&lt;/p&gt;

&lt;p&gt;前一本是日本人写的，后一本是美国人写的，两本书的风格不同，但都挺有用的，&lt;/p&gt;

&lt;p&gt;我把两本书结合起来，巩固自己的阅读技巧，这对自己巩固学习基础建设很重要，磨刀不误砍柴工。&lt;/p&gt;

&lt;p&gt;最后聊下事情的重要性，我发现生活中90%的事情都是紧急但不重要的，而10%是重要的事情却常常被我们以各种理由搁置。&lt;/p&gt;

&lt;p&gt;因此我们常常做的都是无用功，做这些无用功的理由通常是比较荒唐的，但当事人以及周围的人听起来却是理所当然。&lt;/p&gt;

&lt;p&gt;这些，养成好习惯、做重要的事情、巩固基础技巧、历史和人性，我将继续总结，继续说出我的理解，继续分享。&lt;/p&gt;

</description>
               <pubDate>Mon, 03 May 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/05/03/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A864</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/05/03/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A864</guid>
            </item>
        
            <item>
               <title>思路探讨(六十三) 投资-工作-生活</title>
               <description>&lt;p&gt;假如你的股票投资，已经有100万，并且已经盈利了50%，你在这场投资游戏中还会慌吗？&lt;/p&gt;

&lt;p&gt;如果投资注定是一场漫长的游戏，那么你该如何正确的面对一时的亏损，面对投资标的的选择？&lt;/p&gt;

&lt;p&gt;投资本身就反应了我们的价值观，这种价值观最后都会反应到，投资回报中，从长期来看就是这样的。&lt;/p&gt;

&lt;p&gt;当然这中间，波动会很大，你会意外的发现买了后就涨或跌，如果你需要安全感，就不要做投资，投资本身就是打破安全感的事情。&lt;/p&gt;

&lt;p&gt;投资也好，工作也好，生活也好，其实都是一个道理。&lt;/p&gt;

&lt;p&gt;最终你会发现，其实事情可以很简单，做好人做好事，多帮助他人，这样我们保持下去，生活就会对我们好。&lt;/p&gt;

&lt;p&gt;但因为时间过于漫长了，效果也很难在短时间见到，所以很多人都想走捷径，最终走了偏门。&lt;/p&gt;

&lt;p&gt;其实最艰难的道路就是捷径，那就是做好自己，帮助他人，一步一个脚印脚踏实地向前走。&lt;/p&gt;

&lt;p&gt;再看看自己的平衡轮，将自己的轮子平衡一下，这样就可以走的更稳一些，同时稳的同时也更快了。&lt;/p&gt;

</description>
               <pubDate>Tue, 27 Apr 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/04/27/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A863</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/04/27/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A863</guid>
            </item>
        
            <item>
               <title>思路探讨(六十二) 知识的深度与广度</title>
               <description>&lt;p&gt;知识的深度和广度都是非常重要的，没有一定说，只做某个方向一定能成，或者说只要涉猎足够广一定能成事。&lt;/p&gt;

&lt;p&gt;很多有知识深度的人，特别是某个专业领域特别强的人，会去鄙视那些专业程度不深但知道很多个领域知识的人。
例如学者就常看不上商人，学者有足够深的专业，而商人则有足够广的领域涉猎。
其实这种思维是非常错误的，也是狭隘的，其本身的做法也是不够明智的。&lt;/p&gt;

&lt;p&gt;实际上深度和广度是兼并的，知识的深度支撑了广度，广度又回馈了深度，这样深度和广度相辅相成的才是比较好的模式，这也是人们口中常说的“一专多精”的意义所在。&lt;/p&gt;

&lt;p&gt;就像你懂的事情越多，越能对事物提出不同的观点那样。不同领域间的知识常以惊人的方式互相取长补短。毕竟，创造的核心是将从未有过交集的东西融合在一起。&lt;/p&gt;

&lt;p&gt;如果你接受了人需要博识的观点后，学会了微精通，那么你就能从多种微精通实践中获得了思维流畅性，自然而然就从封闭转换到了开放。&lt;/p&gt;

&lt;p&gt;这是种普遍的生活观，开放地拥抱生活中的各种奇迹机遇，你就会变得乐于学习了，因为你知道了获取专业知识的微精通的奥秘，不再有被其他领域拒之门外的挫败感。那时你就会变得信心十足、无所畏惧，这是任何境遇下都需要的优秀品质。&lt;/p&gt;

</description>
               <pubDate>Sun, 18 Apr 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/04/18/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A862</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/04/18/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A862</guid>
            </item>
        
            <item>
               <title>读书笔记(二十一) 《金字塔原理》上</title>
               <description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247484575&amp;amp;idx=1&amp;amp;sn=2d34a8dbcfb9c1210fa3e0ae5b0c13fb&amp;amp;chksm=fc226198cb55e88e892b31fa217da8e11e8eb6bfbcbd74805e610b706f69c4e776cb7da9b40f&amp;amp;token=673219380&amp;amp;lang=zh_CN#rd&quot;&gt;原文发布在微信公众号上，点击跳转到网页地址&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;背景&quot;&gt;背景：&lt;/h3&gt;

&lt;p&gt;很多同学在大学里就已经学习过《金字塔原理》，这本书主要讲了如何借鉴几个经典的框架来解决和表达问题。&lt;/p&gt;

&lt;p&gt;看了这本书后，发现书中说的东西非常好，于是我在现实生活和工作中也落地实践了许多，基于这些理论和实践经验，我想对这本书中所描述的知识做一次全面的回顾和总结。&lt;/p&gt;

&lt;h3 id=&quot;疑问&quot;&gt;疑问：&lt;/h3&gt;

&lt;p&gt;为了能够更好的理解这本书，我同时给自己提了很多疑问，这让我在看书的同时有了目标性。
我也想通过疑问-解答的方式来总结这本书的内容，因为这种方式更能让人接受。&lt;/p&gt;

&lt;p&gt;为什么说是金字塔？（让人感觉很势利）
为什么要用框架去解决问题？会不会让做事变的很死板？
有哪些比较经典的框架？
它们具体是怎么去做表达和解决问题的？&lt;/p&gt;

&lt;h3 id=&quot;概述&quot;&gt;概述：&lt;/h3&gt;

&lt;p&gt;金字塔原理是一种突出重点、逻辑清晰、层次分明、简单易懂的思考方式和沟通方式。&lt;/p&gt;

&lt;p&gt;它的基本结构是：结论先行，以上统下，归类分组，逻辑递进。先重要后次要，先总结后具体，先框架后细节，先结论后原因，先结果后过程，先论点后论据。&lt;/p&gt;

&lt;p&gt;它能够帮助我们挖掘受众的意图、需求点、利益点、关注点、兴趣点。
也能让我们在沟通时达到，观点鲜明、重点突出、思路清晰、层次分明、简单易懂，让对方有兴趣、能理解、记得住。
其具体做法是，自上而下的表达，自上而下的思考，纵向总结概括，横向归类分组，序言讲故事，标题提炼思想精华。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247484575&amp;amp;idx=1&amp;amp;sn=2d34a8dbcfb9c1210fa3e0ae5b0c13fb&amp;amp;chksm=fc226198cb55e88e892b31fa217da8e11e8eb6bfbcbd74805e610b706f69c4e776cb7da9b40f&amp;amp;token=673219380&amp;amp;lang=zh_CN#rd&quot;&gt;原文发布在微信公众号上，点击跳转到网页地址&lt;/a&gt;&lt;/p&gt;

</description>
               <pubDate>Sun, 11 Apr 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/04/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B021</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/04/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B021</guid>
            </item>
        
    </channel>
</rss>