<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title></title>
        <description>漫漫人生,记录点滴技术,始于2013</description>
        <link>http://www.luzexi.com</link>
        <atom:link href="http://www.luzexi.com/assets/feed.xml" rel="self" type="application/rss+xml" />
        
            <item>
               <title>《Unity3D高级编程之进阶主程》第一章，C#要点技术(五) 排序算法</title>
               <description>&lt;p&gt;年纪越大，写程序写的越多，时间越长，就越觉得算法的重要性，基础能力决定你到底能走多远。&lt;/p&gt;

&lt;p&gt;我们不是写一两年就完事的，从毕业算起，我们可能要写20-30年的程序，这段漫长的长跑路程中，最终比的不是谁熟悉API比较多，也不是谁用插件用的有多熟练，更不是比谁更熟悉某软件，而是比谁的算法能力强，比谁对底层结构更加熟知于心，比谁能够解决的系统复杂度有多高。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;算法能力非常重要，在程序生涯中，算法是基础能力，很多时候程序的好坏，一方面看的是写程序的经验，另一方面看的是对计算机原理的理解程度，还有一方面看的是对算法的运用到如何程度。&lt;/p&gt;

&lt;p&gt;算法能力不仅仅是表面的算法熟知度，更是种精神高度，对所有经过自己手的程序效率负责的精神高度。某一处的算法有可能运用的很好，但如果其他地方都用烂算法，对于整体程序效率来说其实也没什么用，效率依然很烂。&lt;/p&gt;

&lt;p&gt;在平时的编程时，做到时刻关注算法的效率是区分中、高水平的一个大的关键点。&lt;/p&gt;

&lt;p&gt;其中排序和搜索算法最为常用。毫不夸张的说一个项目中有90%的算法都是排序和搜索算法，如果说我们把这90%的算法提高到一个很高效的程度，那么剩下的10%算法处理起来也没那么压力了。&lt;/p&gt;

&lt;h3&gt;快速排序算法&lt;/h3&gt;

&lt;p&gt;快速排序，也叫二分排序，是最最最常用，最最最好用，用的最最最多的排序算法。它的排序方式是：&lt;/p&gt;

&lt;p&gt;1.从序列中选一个元素作为基准元素&lt;/p&gt;

&lt;p&gt;2.把比基准元素小的元素移到基准元素的左边，把基准元素大的移到右边。&lt;/p&gt;

&lt;p&gt;3.对分开来的二个一大一小区块进行递归再筛选，对两个区块同样进行1、2的两个步骤处理。&lt;/p&gt;

&lt;p&gt;简单来说就是把一个区域的数字分成两半，一半比另一半大。然后继续对这两半做同样的操作。&lt;/p&gt;

&lt;p&gt;由于这是最常用的排序方法，几乎占据50%以上的排序算法编码量，所以我们要着重优化此算法，对大批量使用的算法和程序绝对不能忽视。&lt;/p&gt;

&lt;h3&gt;优化：&lt;/h3&gt;

&lt;h6&gt;1.随机选择中轴数&lt;/h6&gt;

&lt;p&gt;如果选中的数字不是中位数，而是一个比较偏左或者比较偏右的数字，那么排序的速度就会降低，比如选中的刚好是最大的或者最小的数字，左边完全没有数字可以排，而所有数字都在它的右边。&lt;/p&gt;

&lt;p&gt;我们肯定无法准确的找到中位数，但是我们可以随机一个列表上的元素来作为基准元素。&lt;/p&gt;

&lt;p&gt;随机是为了减小选到最大和最小值的概率，但随机也时常会选到坏的基准元素，实际上随机数并没有对排序提供多大的帮助。&lt;/p&gt;

&lt;h6&gt;2.三数取中&lt;/h6&gt;

&lt;p&gt;为了让选择的中轴数更加接近中位数，可以先选择头、中点、尾，三个数字先来次排序，把最小的放在头，中间的放在中，最大的放在尾。&lt;/p&gt;

&lt;p&gt;每次每个区间的头中尾的排序前都做这个操作，也就是说，每次排序前，中位数都不可能是最小的，起码是区间里第2小的或者第2大的，这样选出来的中轴数靠近中位数就的概率就大了。&lt;/p&gt;

&lt;p&gt;虽然可以把三个数扩大到M个数，但过多数字的选择就相当于多出了个一个排序算法，减慢的二分排序的效果。实际效果不如3个数字来的快。&lt;/p&gt;

&lt;p&gt;也可以用随机选取3个数字的方式来替代做选择，但实际上随机性并没有多大的帮助，况且伪随机数的计算也是需要消耗cpu的，而常用的头，中，尾的做法是选择接近中位数的比较有效的办法。&lt;/p&gt;

&lt;h6&gt;3，小区间使用插入排序&lt;/h6&gt;

&lt;p&gt;插入排序和二分排序一样都依赖于序列的有序性，如果是反序列效率最差，反之如果是有序序列效率最大。&lt;/p&gt;

&lt;p&gt;其中，插入排序当序列越长，效率越差，而短序列的排序效果则很好，序列长度在8左右。&lt;/p&gt;

&lt;p&gt;在排序中，当切分的区块小于等于8的个数时，就可以采用插入排序来替代二分排序，其他时候任然采用二分切割算法。&lt;/p&gt;

&lt;h6&gt;4，缩小分割范围，与中轴数相同的合并在一起&lt;/h6&gt;

&lt;p&gt;与中轴数相同的数可以立即合并到中轴数的位置，使得后面的分割范围变得小，范围越小，排序的速度越快。&lt;/p&gt;

&lt;p&gt;具体做法是，在二分比较中，当元素与中轴数相等时就移动到中轴数身边，移动完毕后，划分范围从中轴数变为最边上的相同元素的位置。&lt;/p&gt;

&lt;h6&gt;快速排序是最常用，使用范围最广的排序算法，铭记于心是有必要的。&lt;/h6&gt;

&lt;h3&gt;其他排序简要&lt;/h3&gt;

&lt;p&gt;其他排序虽然使用频率没有快速排序来的多，但提供了对解决问题的思路很有帮助。&lt;/p&gt;

&lt;p&gt;比如，桶排序，把所有的元素按一定大小范围分成N个组，对每个组进行快速排序，最终得到有序的数组，并且得到N个桶的记录，虽然第一次排序的速度不怎么样，但这N个桶的信息记录下来后对于后面的程序逻辑有非常大的帮助。&lt;/p&gt;

&lt;p&gt;又比如，堆排序，和快速排序一样用的是二分的方式，是一种近似完全二叉树的结构，速度上虽然没有快速排序来的快，但却能快速定位某元素，排序完成后，形成的有序最大堆或最小堆数据结构在后面程序逻辑需要插入新元素，找某元素时，效率比较高。&lt;/p&gt;

&lt;p&gt;再比如，基数排序，是针对元素的特性来实时的‘分配式排序’，利用数字的特性按个位数，十位数，百位数的性质放入0-9的桶中不用排序，几次合并后直接就是有序数组，利用元素特性排序的速度比任何其他排序方式都要快速。这就教会我们，在运用算法时，首先要从元素的特性和环境着手，找到更合适更快的算法。&lt;/p&gt;

&lt;h6&gt;基本的、常用的几种排序算法是我们需要了解的，当我们面对需要解决的难题时，我们的思路就更为广阔，算法在实际运用中并不是固定的，适合的才是最好的，我们应该随着问题环境的变化而变化，找到最佳的突破口。&lt;/h6&gt;
</description>
               <pubDate>Sun, 03 Feb 2019 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com//2019/02/03/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-CSharp%E8%A6%81%E7%82%B9%E6%8A%80%E6%9C%AF5.html</link>
               <guid isPermaLink="true">http://www.luzexi.com//2019/02/03/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-CSharp%E8%A6%81%E7%82%B9%E6%8A%80%E6%9C%AF5.html</guid>
            </item>
        
            <item>
               <title>《Unity3D高级编程之进阶主程》第一章，C#要点技术(四) 委托、事件、装箱、拆箱</title>
               <description>&lt;h3&gt;委托(delegate)与事件(Event)的实质&lt;/h3&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;使用过C或C++的同学都对指针很清楚，指针是个需要谨慎对待的东西，它不仅仅可以指向变量的地址，还可以指向函数的地址，本质上它是指向内存的地址。&lt;/p&gt;

&lt;p&gt;在C#中，万物接是类，大部分时间里都没有指针的身影，因为指针被封闭在内部函数当中。可是回调函数却依然存在，它是以委托的方式来完成的。委托可以被视为一个更高级的指针，它不仅仅能把地址指向另一个函数，而且还能传递参数，返回值等多个信息。系统还为委托对象自动生成了同步、异步的调用方式，开发人员使用 BeginInvoke、EndInvoke 方法就可以抛开 Thread类 而直接使用多线程调用。&lt;/p&gt;

&lt;p&gt;创建委托其实就是创建了一个delegate类实例，创建委托时就相当于这个类继承了System.MulticastDelegate类，类实例里有，BeginInvoke、EndInvoke、Invoke三个函数，分别表示，异步开始调用，结束调用，直接调用。&lt;/p&gt;

&lt;p&gt;不过我们不能直接写个类来继承System.MulticastDelegate类，因为它不能被继承在明文上，它的父类Delegate类也同样有这个规则，官方文档中写的就是这么个规则：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    MulticastDelegate is a special class. Compilers and other tools can derive from this class, but you cannot derive from it explicitly. The same is true of the Delegate class.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;delegate类中有个变量是用来存储函数地址的，当变量操作 =(等号) 时，把函数地址赋值给变量存起来。不过这个存储函数地址的变量是个可变数组，你可以认为是个链表，每次直接赋值时会换一个链表。&lt;/p&gt;

&lt;p&gt;委托类还重写了 +=，-= 操作符，其实就是对应 MulticastDelegate 的 Combine 和 Remove 方法，当对函数操作 += 和 -= 时，相当于把函数地址推入了链表尾部，和移出了链表。&lt;/p&gt;

&lt;p&gt;当委托被调用时，委托实例会把所有链表里的函数依次按顺序用传进来的参数调用一遍。官方文档中写的就是如上述所说：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;A MulticastDelegate has a linked list of delegates, called an invocation list, consisting of one or more elements. When a multicast delegate is invoked, the delegates in the invocation list are called synchronously in the order in which they appear. If an error occurs during execution of the list then an exception is thrown.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;所以说，delegate关键字其实只是个修饰用的单词，背后都是由C#编译器来重写代码的，就相当于在编译时把delegate这一句换掉，变成class并继承System.MulticastDelegate的类。&lt;/p&gt;

&lt;p&gt;那么什么是event？&lt;/p&gt;

&lt;p&gt;event 很简单，它在委托delegate上，又做了一次封装，这次封装的意义是，限制用户直接操作委托变量的权限。&lt;/p&gt;

&lt;p&gt;封装后，用户不再能够直接用赋值(=等号操作符)操作来改变委托变量了，只能通过注册或者注销委托的方法来改变委托变量。也就是说被event声明的委托不再提供‘=’的操作符，但仍然有 += 和 -= 的操作符可供操作。&lt;/p&gt;

&lt;p&gt;为什么要限制？&lt;/p&gt;

&lt;p&gt;因为公开的委托会直接暴露在外，随时会被‘=’赋值而清空了前面累积起来的委托链表，造成不可预测的问题。申明 event 后，编译器内部重新封装了委托，让暴露在外面的委托不再担心随时被清空和重置的危险了。因为经过 event 封装后不再提供赋值操作来清空前面的累加，只能一个个注册或者一个个注销委托(或者说函数地址)。&lt;/p&gt;

&lt;h3&gt;装箱和拆箱&lt;/h3&gt;

&lt;p&gt;什么是装箱和拆箱。&lt;/p&gt;

&lt;p&gt;很简单，把值类型实例转换为引用类型实例，就是装箱。&lt;/p&gt;

&lt;p&gt;相反，把引用类型实例转换为值类型实例，就是拆箱。&lt;/p&gt;

&lt;p&gt;再简单点：&lt;/p&gt;

&lt;p&gt;int a = 5;&lt;/p&gt;

&lt;p&gt;object obj = a;&lt;/p&gt;

&lt;p&gt;就是装箱&lt;/p&gt;

&lt;p&gt;继续上面代码&lt;/p&gt;

&lt;p&gt;a = (int)obj;&lt;/p&gt;

&lt;p&gt;就是拆箱。&lt;/p&gt;

&lt;h6&gt;为何需要装箱。&lt;/h6&gt;

&lt;p&gt;值类型是在栈中分配内存，在声明时初始化才能使用，不能为null。 &lt;/p&gt;

&lt;p&gt;引用类型在堆中分配内存，初始化时默认为null。 &lt;/p&gt;

&lt;p&gt;值类型有，所有整数，浮点数，bool，以及 Struct 申明的结构&lt;/p&gt;

&lt;p&gt;引用类型有，类，接口，委托(委托也是类)，数组以及内置的object与string。&lt;/p&gt;

&lt;p&gt;这里又引申出来，为什么要分栈内存和堆内存，简单快速阐述下：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;&lt;/span&gt;    栈是本着先进后出的数据结构(LIFO)原则的存储机制, 对栈数据的定位比较快速, 而堆则是随机分配的空间, 处理的数据比较多, 无论如何, 至少要两次定位。堆内存的创建和删除节点的时间复杂度是O(logn)。栈创建和删除的时间复杂度则是O(1)，栈速度更快。

    既然栈速度这么快，全部用栈不就好了。这又涉及到生命周期问题，由于栈中的生命周期是必须确定的，创建后什么时候销毁是一个定量，所以在分配和销毁时不灵活，相反堆内存可以存放生命周期不确定的内存块，满足当需要删除时再删除的需求，所以堆内存相对于引用类型的内存块更适合。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因此在当栈内存和堆内存相互转换时，有了装箱和拆箱的过程。大部分时候只有当程序、逻辑或接口需要更加通用的时候才会需要装箱。&lt;/p&gt;

&lt;p&gt;比如调用一个含类型为object的参数的方法，该object可支持任意为型，以便通用。当你需要将一个值类型(如Int32)传入时，就需要装箱。&lt;/p&gt;

&lt;p&gt;又比如一个非泛型的容器，同样是为了保证通用，而将元素类型定义为object。于是，要将值类型数据加入容器时，需要装箱。&lt;/p&gt;

&lt;p&gt;我们来看看装箱的内部操作。&lt;/p&gt;

&lt;p&gt;装箱： 对值类型在堆中分配一个对象实例，并将该值复制到新的对象中。按三步进行。 &lt;/p&gt;

&lt;p&gt;第一步：在堆内存中新分配一个内存块(大小为值类型实例大小加上一个方法表指针和一个SyncBlockIndex)。 &lt;/p&gt;

&lt;p&gt;第二步：将值类型的实例字段拷贝到新分配的内存块中。 &lt;/p&gt;

&lt;p&gt;第三步：返回内存堆中新分配对象的地址。这个地址就是一个指向对象的引用了。 &lt;/p&gt;

&lt;p&gt;拆箱：检查对象实例，确保它是给定值类型的一个装箱值。将该值从实例复制到值类型变量中。&lt;/p&gt;

&lt;h6&gt;装箱、拆箱对执行效率有哪些影响，如何优化。&lt;/h6&gt;

&lt;p&gt;由于装箱、拆箱时生成的是全新的对象，不断得分配内存会有时间损耗和CPU的消耗，降低性能。 那该如何做呢？&lt;/p&gt;

&lt;p&gt;这里提到的拆装箱优化，都是针对 Struct 结构类型的，由于整数、浮点数、布尔等数值型变量的变化手段很少，变不出什么花花来，但 Struct 不一样，它既是值类型存放在栈内存上，又可以像类一样继承，用途多，转换的途径多，可变的花花也多。稍不留神，花花就变成了麻烦，所以这里重点讲的是 Struct 变出花花后的优化方法。&lt;/p&gt;

&lt;p&gt;1、Struct 通过重载函数来避免拆箱、装箱。&lt;/p&gt;

&lt;p&gt;比如常用的ToString()，GetType()方法，如果 Struct 没有写重载ToString()和GetType()的方法，就会在 Struct 实例调用它们时先装箱再调用，导致内存块重新分配性能损耗。所以对于那些需要调用的引用方法，必须重载。&lt;/p&gt;

&lt;p&gt;2、通过泛型来避免拆箱、装箱。&lt;/p&gt;

&lt;p&gt;不要忘了 Struct 也是可以继承的，在不同的、相似的、父子关系的 Struct 之间可以用泛型来传递参数，这样就不用装箱后再传递了。&lt;/p&gt;

&lt;p&gt;比如B,C继承A，就可以有这个泛型方法 void Test&lt;T&gt;(T t) where T:A，以避免使用object引用类型形式传递参数。&lt;/p&gt;

&lt;p&gt;3、通过继承统一的接口提前拆箱、装箱，避免多次重复拆箱、装箱。&lt;/p&gt;

&lt;p&gt;多种 Struct 继承接口后，不同的 Struct 就可以有相同的接口了。把 Struct 传递到其他方法里去时就相当于提前进行了装箱操作，在方法中得到的是引用类型的值，并且有它需要的接口，避免了在方法中重复多次的拆装箱操作。&lt;/p&gt;

&lt;p&gt;比如 Struct A 和 Struct B 都继承接口 I，void Test(I i)。当调用Test方法时传进去的 Struct A 或 Struct B 的实例都相当于提前做了装箱操作，Test里拿到的参数就不用再担心装箱拆箱问题了。&lt;/p&gt;
</description>
               <pubDate>Sat, 26 Jan 2019 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com//2019/01/26/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-CSharp%E8%A6%81%E7%82%B9%E6%8A%80%E6%9C%AF4.html</link>
               <guid isPermaLink="true">http://www.luzexi.com//2019/01/26/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-CSharp%E8%A6%81%E7%82%B9%E6%8A%80%E6%9C%AF4.html</guid>
            </item>
        
            <item>
               <title>《Unity3D高级编程之进阶主程》第一章，C#要点技术(三) 浮点数的精度问题</title>
               <description>&lt;p&gt;直接开门见山了。&lt;/p&gt;

&lt;h3&gt;浮点数的精度问题&lt;/h3&gt;

&lt;p&gt;平常极少使用double类型，因为浮点数计算我们也并没有使用到特别的科学计算部分，所以float基本都够用，而且double也同样有精度问题，无论怎么样都是无法避免精度问题在项目里的危害的。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;float 与 double 比较来看，占用的位数不同会导致精度不同，但也会引起计算效率不同，内存消耗也不一样，虽然在现代计算机中来看，对double的计算量和占用的内存量已经不太在意了，在单片机中会有所限制，手机设备中是肯定没有限制的，不过无论怎么样它都是无法避免精度问题。&lt;/p&gt;

&lt;p&gt;实际工作中想试图通过使用double替换float来解决精度问题的人数众多，最后基本都以失败告终。&lt;/p&gt;

&lt;p&gt;要认清精度这个问题的根源，我们先来看下浮点数在内存中到底是如何存储的。&lt;/p&gt;

&lt;p&gt;计算机只认识 0 和 1，所以数值都是以二进制的方式储存在内存中的。根据 IEEE 754 标准，任意一个二进制浮点数 V 均可表示为：V = (-1 ^ s) * M * (2 ^ e)。&lt;/p&gt;

&lt;p&gt;以 198903.19(10) 为例，&lt;/p&gt;

&lt;p&gt;先转成二进制的数值为：110000100011110111.0011000010100011(2)（截取 16 位小数），&lt;/p&gt;

&lt;p&gt;采用科学记数法等于 1.100001000111101110011000010100011 * (2 ^ 17)（整数位是 1），&lt;/p&gt;

&lt;p&gt;即 198903.19(10) = (-1 ^ 0) * 1.100001000111101110011000010100011 * (2 ^ 17)。&lt;/p&gt;

&lt;p&gt;整数部分可采用 &amp;quot;除2取余法&amp;quot;，小数部分可采用 &amp;quot;乘2取整法&amp;quot;。&lt;/p&gt;

&lt;p&gt;从结果可以看出，小数部分 0.19 转为二进制后，小数位数超过 16 位（已经手算到小数点后 32 位都还没算完，其实这个位数是无穷尽的）。&lt;/p&gt;

&lt;p&gt;由于无法得到完全精准正确的数值，所以浮点数在程序编程中就会遇到诸多的问题。&lt;/p&gt;

&lt;h6&gt;浮点数的精度问题，可不只是小数点的精度问题哦，当浮点数变大时，在整数部分也同样会有相同的问题，因为浮点数是一个X * Y的形式得到的数字，当数字放大时自然精度就会变小，无论是整数位还是小数位。&lt;/h6&gt;

&lt;p&gt;精度问题看起来好像很难碰到，但实际开发中碰到了很头疼。&lt;/p&gt;

&lt;p&gt;那么到底哪些地方会碰到？&lt;/p&gt;

&lt;h6&gt;1.数值比较不相等&lt;/h6&gt;

&lt;p&gt;比如某个变量，需要从0开始加，每次加0.01，加到刚好0.23时做某事，到0.34时做另外一件事，到0.56时再做另一件。&lt;/p&gt;

&lt;p&gt;这种精确定位的问题，就会遇到麻烦。因为浮点数在加减乘数时无法完全准确定位到某个值，就会在出现，要么比0.23小，要么比0.23大，永远不会刚刚与0.23相等的时候。&lt;/p&gt;

&lt;p&gt;因此比较时，需要有一个微小的浮动区间。比如 ABS(X-Y) &amp;lt; 0.0001 时认为 X 和 Y 是相等的。&lt;/p&gt;

&lt;h6&gt;2.数值计算不确定&lt;/h6&gt;

&lt;p&gt;比如 x = 1f，y = 2f，z = 1 * 2f，如果 x / y &amp;lt;= 0.5f 时做某事，那么理论上说 x / z 也能通过这个if，但实际上未必能通过。&lt;/p&gt;

&lt;p&gt;由于浮点数无法得到精确的数值而是一个浮动的数值。z 的计算结果有可能是0.4999999999991，当x / z 时，结果有可能得到大于0.5。&lt;/p&gt;

&lt;p&gt;这就很头疼了啊。在实际编码中，如果在外圈的if判断成立，而内圈的if判断却有可能不成立，整个程序就出现无法估计得问题，因为看起来同样的数值，可能得到的结果却不一样。&lt;/p&gt;

&lt;p&gt;这种情况下怎么办？&lt;/p&gt;

&lt;h6&gt;第一种解决方法是，只计算一次，认定这个值为准确值，只用这个变量结果做判断。&lt;/h6&gt;

&lt;p&gt;意识是说，用一次计算的结果，当做唯一确定性结果，而不再使用多次计算得到的结果。排除了多次结果不同导致的问题。&lt;/p&gt;

&lt;p&gt;由于多次看似相等的计算其实得到的结果有可能不同，使得问题变得更复杂，比如上面所说的，1f / 2f 的结果，却用 1f / (1f * 2f) 来表示导致问题变得不可控。不如只使用一次计算结果，不再进行多次计算，认定当前结果的数值为准确数值，用这个浮点数值当做判断的标准。&lt;/p&gt;

&lt;p&gt;我常用这种方法，因为其他方法涉及的代码量太多，情况也分不同种，限制太多，而项目需要快速推进，当前遗留的不是很重要的问题，完全可以推延到整体架构完成后，一步步细化，在前期的解决方案中，在考虑完整体架构的安全，负载能力，扩展能力，性能可优化性后，完全可以采用一些相对比较简单的解决方案，以快速达到前期的目标。&lt;/p&gt;

&lt;h6&gt;第二种解决办法是，改用int或long型来替代浮点数。&lt;/h6&gt;

&lt;p&gt;浮点数和整数的计算方式都是一样的，只是小数点部分不同而已，那么完全可以把浮点数乘以10的幂次，把自己需要的精度提上来用整数表示。&lt;/p&gt;

&lt;p&gt;比如保留3位精度，所有浮点数都乘以1万来存储(因为第四位不是很准确了)，1.5变成了15000的整数，9.9变成了99000整数存储。&lt;/p&gt;

&lt;p&gt;这样整数 15000 乘以 99000 得到的结果，与，整数30000 除以 2 再乘以 99000 得到的结果是完完全全相等的。&lt;/p&gt;

&lt;p&gt;再复杂点 原来 2.5 / 3.1 * 5.1 与 0.8064 * 5.1，两者约等于为 4.1126，用整数替代，2500 / 31 * 51 与 80 * 51，等于 4080，虽然精度出现问题，但前两者结果不一致，而后两者结果完全相同。&lt;/p&gt;

&lt;p&gt;用整数做计算精度问题，我们可以再扩大数值的幂次么，来看看，如果是 250000 / 31 * 51 就等于 411290，是不是精度提高了啊。&lt;/p&gt;

&lt;p&gt;但问题又来了，乘以10的幂次来提高精度时，当浮点数比较大时，就会超出了整数的最大上线2 ^ 32 - 1或者2 ^ 64 - 1。&lt;/p&gt;

&lt;h6&gt;第三种解决方法是，用字符串替代浮点数。&lt;/h6&gt;

&lt;p&gt;如果浮点数用途只有加减乘数，那么完全可以用字符串代替浮点数来计算结果。&lt;/p&gt;

&lt;p&gt;我记得以前在大学里做ACM题目时，就有这种方式来检验程序员的逻辑能力和考虑问题的全面性的题目，题目很简单A * B 或 A - B 或 A + B 或 A / B 输出结果，精度要求在小数点后10位。&lt;/p&gt;

&lt;p&gt;把中小学算术的计算方式，写入到程序里去，用整数计算当前位置的算算术问题，这样整数就完全不需要担心越界问题，而且能自由的控制精度。&lt;/p&gt;

&lt;p&gt;缺点是，很消耗CPU，比如123456.78912345 * 456789.2345678，这种类型的计算使用字符串代替浮点数，用一次相当于计算好几万次的普通浮点数计算。但是如果程序中对精度要求很高，且计算的次数不大，我觉得还是可以把这种方式放在考虑范围内的。&lt;/p&gt;

&lt;h6&gt;第四种解决办法是，提高期望值。&lt;/h6&gt;

&lt;p&gt;如果 10000 / 2 有可能等于 4999.9999 而无法达到5000的目标值时，我们不妨在计算前多加个1，使得 10001 / 2，这样就大概率保证超出 5000 的结果目标了。&lt;/p&gt;

&lt;p&gt;我们怎么想的？为什么能这么做？因为我们做了假设。&lt;/p&gt;

&lt;p&gt;我们脑袋中假设结果是模糊的，这个结果范围就是有可能是5000.0001，也有可能是5000.02，也有可能是4999.998，也有可能是4999.98。&lt;/p&gt;

&lt;p&gt;正常情况下，由计算机的寄存器和CPU决定到底会得到什么结果。但我们不想，我们的期望是，宁愿高一点点，跨过这道门槛，也不要少一点点，被门槛拦在外面。&lt;/p&gt;

&lt;p&gt;如果浮点数的精度不能给我们安全感，那么我们就自己给自己安全感。提高自己的数值，或者说，降低门槛，差不多了就差一点点了，就当做是跨过去了。&lt;/p&gt;

&lt;p&gt;于是就有了 (X + 1) / Y 或者 (X + 0.001) * Y 的写法来度过&amp;#39;精度危机&amp;#39;。&lt;/p&gt;
</description>
               <pubDate>Sat, 19 Jan 2019 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com//2019/01/19/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-CSharp%E8%A6%81%E7%82%B9%E6%8A%80%E6%9C%AF3.html</link>
               <guid isPermaLink="true">http://www.luzexi.com//2019/01/19/Unity3D%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E4%B9%8B%E8%BF%9B%E9%98%B6%E4%B8%BB%E7%A8%8B-CSharp%E8%A6%81%E7%82%B9%E6%8A%80%E6%9C%AF3.html</guid>
            </item>
        
            <item>
               <title>思路探讨(十九) 机会</title>
               <description>&lt;p&gt;谈了很久的人生和哲学，灌了很多人生鸡汤，多了也有负效果，因为没有付诸于行动效果等于没有，天天空想哲学问题时间长了也等于在浪费时间。&lt;/p&gt;

&lt;p&gt;以前有段时间很不明白为什么有人说鸡汤多了副作用也大，明明是好的文章，讲得道理也很有意义，对自身的激励也很好，为什么就会有副作用呢。&lt;/p&gt;

&lt;p&gt;后来才渐渐明白，看多了没有在实际中体现出其具体价值也属于浪费时间，浪费生命，纸上谈兵。天天畅想着未来，嘴上说着坚持，脑袋里想着高科技，手里却什么都不干，干不了，不敢干，其实也没什么用，境界再高，也是假境界，说的再牛，也是打肿脸充胖子，迟早是要露馅的。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;接下去日子的文章中，尽量会在专业知识，实际技能，技巧上多做分析和研究。这能在实际生活和工作中，立刻见效。&lt;/p&gt;

&lt;p&gt;眼界和视野虽然有用，但毕竟要很长时间才能体现出来的东西，而且分摊到每件事情的处理上都是很细微的东西。过分关注眼界和视野就会忘记实际生活中需要面对的困难，没有对生活工作小事的解决手法，技巧，知识体系，就会陷入另一种烦恼：看起来很厉害，实际却没什么用。&lt;/p&gt;

&lt;p&gt;视野越大，眼界越宽，长远方向越正确，做当下的事时就越觉得吃力，因为预期太高，看到了未来的美好，却要收拾现在的烂摊子，而且要收拾的时间要按‘年’计算，反差太大，期望容易落空，最终很容易导致：有视野，有眼界，却是个废物。&lt;/p&gt;

&lt;p&gt;回主题：&lt;/p&gt;

&lt;p&gt;从宏观的角度看世界，这个世界有非常多的机会可以升迁，致富。在全世界范围内每个月都差不多有1次在全世界发生的，每个月都有可能在不同的国家发生不同的机会，只要参与进去就有可能致富。&lt;/p&gt;

&lt;p&gt;即使在一个国家内，比如我们国家中国，我认为每年至少有一次这样的机会，比如，前年的千年计划雄安新区，以及粤港澳大湾区计划，去年的海南岛自由港规划，以及今年的5G发展规划，只要你参与其中，我想有很大的可能是可以达到快速致富的效果的。&lt;/p&gt;

&lt;p&gt;人说只要你抓住一次机会，就能翻身了。但我们真的能抓的住吗？真的能赢得吗？输了会如何？&lt;/p&gt;

&lt;p&gt;我们且不说输了会如何。如果说机会这么容易抓住，我们就不用工作了，天天等着就行了，机会来了参与下，就有可能赢得全世界。那岂不是太容易了，照这个理论，每个人都可以这么做，等着，然后时间到了进去参与下就可以了，然后就财务自由了。&lt;/p&gt;

&lt;p&gt;不可能，因为实际情况中，首先你无法辨认是否是‘机会’，辨认‘机会’需要庞大的知识库和信息量，包括人工脑袋的分析以及收集情报。即使最专业的人士在机会辨认率面前也仅有51%概率，比抛筛子的概率多了1%而已。因为其中还涉及到信息的真假，逻辑的判断与分析对错问题。普通人就更不用说了，有30%已经大师级很厉害了。&lt;/p&gt;

&lt;p&gt;其次，参与的时间点也能决定是否能抓住机会，5年前早就爆发了新能源汽车的概念，现在还是不温不火，到底什么时候是个头，新能源汽车最终能否全面进入家庭和社会，到现在还是个未知数。即使是现在回头看已经确定的智能手机的机会，在6年前的那时，电池续航能力，彩屏像素和手机系统都未完善的当时，能否最终全面被社会所接受，是否能全面替换旧式的好用牢固的黑白手机都是个未知数，如果不是苹果一家公司坚持突破新技术，新创意，诺基亚手机可能到现在还是全球销量第一，在当时就能那么确定苹果能突破这个瓶颈吗，现在看来当然会回答‘是’，但是在当时，谁知道呢。&lt;/p&gt;

&lt;p&gt;事情都是随着时间的变化而变化的，我们永远不会知道事情如何变化，什么时间点是最好的参与时间点。如果一旦参与，剩余的就是等待，时间也是金钱，假如5年后亏损退出，损失的不只是金钱，更宝贵的是时间成本和机会成本。&lt;/p&gt;

&lt;p&gt;最后是输赢概率背后的损失比。如果一个机会，输的时候要全部损失，那么一辈子也就只能输一次，一旦输了，就什么都没有了。这种拿命赌的游戏，根本不值得参与，因为人生最宝贵的是时间和精力，只要有时间有精力，慢慢积累，总能积累到很大的时候，但如果一次机会要全部输掉，就相当于损失掉了以前所有的时间和精力，完全不值得参与。&lt;/p&gt;

&lt;p&gt;你看，其实机会没那么好抓，而且很容易受重伤，一旦受重伤就很难恢复。&lt;/p&gt;

&lt;p&gt;为什么那么难，我也一直在想，人类这个世界其实已经存在了好几千年，人类群体生存的规则早就是很完善了，不可能随意的让你一个人破坏或者跳过的。一个存在几千年的人类社会，就像一道围城一圈的又厚又高的城墙，岂是我们一个人敲几下就能破个洞的，全力撞过去都是纹丝不动的，即使撞到头破血流它都不会有任何反应。&lt;/p&gt;

&lt;p&gt;这道墙、这个人类的世界本身就是由人性构成的，人性的弱点也好，优点也好，大大小小的人性特点，以及一个个不同个性的个体，构成了整个社会和世界。&lt;/p&gt;

&lt;p&gt;如果能从这个角度思考，我们就能发现，不要去试图改变世界是对的，因为世界由人性构成，人性无法改变。我们能做的就只是利用人性，弱点也好，优点也好，让我们能在这个世界里，活的更好点。&lt;/p&gt;
</description>
               <pubDate>Sat, 12 Jan 2019 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com//2019/01/12/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A819.html</link>
               <guid isPermaLink="true">http://www.luzexi.com//2019/01/12/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A819.html</guid>
            </item>
        
            <item>
               <title>思路探讨(十八) 所有不确定都是机会</title>
               <description>&lt;p&gt;以前不明白为什么，不确定是机会，随着自己经历的丰富，渐渐明白了。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;每次回头看那些当时不确定的事物进展到后来，事情明朗化后都没有那么可怕，可以说当时的自己完全被不确定和未知所蒙蔽。&lt;/p&gt;

&lt;p&gt;是我无知，是我笨吗，每次回头看都这样怀疑自己，后来才慢慢发现，其实每个人都和我一样，对那些自己没有经历过的事物都由于缺乏经验而感到迷茫或害怕。人还是需要对同一种事物进行多次练习的，熟能生巧才能沉着冷静的应对。&lt;/p&gt;

&lt;p&gt;回头看我自己所经历的不确定事物，包括，改变红利方向转变导致父母失意，父母离异，中考失利，高考失利，计算机专业遇冷，端游遭遇冷却期，页游遭遇白热化竞争，手游不确定期，手游进入白热化竞争，整个游戏行业被冰封，以及职业生涯中，公司起步艰难，经营困难，公司倒闭，团队解散等一系列危机与困难导致的不确定。&lt;/p&gt;

&lt;p&gt;回头看看，当时的危机导致的不确定也并不会让天塌下来，但由于都是我生命中前所未有的，从来没有遇到过的，所以以往每次的不确定时期当时都感到非常迷茫和害怕。&lt;/p&gt;

&lt;h6&gt;人在迷茫和害怕中，最容易做出错误的决定。这就是，’所有不确定都是机会‘的最根本原因：由于，大部分人对不确定的恐惧而导致做出了错误的决定，最终使得只有少数人得利的最终结局。这种事屡试不爽，人性脆弱的一面无法改变。&lt;/h6&gt;

&lt;p&gt;我们当下就是出于一种不确定的时期，我观察到不仅仅是一个行业处于低谷，很多行业都在低谷和正奔向低谷的状态，房地产，媒体娱乐，金融大部分行业都处于低谷或者正在迈向低谷，甚至有人喊出中国崩盘的论调。&lt;/p&gt;

&lt;p&gt;面对当下的不确定性，我们不必惊慌，中国会起来吗，不知道。但积极的面对工作，学习，生活，总是不会错的。&lt;/p&gt;

&lt;p&gt;当所有人都在担心害怕的时候，不确定带来的机会就来了，他们像热锅上的蚂蚁乱窜，事情还没有确定下来，自己被自己吓个半死，而我们由于故意减少担心和害怕，专心做好自己的事，就等于比别人更早的走出萧条的阴霾，更好的活出自己，更好的锻炼了自我，更早的走在时代的前列。&lt;/p&gt;

&lt;h6&gt;机会就在这里，人性的反向一面：平静替代恐惧，勤劳替代懒惰，知足替代贪婪，强壮替代瘦弱，坚定替代迷茫。&lt;/h6&gt;

&lt;h6&gt;题外话：&lt;/h6&gt;

&lt;p&gt;什么是机会？怎样才能抓住机会？&lt;/p&gt;

&lt;p&gt;难道坚持就能抓住机会吗？不是的。有可能放弃现在的，重新开始才是机会。&lt;/p&gt;

&lt;p&gt;由于情况永远是不同的，没有永恒不变的统一答案。&lt;/p&gt;

&lt;p&gt;很多人接受不了这个理念：“答案是变化的”。说，为什么会有变化的答案？&lt;/p&gt;

&lt;p&gt;由于我们的思维总是固定在某个角度上，其实跟应试教育也没什么关系，世界上所有的人类都是一样的更加倾向于固定思维，人毕竟是动物，狭隘的观念是比较舒适的观念，谁都不想折磨自己不是么，所以我们很多时候都用固定的答案在处理问题，要么对，要么错，要么A，要么B，要么C，要么D。其实这个世界上还有一种答案是不固定，可以错，也可以对。&lt;/p&gt;

&lt;p&gt;这个答案可以在今天的早上7点05分时，是对的，到了晚上的7点05分时就不对了。&lt;/p&gt;

&lt;p&gt;拿股票的涨跌来说，最容易说的清楚。很多人都有固定思维，比如，回调思维，大部分人认为涨高了回调下，然后会再涨。于是他在回调时倾家荡产的买入，但是事情并没有像他想象的那样发展，在回调结束K线走平时，这家公司发出了业绩亏损的报告，股价随即一泻千里，这时此人一辈子积累的财富，瞬间灰飞烟灭。还有人有抄底思维，认为跌太多，就会回升，其实回头看他抄的底，其实是半山腰，下面还有万丈深渊在等待。&lt;/p&gt;

&lt;p&gt;（买短线股票最厉害的思维模式要属变化思维模式，错了就撤，对了就攻。不过我不想引导大家到这种短线思维误区。因为这种短线股票思维，在短线里是对的，在长线里却是错的。这也应验了我们前面说的，答案在某个范围或时期是对的，在另外一个范围和时期是错的。）&lt;/p&gt;

&lt;p&gt;用这种固定思维模式的方法来处理人生大事，即使这次被你侥幸赌赢，也有下次赌输的时候吧，只要赌输一次，就是万丈深渊吧。&lt;/p&gt;
</description>
               <pubDate>Sat, 05 Jan 2019 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com//2019/01/05/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A818.html</link>
               <guid isPermaLink="true">http://www.luzexi.com//2019/01/05/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A818.html</guid>
            </item>
        
            <item>
               <title>思路探讨(十七) 2018形势和心态</title>
               <description>&lt;p&gt;2018开年感觉还是不错的，虽然没有红红火火，但平淡中带点小火花还是有的，现在看来当时还是偏乐观的。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;最典型的例子就是房地产了，年初三四线的销售楼盘还是精神劲十足的在叫卖，年末却感觉到整个房地产要崩了。&lt;/p&gt;

&lt;p&gt;时隔只有不到1年，却反差如此巨大，看来我们都对形式错误的估算了。&lt;/p&gt;

&lt;p&gt;‘贸易战’什么的其实只是借口罢了，从形式上看，大的趋势一直在做回调，从2016开始，整体经济都在不断下滑中，到了2018年已经是节点了，如果不是贸易战这个借口，可能大家还沉浸在‘还可以’这个幻觉中，‘贸易战’给了借口，该展现的真实面目都浮出了水面。美国也好不到哪里去，只是在全球资金的掩护下，皮比较厚，要多磨几下而已。&lt;/p&gt;

&lt;p&gt;很多人还一直在崇拜美国经济厉害，政策厉害，其实美国也快撑不住了，如果不是撑不住，他们有必要收紧贸易吗，有必要出减税这招吗？收紧贸易会伤到自己，如果经济真的向好为什么要害自己，美国的智囊团也不傻，减税这招明显是在经济不好的情况下使用效果会更好，如果他们经济向好，为什么还要用减税来加热经济，最后经济过热这不是自讨苦吃么。&lt;/p&gt;

&lt;p&gt;所以，形势其实很明显，大家都不好过，大家都在收缩，只是2018年由于量变导致质变，整体急速下滑。&lt;/p&gt;

&lt;p&gt;其实我们一直都低估了趋势的力量，如果说我们确实重视了它，那我敢肯定的是，我们还不够重视。如果我们知道了顺势而为的重要性，我想我们以前还不够深刻的理解它的真正含义。&lt;/p&gt;

&lt;h6&gt;2018对我个人而言是很神奇的一年。&lt;/h6&gt;

&lt;p&gt;我能很明显的感觉到我自己能完全控制自己了，不知是因为心智又被打开还是怎么的，我开始了我自己的理论，我开始故意不去将别人的理论掺杂进来，和故意不去评论别人对我的看法，而专注自己的理论体系，更加专注做自己挑战自己。&lt;/p&gt;

&lt;p&gt;我开始明白为什么一些很明显很简单的道理，大部分人一辈子都无法参透，因为他们不信，他们认为肯定有更好的方法和更短的路，于是他们不信，找了一辈子最后发现无法回头，或回头的时间太长，劣势太大，只能继续下去，希望下辈子自己早点明白。其实会去找路还是好的，最后还可能折腾回来，大部分人还是像咸鱼思想，坐等天上掉馅饼。&lt;/p&gt;

&lt;p&gt;我也开始明白了，为什么说人到中年时‘无奈’占据了大半壁江山，因为人到中年，大部分事情都由于前十几和几十年的积累导致事情到了现在这个地步而难以改变，如果想要改变也同样需要花去十几和几十年的时间，但这么多时间对于他们来说太长了，他们需要立刻解决，那是不可能的事情，只能选择‘无奈’接受。&lt;/p&gt;

&lt;p&gt;我也开始彻底明白，积极向上的重要性，任何事情没有积极的态度，是无法完成的，如果面对的是比较棘手的，甚至比较糟糕的情况，那么积极向上态度的持续的时间和程度更是重中之重，核心中的核心。没有了积极的态度，万事皆悲，任何事的发展都会向下跌落深渊。&lt;/p&gt;

&lt;p&gt;我也开始深刻理解，什么是‘活在当下’，以及‘活在当下’的重要性，从而引出了，不积跬步无以至千里的行动模式，每日都努力，日日皆重要，天天是机会的‘活在当下’的自我理论体系。&lt;/p&gt;

&lt;h6&gt;我每天都在努力的多积累一点，期望在长远的未来，能更好一点。&lt;/h6&gt;

&lt;h6&gt;要是说我学习和观察经济形势是我开阔视野的工具，那么每天的努力工作和努力学习是我在现实中对长远展望的积累。&lt;/h6&gt;

&lt;h6&gt;2018年最后1天的最后一句话：现在的所作所为，将是10年后的自己生活的模样，10年后的自己也会为现在自己努力的每一天而感到高兴。&lt;/h6&gt;
</description>
               <pubDate>Tue, 01 Jan 2019 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com//2019/01/01/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A817.html</link>
               <guid isPermaLink="true">http://www.luzexi.com//2019/01/01/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A817.html</guid>
            </item>
        
            <item>
               <title>思路探讨(十六) 感官动物</title>
               <description>&lt;p&gt;最近半年的写思路文章的经历让自己学到很多东西。工作非常的繁忙，纵使我降低了书写的频率，还是很难抽出时间来专心写作，只能靠每天的碎片时间来思考这周的主题，并在印象笔记里记录我的思考过程和结论。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;我的印象笔记里记录了很多很多我的思考过程，包括看书时，看文章时，放空时得到的思路和感悟，不过大部分都无法发表出来，因为过于零碎，没有形成整体的思路和整体的思路框架，无法从各角度论证思路的有效性，所以记录下平时的想法有时候也无济于事，这是最糟糕的也最让我难受的。&lt;/p&gt;

&lt;p&gt;本想着平时利用每天零碎的时间可以记录些东西，在发表文章时可以用上，但并没有起到决定性的作用，最终还是要靠积累。这种积累不是说一两天就能搞定的，而是靠长期，几年，十几年，几十年的积累才能建立起巨量的经验和知识，以淡定自若的应对各种情况。于是我更加注重平时每日的积累过程，比如每日看书3页，每日学英语半小时，每日健身半小时，每日听书10分钟，每日设计产品半小时等等，其实总体加起来也不超过2个小时，在一天的除去睡觉后的16个小时里，只占了12.5%的时间，但每日坚持做一遍却是非常厉害的也非常困难的事情，这样积跬步至千里的感觉是非常棒的做法，大家一起来加油。&lt;/p&gt;

&lt;h3&gt;感官动物&lt;/h3&gt;

&lt;p&gt;感官动物其实是人类最大的弱点之一，很容易被表面化的事物所迷惑，最终导致犯错。&lt;/p&gt;

&lt;p&gt;这种弱点很容易被利用，比如美女，帅哥，美景，绚丽的颜色，缤纷的烟火，很容易迷惑我们，让我们沉醉。相声，歌曲，柔和的声音，激情的演讲，也同样会迷惑我们，让我们的意志放松警惕。&lt;/p&gt;

&lt;p&gt;其实这种感官上的刺激，在很多情况下都是对我们人本身的发展是有害的，因为过于留恋于表面化的和感官上的事物，导致无法透析深层次的根源，也容易陷入感官陷阱，比如沉迷于美色，沉迷于电影电视剧，沉迷于喝酒，沉迷于刷微博，沉迷于刷微视频，沉迷于购物，沉迷于相声笑话，沉迷于虚荣心，这种留恋于表面化的行为其实就完全是在浪费自己的生命，因为沉迷它们是相对容易的，只要你‘看’，‘听’，‘感受’就可以了，不需要用脑袋思考。&lt;/p&gt;

&lt;p&gt;我发现这些表面化的事物不断吸引我注意力的事物，同时也浪费了我大量的时间。我们人的注意力是有限，而我又想把有限的注意力放到自己想要做的事情上去。好难。偶尔享受下感官盛宴放松一下不小心就会被吸引去忘记了时间。放松一下却常常过了头。&lt;/p&gt;

&lt;p&gt;这种人性的弱点是无法抹除的，既然这样，我们为何不好好利用它。比如在打造产品上，从视觉，听觉和感觉上大大加强感官的效果，让自己的产品更加吸引人，在视觉和听觉盛宴上下更大的功夫去满足人性弱点，让产品，看着漂亮的，听着舒服的，摆弄起来顺畅，这样才能利用人性的弱点来创造吸引人的产品。&lt;/p&gt;

&lt;p&gt;不只是产品。其实我们自己人本身也是产品的一种，如果你想让自己更加吸引世界关注，我想你可能得从这三个方面来改造自己，视觉，听觉，感觉。比如每日健身让自己身材更加棒，人看起来更加精神，加上衣着干净整洁视觉上的效果会更好。比如在讲话时更加注重逻辑清晰条理清晰语气更加缓和，让人听着更加舒适并且容易理解。又比如在学习和补充知识上花更多的时间，让别人能感受到你是个爱学习的人，并且知识渊博经验丰富，让人对你有种靠谱的感觉。从三方面打造自己，不断完善自己，年复一年的改造改进翻新，终有一天你会成为世界的焦点。&lt;/p&gt;

&lt;h6&gt;感官动物的实质是留恋于表象，而我们却要反过来，不留恋于他人的表象，而更加注重自己的内在知识和经验，并且把自己的优秀的表象展现给别人看，因为人只看我们的表象看不到我们的内在。&lt;/h6&gt;
</description>
               <pubDate>Wed, 26 Dec 2018 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com//2018/12/26/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A816.html</link>
               <guid isPermaLink="true">http://www.luzexi.com//2018/12/26/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A816.html</guid>
            </item>
        
            <item>
               <title>思路探讨(十五) 中产阶层的天花板</title>
               <description>&lt;p&gt;很多人应该跟我一样，曾有段时间一直怀疑社会阶层是否真的存在，或者幻想着它是以何种形式存在的。&lt;/p&gt;

&lt;p&gt;社会阶层确实存在是事实不可否认的，它到底以何种形式存在，是很多人包括我自己所迷惑的。&lt;/p&gt;

&lt;p&gt;大部分人还是把阶层的概念停留在’钱‘上，这种不假思索的观念只能说只对了一小部分。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;h6&gt;阶层的划分不只是’钱‘，因为大部分界限的划分是由无形资产构成的，比如知识，技能，观念，成就，荣誉，权利，职业，人际圈。&lt;/h6&gt;

&lt;p&gt;这些无形资产和’金钱‘是相互关联的，有了知识，有了技能，有了良好的观念，有了一定的成就，有了权利，有了好的职业，就有了源源不断的’金钱‘，有了高等的人际圈，就有了更多的交流思路开阔了眼界。&lt;/p&gt;

&lt;p&gt;源源不断的’金钱‘和开阔的视野又支撑了，我们得到更好的教育资源，得到更多的成就感，得到更多的自信，从而对目标更加坚定，对职业计划更加长远，对成功更加有信心。&lt;/p&gt;

&lt;p&gt;很多人的误区就在于，认为有’金钱‘就一定能得到知识，技能，观念，成就，荣誉，权利，职业，人际圈。不是的，如果世界上可以只用’钱‘就能解决任何问题，那么我们也不用这么痛苦了。&lt;/p&gt;

&lt;p&gt;我们人生的困难就在于，看起来似乎很重要的’钱‘，只是各种因素的中的一个，并不是最重要的，而且很多时候有可能它是最不重要的，也很多时候可能它只是个结果的表象，并不意味着任何意义，只是它在我们生活中充当着生存的基本底线。&lt;/p&gt;

&lt;h6&gt;对’金钱‘的过分关注，是中产阶层的天花板之一。&lt;/h6&gt;

&lt;p&gt;学校中接受学习和教育时，对考试成绩的过分关注，是同一个道理。当我对’考试成绩‘过于关注，就会导致自己迷失在成绩上，任何一次低于预期的成绩都会让我感到愧疚，忧郁，苦闷，自责。无论我的成绩排在第几名，我对成绩的过分关注，都导致我在知识深度和宽度这个层级上无法越过当前这个台阶，达到更高的层级。&lt;/p&gt;

&lt;p&gt;中产的天花板里还包括：只关注短期效果，不执行长期目标；以及不愿主动跳出自己的这口井，去看看世界；不想尝试，和不愿冒险；等&lt;/p&gt;

&lt;p&gt;阶层的天花板毕竟是坚硬无比的，无论什么时候，无论哪个年代，突破阶层都是非常艰难的事情，这需要的已经不仅仅是一个人的努力了，更需要几代人的共同努力。&lt;/p&gt;

&lt;h6&gt;抛开阶层不说，人与人之间都是一样的，都是人类，并且所有人的烦恼都是相同的，我相信我所烦恼的事情，习见平主席也有同样的烦恼，我很确信这一点。如果我们能从这个角度来看我们自己的人生的话，实际上已经解决一个根本性的大问题，“自信问题”，你我都是人，我并不惧怕你，也不羡慕你，我相信我十年如一日的努力能让我受益无穷，我也希望你能像我一样天天努力。&lt;/h6&gt;

&lt;p&gt;题外话：&lt;/p&gt;

&lt;p&gt;阶层的突破还有假突破和真突破的表象，这可能需要几代人时间的适应和努力。&lt;/p&gt;

&lt;p&gt;当你面对你所拥有的一切，平静，安详时，就属于真突破，因为对当前阶层的生活习惯，思维习惯，行为习惯，习以为常。而不是拿一些东西来向自己心中认为的下层的阶层炫耀。由于整个人生几十年都浸泡在当前阶层中而，习惯了这一切，任何发生在当前阶层的事物，并不觉得有什么特别。&lt;/p&gt;
</description>
               <pubDate>Sat, 15 Dec 2018 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com//2018/12/15/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A815.html</link>
               <guid isPermaLink="true">http://www.luzexi.com//2018/12/15/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A815.html</guid>
            </item>
        
            <item>
               <title>思路探讨(十四) 要行动，不要焦虑</title>
               <description>&lt;p&gt;人生大多数遇到的难题都不是能单靠几个小时或者几天就能解决的。很多人不愿意接受这个事实，总是试图靠短时间内的突击行动来试图解决长期的问题，那是不可能的事，而且大概率会让事情变得越来越糟糕，身体坏了，健康没了，事情没成，问题没解决，一切变得愈发糟糕。&lt;/p&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;焦虑的根源其实是希望立刻解决问题而不得，或者想短时间内解决自己面临的问题而不行。&lt;/p&gt;

&lt;p&gt;焦虑最大的坏处是扰乱我们的节奏，让我们迷失方向，思想更加混沌不堪。焦虑虽然可以使我们居安思危，但比起坏处，这个好处有点弱。&lt;/p&gt;

&lt;p&gt;“我要”的欲望越多，焦虑就会越多。有些人选择逃避欲望，焦虑也相对少了，但生活品质就随之下降了，没有了钱，没有了房，没有了车，生活在底层又没有欲望，人生就少了很多意义。&lt;/p&gt;

&lt;p&gt;更多的人选择“追逐欲望”，但他们想要的太多，积累的太少，不给自己时间去坚持，失去了自己的节奏，被”欲望“所控制，被焦虑所恐吓。&lt;/p&gt;

&lt;h6&gt;相反的。”追逐欲望“的人群中，也有另一种人，他们追逐欲望而不奢望短时间得到，他们懂得积累，深信不积跬步无以至千里的道理，他们拥有自己的节奏，任何扰乱他们节奏的人和事都一概闭屏，他们就是那些保持长期积极的心态，长期坚持努力奋斗，长期斗志昂扬的人。&lt;/h6&gt;

&lt;p&gt;积累多的人之所以稳健，是因为对他来说，”我要“的欲望可以用”我有“的来满足。即使”我有“的暂时不够满足，他也能借助已经拥有的足够的努力和勤奋（或者已经熟练的技能和技巧或方法），只需假以时日，定能如愿以偿。一旦得偿所愿，不仅”我有“的更多，”我要“的也更容易获得，如此形成良性循环。&lt;/p&gt;

&lt;h6&gt;其中保持长期的，足够的努力，和足够的勤奋，最为关键。&lt;/h6&gt;

&lt;p&gt;从某种意义上理解，“逆境造就成功”，“磨难令人成熟”之类的话纯属胡说八道。显然，在顺境中更容易成功，而且很多磨难本身没有不要—这更可能是失败者对他们自己一生都未曾有机会体验的成功及成功者意淫式的猜想而已。失败者很难有机会了解到成功的真相，因为人最容易受自身经验的限制，而不曾有哪怕一点点成功经验的人无从摆脱自身局限。&lt;/p&gt;

&lt;h6&gt;从长期来看，如果我们的心态是要精进我们自身的能力而不是要达成某个绩效目标，我们更有可能长期坚持下去并保持积极性。&lt;/h6&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;专注于提升你的编程技术和你的能力来创造有意义的影响，而不是专注于想要被公司晋升为主管工程师&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;训练自己成为一个更好的选手或运动员，而不是为了赢得某项运动，不论是跑步，打球还是瑜伽。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;加入一家创业公司，不是为了发财暴富，而是因为你对将要面对的问题充满热情，并且激动地想要从这个旅程中学习。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你将会意识到基于绩效的长期目标依赖于很多你无法控制的外界因素（你的经理是否会提拔你，你是否比你的竞争对手强或是你的创业公司是否成功）。&lt;/p&gt;

&lt;p&gt;你让环境因素在你的成功中扮演如此重要的角色，当你遇到障碍时，你很难保持积极性。相反如果你专注于自我学习和能力提升，你更有可能克服困难获得实际上的成功。&lt;/p&gt;
</description>
               <pubDate>Sat, 08 Dec 2018 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com//2018/12/08/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A814.html</link>
               <guid isPermaLink="true">http://www.luzexi.com//2018/12/08/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A814.html</guid>
            </item>
        
            <item>
               <title>思路探讨(十三) 三十而立四十不惑</title>
               <description>&lt;h6&gt;三十立什么？&lt;/h6&gt;

&lt;p&gt;===&lt;/p&gt;

&lt;p&gt;三十岁的人，应该能依靠自己的本领独立承担起自己应承受的责任，并已经确定自己的人生目标与发展方向。简单说，三十岁的人应该能坦然地面对一切了。&lt;/p&gt;

&lt;p&gt;三十岁后对社会和自己都有比较明确的认识和理解，在这基础上的一种自觉的或者是说是一种自我人格独立的意识。&lt;/p&gt;

&lt;p&gt;三十岁后确立了我们自己的品格和修养，包括：思想的修养，道德的涵养，能力的培养。&lt;/p&gt;

&lt;p&gt;三十岁后不再把自己的需求寄托在父母的资助上，寄托在别人的帮助上，有了自己完全独立的生存和发展的能力。&lt;/p&gt;

&lt;p&gt;三十岁后确立了自己所从事的事业，应该有比较固定的职业了。从事每项事业都要有本领，按现代话讲就是有一技之长。这是为生的必备，随着现代科技的发展，对每个人的各方面要求都会越来越高。&lt;/p&gt;

&lt;p&gt;三十岁后陆续组建了自己的家庭，对家庭和团体的观念开始关注，甚至会开始上升到国家的大团体，为团体尽心做出自己的贡献的意识越来越强烈，同时也越来越清楚的意识到，没有团体就没有自己的事实。&lt;/p&gt;

&lt;p&gt;三十而立是对年轻人的起码要求，不过现实和我们所期望的有很大的距离，这也是三十岁后的10年内要用勤劳和智慧要解决的问题。&lt;/p&gt;

&lt;h6&gt;四十而不惑，明白了什么？&lt;/h6&gt;

&lt;p&gt;&amp;quot;四十而不惑&amp;quot;，到了四十岁，才不怀疑。人到了四十岁，咀嚼了事态的冷暖，感怀了岁月的无情，往事悠悠，四十年弹指一挥间，在经历了许多疑惑、彷徨、振奋、欣喜之后，是沉思，是恍然大悟……少了激情，多了沉稳；少了冲动，多了冷静；少了烦恼，多了理智；少了放任，多了责任；少了盲从，多了自我……四十岁的人是十分理智和清醒的，对外，他明白了社会；对内，他明白了自己；对自己，他明白了责任。&lt;/p&gt;

&lt;p&gt;对外，他明白了社会。人是生活在社会之中，离不开社会，社会越进步，人们对社会的依赖度就会越高。四十岁的人，不再年轻，缺少了对社会那种幻想和迫切投身于社会中的激情，生活的经历多少磨去了些激情，多了沉稳，挫折让他明白了，人和社会的关系就是个体和群体的关系，个体是群体中的一分子，个体左右不了群体，那就必须正视它，个人的理想和愿望必须建立在现实社会的基础之上，否则就是空想。他内心会有一种淡定的力量去应对外界。&lt;/p&gt;

&lt;p&gt;对内，他明白了自己。所以，所谓成长是内心在历练中的逐渐强大，所谓人生的归位是把外在的东西变成内心的能量。有理想，而不是妄想；有愿望，而不奢望；有作为，而不妄为。有理想是应该的，但关键在打理，去实践；有愿望也可以，关键在于切合实际；有作为，关键在适度。四十岁的人，是最讲实际的年龄段的人，人生走过一半，机会和机遇少了，不应该再犯过错而走迂回的路了。&lt;/p&gt;

&lt;p&gt;对自己，他明白了责任。四十岁的人最大特点是明白了自己的责任。他必须承担社会责任、家庭责任和抚养子女责任。首先，他必须做好自己的工作，这不单是生存的需要，也是为社会所做的贡献，是必须尽到的社会责任，只有每个社会成员的辛勤工作，才换来整个社会的进步；其次，四十岁的人，其父母年龄都大了，做为四十岁的人，必须承担起赡养老人的家庭责任，尽心尽力尽早去尽孝；还有，四十岁的人，子女都处在学习阶段，培养教育好自己的子女，即是父母的责任，也是为社会延续和发展所应尽的社会责任。&lt;/p&gt;

&lt;p&gt;四十岁的人，是人生辉煌时期，也是为社会和家庭贡献最大的时期。&lt;/p&gt;
</description>
               <pubDate>Sat, 01 Dec 2018 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com//2018/12/01/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A813.html</link>
               <guid isPermaLink="true">http://www.luzexi.com//2018/12/01/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A813.html</guid>
            </item>
        
    </channel>
</rss>