<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title></title>
        <description>技术，哲学，金融</description>
        <link>http://www.luzexi.com</link>
        <atom:link href="http://www.luzexi.com/assets/feed.xml" rel="self" type="application/rss+xml" />
        
            <item>
               <title>读书笔记(五十五) 如何做好PPT - PPT内容策略</title>
               <description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247485214&amp;amp;idx=1&amp;amp;sn=26d7841d6ddbb23925b2be5c7d914256&amp;amp;chksm=fc226219cb55eb0f168abb24ffeeaa1f7d899ff43fd2a308de29a67bb20925644d244c07d174&amp;amp;token=537319754&amp;amp;lang=zh_CN#rd&quot;&gt;已发布在微信公众号上，点击跳转&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;背景&quot;&gt;背景：&lt;/h1&gt;

&lt;p&gt;近段时间在练习演讲，一开始只是想练习下自己的口头表达能力和沟通能力，但渐渐的我发现我喜欢上了演讲，它不仅可以锻炼我的表达能力，还能锻炼我对知识的理解和总结能力。&lt;/p&gt;

&lt;p&gt;这段时间里，我发现演讲的其中关键用途是汇报和分享，这让我欣喜若狂。
同时苦于自己不太会写PPT，屡次上台屡次搞砸，这激起了我对PPT学习的渴望。&lt;/p&gt;

&lt;p&gt;实际上观众除了听到还要看到，这种视觉呈现分为两种，一种是身体和语音演绎出来，另一种就是PPT呈现出来的，PPT如同台上的演绎，它让演讲内容呈现的更优雅更人性化，在听觉和视觉双重冲击之下发挥演讲的最大效果。&lt;/p&gt;

&lt;p&gt;我找了四本同类书籍，《PPT设计的艺术》、《你就是干不过做PPT的》、《精进PPT》、《PPT设计思维、技术与实践》进行主题阅读，看完后根据自己的实践经验和对书本知识的理解做回顾和总结。&lt;/p&gt;

&lt;h1 id=&quot;概述&quot;&gt;概述：&lt;/h1&gt;

&lt;p&gt;本篇基于《你就是干不过做PPT的》、《精进PPT》《PPT设计思维、技术与实现》三本书，结合我的经验总结。&lt;/p&gt;

&lt;p&gt;前者对于PPT的策略性会更多一些，后者两者更多是制图上的技巧，&lt;/p&gt;

&lt;p&gt;说实话我对制图技巧不太感兴趣，其方法在前一篇总结过一些，这里不再重复。&lt;/p&gt;

&lt;p&gt;看书前给自己提了几个问题以便在文中解答：&lt;/p&gt;

&lt;p&gt;1.优秀的PPT的核心是什么？&lt;/p&gt;

&lt;p&gt;2.它有哪几个特点？&lt;/p&gt;

&lt;p&gt;3.我在制作过程中需要注意哪些要点？&lt;/p&gt;

&lt;p&gt;4.有哪些技巧我可以使用？&lt;/p&gt;

&lt;h1 id=&quot;目录&quot;&gt;目录：&lt;/h1&gt;

&lt;p&gt;1.如何让观众容易理解&lt;/p&gt;

&lt;p&gt;2.如何抓住观众的注意力&lt;/p&gt;

&lt;p&gt;3.如何增强说服力&lt;/p&gt;

&lt;h1 id=&quot;内容&quot;&gt;内容：&lt;/h1&gt;

&lt;p&gt;前文主要讲了PPT设计，它主要有两个关键&lt;/p&gt;

&lt;p&gt;1.传递一个核心观念&lt;/p&gt;

&lt;p&gt;2.围绕核心观念打造呈现效果&lt;/p&gt;

&lt;p&gt;本文与前文相同点都是，传递一个核心观念。不同的是，前文讲了很多如何用视觉冲击去打造呈现效果，而本文主要讲的如何用策略去打造呈现效果。&lt;/p&gt;

&lt;p&gt;书中多次提到一个词，‘一次成功’，这个词语很吸引我，&lt;/p&gt;

&lt;p&gt;因为我每次做PPT都在想一个问题：我如何才能让这个PPT‘成功’&lt;/p&gt;

&lt;p&gt;具体的技巧文章中会一一介绍，我将这些技巧融入到生活中去，让自己在生活中练习，在练习中生活。&lt;/p&gt;

&lt;p&gt;其实整本书本身的排序和制作就很好的诠释了如何做资料这件事，&lt;/p&gt;

&lt;h3 id=&quot;开头就有一句话让我恍然大悟一般看一个人制作的资料就能大体知道他的工作能力是优秀还是平庸&quot;&gt;开头就有一句话让我恍然大悟：一般看一个人制作的资料就能大体知道他的工作能力是优秀还是平庸。&lt;/h3&gt;

&lt;p&gt;这句话打开了我对整本书的浓厚的兴趣。&lt;/p&gt;

&lt;p&gt;原来一个人的工作能力，可以如实地反映在他所制作的资料当中。&lt;/p&gt;

&lt;p&gt;经过这几年的历练，我觉得这句话说的毫不夸张。&lt;/p&gt;

&lt;p&gt;下面文章中提到的‘PPT’字样实际上完全可以替换为‘资料’二字同样适用。&lt;/p&gt;

&lt;p&gt;先搬出PPT制作流程和打磨流程，以便大家明白这篇文章能帮助你到什么程度：
1.确定主题
2.明确核心观点，观点需用简洁的语句表达
3.为内容写大致的结构，初步思考下表达顺序
4.为每页PPT制作具体的内容，首版内容可以不用太精细
5.整理表达顺序，排序下把重要的提上来先说
6.优化每页内容，包括例子、数据、图片、图表、图标等
7.优化视觉效果，调整排版，精简内容，更多留白，调整颜色数量和饱和度，适当加入动画
8.尝试自己对着PPT阐述一次，并记录下自己阐述的内容成为备稿
9.将备稿内容文字优化并持续练习
10.练习时将稿件内容映射到PPT的图像中
11.持续打磨，练习，调整，直到上台&lt;/p&gt;

&lt;h1 id=&quot;特点&quot;&gt;特点&lt;/h1&gt;

&lt;p&gt;书中说优秀的‘资料’有6个共同的特点：
1.容易理解的表达顺序
2.第一页抓住读者的心，最后一页促成决策
3.用细节增强说服力
4.短小精悍一目了然
5.图表图解引起重视
6.突出重点化繁为简&lt;/p&gt;

&lt;p&gt;（三个核心图）&lt;/p&gt;

&lt;p&gt;我觉得这6点说的不错，同时仍然觉得有点多，人们很难记得住并运用，&lt;/p&gt;

&lt;p&gt;因此我结合四本书对PPT内容策略提出了3个核心：&lt;/p&gt;

&lt;h3 id=&quot;1观众容易理解包括顺序和结构&quot;&gt;1.观众容易理解，包括顺序和结构&lt;/h3&gt;
&lt;h3 id=&quot;2抓住观众的注意力尤其是每一部分的开头和收尾&quot;&gt;2.抓住观众的注意力，尤其是每一部分的开头和收尾&lt;/h3&gt;
&lt;h3 id=&quot;3增强说服力用数字和细节去增强说服力&quot;&gt;3.增强说服力，用数字和细节去增强说服力&lt;/h3&gt;

&lt;p&gt;下面我就围绕这3个核心，结合个人实战和经验，将这四本书合起来做一个综合性的陈述。&lt;/p&gt;

&lt;h1 id=&quot;怎么才能让观众容易理解&quot;&gt;怎么才能让观众容易理解？&lt;/h1&gt;

&lt;p&gt;很多人都按自己喜欢的顺序表达，自己喜欢讲到哪里就是哪里，自己是爽了，别人完全听不懂。&lt;/p&gt;

&lt;p&gt;实际上对于一份听不懂的PPT报告，没人会想做出行动或给予好的决策。&lt;/p&gt;

&lt;p&gt;曾经的我就是这样一个人，喜欢按自己的方式去表达，去做PPT，结果，谁都听不懂，没有任何的结果。&lt;/p&gt;

&lt;p&gt;因此在做PPT时，我们首先要考虑的事情是，如何让对方能够容易理解我们所要表达的内容。&lt;/p&gt;

&lt;p&gt;原理是一些有关倾听和讲述的知识挺多的可以在《如何讲好一个故事里》学到，简单来说，我们一般在听别人讲话时，通常都不愿意听一大堆解释和判断，反过来也是一样，我们在制作PPT的时候，&lt;/p&gt;

&lt;h3 id=&quot;如果能先给结论或要点对方听和看起来就会舒服很多&quot;&gt;如果能先给结论或要点，对方听和看起来就会舒服很多。&lt;/h3&gt;

&lt;p&gt;实际上，想让对方听懂我们所表达的内容，技巧有很多，其中最关键的是表达结构。&lt;/p&gt;

&lt;h2 id=&quot;1表达结构&quot;&gt;1.表达结构&lt;/h2&gt;

&lt;p&gt;金字塔结构常用于降低听众的理解难度，结论先行，归类分组，层层递进，最后强化结论。&lt;/p&gt;

&lt;p&gt;（结论先行图）&lt;/p&gt;

&lt;p&gt;另外表达内容的分类方法有5种，包括二分法（A、B分类）、过程法（时间分类、流程分类）、要素法（上下分类、内外分类、整体到局部分类）、公式法（成功 = 思维方式 x 热情 x 能力）、矩阵法（四象限分类，重要的、不重要的、紧急的、不紧急的）。这些分类方法具体不细说了，大家也略有所闻。&lt;/p&gt;

&lt;p&gt;还有些分析方法，PDCA、SWOT等，不再列举，&lt;/p&gt;

&lt;h3 id=&quot;他们核心都是结构表达即有次序有分类有总结&quot;&gt;他们核心都是：结构表达，即有次序、有分类、有总结。&lt;/h3&gt;

&lt;p&gt;同时也可以使用‘问题与方案’的方式，先描述问题再提出方案的方式来制作PPT。
在描述问题需要些技巧，否则很容易变得单调乏味，将在后面的抓住注意力内容里说明。&lt;/p&gt;

&lt;h2 id=&quot;2需要注意的细节技巧&quot;&gt;2.需要注意的细节技巧：&lt;/h2&gt;

&lt;p&gt;结构表达时，观点不能超过3个&lt;/p&gt;

&lt;p&gt;对比方案，能让方案本身更清晰&lt;/p&gt;

&lt;p&gt;尽量不使用晦涩难懂的说法，因为只有能力不足的人才直接使用专业术语&lt;/p&gt;

&lt;p&gt;最大限度的精简词汇，删除重复内容、修饰词、介词&lt;/p&gt;

&lt;p&gt;留白，一页内容尽量少，只表达重要内容&lt;/p&gt;

&lt;p&gt;用突出（上色和圈线），排序，连接（箭头和连线）的方式引导观众目光轨迹&lt;/p&gt;

&lt;p&gt;用树状图，能将复杂的结构拆解的更容易理解&lt;/p&gt;

&lt;p&gt;当需要在多个选项中选一个时，矩阵图可以将其优点和缺点表现出来&lt;/p&gt;

&lt;p&gt;明确目的，让大家都知道当前展示的目的，然后以此为前提，聆听你的讲解&lt;/p&gt;

&lt;p&gt;鲜明的标题，让大家知道该页要讲的内容&lt;/p&gt;

&lt;p&gt;其实以上所有的结构和技巧都是为了：突出重点，化繁为简。&lt;/p&gt;

&lt;p&gt;让观众的注意力从纷繁复杂的内容中解脱出来，更聚焦于我们想要表达的核心观点上。&lt;/p&gt;

&lt;h2 id=&quot;3用总结页帮助观众理清内容&quot;&gt;3.用总结页帮助观众理清内容&lt;/h2&gt;

&lt;p&gt;很多长文PPT都需要总结页，因为总结页可以强调结论，同时也帮助观众梳理内容。&lt;/p&gt;

&lt;p&gt;总结页在制作时也同样可以帮助自己梳理结构、理清思路。&lt;/p&gt;

&lt;p&gt;注意：先把PPT（资料）的结构确定好之后，再集中精力去思考内容。&lt;/p&gt;

&lt;h1 id=&quot;如何抓住对方的注意力&quot;&gt;如何抓住对方的注意力?&lt;/h1&gt;

&lt;p&gt;一份优秀的PPT，开头一定会有吸引人的内容。&lt;/p&gt;

&lt;p&gt;首先换位思考下，通常我们对于自己感兴趣的话题，以及与自己相关的语言会比较感兴趣。&lt;/p&gt;

&lt;p&gt;反过来也是一样，当我们成为讲述者时，要考虑对方感兴趣的事情，以及与对方有关的话题，才能引起对方的注意。有时候需要我们在对方和我之间找到一个共同点或共同利益点，让彼此能够链接起来，比如我们的目标和对方的想法相结合就能碰撞出精彩的火花。&lt;/p&gt;

&lt;p&gt;我们可以用三个角度去审视我们的PPT：&lt;/p&gt;

&lt;p&gt;1.对方视角，对方做决策时重视什么？
2.自身视角，有没有充分体现自己的见解？
3.数字视角，有没有具体的数字和方案？&lt;/p&gt;

&lt;h2 id=&quot;一从决策者的角度想问题&quot;&gt;一，从决策者的角度想问题&lt;/h2&gt;

&lt;p&gt;由于最终是由决策者来决定是否使用我们的方案，因此我们必须以终为始，思考决策者想要什么?&lt;/p&gt;

&lt;p&gt;这需要我们观察对方重视的是什么，这样可以站在对方的角度来思考我们制作的资料。&lt;/p&gt;

&lt;p&gt;例如，他在阅读汇报资料时，想知道的是‘结果’还是‘解决方案’，还是其他的比如某类知识。&lt;/p&gt;

&lt;h3 id=&quot;实际上善于制作优秀ppt的人在日常工作中就会仔细观察其他人究竟重视什么&quot;&gt;实际上，善于制作优秀PPT的人，在日常工作中就会仔细观察其他人究竟重视什么？&lt;/h3&gt;

&lt;p&gt;只有站在决策者的角度想问题，我们才能提出更好的抓住决策者注意力的资料。&lt;/p&gt;

&lt;p&gt;我们可以从决策者重视的东西，反推出我应该如何与我们的情况相结合。&lt;/p&gt;

&lt;p&gt;例如，我们制定的目标是否与决策者想要的一致，我们遇到的问题是否与决策者的想要的有相关性，我们的计划是否与决策者重视的有密切联系。&lt;/p&gt;

&lt;h2 id=&quot;二自己独特的见解&quot;&gt;二、自己独特的见解&lt;/h2&gt;

&lt;p&gt;除了考虑对方重视什么，还要考虑自己的独特见解。&lt;/p&gt;

&lt;h3 id=&quot;很多时候决策者不单单要选出好方案更要选出能胜任的人&quot;&gt;很多时候，决策者不单单要选出好方案，更要选出能胜任的人。&lt;/h3&gt;

&lt;p&gt;因此要展现出自己的独特见解以及热情，让决策者的决策方向偏向于我们。&lt;/p&gt;

&lt;p&gt;（独特的见解示例图）&lt;/p&gt;

&lt;p&gt;在PPT中加入自己的思考并讲述独特之处：&lt;/p&gt;

&lt;p&gt;1.我的方案与别人相比有哪些独特之处，
2.遇到问题时我有怎样的独特方式，
3.计划中是如何根据自己独特理解来调整的&lt;/p&gt;

&lt;p&gt;总之，论述自己独特的见解，可以让人眼前一亮的感觉，这会让决策者相信我们深入思考了这些问题，并拥有自己的理解。&lt;/p&gt;

&lt;h2 id=&quot;三放大问题&quot;&gt;三、放大问题&lt;/h2&gt;

&lt;p&gt;通过放大问题，可以让决策者产生危机感，从而吸引对方的注意力。&lt;/p&gt;

&lt;p&gt;当决策者认识到该问题的重要性，并且产生危机意识时，就表明他已经准备好继续聆听下一步的‘提出解决方案’了。&lt;/p&gt;

&lt;p&gt;虽然放大问题是抓住决策者注意力的好方法，但也要注意我们找出的问题必须是真正需要解决的，而不是凭空捏造的或者虚假的。&lt;/p&gt;

&lt;p&gt;（放大问题的核心图）&lt;/p&gt;

&lt;h3 id=&quot;放大问题的核心是找出真正需要解决的问题&quot;&gt;放大问题的核心是，找出真正需要解决的问题。&lt;/h3&gt;

&lt;p&gt;为了能找出，真正需要解决的问题，就需要我们提出一个好问题&lt;/p&gt;

&lt;p&gt;好的问题提出具备3个要素&lt;/p&gt;

&lt;p&gt;目的，问题点，根本原因&lt;/p&gt;

&lt;p&gt;问题的目标是什么？问题点在哪？根本原因是什么？&lt;/p&gt;

&lt;p&gt;目标要符合决策者想要的，问题点要尽可能找到要害点，根本原因要深入挖掘。&lt;/p&gt;

&lt;p&gt;放大问题的三个要素：&lt;/p&gt;

&lt;h3 id=&quot;1通过目标里的内容让决策者产生兴趣&quot;&gt;1.通过目标里的内容让决策者产生兴趣&lt;/h3&gt;
&lt;h3 id=&quot;2通过问题点指出问题的要害&quot;&gt;2.通过问题点指出问题的要害&lt;/h3&gt;
&lt;h3 id=&quot;3通过根本原因找出问题背后的真正原因&quot;&gt;3.通过根本原因找出问题背后的真正原因&lt;/h3&gt;

&lt;p&gt;目标很重要，这能让决策者知道，最终的结果会如何，会产生怎样的效果。&lt;/p&gt;

&lt;p&gt;如果首先在资料开头目的中阐述一点提案背景，再通过达成目标来说明方案被采纳后会带来什么样的效果，这样的效果更佳，观众的注意力会一点点的被吸引直到全部被吸住。&lt;/p&gt;

&lt;p&gt;一旦观众们知道结果和最终效果，他们就会对我们的PPT产生浓厚的兴趣。&lt;/p&gt;

&lt;p&gt;接着通过问题点指出要害，方法可以对比应有（或理想）状态和当前的现状来形成差距，从而指出要害。&lt;/p&gt;

&lt;p&gt;接着找出根本原因，可以从这8个方面来思考：规则、效率、技术、人和时间、资金、检查、交流、职责。&lt;/p&gt;

&lt;p&gt;同时，我们要多次深入思考，最好先列出已知原因，再逐个思考，接着根据原因继续深入问自己‘为什么’。通过问自己三层‘为什么’来深入挖掘出问题背后的真正的原因。&lt;/p&gt;

&lt;h1 id=&quot;如何增强说服力&quot;&gt;如何增强说服力&lt;/h1&gt;

&lt;p&gt;增强说服力很重要，它是我们说服观众的有效手段。&lt;/p&gt;

&lt;p&gt;这里介绍几种方式，大家在平时使用制作PPT时可以混合使用。&lt;/p&gt;

&lt;h3 id=&quot;增强说服力的主要核心是细节&quot;&gt;增强说服力的主要核心是，细节。&lt;/h3&gt;

&lt;p&gt;如何用细节？下面介绍有几种方法。&lt;/p&gt;

&lt;p&gt;（用细节增强说服力的几种方式图）&lt;/p&gt;

&lt;h2 id=&quot;1用具体数字增加说服力&quot;&gt;1.用具体数字，增加说服力&lt;/h2&gt;

&lt;p&gt;以数字切入，会让人感觉，你把握了整体情况，确实仔细进行过调查。&lt;/p&gt;

&lt;p&gt;数字可以大大增加说服力，同时要注意展示的数字必须能让对方感觉到自己是经过仔细确认的。&lt;/p&gt;

&lt;p&gt;如何让观众感觉数字是经过仔细确认的呢？&lt;/p&gt;

&lt;p&gt;1.数字经过严格的筛选，能够作为具体的理论和依据来支持你观点的信息。
2.对数据的理解有自己的思考和表达。
3.有多个数字进行关联。&lt;/p&gt;

&lt;p&gt;有说服力的数据包括：现状数据，方案比较数据，关键数据，目标成果数据，因果关系数据&lt;/p&gt;

&lt;p&gt;我们在列举数字时，要先找到关键点，即对事实关系进行慎密的调查&lt;/p&gt;

&lt;p&gt;接着，用定量数字去描述它，让人感觉你仔细调查过，&lt;/p&gt;

&lt;p&gt;再用，定性数据让数据更加立体化。&lt;/p&gt;

&lt;h2 id=&quot;2用对比增强说服力&quot;&gt;2.用对比，增强说服力&lt;/h2&gt;

&lt;p&gt;通过对比，能够让观众更容易理解，我们想要表达的内容。同时帮助我们找出最佳方案，并向决策者们传递，我们的方案是最佳的。&lt;/p&gt;

&lt;p&gt;对比方式：&lt;/p&gt;

&lt;p&gt;可以通过列举应有状态和现有状态的对比差异。&lt;/p&gt;

&lt;p&gt;也可以先全列出方案，再进行方案混合，再做出差异比较。&lt;/p&gt;

&lt;p&gt;通过对比，不但可以抓住观众的注意力，同时让观众更容易理解我们所要表达的内容。&lt;/p&gt;

&lt;h2 id=&quot;3举成功的例子增强说服力&quot;&gt;3.举成功的例子，增强说服力&lt;/h2&gt;

&lt;p&gt;特别是当成功的例子是一个事实时，会大大增强说服力。&lt;/p&gt;

&lt;h3 id=&quot;实际上对于一个提案来说在决策者中尝鲜的人是极少的大多数人是跟进者而且他们只有看到成功的例子才会愿意跟进通过举成功的例子来说服跟进者就能说服大部分人&quot;&gt;实际上，对于一个提案来说，在决策者中尝鲜的人是极少的，大多数人是跟进者，而且他们只有看到成功的例子才会愿意跟进。通过举成功的例子来说服跟进者，就能说服大部分人。&lt;/h3&gt;

&lt;p&gt;这里有3个关键点：
1.符合常理的内容
2.具体的事实
3.成功的例子&lt;/p&gt;

&lt;p&gt;所谓说服力，指的就是道理+具体的事例。符合常理的内容，再加上具体的事例，能够极大提高资料的说服力。&lt;/p&gt;

&lt;h2 id=&quot;4列举问题与方案增强说服力&quot;&gt;4.列举问题与方案，增强说服力&lt;/h2&gt;

&lt;p&gt;这种方式比较常用，其关键是要抛出能吸引决策者的问题，也就是前面说的放大问题。&lt;/p&gt;

&lt;p&gt;用抛出问题和陈述方案的方式会引起决策者对问题和答案的兴趣，&lt;/p&gt;

&lt;p&gt;在讲述时可以用1、2、3按步讲解，先展现结构和顺序，再展现内容，让表达更容易接受。&lt;/p&gt;

&lt;h2 id=&quot;5明确目标拆解目标制定计划增强说服力&quot;&gt;5.明确目标拆解目标制定计划，增强说服力&lt;/h2&gt;

&lt;p&gt;所谓目标，就是用一个具体的数值表现出最终的效果。&lt;/p&gt;

&lt;p&gt;我们在制定目标时，目标要是一个可量化的具体数字。&lt;/p&gt;

&lt;p&gt;接着，拆解目标，把大目标拆解成小目标，因为这样更容易实现，也更容易制定计划。&lt;/p&gt;

&lt;p&gt;通过将目标拆解，决策者也能做出更加具体的判断。如果决策者对每个拆解后的小目标都认可，那么方案通过的可能性将极大提升。&lt;/p&gt;

&lt;h3 id=&quot;最后制定计划通过制定详细的计划能让决策者了解方案的可行性和可靠性最终说服对方行动&quot;&gt;最后制定计划，通过制定详细的计划，能让决策者了解方案的可行性和可靠性，最终说服对方行动。&lt;/h3&gt;

&lt;h2 id=&quot;6其他增强说服力&quot;&gt;6.其他，增强说服力&lt;/h2&gt;

&lt;p&gt;用真实图片增强说服力：可以用真实的照片，加大说服力效果，特别是当现场照片，当两张照片进行差异比较时，能提升真实感，加大反差效果。&lt;/p&gt;

&lt;p&gt;用图表增强说服力：&lt;/p&gt;

&lt;p&gt;当具体数字放入图表中更有立体感，包括：&lt;/p&gt;

&lt;p&gt;饼状图，适合表示明细，&lt;/p&gt;

&lt;p&gt;柱状图，适合表示比较差异（项目较多时可以选择横向），&lt;/p&gt;

&lt;p&gt;折线图，适合表示变化。&lt;/p&gt;

&lt;p&gt;制作图表时应当尽量简化内容，突出重点&lt;/p&gt;

&lt;p&gt;（饼状图，柱状图，折线图示例图）&lt;/p&gt;

&lt;p&gt;除了图，还有表。好的表格，最大的特点是，只表达重点信息，这需要我们先理清思路，思考表达的重点。&lt;/p&gt;

&lt;p&gt;用说服策略，增强说服力：&lt;/p&gt;

&lt;p&gt;先说服部分方案，再逐步说服对方&lt;/p&gt;

&lt;p&gt;先提出部分提案，再提出整体方案，或先提出预案，再提出详细方案&lt;/p&gt;

&lt;h3 id=&quot;注意ppt上切记不要太细只要大致流程便可&quot;&gt;注意：PPT上切记不要太细，只要大致流程便可&lt;/h3&gt;

&lt;h2 id=&quot;其他制作小细节&quot;&gt;其他制作小细节：&lt;/h2&gt;

&lt;p&gt;1.通过图的并、连来表达各信息之间的关系
2.流程图适合表达工作流程，关键是不要过于详细，可以划分模块和步骤
3.各种图形代表意义，方形-&amp;gt;具体事实，圆形-&amp;gt;概念和关键词，圆角形-&amp;gt;抽象概念，三角形-&amp;gt;上下关系通过简单的图形可以增加美观，统一风格，增加冲击感
4.字体的选择要舒适，易于阅读，市面上更有几种常用的字体组合。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料：&lt;/h2&gt;

&lt;p&gt;《PPT设计的艺术》  作者：林屹&lt;/p&gt;

&lt;p&gt;《你就是干不过做PPT的》 译者：朱悦玮&lt;/p&gt;

&lt;p&gt;《PPT设计思维、技术与实践》 作者：周庆麟等&lt;/p&gt;

&lt;p&gt;《精进PPT-成为PPT高手》 作者：周庆麟、胡子平&lt;/p&gt;

</description>
               <pubDate>Wed, 09 Mar 2022 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2022/03/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B055</link>
               <guid isPermaLink="true">http://www.luzexi.com/2022/03/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B055</guid>
            </item>
        
            <item>
               <title>读书笔记(五十四) 《游戏引擎架构》#4 低阶渲染器（5）</title>
               <description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247485174&amp;amp;idx=1&amp;amp;sn=b8321c77f937537ce74fed145268f6c2&amp;amp;chksm=fc2263f1cb55eae7d64f1343f6a8298e520cad81b574283dbd543970d59d60fb29716817d9aa&amp;amp;token=537319754&amp;amp;lang=zh_CN#rd&quot;&gt;已发布在微信公众号上，点击跳转&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;背景&quot;&gt;背景：&lt;/h1&gt;

&lt;p&gt;作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》后对引擎架构的理解又深入了些。&lt;/p&gt;

&lt;p&gt;近段时间有对引擎剖析的想法，正好借这书本对游戏引擎架构做一个完整分析。&lt;/p&gt;

&lt;p&gt;此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。&lt;/p&gt;

&lt;p&gt;借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块，最后通过实践简单引擎开发来完成对引擎知识的掌握。&lt;/p&gt;

&lt;p&gt;游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。&lt;/p&gt;

&lt;p&gt;同时《游戏引擎架构》中部分知识太过陈旧的部分，会重新深挖后总结出自己的观点。&lt;/p&gt;

&lt;h1 id=&quot;概述&quot;&gt;概述：&lt;/h1&gt;

&lt;p&gt;本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：&lt;/p&gt;

&lt;p&gt;1.时间库
2.自定义容器库
3.字符串散列库
4.内存管理框架
5.RTTI与反射模块
6.图形计算库
7.资产管理模块
8.低阶渲染器
9.剔除与合批模块
10.动画模块
11.物理模块
12.UI底层框架
13.性能剖析器的核心部分
14.脚本系统
15.视觉效果模块&lt;/p&gt;

&lt;p&gt;本篇内容为列表中的第8个部分的第5、6节。&lt;/p&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文：&lt;/h1&gt;

&lt;p&gt;简单回顾下前文&lt;/p&gt;

&lt;p&gt;前文我们聊了下显卡在计算机硬件主板中的位置与结构，知道了CPU、GPU的通信介质，并简单介绍了手机上的主板结构。本篇开头对上一篇做一些内容补充，PC和手机的不同硬件组织，以及CPU与其他芯片的通信过程。&lt;/p&gt;

&lt;p&gt;下面我们开始这篇内容&lt;/p&gt;

&lt;p&gt;本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。&lt;/p&gt;

&lt;p&gt;目录：&lt;/p&gt;

&lt;p&gt;主板结构中的显卡&lt;/p&gt;

&lt;p&gt;GPU功能发展史&lt;/p&gt;

&lt;p&gt;GPU与CPU的差异&lt;/p&gt;

&lt;p&gt;GPU硬件特点&lt;/p&gt;

&lt;p&gt;图形驱动程序架构&lt;/p&gt;

&lt;p&gt;引擎低阶渲染架构&lt;/p&gt;

&lt;p&gt;前面我们说了关于GPU硬件上的原理和运作机制，下面我们来讲一讲软件上的架构，尤其是渲染架构。&lt;/p&gt;

&lt;p&gt;指令和数据从CPU到GPU最终到帧缓冲的这个过程中，有三种类型的架构，第一种是图形驱动程序的架构，第二种是引擎上的低阶渲染器架构，第三种是GPU上的软件架构。&lt;/p&gt;

&lt;p&gt;这三种架构在互相配合，同时也是三个模块互相调用的过程。这也是为什么前面要提到这么多CPU与GPU硬件交互过程的原因。&lt;/p&gt;

&lt;p&gt;为了更好的了解这三者，我又研读了一遍《OpenGL ES3.0 编程指南》，通过对OpenGL接口的解读和分析，逐步剖析图形驱动程序架构、引擎低阶渲染器架构、以及GPU软件架构，我认为这种方式是最合适的。&lt;/p&gt;

&lt;h2 id=&quot;一图形驱动程序架构&quot;&gt;一、图形驱动程序架构&lt;/h2&gt;

&lt;p&gt;我们使用的图形接口如OpenGL、Metal、DX的原理是基于驱动程序接口做的封装。因此，图形驱动调用接口有三步骤：
检查调用参数、检查硬件是否支持
接着调用硬件驱动程序接口
将数据推入缓冲Buffer&lt;/p&gt;

&lt;p&gt;数据被推入缓冲，后续的详细路线如下图：&lt;/p&gt;

&lt;p&gt;（GPU中的数据流向图）&lt;/p&gt;

&lt;p&gt;GPU有线程来执行程序，线程通过Core来执行指令，每个线程的程序都是一样的，只是数据不同。
因此很好理解，GPU中有许多线程，每个线程执行的指令是一样的，从三角形处理到光栅化以及片元处理，都是顺序执行的指令。因此数据流也跟着顺序的指令走。最后到达帧缓存。&lt;/p&gt;

&lt;p&gt;图形API适配了许多GPU驱动程序的接口，驱动程序先检查参数，再将指令推入队列，再刷新时将队列地址发送给GPU，GPU开始处理队列，由线程处理队列中的每个指令，每个线程拥有同样的程序，数据不断被处理，最后到达帧缓存。&lt;/p&gt;

&lt;p&gt;在最上层的图形接口之上，引擎低阶渲染器会调用很多不同类型的图形接口，将数据塞入到缓冲中。下面就来详细描述下，引擎低阶渲染器的架构是怎样的。&lt;/p&gt;

&lt;h2 id=&quot;二引擎低阶渲染器架构&quot;&gt;二、引擎低阶渲染器架构&lt;/h2&gt;

&lt;p&gt;前面我们说，图形API封装了硬件驱动程序，会先检查再调用。&lt;/p&gt;

&lt;p&gt;实际上，低阶渲染器也是一个封装图形API接口的程序，不同的是它封装的更适合渲染对象。&lt;/p&gt;

&lt;p&gt;其封装的目的是让散乱的图形API变得更方便使用，同时还能够优化掉重复的计算。&lt;/p&gt;

&lt;p&gt;这里首先我们来看下OpenGL ES图形API中的接口类型，通过了解图形API接口，能够想象出如果是我们自己来做低阶渲染器架构我们应该如何封装。所以，了解熟悉图形API对于低阶渲染器的架构非常重要。&lt;/p&gt;

&lt;p&gt;下面是一些OpenGL的接口描述和统计，有些枯燥，如已熟悉可以直接跳到描述架构部分。&lt;/p&gt;

&lt;p&gt;OpengGL接口描述与统计：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;状态开启和关闭，包括开启三角绘制、开启混合、开启模板等
glEnableXXX、glDisableXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;获取或查询某数据，包括获取数据，获取日志，获取结果等
glGetXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;绑定数据，包括绑定数据到着色器等
glBindXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;开始和结束某处理，包括开始变换反馈，查询数据等
glBeginXXX
glEndXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;清除缓冲
glClearXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;创建某对象，包括缓冲，数组，纹理，采样器对象等等
glGenXXX，glCreateXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;删除某对象，包括着色器对象，数组，纹理对象，采样器对象等等
glDeleteXXX
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;还有其他的如:
glDrawXXX，绘制相关
glCopyXXX，拷贝复制相关
glCheckXXX，检查相关
glIsXXX，判断是否有效
......
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面按相关性划分为：&lt;/p&gt;

&lt;p&gt;（着色器相关接口图）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;着色器相关：
创建着色器：glCreateShader
加载着色器代码：glShaderSource
编译着色器：glCompileShader
创建着色器程序：glCreateProgram
绑定着色器：glAttachShader
解绑着色器：glDetachShader
链接着色器程序：glLinkProgram
使用着色器程序：glUseProgram
删除着色器程序：glDeleteProgram
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（视口相关接口图）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;视口相关：
设置视口：glViewport
设置视口裁剪深度：glDepthRangef
清除颜色缓冲：glClear
置换缓冲区：eglSwapBuffers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（顶点相关接口图）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;顶点相关：
通过创建缓冲区，可以把顶点数据加载到缓冲区，从而绘制顶点。

加载顶点属性：glVertexAttribXXX
绘制三角形：glDrawArrays，glDrawElements
启用/禁用顶点属性数组：glEnable/DisableVertexAttribArray
申请缓冲：glGenBuffers
指定缓冲：glBindBuffer
向缓冲填入数据：glBufferData，glBufferSubData
删除缓冲：glDeleteBuffers
创建顶点数组对象：glGenVertexArrays
绑定顶点数组：glBindVertexArray
删除顶点数组：glDeleteVertexArrays
映射并返回缓冲区数据：glMapBufferRange
取消映射缓冲区：glUnmapBuffer
刷新映射缓冲区：glFlushMappeBufferRange
复制缓冲区数据：glCopyBufferSubData
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（图元绘制相关接口图）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;图元绘制相关：
绘制几何形状对象：glDrawArrays, glDrawElements, glDrawRangeElements,
绘制几何Instance：glDrawArraysInstanced, glDrawElementsInstanced
绘制线段：glLineWidth
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（光栅化相关接口图）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;光栅化相关：
指定正面顺序：glFrontFace
剔除反面：glCullFace
多边形偏移：glPolygonOffset
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;遮挡查询：glBeginQuery, glEndQuery, glGenQueries, glDeleteQueries, glGetQueryObjectuiv
遮挡查询用查询对象来跟踪通过深度测试的片段或样本。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;顶点着色器相关：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;内建特殊变量：
gl_VertexID，当前顶点整数索引
gl_InstanceID，当前图元实例编号
gl_Position，输出顶点
gl_PointSize，点精灵尺寸
gl_FrontFacing，是否正面的布尔值
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;内建常量：
gl_MaxVertexAttribs，顶点属性最大数量
gl_MaxVertexUniformVectors，使用vec4统一变量的最大数量
gl_MaxVertexOutputVectors，输出向量的最大数量
gl_MaxVertexTextureImageUnits，可用纹理单元的最大数量
gl_MaxCombinedTextureImageUnits，顶点和片元着色器中可用纹理单元的最大数量总和
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（变换反馈相关接口图）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;变换反馈TransformFeedback相关：
glTransformFeedbackVaryings，指定变换反馈时捕捉的顶点属性
glBeginTransformFeedback，开始变换反馈（需先创建变换反馈缓冲区，再绑定到顶点索引）
glEndTransformFeedback，结束变换反馈
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（纹理相关接口图）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;纹理相关：
4种纹理类型：2D纹理、2D纹理数组、3D纹理、立方图纹理
其中2D纹理数组和3D纹理有点相似，2D纹理数组常用于帧动画。两者区别为过滤和mipmap不同。

glGenTextures，创建纹理对象
glDeleteTextures，删除纹理对象
glBindTexture，绑定到一个特定的纹理目标
glTexImage2D，加载2D和立方图的纹理数据
glTexSubImageXXX，加载部分纹理图像数据
glTexImage3D，加载3D纹理数据
glPixelStorei，设置解包对齐
glTexParameteri，设置贴图的过滤模式
glGenerateMipmap，自动生成mip贴图
glActiveTexture，设置当前的纹理单元，以便后续将纹理绑定该单元
glCompressedTexImageXXX，加载2D、立方图、3D等纹理的压缩图像数据（ETC、ASTC等压缩格式）
glCompressedTexSubImageXXX，加载部分压缩纹理图像

glReadBuffer，设置拷贝图像数据来源的颜色缓冲区
glCopyTexImageXXX，从颜色缓冲区拷贝数据到纹理
glCopyTexSubImageXXX，拷贝部分颜色缓冲区的数据到纹理
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（采样器相关接口图）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;采样器相关：
glGenSamplers，生成采样器对象
glDeleteSamplers，删除采样器对象
glBindSampler，绑定纹理到采样器对象
glSamplerParameterXXX，设置采样器对象参数
glTexStorageXXX，分配纹理内存
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;片段着色器相关：&lt;/p&gt;

&lt;p&gt;很久以前在固定功能管线中，使用3种输入：顶点颜色插值、纹理颜色、常量颜色，再使用一些公式的组合实现有趣的特效，包括：A&lt;em&gt;B、A+B、A+B-0.5、A&lt;/em&gt;C+B*(1-C)、A-B等等。&lt;/p&gt;

&lt;p&gt;支持可编程管线后，我们可以通过可编程管线来实现固定功能管线的效果。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;现在的可编程管线的输入由四部分构成：
顶点属性插值（顶点上的颜色、uv、法线等）
统一变量（全局常量）
采样纹理
代码常量
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;内建特殊变量：
gl_FragCoord，片段的窗口相对坐标（可用于噪声贴图计算）
gl_FrontFacing，是否正面朝向
gl_PointCoord，点精灵的纹理坐标
gl_FragDepth，输出变量，覆盖片段的固定功能深度值（会导致深度测试优化失效）
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;内建常量：
gl_MaxFragmentInputVectors，输入的最大数量
gl_MaxTextureImageUnits，可用纹理图像单元的最大数量
gl_MaxFragmentUniformVectors，使用vec4统一变量项目的最大数量
gl_MaxDrawBuffers，多重渲染目标（MRT）的最大支持数量
gl_(Min/Max)ProgramTexelOffset，通过内建ESSL函数texture*Offset()偏移参数支持的最大和最小偏移量
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（缓冲区相关接口图）&lt;/p&gt;

&lt;p&gt;缓冲区相关：&lt;/p&gt;

&lt;p&gt;缓冲区有三种，颜色缓冲区，深度缓冲区，模板缓冲区。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;缓冲清除相关：
glClear，清除指定缓冲区
glClearColor，清除颜色缓冲区中的指定颜色
glClearDepth，清除深度缓冲区中的指定深度
glClearStencil，清除模板缓冲区中的指定掩码
glClearBufferXXX，清除指定缓冲区中的部分区域
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;缓冲写入相关：
glColorMask，像素写入颜色缓冲区时，哪些分量会被更新
glDepthMask，深度写入深度缓冲区时，哪些深度可以修改
glStencilMask，掩码写入模板缓冲区时，哪些掩码可以被修改
glStencilMaskSeparate，根据正面和背面的图元使用不同的掩码
glDrawBuffers，渲染指定颜色数组到多重渲染目标中
（多重渲染目标允许一次渲染多个颜色缓冲区，从而实现高级渲染算法，如延迟渲染）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（裁剪与测试相关图）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;模板缓冲裁剪与测试：
glScissor，指定裁剪矩形区域
glStencilFuncXXX，用指定公式指定值指定掩码测试比较模板缓冲
glStencilOpXXX，将测试结果用于深度缓冲区的操作

深度缓冲测试：glDepthFunc，设置深度测试的运算公式
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（混合相关接口图）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;混合相关：
glBlendFuncXXX，设置混合系数
glBlendColor，设置常量颜色
glBlendEquationXXX，设置运算公式
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;颜色缓冲区中读写像素：
glReadPixels，从颜色缓冲区中取出数据返回到指定数组中，
数据传输时会启动DMA传输，此时CPU会空出来。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;（帧缓冲区对象相关接口图）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;帧缓冲区对象（FBO）相关：
可用于颜色、深度、模板纹理或渲染目标。
glGenRenderbuffers，分配n个渲染缓冲区对象，返回到指针中。
glBindRenderbuffer，绑定渲染缓冲区对象
glRenderbufferStorageXXX，指定渲染缓冲区对象大小和格式
glBindFramebuffer，设置当前帧缓冲区对象（渲染目标）
glFramebufferRenderbuffer，将一个渲染缓冲区对象连接到帧缓冲区附着点
glFramebufferTextureXXX，将纹理的某个mip级别连接到帧缓冲附着点
glCheckFramebufferStatus，验证帧缓冲区对象是否完整

glBlitFramebuffer，高效的将矩形区域的像素从一个帧缓冲区复制到另一个
glInvalidate(Sub)Framebuffer，让整个帧缓冲区或子区域失效
glDeleteRenderbuffers，删除指定渲染缓冲区对象，先断开缓冲区对象才能删除
glDeleteFramebuffers，删除指定帧缓冲对象
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;未完，最近忙新书和工作以及演讲训练，后续继续写……&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料：&lt;/h2&gt;

&lt;p&gt;《OpenGL ES3.0 编程指南》DanGinsburg等著&lt;/p&gt;

&lt;p&gt;《GPU 引擎》
https://docs.microsoft.com/zh-tw/windows/win32/direct3d12/user-mode-heap-synchronization
《CPU体系结构》
https://my.oschina.net/fileoptions/blog/1633021&lt;/p&gt;

</description>
               <pubDate>Sun, 20 Feb 2022 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2022/02/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B054</link>
               <guid isPermaLink="true">http://www.luzexi.com/2022/02/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B054</guid>
            </item>
        
            <item>
               <title>读书笔记(五十三) 《如何做好PPT》- PPT设计的艺术</title>
               <description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247485154&amp;amp;idx=1&amp;amp;sn=0e60371fd95e61debce8fa3518510470&amp;amp;chksm=fc2263e5cb55eaf38998592671e335e143d1864119737b7c3ab5b02bc8fcebd7998e9c3d8d20&amp;amp;token=1275740756&amp;amp;lang=zh_CN#rd&quot;&gt;已发布在微信公众号上，点击跳转&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景：&lt;/h2&gt;

&lt;p&gt;近段时间在练习演讲，一开始只是想练习下自己的口头表达能力和沟通能力，但渐渐的我发现我爱上了演讲。又过了一段时间，我发现演讲的其中一个关键用途是汇报和培训，于是我又渐渐爱上了汇报和培训。&lt;/p&gt;

&lt;p&gt;但是光讲还不行，还得有演示的PPT，这样才能让观众不但有听觉上得冲击，还有视觉上冲击，双重冲击之下才能发挥最大效果。&lt;/p&gt;

&lt;p&gt;于是找了3本同类书籍读，《PPT设计的艺术》、《精进PPT》、《PPT设计思维、技术与实践》进行主题阅读，看完后根据自己的理解做总结。&lt;/p&gt;

&lt;h2 id=&quot;概述&quot;&gt;概述：&lt;/h2&gt;

&lt;p&gt;PPT的核心关键是什么？
如何达到最佳呈现效果？
有哪些设计需要注意？
有哪些搜图站点？&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结：&lt;/h2&gt;

&lt;p&gt;少就是多
结构：结论先行、理由和论据在后、金字塔结构
排版：统一、整齐、平衡
小技巧：做图、色彩饱和度、图标、图表&lt;/p&gt;

&lt;h2 id=&quot;内容&quot;&gt;内容：&lt;/h2&gt;

&lt;p&gt;本篇是针对《PPT设计的艺术》这本书做的一次总结，很不错的一本讲PPT的书，推荐。&lt;/p&gt;

&lt;h2 id=&quot;ppt的核心关键是什么&quot;&gt;PPT的核心关键是什么？&lt;/h2&gt;

&lt;p&gt;经过一段时间的PPT练习和演讲练习，再加上对理论知识的学习，我得出了PPT的核心关键：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;传递核心观点（1个核心观点）&lt;/li&gt;
  &lt;li&gt;围绕核心观点打造呈现效果（清晰地传递信息，视觉冲击增强观众体验）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;做每件事的要素其实都很简单，简单的道理背后有复杂的经历和技巧。&lt;/p&gt;

&lt;p&gt;下面我就围绕这两个核心关键做更详细的技巧阐述。&lt;/p&gt;

&lt;h2 id=&quot;如何达到最佳呈现效果&quot;&gt;如何达到最佳呈现效果？&lt;/h2&gt;

&lt;p&gt;为了达到最佳呈现效果，我们需要突出重点，用结构思维去传递信息，用视觉效果增强体验。&lt;/p&gt;

&lt;h2 id=&quot;少就是多&quot;&gt;少就是多&lt;/h2&gt;

&lt;p&gt;人大脑的记忆是有限的，当展现在我们眼前的事物太多时，通常我们一个都记不住。当入眼的东西少了，我们反而记得更清楚。&lt;/p&gt;

&lt;p&gt;少即是多的本质就是，突出重点。&lt;/p&gt;

&lt;h2 id=&quot;结构结论先行理由和论据在后金字塔结构&quot;&gt;结构：结论先行、理由和论据在后、金字塔结构&lt;/h2&gt;

&lt;p&gt;我们在面对问题时，通过拆解可以把问题分成一个个你能解决的部分，&lt;/p&gt;

&lt;p&gt;高手最本质的不同就是事先花时间用心思考，再动手去实现。&lt;/p&gt;

&lt;p&gt;（高手制作PPT的五大步骤图）&lt;/p&gt;

&lt;p&gt;多思考，如何说别人才肯听，如果做才能印象深刻，如果讲才能理解我们的核心观点，这种思考显得尤为重要。&lt;/p&gt;

&lt;p&gt;用金字塔结构汇报工作&lt;/p&gt;

&lt;p&gt;用结构化思维做汇报工作，把信息整理、筛选成结论、理由和事实三部分。&lt;/p&gt;

&lt;p&gt;（结论先行金字塔结构）&lt;/p&gt;

&lt;p&gt;通过层层递进论述，将你的汇报变成一个金字塔结构。结论先行，再用理由来支撑结论，最后阐述事实和详情来支撑理由，层层递进。&lt;/p&gt;

&lt;p&gt;除了结论先行，还有一些成熟的表达架构:
标准式：SCA，情景-冲突-答案
开门见山式：ASC，答案-情景-冲突
突出忧虑式：SCA，冲突-情景-答案
突出信心式：QSCA，问题-情景-冲突-答案&lt;/p&gt;

&lt;p&gt;小结一下，有结构的表达中，适合汇报的结构为：以结论为开头，层层论证结论，最后强化结论的过程。&lt;/p&gt;

&lt;h2 id=&quot;mece分析法则&quot;&gt;MECE分析法则&lt;/h2&gt;

&lt;p&gt;简单回顾下金字塔原理中的分析方法MECE法则：互相独立，完全穷尽&lt;/p&gt;

&lt;p&gt;这8个字可以理解为：不重不漏 – 保证信息分类中的独立性和完整性。&lt;/p&gt;

&lt;p&gt;独立性强调每项工作之间要独立，每项工作之间不要有交叉重叠。完整性说的是，在信息分类过程中不要遗漏掉某项，要保证其完整性。&lt;/p&gt;

&lt;p&gt;在分类信息和分析事物时，如果能做到不重不漏可以让事物变得更加清晰可控。&lt;/p&gt;

&lt;p&gt;在具体执行时可分为两步：
1.确定主体，是大类还是复杂问题，区分对待
2.把主体分为几个部分，再把小的部分拆解成更小的部分&lt;/p&gt;

&lt;p&gt;拆解问题直到拆解的小问题可以直接通过一次行动解决，其中分析和拆解时不能存在遗漏和重复的情况。&lt;/p&gt;

&lt;p&gt;总之，分析不重不漏，分析时的分类方法可以是时间线分类、流程线分类、以上统下、由内而外、从整体到局部。&lt;/p&gt;

&lt;h2 id=&quot;有哪些设计需要注意&quot;&gt;有哪些设计需要注意？&lt;/h2&gt;

&lt;p&gt;（图：PPT制作技巧）&lt;/p&gt;

&lt;p&gt;PPT设计有了思维结构和逻辑外，还需要在制作上下功夫，这里有3点需要注意：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;排版&lt;/li&gt;
  &lt;li&gt;色彩&lt;/li&gt;
  &lt;li&gt;图片&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;排版&lt;/p&gt;

&lt;p&gt;（图：PPT排版技巧）&lt;/p&gt;

&lt;p&gt;PPT在设计中要注意的排版问题，统一、整齐、平衡，总之就是让人舒服不要有强迫症。&lt;/p&gt;

&lt;p&gt;各元素对齐能让视觉更舒适，包括边缘对齐、等距分布、总体兼顾。&lt;/p&gt;

&lt;p&gt;大脑不喜欢混乱，因此统一的样式是不可或缺的，同时这也是提高制作PPT效率的好方法。&lt;/p&gt;

&lt;p&gt;平衡需要建立在页面中要点的主次优先级上，突出主要信息，减弱次要信息，同时做好页面的视觉平衡。&lt;/p&gt;

&lt;p&gt;色彩&lt;/p&gt;

&lt;p&gt;（图：PPT色彩技巧）&lt;/p&gt;

&lt;p&gt;PPT的色彩有两大关键点：
颜色选择
颜色饱和度&lt;/p&gt;

&lt;p&gt;颜色和主题一样，多了会让人眼花缭乱，分不清主次，看不清记不住。&lt;/p&gt;

&lt;p&gt;颜色的选择有一个建议：除黑白之外最好不要超过两种颜色。&lt;/p&gt;

&lt;p&gt;颜色饱和度是指，颜色的鲜艳程度，饱和度低到一定程度，颜色就会变成灰色。&lt;/p&gt;

&lt;p&gt;优秀的PPT中，颜色饱和度普遍不高，这样看上去显得沉稳、专业。&lt;/p&gt;

&lt;p&gt;在颜色饱和度的选择上，尽量使用柔和的、适中的、不刺眼的颜色，作为同一章节甚至整个PPT的主色调。&lt;/p&gt;

&lt;p&gt;图片&lt;/p&gt;

&lt;p&gt;图片能帮助你快速引导观众的注意力并传递核心观点。&lt;/p&gt;

&lt;p&gt;同样的，图片不在于多，而在于精。我们在制图选图时需要特别留意，图片是否契合主题，色彩饱和度，尤其是在关键页。&lt;/p&gt;

&lt;p&gt;图片的制作有4个技巧&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;形状图&lt;/li&gt;
  &lt;li&gt;图标&lt;/li&gt;
  &lt;li&gt;选图&lt;/li&gt;
  &lt;li&gt;图表&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;形状图&lt;/p&gt;

&lt;p&gt;在PPT软件中可插入丰富形状的图形，再通过组合、描边、填充、编辑顶点的制作有趣生动的图形。&lt;/p&gt;

&lt;p&gt;（图：生动的形状图-来源网络）&lt;/p&gt;

&lt;p&gt;通过形状图可以让PPT中的元素更有趣，也能达到吸引观众的效果。&lt;/p&gt;

&lt;p&gt;图标&lt;/p&gt;

&lt;p&gt;图标能让观众，快速、生动形象的表达我们想表达的意思，这比文字的力量要强大的多。&lt;/p&gt;

&lt;p&gt;因此用好图标也很关键。&lt;/p&gt;

&lt;p&gt;文章的后面介绍了一些图标网站可帮助大家快速搜索到自己称心的图标。&lt;/p&gt;

&lt;p&gt;（图：PPT中的图标-来源网络）&lt;/p&gt;

&lt;p&gt;图标选择的关键是：
消除歧义
图文主题吻合
创意展示&lt;/p&gt;

&lt;p&gt;选图&lt;/p&gt;

&lt;p&gt;（图：选图的关键）&lt;/p&gt;

&lt;p&gt;选图的关键是，吸睛、吸睛、吸睛&lt;/p&gt;

&lt;p&gt;什么样的图片才能吸引我们的注意力呢？
舒适
有趣
愉悦&lt;/p&gt;

&lt;p&gt;这里分别为这三种类型图片举常用的例子：
婴儿图让人舒适
幽默图让人有趣
美女图让人愉悦&lt;/p&gt;

&lt;p&gt;在保证吸睛的同时，为了更好的呈现，图片还要保证，高清、简单、精炼：
首先高清图保证不模糊
其次选图要简单且紧扣主题
最后文字要精炼才能记得住&lt;/p&gt;

&lt;p&gt;图表&lt;/p&gt;

&lt;p&gt;为什么要用图表？提供有理有据的数据、突出页面重点、简化表达逻辑、强化重点。&lt;/p&gt;

&lt;p&gt;（图：丰富的图标-来源网络）&lt;/p&gt;

&lt;p&gt;数据本身没有意义，我们要的是数据背后的事实，它为要点提供支撑。所有不能提高核心信息传递的元素都可以被精简。&lt;/p&gt;

&lt;p&gt;遇到一页多表的情况时，每个表都要支撑同一个观点，并且从不同侧重点展示各自维度的数据来支撑观点。&lt;/p&gt;

&lt;p&gt;图表修炼三招：
用颜色突出重点
文字辅助说明
特别标注突显细节&lt;/p&gt;

&lt;p&gt;关键不是数据和图表，而是如何用感性的图片刺激观众的大脑。如果你想说服谁，那么尽量少用理性分析的数据堆砌图表，多用刺激大脑感性认知的可视化图片。&lt;/p&gt;

&lt;p&gt;因此如何用图表去刺激观众的大脑，向观众传递核心观点才是关键。&lt;/p&gt;

&lt;p&gt;图表从来不是重点，它背后所传达的核心观点才是重中之重。&lt;/p&gt;

&lt;p&gt;有哪些搜图站点？&lt;/p&gt;

&lt;p&gt;快速搜索适合的配图&lt;/p&gt;

&lt;p&gt;无版权图片素材网站：&lt;/p&gt;

&lt;p&gt;pixabay.com
支持中文搜索&lt;/p&gt;

&lt;p&gt;pexels.com
偏商务风的图片网站&lt;/p&gt;

&lt;p&gt;unsplash.com
以自然风景为主的无版权图片网站&lt;/p&gt;

&lt;p&gt;gratisography.com
创意图片网站&lt;/p&gt;

&lt;p&gt;vectorportal.com
二次元，扁平化风格图片网站&lt;/p&gt;

&lt;p&gt;visualhunt.com
根据颜色找图的网站&lt;/p&gt;

&lt;p&gt;foodiesfeed.com
食物图片网站&lt;/p&gt;

&lt;p&gt;其他：
polayoutu.com
ssyer.com&lt;/p&gt;

&lt;p&gt;好的icon图标网站：&lt;/p&gt;

&lt;p&gt;微软的PPT中有一些自带的图标&lt;/p&gt;

&lt;p&gt;iconfont.cn
阿里图标&lt;/p&gt;

&lt;p&gt;icons8.cn
扁平风格的图标&lt;/p&gt;

&lt;p&gt;flat-icon-design.com
受女生欢迎的日本图标网站&lt;/p&gt;

&lt;p&gt;flaticon.com
扁平化风格的图标网站&lt;/p&gt;

</description>
               <pubDate>Mon, 10 Jan 2022 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2022/01/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B053</link>
               <guid isPermaLink="true">http://www.luzexi.com/2022/01/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B053</guid>
            </item>
        
            <item>
               <title>读书笔记(五十二) 《如何精彩演讲》#3 如何即兴演讲</title>
               <description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247485133&amp;amp;idx=1&amp;amp;sn=6e8acd0c1b8f3cbf6c048d4ba4120776&amp;amp;chksm=fc2263cacb55eadcd1533d68ab7f226020292b3bc8ec4bd5684ae07daa0dd8f41b05936c6600&amp;amp;token=353183005&amp;amp;lang=zh_CN#rd&quot;&gt;已发布在微信公众号上，点击跳转&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;不知不觉看完了6本关于演讲的主题，按推荐顺序排列分别是《高效演讲》、《演讲与口才》、《即兴演讲》、《关键对话》、《TED演讲的力量》、《说话的艺术》。&lt;/p&gt;

&lt;p&gt;我希望自己能够对演讲有一个系统性的学习，于是自己在平常的生活和工作中做了很多实践和训练。&lt;/p&gt;

&lt;p&gt;目标是，改善平常的工作、生活中表达的流畅和清晰度，能让人感觉到舒服，让人感觉有活力。&lt;/p&gt;

&lt;p&gt;同时在公众演讲上，希望自己能够很好的呈现所思所想以及所知所学。&lt;/p&gt;

&lt;p&gt;因此开启这个精彩演讲系列的总结文章，我将对这六本书（其实不止六本）的内容加上我的实践经验做一次全面的系统性的总结。&lt;/p&gt;

&lt;h2 id=&quot;概述&quot;&gt;概述：&lt;/h2&gt;

&lt;h3 id=&quot;1即兴演讲与普通演讲的区别&quot;&gt;1.即兴演讲与普通演讲的区别&lt;/h3&gt;

&lt;h3 id=&quot;2即兴演讲的框架&quot;&gt;2.即兴演讲的框架&lt;/h3&gt;

&lt;h3 id=&quot;3即兴演讲的练习方法&quot;&gt;3.即兴演讲的练习方法&lt;/h3&gt;

&lt;h2 id=&quot;内容&quot;&gt;内容：&lt;/h2&gt;

&lt;p&gt;如果你仔细一些，就会发现我们生活当中会用到很多很多的机械演讲，很多人并不在意进行演讲认为进行演讲，只是脑袋里迸发出了一些火花，或者说自己总结的那些方法。那其实在我们平常的沟通沟通跟表达过程当中进行演讲，在我们沟通表达当中占据的位置非常重要。&lt;/p&gt;

&lt;p&gt;（即兴演讲运用场景）&lt;/p&gt;

&lt;p&gt;特别是作为领导人，作为一个想要做更多有效工作的人。更多的需要激情演讲来，让自己的沟通效率更高，让自己的工作效率更高，让自己的生活效率更高。&lt;/p&gt;

&lt;p&gt;欣欣的我们会发现，在我们生活当中经常会有一些即兴演讲。讲的不好的情况让。让对话让对方让大家感觉到非常不舒服。&lt;/p&gt;

&lt;p&gt;其中一些高调的领导者，会在即兴时刻跟着感觉走，结果让自己。悔恨终生一些管理者在会议上被点名发言却无语无伦次，舌头就像打了结一样，还有一些管理者一开口就滔滔不绝没完没了，最后连自己讲了什么都忘记了。另一些领导者呢，在回答问题时没有主题，东拉西扯，最后拼命解释说我的意思是这种体验非常非常的不好。&lt;/p&gt;

&lt;p&gt;因此进行演讲，需要引起我们足够多的重视，这在我们平常沟通工作生活当中，有非常非常多的场景可以运用，并且它是我们。提高效率。让自己生活工作更美好的一个非常非常好的技巧。&lt;/p&gt;

&lt;h2 id=&quot;即兴演讲与普通演讲的区别&quot;&gt;即兴演讲与普通演讲的区别&lt;/h2&gt;

&lt;p&gt;（普通演讲特点）&lt;/p&gt;

&lt;p&gt;我们可以用几个星期甚至几个月的时间来准备我们的演讲稿，从计划、研究、大纲、讨论、草拟、完善的步骤来为即将到来的演讲准备演讲稿。这是一件非常有趣的事情，也非常值得去准备。&lt;/p&gt;

&lt;p&gt;（即兴演讲特点）&lt;/p&gt;

&lt;p&gt;只是平时的生活和工作当中，我们90%情况都没有任何准备，大部分人都会“临时抱佛脚”或“跟着感觉走”说两句，这让我们错失了很多关键时刻。&lt;/p&gt;

&lt;p&gt;对于普通的有预期的演讲，我们可以提前花时间去准备去练习，而即兴演讲大部分情况都不在我们的预料范围内，难道即兴演讲就只能靠天赋吗？并不是，它也是有方法可寻，并且可以通过练习来加强和巩固的。&lt;/p&gt;

&lt;h3 id=&quot;实际上优秀的即兴演讲它的秘密就在于准备&quot;&gt;实际上，优秀的即兴演讲，它的秘密就在于准备。&lt;/h3&gt;

&lt;h3 id=&quot;也就说你必须为看起来像是很自然的即兴发挥而做充分的准备&quot;&gt;也就说，你必须为“看起来像是很自然的即兴发挥”而做充分的准备。&lt;/h3&gt;

&lt;p&gt;（即兴演讲准备工作）&lt;/p&gt;

&lt;p&gt;我们要为此准备的东西很多，包括选择合适的时间和地点，在什么样的场合说什么样的话，会让对方感觉更自然。与此同时，在讲话前需要快速整理思路，知道自己要说的内容，围绕自己的中心思想讲话。同时自己的讲话的主题和内容要有价值，这是能够让周围的人愿意倾听且被你吸引的关键。最后要意识到我们的“麦克风”始终是开着的，要保持这种麦克风始终开着的状态，不管在办公室内还是办公室外，都要得体的沟通，语言可以激发人也可以威胁人，说符合自己身份的话。&lt;/p&gt;

&lt;p&gt;大量的练习让乔布斯可以在讲话时基本不用草稿。他在展示产品时，虽然也会小心遮住笔记不让观众看见，但他从来不会逐字逐句念出来。如果你什么都不准备就跟着感觉走，很容易让自己陷入尴尬的境地，到时候你只能胡乱说一些你不了解的东西。&lt;/p&gt;

&lt;p&gt;（即兴内容知识分类图）&lt;/p&gt;

&lt;p&gt;对于要说的主题人们总是期望你展示出科学、丰富、经验的知识内容。因此知识内容，通常分为三类：
科学知识，讲话的内容有扎实的知识背景
一般性知识，丰富的观点让你更有说服力
经验性知识，讲述个人经历让讲话更有吸引力&lt;/p&gt;

&lt;p&gt;在我们即兴讲话前，写下这些关键信息和支持性信息，将这些信息记在脑子里，这将构成你即兴演讲草稿的基础。如果所有即兴演讲都事先做好准备、构建扎实的知识基础，牢记关键信息，相信我们会体会到最棒的即兴演讲体验：“最棒的即兴演讲，是当我做足准备，熟知相关材料时，脱口而出的状况。”&lt;/p&gt;

&lt;p&gt;（即兴演讲时的心态）&lt;/p&gt;

&lt;p&gt;演讲的心态非常重要，是与听众连接的通道，也是我们保持真实自我和正念的好方法。&lt;/p&gt;

&lt;p&gt;演讲心态，保持真实、保持专注、保持尊重非常重要，同时也是保持我们保持真实领导力的好方法。&lt;/p&gt;

&lt;p&gt;我们一定要有当领导者的意愿，让自己始终处于领导位置，将每一次讲话和沟通都视为潜在的领导力时刻，为此做出自己的进行领导力即兴讲话。&lt;/p&gt;

&lt;p&gt;真实领导力，让自己专注于当下的对话，真实有勇气的分享你的想法、价值观和信念，分享自己的感受、自己的故事和自己的脆弱。&lt;/p&gt;

&lt;p&gt;成为真正的领导者需要挖掘自己内在，不断与同事、队友和朋友分享你的当下、想法、价值观、信念、感受和故事。&lt;/p&gt;

&lt;h3 id=&quot;通过保持自己的真实性激励鼓舞他人这让我们变得更加温暖同时也能让我们找到更多乐趣&quot;&gt;通过保持自己的真实性，激励鼓舞他人，这让我们变得更加温暖，同时也能让我们找到更多乐趣。&lt;/h3&gt;

&lt;h2 id=&quot;即兴演讲的框架&quot;&gt;即兴演讲的框架&lt;/h2&gt;

&lt;p&gt;很多人会问“为什么要用框架？”，这会让我们感觉是把自己禁锢在一个笼子里，看上去有些死板。当然这也是我一开始接触框架的感受，但练习一段时间后我就改变了我的想法。&lt;/p&gt;

&lt;p&gt;实际上，我们在即兴演讲中，如果没有可依的规则会感觉迷茫。特别是在练习即兴演讲时，没有规则没有方法没有可依的练习方式，很容易迷失在五花八门的“错觉”中。因此框架就起到了重要作用，它为长期技能的练习提供规则，为技能成长提供了依据。&lt;/p&gt;

&lt;h3 id=&quot;用模板去建立自己的即兴演讲框架是一种非常好又非常有效提高自己即兴演讲水平的方法&quot;&gt;用模板去建立自己的即兴演讲框架是一种非常好又非常有效提高自己即兴演讲水平的方法。&lt;/h3&gt;

&lt;p&gt;框架让我们更好的总结完善自己的即兴技巧，通过模板（也有很多人称为模型）和框架，让我们有道可循的思考自己的即兴演讲该如何改进。&lt;/p&gt;

&lt;p&gt;（即兴演讲框架图）&lt;/p&gt;

&lt;p&gt;《即兴演讲》为我们介绍了一种即兴演讲的框架：抓手、要点、结构体、呼吁行动。&lt;/p&gt;

&lt;p&gt;实际上即兴演讲有很多种框架，但都离不开上述这个结构，因此我认为从这个最通用最中心的框架出发来看即兴演讲会更好一些。&lt;/p&gt;

&lt;h3 id=&quot;注意即使有了即兴框架也并不代表我们就万事大吉了这是一个不断打磨和练习的过程通过框架来练习最终会做到将框架融会融入心中做到心中有框架口中无框架&quot;&gt;注意，即使有了即兴框架，也并不代表我们就万事大吉了，这是一个不断打磨和练习的过程。通过框架来练习，最终会做到将框架融会融入心中，做到心中有框架，口中无框架。&lt;/h3&gt;

&lt;p&gt;如果我们可以无论事先还是在讲话现场，都用这个模板去写自己的讲话草稿，通过不断的练习，我们就能让即兴效果更好。&lt;/p&gt;

&lt;p&gt;（即兴模板应用步骤与调整）&lt;/p&gt;

&lt;p&gt;即使完全不允许我们打底草稿，我们也可以借助这个模板去讲话。&lt;/p&gt;

&lt;h3 id=&quot;这里有个关键点即在每讲完每个部分后暂停下来思考下一个部分的内容然后再讲&quot;&gt;这里有个关键点，即在每讲完每个部分后暂停下来，思考下一个部分的内容，然后再讲。&lt;/h3&gt;

&lt;h3 id=&quot;在思考抓手时暂停讲完抓手内容后暂停思考一下讲话的核心要点讲完要点后暂停思考结构体的内容讲完结构体后暂停思考呼吁行动部分最后讲呼吁行动部分&quot;&gt;在思考抓手时暂停；讲完抓手内容后暂停，思考一下讲话的核心要点；讲完要点后暂停，思考结构体的内容；讲完结构体后暂停，思考呼吁行动部分；最后讲呼吁行动部分。&lt;/h3&gt;

&lt;h3 id=&quot;简而言之在讲完每一部分后都要暂停以便思考下一部分内容但你暂停时你会看起来更自信而你讲话的脚本也会更好&quot;&gt;简而言之，在讲完每一部分后都要暂停，以便思考下一部分内容。但你暂停时，你会看起来更自信，而你讲话的脚本也会更好。&lt;/h3&gt;

&lt;h3 id=&quot;注意模板和模型在实际情况中需要我们灵活的去调整例如当你发现讲话的时间已经不允许我们继续完整的讲完所有部分时要即使的调整特别是当你发现对方表现焦虑不安时你就要马上精简模板可能只说要点和呼吁但无论什么情况下都必须包含要点&quot;&gt;注意，模板和模型在实际情况中需要我们灵活的去调整，例如，当你发现讲话的时间已经不允许我们继续完整的讲完所有部分时要即使的调整，特别是当你发现对方表现焦虑不安时，你就要马上精简模板，可能只说要点和呼吁，但无论什么情况下都必须包含要点。&lt;/h3&gt;

&lt;h2 id=&quot;即兴框架要点&quot;&gt;即兴框架：要点&lt;/h2&gt;

&lt;p&gt;（即兴演讲框架-要点的关键点）&lt;/p&gt;

&lt;p&gt;坦率的说，说话没有要点就等于在浪费大家的时间。&lt;/p&gt;

&lt;p&gt;你会发现，当我们没有要点时，语音中会充满很多赘词，“你知道…”，“就是”，“那么”，“然后”，“是吧”等。&lt;/p&gt;

&lt;p&gt;究其原因时语言背后的思路不清。所以，一定要确保你的讲话有核心要点。&lt;/p&gt;

&lt;p&gt;乔布斯越成熟、自信，他就越能与周围实力强大、有想法的管理者自信地对话，而对方在和他争论时也感觉很舒适。&lt;/p&gt;

&lt;p&gt;要点的关键是三个部分：&lt;/p&gt;

&lt;p&gt;1.必须是你的观点&lt;/p&gt;

&lt;p&gt;2.要点要有吸引力&lt;/p&gt;

&lt;p&gt;3.要点必须积极正面&lt;/p&gt;

&lt;p&gt;首先，确保要点是的观点，是承载你信念的一部分，只要这样你才能有信心，并强势、明确的凸显出你的观点，并提炼中心思想，一句话简洁表达你的观点。&lt;/p&gt;

&lt;p&gt;其次，你的观点要有吸引力，这意味着你要了解什么会触动听众的内心，只有这样才能吸引听众的全部注意力，让你的即兴演讲效果发挥到极致。&lt;/p&gt;

&lt;p&gt;最后，要点必须是积极正面的，这是打动整个会场的必备前提。&lt;/p&gt;

&lt;p&gt;注意，你也可以在听众中先建立一种紧迫感，然后再转向更高层次的要点，但一定要确保最后以积极因素结尾。&lt;/p&gt;

&lt;p&gt;通过练习，每次即兴演讲都要有要点，让要点自然的成为你演讲时的第二天性。当你讲话时，胡自然地想讲要点，这在与上级对话，或汇报时尤为重要，它们希望你说话清晰、切中要害，而不浪费他们的时间。&lt;/p&gt;

&lt;h2 id=&quot;即兴框架结构体&quot;&gt;即兴框架：结构体&lt;/h2&gt;

&lt;p&gt;一个合理的结构体，可以让你的讲话举重若轻，它可以让你更清楚地传达要点。&lt;/p&gt;

&lt;p&gt;（结构体组织模式）&lt;/p&gt;

&lt;p&gt;在讲具体内容是，最好用结构体的组织方式去讲话，这样会让讲话更有条理，清晰的表达我们的观点，支撑我们提出的要点。&lt;/p&gt;

&lt;p&gt;结构体组织模式：
1.原因模式，罗列各种原因和理由来支撑我们提出的要点。
2.方法模式，围绕提出的要点，我们可以罗列各种方法来支撑它。
3.情况模式，通过描述当前的状况和对应的实施措施来支撑要点。
4.时间模式，通过时间顺序来描述支撑要点的关键点。&lt;/p&gt;

&lt;p&gt;注意，我们在说完要点后一定要暂停，花一点时间思考后，再选择恰当的结构体模式。&lt;/p&gt;

&lt;p&gt;学习以上四种组织模式，构建讲话核心要点并加上标志词，如果你能做到这些，那么你的即兴演讲将非常有说服力。&lt;/p&gt;

&lt;h2 id=&quot;即兴框架抓手&quot;&gt;即兴框架：抓手&lt;/h2&gt;

&lt;p&gt;我们必须思考如何讲话才能在争夺注意力中胜出，因为“获得整个会场”的注意力是很难的，甚至获得一个人的注意力也很难，如今社会有太多信息干扰我们的注意力，包括智能手机、电子邮件、主流话题、八卦信息等，所以我们更应该仔细思考这个部分。&lt;/p&gt;

&lt;p&gt;也就是说只有抓住大家的注意力，才能让我们的演讲放到最大的效果。&lt;/p&gt;

&lt;p&gt;(图：抓手关键点)&lt;/p&gt;

&lt;h3 id=&quot;把抓手部分看作是一种口头的握手会更好它让你与听众建立联结使听众想要跟随你一旦与听众联结你就可以讲述要点部分而你也将获得听众的注意力并发挥领导力作用&quot;&gt;把抓手部分看作是一种“口头的握手”会更好，它让你与听众建立联结，使听众想要跟随你。一旦与听众联结，你就可以讲述要点部分，而你也将获得听众的注意力并发挥领导力作用。&lt;/h3&gt;

&lt;p&gt;抓手的关键点有三个：
1.抓住听众注意力
2.与听众建立联结
3.避免偏离主题&lt;/p&gt;

&lt;p&gt;可以通过，直呼名称、说关于他们的事情、讲他们曾经的观点、提出与他们的某次对话、询问他们的情况等方式来抓住听众的注意力。&lt;/p&gt;

&lt;h3 id=&quot;总之与听众有关的事情才能将听众的注意力转移到你这里&quot;&gt;总之，与听众有关的事情，才能将听众的注意力转移到你这里。&lt;/h3&gt;

&lt;p&gt;同时，为了能更好的与听众链接，我们需要讲听众感兴趣的事，找到与他们的共同点和共同利益，建立积极、正面、有建设性的对话，来建立与听众的链接。&lt;/p&gt;

&lt;h3 id=&quot;总之通过找对方的兴趣点和彼此共同利益点才能触及听众的内心通过触及内心来建立更好的链接&quot;&gt;总之，通过找对方的兴趣点和彼此共同利益点，才能触及听众的内心，通过触及内心来建立更好的链接。&lt;/h3&gt;

&lt;p&gt;最后对话中避免抵触和反抗，或者让对话时间过长，以及说些无关紧要的话题。&lt;/p&gt;

&lt;h2 id=&quot;即兴框架以呼吁行动结束&quot;&gt;即兴框架：以呼吁行动结束&lt;/h2&gt;

&lt;p&gt;呼吁行动通常要求听众采取行动，一旦后续行动发生，你将实现你的领导力。&lt;/p&gt;

&lt;p&gt;（图：呼吁行动分解）&lt;/p&gt;

&lt;p&gt;即兴演讲的收尾特别重要，我们人能记忆的东西很少，对于一件不是特别重要的事情来说，我们只会记住开头和结尾。&lt;/p&gt;

&lt;p&gt;如果开头和结尾是非常愉悦的，即使中间过程比较枯燥乏味，在人们的心中都是一场还不错的演讲和对话。&lt;/p&gt;

&lt;p&gt;这里罗列下如何收尾的方法：&lt;/p&gt;

&lt;p&gt;1.将话语权交给对方
2.要求做出最终决定
3.介绍具体步骤
4.鼓励他人
5.传达最后通牒&lt;/p&gt;

&lt;p&gt;根据现场实际和即兴的内容来选择收尾会更好一些，特别是在结构体讲完后，应该给自己暂停一下，流一点时间来思考该用什么方式收尾。&lt;/p&gt;

&lt;h2 id=&quot;了解听众&quot;&gt;了解听众&lt;/h2&gt;

&lt;p&gt;当我们了解听众时会让即兴演讲更成功。&lt;/p&gt;

&lt;p&gt;（图：如何了解听众）&lt;/p&gt;

&lt;p&gt;听众分析包括：&lt;/p&gt;

&lt;p&gt;1.事前分析：&lt;/p&gt;

&lt;p&gt;提前了解听众会让你意识到可能存在与你想法完全不同的人，通过事先分析听众可以知道我们会遇到哪些问题，该如何应对。&lt;/p&gt;

&lt;p&gt;听众们关心什么事，把自己的观点建立在他们的想法上，这样才能有一个更稳固的协作式讨论。&lt;/p&gt;

&lt;p&gt;对方背景（组织）文化是如何，文化冲突有哪些，建立在尊重互利的基础上，会让即兴更加舒适。&lt;/p&gt;

&lt;p&gt;2.演讲中调整：&lt;/p&gt;

&lt;p&gt;现在观众的注意力如何&lt;/p&gt;

&lt;p&gt;哪些观点有吸引力可以把听众的注意力拉回来&lt;/p&gt;

&lt;p&gt;哪些听众头脑反应比较迅速是关键决策者，可以去征求他的意见，让他主动发言。&lt;/p&gt;

&lt;h3 id=&quot;最后在讲话结束后要对自己的即兴演讲做一个复盘这是我们提高演讲技能有效快速的方法&quot;&gt;最后，在讲话结束后，要对自己的即兴演讲做一个复盘，这是我们提高演讲技能有效快速的方法。&lt;/h3&gt;

&lt;h2 id=&quot;关于生活中的即兴谈话&quot;&gt;关于生活中的即兴谈话&lt;/h2&gt;

&lt;p&gt;在生活中交谈时尽量找到自己谈话的目标，否则将会成为一场空前浪费时间的闲聊。&lt;/p&gt;

&lt;p&gt;你可以这样想，当人们转身离开时，你想让他们记住关于你的什么信息？&lt;/p&gt;

&lt;p&gt;只要带着这个问题去思考，你将会让每次即兴谈话都畅快淋漓。&lt;/p&gt;

&lt;h3 id=&quot;一位副总裁这样说我发现闲谈非常耗费精力除非是有目的的聊天如果毫无准备就交谈我就会觉得自己迫不及待地想结束谈话但是如果事先准备了谈话就会变得很顺利&quot;&gt;一位副总裁这样说：“我发现闲谈非常耗费精力，除非是有目的的聊天。如果毫无准备就交谈，我就会觉得自己迫不及待地想结束谈话。但是如果事先准备了，谈话就会变得很顺利。”&lt;/h3&gt;

&lt;p&gt;优秀的管理者会问自己，“我想让他们从这次谈话中记住什么？”，或者“人们为什么和我做生意”。&lt;/p&gt;

&lt;p&gt;让我们一起为每一场即兴谈话成为更有效的沟通。&lt;/p&gt;

</description>
               <pubDate>Thu, 06 Jan 2022 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2022/01/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B052</link>
               <guid isPermaLink="true">http://www.luzexi.com/2022/01/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B052</guid>
            </item>
        
            <item>
               <title>给女儿的信(二十) 观察自己的情绪</title>
               <description>&lt;h2 id=&quot;要点&quot;&gt;要点：&lt;/h2&gt;

&lt;p&gt;用跟自己说说话和闭上眼睛数数的方式，观察自己的情绪，同时化解了自己的情绪&lt;/p&gt;

&lt;h2 id=&quot;结构&quot;&gt;结构：&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;遇到困难的时候心里很难受&lt;/li&gt;
  &lt;li&gt;当遇到枯燥乏味的工作时心里很苦闷&lt;/li&gt;
  &lt;li&gt;爸爸想解决这些困难，但就是提不起劲&lt;/li&gt;
  &lt;li&gt;于是爸爸闭上眼睛观察自己&lt;/li&gt;
  &lt;li&gt;爸爸观察自己的情绪是怎样的&lt;/li&gt;
  &lt;li&gt;是难受还是紧张&lt;/li&gt;
  &lt;li&gt;难受是怎么个难受法，是脑袋嗡嗡的吗，还是整个人紧绷的&lt;/li&gt;
  &lt;li&gt;紧张是怎样的表现，是肌肉很痛吗，还是腿和胳膊在抖动&lt;/li&gt;
  &lt;li&gt;细致的观察自己的在难受和紧张时的身体状况&lt;/li&gt;
  &lt;li&gt;慢慢发现自己的难受和紧张被化解了&lt;/li&gt;
  &lt;li&gt;当我发现，原来紧张和难受时，脑袋时这样的感觉，肌肉时这样在抖动&lt;/li&gt;
  &lt;li&gt;难受和紧张就慢慢消失了，神奇吗&lt;/li&gt;
  &lt;li&gt;原来难受和紧张只是我们想当然的感受，其根本原因是因为肌肉在收缩&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;内容&quot;&gt;内容：&lt;/h2&gt;

&lt;p&gt;Hello 秀恩，Hello Anne。爸爸好想你们爸爸喜欢你们啊，爱你们哟。&lt;/p&gt;

&lt;p&gt;爸爸在深圳又过了2周多的时间了，这里的天气比以往更冷一些。&lt;/p&gt;

&lt;p&gt;爸爸给你们讲一讲爸爸最近的状况好不好？&lt;/p&gt;

&lt;p&gt;最近爸爸遇到一些困难，工作上的和学习上的困难都有。爸爸心里感觉到很难受。&lt;/p&gt;

&lt;p&gt;爸爸发现每次当遇到枯燥的乏味的工作时，心里就很郁闷。除了工作呢，有时候自己想要学习，但是又提不起劲的时候，心里也很难受。&lt;/p&gt;

&lt;p&gt;有时候爸爸觉得自己心里很浮躁，心情很急躁，就是看不进书，写不进东西，心里安静不下来。所以爸爸想着该怎么办呢？怎么解决这个心里难受情绪混乱的状态呢？&lt;/p&gt;

&lt;p&gt;爸爸想了两个办法，第1个办法是跟自己说说话，爸爸每天抽15分钟到20分钟的时间来跟自己说说话，每天跟自己说说今天我遇到了什么困难，我的感受怎样。然后跟自己说说，我应该怎么去解决这个困难，跟自己说说我应该怎样去调整自己的情绪。&lt;/p&gt;

&lt;p&gt;你知道吗？爸爸跟自己说着说着，自己的情绪就真的慢慢好起来了，不那么难受，也不那么急躁了，也不紧张了。所以爸爸觉得跟自己说说话，这个办法非常棒。&lt;/p&gt;

&lt;p&gt;跟自己说说话，不但练习了口头的表达能力和沟通能力，并且还化解了自己的情绪，爸爸觉得这个方法非常非常棒。所以呢，爸爸每天都在坚持跟自己说说话，像跟秀恩聊天一样跟自己说说话。&lt;/p&gt;

&lt;p&gt;第2个办法是。当爸爸感觉到紧张、难受、急躁的时候，就坐下来闭上眼睛去数数，数数的时候，我会观察自己。&lt;/p&gt;

&lt;p&gt;观察自己的哪里难受，哪里紧张，是哪块肌肉很难受，是紧张还是疼痛？细致的观察自己。&lt;/p&gt;

&lt;p&gt;爸爸就这样去观察自己的身体，在这种紧张和难受的状态下，肌肉是怎么收缩和抖动的？&lt;/p&gt;

&lt;p&gt;慢慢地观察着观察着，爸爸发现自己的情绪开始化解了，爸爸发现自己没有这么难受和紧张了，原来只要爸爸闭上眼睛专注地观察他们，观察肌肉的疼痛和收缩，观察脑袋的紧绷，观察整个人的状态的时候，难受和紧张就慢慢的消失了。这种感觉太棒了。就感觉自己重新平静了下来，无论是生气还是难受，情绪都被化解了。&lt;/p&gt;

&lt;p&gt;爸发现用这两种调节情绪的办法非常棒。&lt;/p&gt;

&lt;p&gt;爸爸现在常用这种方式去化解自己的情绪，那些痛苦啊、难受啊、紧张啊、焦虑啊、急躁啊，都可以通过这样的方式去把它化解。&lt;/p&gt;

&lt;p&gt;太棒了，爸爸每天都要坚持跟自己说说，观察自己的状态和身体的变化，化解掉自己的情绪。&lt;/p&gt;

&lt;p&gt;今天的写信就到这里喽，宝宝们喜欢你们，爸爸爱你们哟。&lt;/p&gt;

</description>
               <pubDate>Mon, 03 Jan 2022 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2022/01/03/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A120</link>
               <guid isPermaLink="true">http://www.luzexi.com/2022/01/03/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A120</guid>
            </item>
        
            <item>
               <title>新书发售《Unity3D高级编程-主程手记》</title>
               <description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247485108&amp;amp;idx=1&amp;amp;sn=b949ce0d6f031a2108586940aa0eadfa&amp;amp;chksm=fc2263b3cb55eaa5b5c3fe41399d47d7f1e0f66ce5b130c0e31648be035e9535f5c6c3d5ed39&amp;amp;token=330432434&amp;amp;lang=zh_CN#rd&quot;&gt;已发布微信公众号&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/fengmian.jpg&quot; alt=&quot;封面&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;新书发售了感恩朋友们的厚爱&quot;&gt;新书发售了，感恩朋友们的厚爱。&lt;/h3&gt;

&lt;p&gt;这么多年读书与写作给我最大的体会是，&lt;/p&gt;

&lt;p&gt;静下心来保持专注，是最有效率的。&lt;/p&gt;

&lt;p&gt;希望自己继续保持这份专注，并用最真诚的方式对待朋友们。&lt;/p&gt;

&lt;h3 id=&quot;本书共10章每章都是一个独立的知识领域读者可以按照章节顺序阅读本书也可以根据喜好挑选自己感兴趣的章节学习&quot;&gt;本书共10章，每章都是一个独立的知识领域，读者可以按照章节顺序阅读本书，也可以根据喜好挑选自己感兴趣的章节学习。&lt;/h3&gt;

&lt;p&gt;第1章讲了架构的意义、架构的原理以及如何实现架构。&lt;/p&gt;

&lt;p&gt;第2章对C#技术的基础知识做了讲解。&lt;/p&gt;

&lt;p&gt;第3章针对客户端中的表格数据、程序的协作与应用进行讲解。&lt;/p&gt;

&lt;p&gt;第4章讲解了用户界面（UI）的工作原理与优化方法。&lt;/p&gt;

&lt;p&gt;第5章针对3D模型的原理、动画的原理以及两者的优化做了详细的讲解。&lt;/p&gt;

&lt;p&gt;第6章讲解的是网络层的业务架构与底层原理。&lt;/p&gt;

&lt;p&gt;第7章针对各类AI做了详细的讲解。&lt;/p&gt;

&lt;p&gt;第8章主要讲解场景构建与优化、地图构建以及寻路算法优化的相关知识。&lt;/p&gt;

&lt;p&gt;第9章讲解了图形数学、图形学常用算法、渲染管线的相关知识。&lt;/p&gt;

&lt;p&gt;第10章针对客户端各类渲染技术的渲染原理做了详细的解剖。&lt;/p&gt;

&lt;h3 id=&quot;此书非常适合那些上进积极热爱技术的伙伴们&quot;&gt;此书非常适合那些上进、积极、热爱技术的伙伴们。&lt;/h3&gt;

&lt;p&gt;如果你想更上一层楼，想了解主程需要做什么，主程需要哪方面的技术深度，就来看看这本书。&lt;/p&gt;

&lt;p&gt;整本书字里行间都透露着对游戏开发的深度理解，以及对主程工作的感悟。&lt;/p&gt;

&lt;h3 id=&quot;20211228预售开始了后面的日子里会陆续上架各大平台包括新华书店机械工业出版社平台以及当当网&quot;&gt;2021.12.28，预售开始了，后面的日子里会陆续上架各大平台，包括新华书店、机械工业出版社平台、以及当当网。&lt;/h3&gt;

&lt;h2 id=&quot;感恩遇见&quot;&gt;感恩遇见&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/shudian1.jpg&quot; alt=&quot;淘宝预售&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/shudian3.jpg&quot; alt=&quot;京东预售&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/book/shudian2.jpg&quot; alt=&quot;淘宝搜索&quot; /&gt;&lt;/p&gt;

</description>
               <pubDate>Wed, 29 Dec 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/12/29/%E6%96%B0%E4%B9%A6%E5%8F%91%E5%94%AE</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/12/29/%E6%96%B0%E4%B9%A6%E5%8F%91%E5%94%AE</guid>
            </item>
        
            <item>
               <title>读书笔记(五十一) 《游戏引擎架构》#4 低阶渲染器（4）</title>
               <description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247485096&amp;amp;idx=1&amp;amp;sn=c027b6af4677515ba1e5950aac8ba68d&amp;amp;chksm=fc2263afcb55eab9204898b39fb77ee04f5767ac450507b6192a5c6d5612a45b6d29b1bcee16&amp;amp;token=853743270&amp;amp;lang=zh_CN#rd&quot;&gt;已发布在微信公众号上，点击跳转&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;背景&quot;&gt;背景：&lt;/h1&gt;

&lt;p&gt;作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》后对引擎架构的理解又深入了些。&lt;/p&gt;

&lt;p&gt;近段时间有对引擎剖析的想法，正好借这书本对游戏引擎架构做一个完整分析。&lt;/p&gt;

&lt;p&gt;此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。&lt;/p&gt;

&lt;p&gt;借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块，最后通过实践简单引擎开发来完成对引擎知识的掌握。&lt;/p&gt;

&lt;p&gt;游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。&lt;/p&gt;

&lt;p&gt;同时《游戏引擎架构》中部分知识太过陈旧的部分，会重新深挖后总结出自己的观点。&lt;/p&gt;

&lt;h1 id=&quot;概述&quot;&gt;概述：&lt;/h1&gt;

&lt;p&gt;本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：&lt;/p&gt;

&lt;p&gt;1.时间库
2.自定义容器库
3.字符串散列库
4.内存管理框架
5.RTTI与反射模块
6.图形计算库
7.资产管理模块
8.低阶渲染器
9.剔除与合批模块
10.动画模块
11.物理模块
12.UI底层框架
13.性能剖析器的核心部分
14.脚本系统
15.视觉效果模块&lt;/p&gt;

&lt;p&gt;本篇内容为列表中的第8个部分的第1节。&lt;/p&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文：&lt;/h1&gt;

&lt;p&gt;简单回顾下前文&lt;/p&gt;

&lt;p&gt;前文我们聊了下显卡在计算机硬件主板中的位置与结构，知道了CPU、GPU的通信介质，并简单介绍了手机上的主板结构。本篇开头对上一篇做一些内容补充，PC和手机的不同硬件组织，以及CPU与其他芯片的通信过程。&lt;/p&gt;

&lt;p&gt;下面我们开始这篇内容&lt;/p&gt;

&lt;p&gt;本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。&lt;/p&gt;

&lt;p&gt;目录：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;主板结构中的显卡&lt;/li&gt;
  &lt;li&gt;GPU功能发展史&lt;/li&gt;
  &lt;li&gt;GPU与CPU的差异&lt;/li&gt;
  &lt;li&gt;GPU硬件特点&lt;/li&gt;
  &lt;li&gt;图形驱动程序架构&lt;/li&gt;
  &lt;li&gt;引擎低阶渲染架构&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;内容结构：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CPU硬件结构&lt;/li&gt;
  &lt;li&gt;GPU硬件结构&lt;/li&gt;
  &lt;li&gt;GPU手机管线与PC管线的差异&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接着上篇的内容。前面说了CPU、GPU的硬件结构，CPU的构造和GPU的构造，下面我们来聊聊GPU是如何工作的，以及GPU的管线在手机端和PC端的差异。&lt;/p&gt;

&lt;h2 id=&quot;nvidia基于fermi管线的架构&quot;&gt;NVIDIA基于Fermi管线的架构&lt;/h2&gt;

&lt;p&gt;关于GPU的逻辑管线，这篇Nvidia这篇文章《Life of a triangle - NVIDIA’s logical pipeline》说的很清楚。&lt;/p&gt;

&lt;p&gt;（NVIDIA的整体架构图）&lt;/p&gt;

&lt;p&gt;下面我以此为标准进行翻译并重新剖析。&lt;/p&gt;

&lt;p&gt;为了简单起见，省略了几个细节，假设 drawcall 引用了一些已经充满数据并存在于 GPU DRAM 中的索引和顶点缓冲区，并且仅使用顶点和像素着色器（GL：片段着色器）。&lt;/p&gt;

&lt;p&gt;（从图形API调用到图元处理过程图）&lt;/p&gt;

&lt;p&gt;1.引擎或业务程序调用图形 API（DX 或 GL）中的绘图函数，接着驱动程序会被调用，驱动程序会进行一些验证以检查参数是否“合法”，再将指令写入到GPU可读写的缓冲队列中。在这个地方 CPU 方面可能会出现很多瓶颈，这也是为什么程序员要好好使用 API 以利用当今 GPU 的强大功能的技术很重要的原因。&lt;/p&gt;

&lt;p&gt;（绘制接口调用图）&lt;/p&gt;

&lt;p&gt;2.经过一段时间渲染，画面“刷新”被调用，驱动程序在缓冲区中已经缓冲了足够多的工作命令，接着将其发送给 GPU 进行处理（操作系统会参与）。最后 GPU 的主机接口接收命令并交给GPU前端的处理。&lt;/p&gt;

&lt;p&gt;（绘制队列与刷新图）&lt;/p&gt;

&lt;p&gt;3.接着图元分配器（Primitive Distributor）开始分配工作。为了批量处理索引和三角形，将数据发送给多个图形处理集群（GPC）并行处理。&lt;/p&gt;

&lt;p&gt;（SM整体结构图）&lt;/p&gt;

&lt;p&gt;4.在 GPC 中，每个 SM 的 Poly Morph 引擎负责从三角形索引中获取顶点数据(Vertex Fetch)。&lt;/p&gt;

&lt;p&gt;5.在获取数据后，SM中每32个线程为一捆线程束（Warp），它们被调度去处理这些顶点工作。 线程束（Warp）是典型的单指令多线程（SIMT，SIMD单指令多数据的升级）的实现，也就是32个线程同时执行的指令是一模一样的，只是线程数据不一样，这样的好处就是一个Warp只需要一套逻辑对指令进行解码和执行就可以了，芯片可以做的更小更快。&lt;/p&gt;

&lt;p&gt;（线程束与线程束调度器图）&lt;/p&gt;

&lt;p&gt;6.SM的线程束（Warp）调度器会按照顺序分发指令给整个线程束（Warp），单个线程束（Warp）中的线程会锁步(lock-step)执行各自的指令。线程束（Warp）会使用SIMT的方式来做分支预测，每个线程执行的分支会不同，当线程遇到到错误判断的执行情况会被遮蔽(be masked out)。&lt;/p&gt;

&lt;p&gt;（单个GPU线程与存储设备的关系图）&lt;/p&gt;

&lt;p&gt;被遮蔽的原因是SIMT执行中错误预测，例如当前的指令是if(true)的分支，但是当前线程的数据的条件是false，或者循环的次数不一样（比如for循环次数n不是常量，或被break提前终止了但是别的还在走），因此在Shader中的分支会显著增加时间消耗，在一个线程束（Warp）中的分支除非32个线程都走到同一个里面，否则相当于所有的分支都走了一遍，线程不能独立执行指令而是以线程束（Warp）为单位，而这些线程束中的线程之间才是相互独立的。&lt;/p&gt;

&lt;p&gt;（SIMT线程束做分支预测图）&lt;/p&gt;

&lt;p&gt;7、线程束（Warp）中的指令可以被一次完成，也可能经过多次调度，例如通常SM中的LD/ST(加载存取)单元数量明显少于基础数学操作单元。&lt;/p&gt;

&lt;p&gt;8、由于某些指令比其他指令需要更长的时间才能完成，特别是内存加载，线程束（Warp）调度器可能会简单地切换到另一个没有内存等待的线程束（Warp），这是GPU如何克服内存读取延迟的关键，其操作为简单地切换活动线程组。为了使这种切换更快，调度器管理的所有线程束（Warp）在寄存器列阵（Register File）中都有自己的寄存器。这里就会有个矛盾产生，Shader需要的寄存器越多，给线程束（Warp）留下的空间就越少，于是就会导致能用的线程束（Warp）就越少。此时如果碰到指令在内存获取数据等待就只会等待，而没有其他可以运行的线程束（Warp）可以切换。&lt;/p&gt;

&lt;p&gt;（线程与寄存器列阵关系图）&lt;/p&gt;

&lt;p&gt;（线程束调度器调度线程图）&lt;/p&gt;

&lt;p&gt;9、一旦线程束（Warp）完成了顶点着色器（vertex-shader）的所有指令，运算结果会被Viewport Transform模块处理，三角形会被裁剪然后准备光栅化，此时GPU会使用L1和L2缓存来进行顶点着色起（vertex-shader）和片元着色起（pixel-shader）的数据通信。&lt;/p&gt;

&lt;p&gt;（管线中节点、数据、存储器的关系图）&lt;/p&gt;

&lt;p&gt;10、接下来这些三角形将被分割，通过 Work Distribution Crossbar 将三角形再分配给多个GPC，三角形的范围决定着它将被分配到哪个光栅引擎(raster engines)，每个光栅引擎（raster engines）覆盖了多个屏幕上的图块（tile），这等于把三角形的渲染分配到多个图块（tile）上面。也就是说在像素阶段前就把三角形划分成了方块格式范围，三角形处理分成许多较小的工作。&lt;/p&gt;

&lt;p&gt;（三角形被拆分成多个块派发到多个光栅引擎图）&lt;/p&gt;

&lt;p&gt;（图块拆分任务派发图）&lt;/p&gt;

&lt;p&gt;11、SM上的属性安装器（Attribute Setup）保证了从顶点着色器（vertex-shader）生成的数据，经过插值后，在片元着色器（pixel-shade）上是可读的。&lt;/p&gt;

&lt;p&gt;12、GPC上的光栅引擎(raster engines)处理它接收到的三角形，并为它负责的那些部分生成像素信息（同时会处理裁剪Clipping、背面剔除和Early-Z剔除）。&lt;/p&gt;

&lt;p&gt;13、再次做批量处理，32个像素线程被分成一组（或者说8个2x2的像素块），这是在像素着色器上面的最小工作单元（2x2 四边形允许我们计算诸如纹理 mip 贴图过滤之类的导数–四边形内纹理坐标的大变化会导致更高的 mip）。在这个像素线程内，如果没有被任何三角形覆盖就会被剔除。SM中的线程束（Warp）调度器会管理像素着色器的任务。&lt;/p&gt;

&lt;p&gt;（2x2像素组传入到线程束处理像素着色器的图）&lt;/p&gt;

&lt;p&gt;14、接下来是同样的线程束调度策略，和顶点着色器（vertex-shader）中的逻辑步骤完全一样，但是变成了在像素着色器线程中执行。 由于不耗费任何性能从2x2四边形中获取一个像素，这使得锁步执行非常便利，于是所有的线程可以保证指令可以在同一点同步执行。&lt;/p&gt;

&lt;p&gt;（线程束锁步执行图）&lt;/p&gt;

&lt;p&gt;15、最后一步，现在像素着色器已经完成了颜色的计算和深度值的计算。在这个点上，我们必须考虑三角形的调用API顺序，然后才将数据移交给ROP(render output unit，渲染输出单元)，一个ROP内部有很多ROP单元，在ROP单元中处理深度测试和帧缓冲（framebuffer）的混合等，深度和颜色的设置必须是原子操作，否则两个不同的三角形在同一个像素点就会有冲突和错误。NVIDIA 通常应用内存压缩，以减少内存带宽要求，从而增加“有效”带宽。&lt;/p&gt;

&lt;p&gt;（像素着色器后的像素处理过程图）&lt;/p&gt;

&lt;p&gt;以上这些信息有助于我们理解 GPU 中的一些工作和数据流，还可以帮助我们理解CPU与GPU之间的交互。&lt;/p&gt;

&lt;h2 id=&quot;总结cpu和gpu的交互&quot;&gt;总结CPU和GPU的交互&lt;/h2&gt;

&lt;p&gt;GPU是设备，设备都有驱动，CPU可以直接执行二进制指令集，对于GPU设备，图形接口有opengl，directx标准及库封装，计算有cuda和opencl封装。程序代码调用这些图形或计算库，这些库调用驱动，驱动再来对接操作GPU设备，CPU与GPU直接的通信是遵循总线和内存的规则。&lt;/p&gt;

&lt;p&gt;原则上CPU、内存外的设备都属于IO设备，通过总线连上来，它们必须遵守IO总线规范，如显卡就走pcie总线，这里还有ionmu，统一内存等，来共享资源，缩短路径，提升效率等。&lt;/p&gt;

&lt;p&gt;这里专门说下驱动，计算机有专门的程序接口指定一个计算任务到GPU上，这个接口程序就是驱动程序。CPU给GPU下发任务时通过调用驱动程序，不同GPU厂商实现自己的驱动，并且提供了各种的编程接口。图形计算上实现了OpenGL标准接口规范的图形库，它会调用各厂商的驱动，用户可以通过GLSL编写计算任务进行通用计算。后来的CUDA编程模型专门推出用于编写通用计算任务的接口，于是OpenGL就专门用于图形渲染了。而CUDA则是通过kenel函数来编写计算任务，通过cudaLaunch接口来下发任务。&lt;/p&gt;

&lt;p&gt;（从图形库到驱动到GPU指令队列的图）&lt;/p&gt;

&lt;p&gt;从硬件角度看：&lt;/p&gt;

&lt;p&gt;（从硬件角度看指令和数据处理流程图）&lt;/p&gt;

&lt;p&gt;1.GPU设备的配置空间物理地址映射到虚拟地址，可以被程序直接访问；同时建立任务队列缓冲，声明中断等等；&lt;/p&gt;

&lt;p&gt;2.CPU在进程内准备数据和缓冲，基于虚拟地址VA、VM将其转换为显存的物理地址IPA。驱动程序获取任务，再将任务信息填充至任务队列内。&lt;/p&gt;

&lt;p&gt;3.根据虚拟内存绑定的地址信息，将任务队列的指针更新至GPU设备侧，这个端口称为doorbell寄存器；&lt;/p&gt;

&lt;p&gt;4.设备接收到doorbell操作，会触发中断，再读取主存中的任务队列，包括队列内的信息和其指向的任务数据，GPU设备侧读取该数据。&lt;/p&gt;

&lt;p&gt;5.完成后，再将数据发送给CPU侧。一般来说，GPU设备侧发送至CPU的读写请求使用的是虚拟地址，由CPU的IOMMU或SMMU转换为物理地址。&lt;/p&gt;

&lt;h2 id=&quot;gpu手机管线与pc管线的差异&quot;&gt;GPU手机管线与PC管线的差异&lt;/h2&gt;

&lt;p&gt;为什么要了解手机与PC管线的差异？
PC的能耗和发热比手机端可以更大一些，因此PC与手机在硬件架构上有天然的不同，进而使得它们在GPU管线上也有很大的差异，这使得我们在优化手机端时必须了解这种差异再做针对性的做优化。&lt;/p&gt;

&lt;h2 id=&quot;tbdrtile-base-deffered-rendering是现代移动端gpu的设计架构它同传统pc上irimmediate-rendering架构的gpu在硬件设计上有很大的差别&quot;&gt;TBDR(Tile-Base-Deffered-Rendering)是现代移动端GPU的设计架构，它同传统PC上IR（Immediate-Rendering）架构的GPU在硬件设计上有很大的差别。&lt;/h2&gt;

&lt;p&gt;为什么呢？因为功耗是Mobile设备设计的第一考虑因素，而带宽是功耗的第一杀手。&lt;/p&gt;

&lt;p&gt;我们来看PC的GPU管线，即传统的IR（Immediate-Rendering）模式：&lt;/p&gt;

&lt;p&gt;（IMR管线图：源自网络）&lt;/p&gt;

&lt;p&gt;IMR（Immediate Mode Rendering）模式中，GPU直接在主存或显存上读写深度缓存（Depth Buffer）和帧缓存（Frame Buffer），这导致带宽消耗很大，如果在手机上耗电和发热都无法承受。&lt;/p&gt;

&lt;p&gt;手机使用统一内存架构，CPU和GPU都通过总线来访问主存。GPU需要获取三角形数据（Geometry Data）、贴图数据（Texture Data）以及帧缓存（Frame Buffer），它们都在主存中。如果GPU直接从主存频繁地访问这些数据，就会导致带宽消耗大，成为性能瓶颈。&lt;/p&gt;

&lt;h2 id=&quot;tbrtile-based-rendering管线&quot;&gt;TBR（Tile-Based-Rendering）管线&lt;/h2&gt;

&lt;p&gt;基于以上所述原因，手机GPU使用自己的缓存区（SRAM），例如On-Chip深度缓存（On-Chip Depth Buffer）和On-Chip颜色缓存（On-Chip Color Buffer），它们与存取主存相比，速度更快，功耗更低。但它们的存储空间很小。（SRAM不需要充电来保持存储记忆，因此SRAM的读写基本不耗电，缺点是价格昂贵）&lt;/p&gt;

&lt;p&gt;如果手机直接读写帧缓存（Frame Buffer）就相当于让一辆火车在你家和公司之间来回奔跑，非常耗电。于是手机端想要拆分绘制内容，每次只绘制一小部分，再把所有绘制完成的部分拼起来。&lt;/p&gt;

&lt;p&gt;把帧缓存（Frame Buffer）拆分成很多个小块，使得每个小块可以被GPU附近的SRAM容纳，块的多少取决于GPU硬件的SRAM大小。这样GPU就可以分批的一块块的在SRAM上读写帧缓存（Frame Buffer），一整块都读写完毕后，再整体转移回主存上。&lt;/p&gt;

&lt;p&gt;这种模式就叫做TBR（Tile-Based-Rendering），整体管线如下图：&lt;/p&gt;

&lt;p&gt;（TBR管线图：源自网络）&lt;/p&gt;

&lt;p&gt;屏幕分块后的大小一般为16x16或32x32像素 ，在几何阶段之后再执行分块(Tiling)，接着将各个块（Tile）逐个光栅化，最后写入帧缓存中（Frame Buffer）中 。&lt;/p&gt;

&lt;p&gt;这里有一些细节要注意，TBR在接受每个指令（CommandBuffer）时并不立即绘制，而是先对这些数据做顶点处理，把顶点处理的结果暂时保存在主存上，等到非得刷新整个帧缓存时，才真正的用这批数据做光栅化。&lt;/p&gt;

&lt;p&gt;因此，TBR的管线实际可以认为被切分成两部分，前半部分为顶点数据部分，后半部分为片元数据部分：&lt;/p&gt;

&lt;p&gt;（TBR把管线切分为光栅化前和光栅化后）&lt;/p&gt;

&lt;h3 id=&quot;顶点数据先被处理并存储在frame-data中等到必须刷新时例如帧缓存置换调用glflush调用glfinish调用glreadpixels读取帧缓存像素时调用glcopytexiamge拷贝贴图时调用glbitframebuffer获取帧缓存时调用queryingocclusion解绑帧缓存时等等才被集中的拿去处理光栅化&quot;&gt;顶点数据先被处理并存储在Frame Data中，等到必须刷新时（例如帧缓存置换，调用glflush，调用glfinish，调用glreadpixels读取帧缓存像素时，调用glcopytexiamge拷贝贴图时，调用glbitframebuffer获取帧缓存时，调用queryingocclusion，解绑帧缓存时等等）才被集中的拿去处理光栅化。&lt;/h3&gt;

&lt;h3 id=&quot;那么为什么pc不使用tbr呢&quot;&gt;那么为什么PC不使用TBR呢？&lt;/h3&gt;

&lt;p&gt;实际上直接对主存或显存（这里也有多级缓存）进行整块数据的读写速度是最快的，而TBR需要一块块的绘制，然后再回拷给主存。可以简单的认为TBR牺牲了执行效率，换来了相对更难解决的带宽功耗。如果哪一天手机上解决了带宽的功耗问题，或者说SRAM足够大了，可能就没有TBR了。&lt;/p&gt;

&lt;h2 id=&quot;tbdrtile-based-deferred-rendering管线&quot;&gt;TBDR（Tile-based deferred rendering）管线&lt;/h2&gt;

&lt;p&gt;TBR会把顶点数据处理完毕后存储在Frame Data中，那么就会有很多厂商针对Frame Data做优化。&lt;/p&gt;

&lt;p&gt;TBDR整体的管线图如下：&lt;/p&gt;

&lt;p&gt;（TBDR管线图：源自网络）&lt;/p&gt;

&lt;p&gt;我们看到相比TBR，TBDR在光栅化（Raster）后多了一个HSR（Hidden Surface Removal）处理，这部分处理主要剔除无需绘制的元素，减少重绘（Overdraw）数量（高通通过优化划分块（Tile）之后执行顶点着色器（Vertex Shader）之前的节点来达到此目的，称为LRZ）。例如提前对不透明像素做深度测试并剔除，剔除被模板裁剪掉的像素等等，总之它们不会进入到像素着色器阶段（Pixel Shader）。&lt;/p&gt;

&lt;p&gt;因此在TBDR上，不透明物体的排序没有太大意义，Early-Z这种策略也不存在IOS上。这些GPU硬件巧妙的利用TBR的Frame Data队列实现了一种延迟渲染，尽可能只渲染那些会最终影响帧缓存（Frame Buffer）的像素。&lt;/p&gt;

&lt;h3 id=&quot;tbdr和软件上的延迟渲染相比有什么区别呢&quot;&gt;TBDR和软件上的延迟渲染相比有什么区别呢？&lt;/h3&gt;

&lt;p&gt;软件层面的延迟渲染与TBDR不同。软件层面的延迟渲染是针对一个Drawcall，对于从后到前的不透明物体绘制是每次都要绘制的，而硬件层面的延迟渲染，处理的是一整批Drawcall，剔除这一整批Drawcall中不会绘制的像素最后再渲染。可以说现在大部分的移动端的GPU都使用TBDR架构。&lt;/p&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料：&lt;/h3&gt;

&lt;p&gt;《How Shader Cores Work》
https://engineering.purdue.edu/~smidkiff/KKU/files/GPUIntro.pdf&lt;/p&gt;

&lt;p&gt;《CPU体系结构》
https://my.oschina.net/fileoptions/blog/1633021&lt;/p&gt;

&lt;p&gt;《深入理解CPU的分支预测(Branch Prediction)模型》
https://zhuanlan.zhihu.com/p/22469702&lt;/p&gt;

&lt;p&gt;《分析Unity在移动设备的GPU内存机制（iOS篇）》
https://www.jianshu.com/p/68b41a8d0b37&lt;/p&gt;

&lt;p&gt;《PC与Mobile硬件架构对比》
https://www.cnblogs.com/kekec/p/14487050.html&lt;/p&gt;

&lt;p&gt;《针对移动端TBDR架构GPU特性的渲染优化》
https://gameinstitute.qq.com/community/detail/123220&lt;/p&gt;

&lt;p&gt;《A look at the PowerVR graphics architecture: Tile-based rendering》
https://www.imaginationtech.com/blog/a-look-at-the-powervr-graphics-architecture-tile-based-rendering/&lt;/p&gt;

&lt;p&gt;《A look at the PowerVR graphics architecture: Deferred rendering》
https://www.imaginationtech.com/blog/the-dr-in-tbdr-deferred-rendering-in-rogue/&lt;/p&gt;

&lt;p&gt;《深入GPU硬件架构及运行机制》
https://www.cnblogs.com/timlly/p/11471507.html&lt;/p&gt;

&lt;p&gt;《深入浅出计算机组成原理》
https://time.geekbang.org/column/article/105401?code=7VZ-Md9oM7vSBSE6JyOgcoQhDWTOd-bz5CY8xqGx234%3D&lt;/p&gt;

&lt;p&gt;《Nvidia Geforce RTX-series is born》
https://www.fudzilla.com/reviews/47224-nvidia-geforce-rtx-series-is-born?start=2&lt;/p&gt;

&lt;p&gt;《渲染管线与GPU（Shading前置知识）》
https://zhuanlan.zhihu.com/p/336999443&lt;/p&gt;

&lt;p&gt;《剖析虚幻渲染体系（12）- 移动端专题Part 1（UE移动端渲染分析）》
https://www.cnblogs.com/timlly/p/15511402.html&lt;/p&gt;

&lt;p&gt;《tpc-texture-processing-cluster》
https://gputoaster.wordpress.com/2010/12/11/tpc-texture-processing-cluster/&lt;/p&gt;

&lt;p&gt;《Life of a triangle - NVIDIA’s logical pipeline》
https://developer.nvidia.com/content/life-triangle-nvidias-logical-pipeline&lt;/p&gt;

&lt;p&gt;《Rasterisation wiki》
https://en.wikipedia.org/wiki/Rasterisation&lt;/p&gt;

&lt;p&gt;《PolyMorph engine and Data Caches by Hilbert Hagedoorn》
https://www.guru3d.com/articles-pages/nvidia-gf100-(fermi)-technology-preview,3.html&lt;/p&gt;

&lt;p&gt;《NVIDIA GPU的一些解析》
https://zhuanlan.zhihu.com/p/258196004&lt;/p&gt;

&lt;p&gt;《tensor-core-performance-the-ultimate-guide》
https://developer.download.nvidia.cn/video/gputechconf/gtc/2019/presentation/s9926-tensor-core-performance-the-ultimate-guide.pdf&lt;/p&gt;

&lt;p&gt;《Understanding the Understanding the graphics pipeline》
https://www.seas.upenn.edu/~cis565/LECTURES/Lecture2%20New.pdf&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247485096&amp;amp;idx=1&amp;amp;sn=c027b6af4677515ba1e5950aac8ba68d&amp;amp;chksm=fc2263afcb55eab9204898b39fb77ee04f5767ac450507b6192a5c6d5612a45b6d29b1bcee16&amp;amp;token=853743270&amp;amp;lang=zh_CN#rd&quot;&gt;已发布在微信公众号上，点击跳转&lt;/a&gt;&lt;/p&gt;

</description>
               <pubDate>Sun, 12 Dec 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/12/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B051</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/12/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B051</guid>
            </item>
        
            <item>
               <title>读书笔记(五十) 《如何精彩演讲》#2 克服演讲时的恐惧</title>
               <description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247485068&amp;amp;idx=1&amp;amp;sn=464d36573e97c69aeab4ab996885ccee&amp;amp;chksm=fc22638bcb55ea9d3e4472e92a760b147dc2a816268e9d3a435842995723d3a02e9a26b0f4b5&amp;amp;token=1416441933&amp;amp;lang=zh_CN#rd&quot;&gt;已发布在微信公众号上，点击跳转&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;背景&quot;&gt;背景&lt;/h1&gt;

&lt;p&gt;不知不觉看完了6本关于演讲的主题，按推荐顺序排列分别是《高效演讲》、《演讲与口才》、《即兴演讲》、《关键对话》、《TED演讲的力量》、《说话的艺术》。&lt;/p&gt;

&lt;p&gt;我希望自己能够对演讲有一个系统性的学习。于是自己在平常的生活和工作中实践了一段时间，前前后后加起来有两个月时间。&lt;/p&gt;

&lt;p&gt;目标是，改善平常的工作、生活中表达的流畅和清晰度，能让人感觉到舒服让人感觉有活力。同时在公众演讲上，希望自己能够很好的呈现自己的所思所想以及所知所学。&lt;/p&gt;

&lt;p&gt;因此开启这个演讲学习系列的总结文章，我将对这6本书的内容加上我的实践经验做一次全面的系统性的总结。&lt;/p&gt;

&lt;h3 id=&quot;概述&quot;&gt;概述：&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;恐惧的原因&lt;/li&gt;
  &lt;li&gt;克服恐惧的原理&lt;/li&gt;
  &lt;li&gt;制定克服恐惧的行动&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;内容&quot;&gt;内容：&lt;/h3&gt;

&lt;p&gt;为什么要了解演讲时的恐惧？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;只有了解恐惧的原理才能正确认识它&lt;/li&gt;
  &lt;li&gt;它会使得事情更加糟糕&lt;/li&gt;
  &lt;li&gt;它会对我们的心理产生长短期的变化&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在平时的生活工作学习当中，当我们恐惧时很多时候并不能了解自己的恐惧情绪。由于在很多情况下，我们观察不到自己的情绪，导致我们常常无法在情绪有问题时，及时的调整它。&lt;/p&gt;

&lt;p&gt;因此你会看到很多时候，当出现了恐惧的症状时，我们没有调整它，这直接导致事情发展变得糟糕。&lt;/p&gt;

&lt;p&gt;（恐惧表情图：来源网络）&lt;/p&gt;

&lt;p&gt;不止如此，如果没有去很好的应对恐惧的话，长此以往我们在心里会有比较大的阴影。这使得，我们在一件比较重要的会议上，由于你的恐惧而退缩或退却，会使你在精神上遭受更大的打击。&lt;/p&gt;

&lt;p&gt;如果次数多了，你会发现你对这些重要的场所，重要的机会，会产生习惯性的恐惧，这常常使你对人生产生比较多的怀疑。&lt;/p&gt;

&lt;p&gt;因此无论从长期或短期来看，我们都需要去主动的了解恐惧。这是我们必须去了解恐惧的重要原因。它会将生活弄得更加糟糕，因此我们必须了解他，特别是在演讲时。&lt;/p&gt;

&lt;p&gt;恐惧有很多种，这里我们只关注演讲时的恐惧。但其实演讲的恐惧已经覆盖了生活中很多的方面，它与生活中的恐惧有很多共性。&lt;/p&gt;

&lt;h2 id=&quot;是什么让你恐惧&quot;&gt;是什么让你恐惧？&lt;/h2&gt;

&lt;p&gt;了解恐惧产生的原因，可以让我们对恐惧问题的形成有更深刻的认识。&lt;/p&gt;

&lt;p&gt;不管是普通焦虑还是惊恐障碍，都没有单一的成因，也不可能在消除这个成因后问题就得到彻底根除。
焦虑问题是有多方面，多种原因引起的，包括遗传因素，生物因素，家庭背景和教养方式、心理条件作用、近期生活转变、自我对话和个人信念体系、表达情感的能力、当前环境压力等。&lt;/p&gt;

&lt;p&gt;恐惧的原因：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;面对重要场面，准备不充分&lt;/li&gt;
  &lt;li&gt;对周围的环境很陌生&lt;/li&gt;
  &lt;li&gt;经历不足，导致的对事情没有底气&lt;/li&gt;
  &lt;li&gt;在意别人对自己的看法&lt;/li&gt;
  &lt;li&gt;生理反应，肌肉紧张、心跳加速、头脑晕眩&lt;/li&gt;
  &lt;li&gt;近期自己身边的环境变动较大&lt;/li&gt;
  &lt;li&gt;长期积累的心里因素，过分在意过去发生的事情&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们在面对演讲时通常会有很多的恐惧，特别是在上台前一段时间，自己的恐惧心理被放大的特别多。&lt;/p&gt;

&lt;p&gt;其实说来不只是演讲，恐惧在我们平常的生活跟工作当中也非常多，我们心里常常会对某件即将到来的事产生恐惧。&lt;/p&gt;

&lt;p&gt;因此呢。并不是说在演讲时你才会恐惧，在平常的生活当中，你同样会有很多令你焦虑不安的事情。&lt;/p&gt;

&lt;p&gt;演讲跟平常我们生活、工作时产生的恐惧是一样的，并没有说因为演讲而特殊。&lt;/p&gt;

&lt;p&gt;我们究竟为什么而恐惧？我们来分析一下。&lt;/p&gt;

&lt;p&gt;前面列了7条恐惧的原因，但其实这7条可以归类一下变得更精简一些。&lt;/p&gt;

&lt;p&gt;（恐惧原因）&lt;/p&gt;

&lt;p&gt;恐惧的原因总的来说为三方面：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;准备不充分&lt;/li&gt;
  &lt;li&gt;环境变化导致的恐惧&lt;/li&gt;
  &lt;li&gt;长期积累的心理因素&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（恐惧原因细节图）&lt;/p&gt;

&lt;h3 id=&quot;第一准备不充分&quot;&gt;第一，准备不充分&lt;/h3&gt;

&lt;p&gt;当我们知道我们将要去面对一件事情，但是这件事情并没有充足的把握时我们就会感到恐惧。&lt;/p&gt;

&lt;p&gt;因为这件事情是未知的，而且我预感到他可能不会有太好的结果，因为我对他没有把握，我也没有对他做任何的准备工作。&lt;/p&gt;

&lt;p&gt;可能有这么一件事情你是从来没有做过的，或者说你也不知道他将会发生什么样的情况。甚至在你的预感当中，这件事会发生比较差的或者糟糕的情况，此时你就会对这件事情产生恐惧。因而有逃避去面对这件事情的心理状态。&lt;/p&gt;

&lt;p&gt;在演讲时也是同样的，大部分人没有台上演讲的经验和习惯，因此对于上台演讲这件事情，大部分人都是有恐惧心理的。&lt;/p&gt;

&lt;p&gt;这个恐惧心理是因为我们没有，为这件事情做过任何的准备，也不知道这件事情会发生怎样的情况。此时我们心里隐隐的感觉到这这件事情会比较糟糕。因此，我们对演讲产生了恐惧。&lt;/p&gt;

&lt;p&gt;总之，当你面对一件即将到来，但未知的事情时，当你面对一件你觉得可能会发生比较糟糕的事情时，通常是因为我们没有做好足够的准备工作。这个准备工作可能需要花去几小时、几天、几个月甚至几年的时间，总之我们并没有为这件事做好足够的准备。&lt;/p&gt;

&lt;h3 id=&quot;第二环境变化导致的恐惧&quot;&gt;第二，环境变化导致的恐惧&lt;/h3&gt;

&lt;p&gt;我们周围的环境时常在变化，包括我们的工作，上下级人员调动，以及你身边人的来往，以及你亲人的离去与归来，这些的环境都在时刻变化着，影响着我们的心理。
可能是你最近比较倒霉，碰到了一些小概率事件，或者可能会因为大环境的变化使得感到沮丧。
甚至有可能你出差到了某个陌生的环境，让你感到很不舒服。&lt;/p&gt;

&lt;p&gt;这些环境的变化都会让你产生焦虑甚至恐惧的心理。&lt;/p&gt;

&lt;p&gt;总之，在当前这样的环境下，是你并不熟悉的环境，不是你能掌控而环境，因此导致你对周围的环境有一种隔离感，像是没有依靠的感觉。&lt;/p&gt;

&lt;h3 id=&quot;第三长期积累的心理因素&quot;&gt;第三，长期积累的心理因素&lt;/h3&gt;

&lt;p&gt;你可能会因为曾经的遭遇而感到痛苦，这些遭遇在你的脑中挥之不去，当再次发生或者即将发生这样的事情的时候，你就会感到焦虑和恐惧。&lt;/p&gt;

&lt;p&gt;这些痛苦的场景通常会延伸到我们生活的各个角落，比如说，你可能曾经在小组发言时，磕磕巴巴导致你对公众发言产生了恐惧，致使你在现在上台演讲时都会表现的异常的惊恐，当回忆起自己以前在小组发言时的那些场景，以及当时人们都的表情，你会不自觉的把这些场景延伸到现在的公众演讲以及公众表达上。&lt;/p&gt;

&lt;p&gt;常见比如，人们小时候玩水时掉入水中呛到过，成人后就对游泳产生了恐惧。或者在爬树时掉下来过，就对过山车产生了恐惧等等。&lt;/p&gt;

&lt;p&gt;不仅如此，人们通常会将一种痛苦的经历延展到另一个场景中，比如说，某人会因为小学里遭到过坏学生的殴打，致使他觉得现在自己面对他人安排的工作任务时会感觉自己是被压迫的或受虐待的，因此有很大的抵触情绪。&lt;/p&gt;

&lt;p&gt;总之，人们常常会延展过去的痛苦回忆，将这些痛苦的回忆放入到现在的场景里面去，这使得他们感到恐惧，同时也使他们有一个最佳的逃避借口。&lt;/p&gt;

&lt;h2 id=&quot;如何行动去克服恐惧&quot;&gt;如何行动去克服恐惧？&lt;/h2&gt;

&lt;p&gt;我罗列了所有的方法，有些方法是我自己总结的，有些则是参考《应对焦虑》埃德蒙.伯恩写的这本书。&lt;/p&gt;

&lt;p&gt;（克服恐惧的方法全图）&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;观察自己的恐惧&lt;/li&gt;
  &lt;li&gt;提前做好准备&lt;/li&gt;
  &lt;li&gt;积极变化适应环境&lt;/li&gt;
  &lt;li&gt;冥想练习排除杂念&lt;/li&gt;
  &lt;li&gt;渐进式肌肉放松&lt;/li&gt;
  &lt;li&gt;暴露疗法，应对暴露，完全暴露，想象暴露&lt;/li&gt;
  &lt;li&gt;运动，增加运动频率，增加强度增加抗压力&lt;/li&gt;
  &lt;li&gt;自我关怀，爱的言语、规律作息、简化生活、&lt;/li&gt;
  &lt;li&gt;转移注意力，专注于技巧，找人聊天，体验愉悦的事，听音乐&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上这些技巧，可以用在我们生活当中面对焦虑与恐惧时的情况。&lt;/p&gt;

&lt;p&gt;虽然大部分技巧都可以用到演讲中，但我想讲其中在演讲时运用最有效的方法，我们来看下图：&lt;/p&gt;

&lt;p&gt;（克服演讲恐惧的有效方法）&lt;/p&gt;

&lt;h3 id=&quot;观察自己的恐惧&quot;&gt;观察自己的恐惧&lt;/h3&gt;

&lt;p&gt;我们最先要做的是观察自己的恐惧，这是所有技巧的前提。&lt;/p&gt;

&lt;p&gt;（观察恐惧图：来源网络）&lt;/p&gt;

&lt;p&gt;恐惧也是情绪的一种，我们需要观察恐惧发生时候我们的表现，我们的眼神，我们心跳，我们的肌肉，在做怎样的颤抖。通过观察我们身体上的变化，我们可以感知到自己的恐惧。当我们能够观察到恐惧时，恐惧本身就没有这么强烈了，所以我们首先要做的是，用第三者的角度观察自己的恐惧表现。&lt;/p&gt;

&lt;p&gt;通过观察我们能及时的发现我们的精神状态在变化，只要我们观察到恐惧，它就不会再扩散，此时我们就可以想办法逐渐的释放它。&lt;/p&gt;

&lt;p&gt;最糟糕的是你观察不到自己的恐惧，但仍然继续逼迫自己向前对劲，这时你会有一种无力感，同时恐惧会不断的蔓延到你的全身，使你的精神状态陷入更加崩溃的边缘。&lt;/p&gt;

&lt;p&gt;我们只有识别自己的恐惧状态，识别自己的恐惧表现，才能真正的认识到自己的情绪变化，以及事物对我们的影响程度。这为后面的措施，调整打下了好的基础。&lt;/p&gt;

&lt;h3 id=&quot;提前做好准备&quot;&gt;提前做好准备&lt;/h3&gt;

&lt;p&gt;提前做好准备，通常是最明智的选择，也是克服恐惧的最好方法。&lt;/p&gt;

&lt;p&gt;（提前准备图：来源网络）&lt;/p&gt;

&lt;p&gt;它需要我们抽出时间去为这场演讲做准备。&lt;/p&gt;

&lt;p&gt;我需要写演讲稿，并且在演讲前打磨多次。通过自己不断的练习和打磨演讲，将演讲稿打磨成自己认为完美的样子。&lt;/p&gt;

&lt;p&gt;同时，在我们平时的生活中，要为未来的可能的演讲做好准备。所以，在我们平常的生活当中，要注重收集生活的细节，收集演讲的素材，这些素材能够更快更有效的运用在未来的演讲中，让演讲和故事呈现的效果更好。&lt;/p&gt;

&lt;p&gt;因此，提前做好准备，是每个演讲达人的最重要的工作之一。&lt;/p&gt;

&lt;h3 id=&quot;积极拥抱变化适应环境&quot;&gt;积极拥抱变化适应环境&lt;/h3&gt;

&lt;p&gt;（拥抱变化：来源网络）&lt;/p&gt;

&lt;p&gt;很多时候我们避免不了会去自己陌生的地方演讲。这个时候，环境的变化对我们的精神冲击力很大，周围没有熟悉的环境没有熟悉的人，我们感到被隔离脱离群体从而感到恐惧。&lt;/p&gt;

&lt;p&gt;这个时候，我们需要积极的去拥抱变化。与台上台下的工作人员沟通，积极的与嘉宾沟通，与在场的观众沟通。通过这样沟通交流我们能够舒展我们的心情，能够释放我们的紧张情绪，能够释放我们的恐惧情绪。&lt;/p&gt;

&lt;p&gt;如果在现场当我们遇到困难的时候，需要主动寻求帮助。特别是当下环境中的管理者，或者比较熟悉的朋友，通过他们的帮助让自己这份不安的心能够安定下来，减少恐惧的蔓延。&lt;/p&gt;

&lt;p&gt;特别是在演讲开场时，自己在一个陌生的环境下非常容易紧张焦虑和恐惧，此时在开场时需要跟大家有一个沟通交流的时间，留出这样一个前置的时间跟大家沟通交流非常必要，然后再慢慢进入状态，开始自己的演讲。也可以通过说出自己的感受来跟大家做一些互动，这样让自己的紧张情绪和压力能够释放掉，这为后面的事情进展顺利而铺平了道路。&lt;/p&gt;

&lt;h3 id=&quot;放松练习&quot;&gt;放松练习&lt;/h3&gt;

&lt;p&gt;我们可以用身体上的练习和精神的上的练习来放松自己。&lt;/p&gt;

&lt;p&gt;（冥想图：来源网络）&lt;/p&gt;

&lt;p&gt;精神上的练习，可以通过说出感受来接纳自己释放压力。也可以通过就地坐下或稳定站立并闭上眼睛来做冥想，通过专注于自己的呼吸，将杂念排除，也可以通过腹式呼吸来将注意力转移到自己的腹部上，让自己更加专注于当下。&lt;/p&gt;

&lt;p&gt;冥想的要点是专注于呼吸，这会让你排除杂念，专注于当下。&lt;/p&gt;

&lt;p&gt;身体上的练习，也可以起到放松作用。&lt;/p&gt;

&lt;p&gt;（与文无关的放松练习图：来源网络）&lt;/p&gt;

&lt;p&gt;这里有一个叫渐进式肌肉放松法。我们来具体介绍一下：&lt;/p&gt;

&lt;p&gt;腹式呼吸，用腹部呼吸，吸气时肚子吸入空气突出呼气时因气体排除而扁平，呼吸要慢，想象全身的紧张感开始从体内流去。&lt;/p&gt;

&lt;p&gt;撰紧拳头，保持7-10秒，再从开拳头15-20秒，反复循环&lt;/p&gt;

&lt;p&gt;双手前臂抬起，前臂与上臂尽量靠拢，紧绷肱二头肌，保持，然后放松。&lt;/p&gt;

&lt;p&gt;双手手臂向外延展到水平位置，伸肘，拉紧肱三头肌，保持，然后放松。&lt;/p&gt;

&lt;p&gt;尽量抬高眉毛，收缩前额肌肉，保持，然后放松。放松时，想象前额肌肉慢慢舒展、松弛。&lt;/p&gt;

&lt;p&gt;紧闭双眼，绷紧眼周肌肉，保持，然后放松。想象深度放松的感觉在眼镜周围蔓延。&lt;/p&gt;

&lt;p&gt;张大嘴巴，拉伸下颚关节周围的肌肉，绷紧下巴，保持，然后放松。张着嘴，让下巴自然放松。&lt;/p&gt;

&lt;p&gt;头向后仰，尽量靠向后背，收紧脖子后面的肌肉，专注于收紧颈部肌肉的动作，保持，然后放松。&lt;/p&gt;

&lt;p&gt;双肩同时最大限度地向上耸起，绷紧肩部肌肉，保持，然后放松。&lt;/p&gt;

&lt;p&gt;双肩外展，尽量向背部中线靠拢，绷紧肩胛骨周围的肌肉。让肩胛处的肌肉保持绷紧，然后放松。&lt;/p&gt;

&lt;p&gt;深吸一口气，绷紧胸部肌肉，保持10秒，然后慢慢呼气。&lt;/p&gt;

&lt;p&gt;收紧腹部肌肉，保持，然后放松。&lt;/p&gt;

&lt;p&gt;背部弓起，拉紧下背部肌肉，保持，然后放松。&lt;/p&gt;

&lt;p&gt;收紧臀部，保持，然后放松。&lt;/p&gt;

&lt;p&gt;收缩大腿肌肉，保持，然后放松。&lt;/p&gt;

&lt;p&gt;向自己的方向用力伸脚趾，绷紧小腿肌肉，保持，然后放松。&lt;/p&gt;

&lt;p&gt;卷起脚趾，绷紧脚面，保持，然后放松。&lt;/p&gt;

&lt;p&gt;以上是一整套的渐进式肌肉放松法，一整套下来需要20-30分钟，在平时的放松练习可以通过抽取几个对自己比较有效的姿势去做放松练习，这样更容易将这些放松练习融入到我们的生活中，特别是演讲前的放松练习。&lt;/p&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料：&lt;/h3&gt;

&lt;p&gt;《三招搞定演讲构思》朱林滢&lt;/p&gt;

&lt;p&gt;《应对焦虑》埃德蒙.伯恩&lt;/p&gt;

&lt;p&gt;《高效演讲》彼得.迈尔斯，尚恩.尼克斯&lt;/p&gt;
</description>
               <pubDate>Sun, 05 Dec 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/12/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B049</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/12/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B049</guid>
            </item>
        
            <item>
               <title>给女儿的信(十九) 说出自己的感受积极化解情绪</title>
               <description>&lt;h2 id=&quot;要点&quot;&gt;要点：&lt;/h2&gt;

&lt;p&gt;说出自己的感受，积极化解情绪&lt;/p&gt;

&lt;h2 id=&quot;结构&quot;&gt;结构：&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;半年一次的俱乐部选举即将开始&lt;/li&gt;
  &lt;li&gt;我自己写了ppt，做了选举前的准备&lt;/li&gt;
  &lt;li&gt;选举很激烈，主席选举经过2次平分后终于选出结果，大家也很欢乐&lt;/li&gt;
  &lt;li&gt;接着我上台选举VPE，上台很紧张，自己讲的有点死板&lt;/li&gt;
  &lt;li&gt;由于最近在俱乐部里挺活跃的，抱着一线希望，但最后还是败下阵来&lt;/li&gt;
  &lt;li&gt;接着收拾下心情，继续竞选后面的职位&lt;/li&gt;
  &lt;li&gt;有人提议VPM，我接受了&lt;/li&gt;
  &lt;li&gt;我上台后，先化解自己的情绪，说出了自己的感受&lt;/li&gt;
  &lt;li&gt;同时为VPM制定了目标，并真诚说出自己的内心话，希望跟大家交朋友&lt;/li&gt;
  &lt;li&gt;爸爸认为练习技巧前应该先交朋友，有了朋友技巧才有用，得到大家的认可，最后成功选举获得VPM&lt;/li&gt;
  &lt;li&gt;价值升华，失败不可怕，及时调整心态，说出感受，主动卸下压力，能让事情进展的更加顺利&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;内容&quot;&gt;内容：&lt;/h2&gt;

&lt;p&gt;Hello Sharon and hello，Anne，爸爸喜欢你们。爸爸到深圳了，要再过一个月回来，到时候再跟你玩，爸爸喜欢跟你们玩游戏，喜欢跟你们聊天，喜欢跟你们一起学习，喜欢跟你们一起加油。&lt;/p&gt;

&lt;p&gt;今天爸爸跟你们聊一下，爸爸最近在演讲俱乐部里面做的一些事情好不好？&lt;/p&gt;

&lt;p&gt;最近半年爸爸都在演讲俱乐部里面练习演讲，练习表达，这和Sharon在学校里面练小主播一样，非常像，爸爸每天都会练习那个绕口令，都会练习口步操，是不是跟你们很像？平时的时候爸爸会做一些演讲，上台演讲，这样呢会让爸爸在公众表达上更好一些，平常跟人沟通交流时，也能更自然一些。&lt;/p&gt;

&lt;p&gt;那爸爸想跟确认跟安妮说说说最近爸爸在俱乐部里面的一件事好不好？最近俱乐部里面要选举官员，怎么是官员？呢就是嗯宣传学校里面选班长，选学习委员，选体育委员，这些是一样的，爸爸在俱乐部里面也要选主席，要选副会长，要选秘书长等这些岗位，那这些岗位呢要做竞选演讲。&lt;/p&gt;

&lt;p&gt;于是爸爸上台做了竞选演讲，爸爸上台了两次，做了两次竞选演讲，分别去竞选了两个职位。&lt;/p&gt;

&lt;p&gt;第一个职位的时候爸爸上台很紧张，自己说话也有点很死板，说话的内容不是很清楚，因为爸爸太紧张了，通常紧张的时候爸爸说话都是有一点点啊有语无伦次，虽然抱着一线希望，但是最后还是败下阵来了。&lt;/p&gt;

&lt;p&gt;于是就收拾了一下心情继续的后面的竞选岗位。等爸爸第二次上台的时候，爸爸先做的一件事情就是爸爸先化解情绪，再开始自己的演讲内容，爸爸第二次上台的时候也还是很紧张，于是我上台时先说出自己的感受，说说自己为什么紧张，说自己还在想怎么去改进就第二次上台了。&lt;/p&gt;

&lt;p&gt;在说出自己的感受的时候，爸爸已经慢慢的化解了自己的情绪，接着爸爸就说出自己的内心话，希望能跟大家交朋友，希望能在这个俱乐部里面啊有更好的练习，跟大家一起学习，真心真诚的跟大家交朋友。&lt;/p&gt;

&lt;p&gt;那当爸爸说出这些真心话的时候，得到了大家的认可，爸爸也同时告诉大家，来这里练习演讲，爸爸首先希望能跟大家先交朋友，然后再练习，这种方式。得到了大家的认可，最后成功获得了会员副主席的这个职位。&lt;/p&gt;

&lt;p&gt;爸爸想跟Sharon和安妮说，这次经历告诉爸爸，其实失败并不可怕，在失败以后要及时调整自己的状态，调整自己的心情，怎么去调整呢，就是说出自己的感受，向周围人说出自己的感受，说出自己的看法，这样就能主动卸下自己的压力，让自己放松下来，这杨可以让后面的事情进展的更加顺利。&lt;/p&gt;

&lt;p&gt;今天的故事就讲到这里，爸爸爱你们，喜欢你们了。&lt;/p&gt;

</description>
               <pubDate>Sat, 27 Nov 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/11/27/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A119</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/11/27/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A119</guid>
            </item>
        
            <item>
               <title>读书笔记(四十九) 《游戏引擎架构》#4 低阶渲染器（3）</title>
               <description>&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247485051&amp;amp;idx=1&amp;amp;sn=e98f1e1971d56ce6543926b4f9bad204&amp;amp;chksm=fc22637ccb55ea6a4c16c5c0d8fd43cff936350490d79f1e377b61e4914300c39c4fc2911da1&amp;amp;token=53415989&amp;amp;lang=zh_CN#rd&quot;&gt;已发布在微信公众号上，点击跳转&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;背景&quot;&gt;背景：&lt;/h1&gt;

&lt;p&gt;作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》后对引擎架构的理解又深入了些。&lt;/p&gt;

&lt;p&gt;近段时间有对引擎剖析的想法，正好借这书本对游戏引擎架构做一个完整分析。&lt;/p&gt;

&lt;p&gt;此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。&lt;/p&gt;

&lt;p&gt;借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块，最后通过实践简单引擎开发来完成对引擎知识的掌握。&lt;/p&gt;

&lt;p&gt;游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。&lt;/p&gt;

&lt;p&gt;同时《游戏引擎架构》中部分知识太过陈旧的部分，会重新深挖后总结出自己的观点。&lt;/p&gt;

&lt;p&gt;概述：&lt;/p&gt;

&lt;p&gt;本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;时间库&lt;/li&gt;
  &lt;li&gt;自定义容器库&lt;/li&gt;
  &lt;li&gt;字符串散列库&lt;/li&gt;
  &lt;li&gt;内存管理框架&lt;/li&gt;
  &lt;li&gt;RTTI与反射模块&lt;/li&gt;
  &lt;li&gt;图形计算库&lt;/li&gt;
  &lt;li&gt;资产管理模块&lt;/li&gt;
  &lt;li&gt;低阶渲染器&lt;/li&gt;
  &lt;li&gt;剔除与合批模块&lt;/li&gt;
  &lt;li&gt;动画模块&lt;/li&gt;
  &lt;li&gt;物理模块&lt;/li&gt;
  &lt;li&gt;UI底层框架&lt;/li&gt;
  &lt;li&gt;性能剖析器的核心部分&lt;/li&gt;
  &lt;li&gt;脚本系统&lt;/li&gt;
  &lt;li&gt;视觉效果模块&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本篇内容为列表中的第8个部分的第1节。&lt;/p&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文：&lt;/h1&gt;

&lt;p&gt;简单回顾下前文&lt;/p&gt;

&lt;p&gt;前文我们聊了下显卡在计算机硬件主板中的位置与结构，知道了CPU、GPU的通信介质，并简单介绍了手机上的主板结构。本篇开头对上一篇做一些内容补充，PC和手机的不同硬件组织，以及CPU与其他芯片的通信过程。&lt;/p&gt;

&lt;p&gt;下面我们开始这篇内容&lt;/p&gt;

&lt;p&gt;本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。&lt;/p&gt;

&lt;p&gt;目录：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;主板结构中的显卡&lt;/li&gt;
  &lt;li&gt;GPU功能发展史&lt;/li&gt;
  &lt;li&gt;GPU与CPU的差异&lt;/li&gt;
  &lt;li&gt;GPU硬件特点&lt;/li&gt;
  &lt;li&gt;图形驱动程序架构&lt;/li&gt;
  &lt;li&gt;引擎低阶渲染架构&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;内容结构&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;CPU硬件结构&lt;/li&gt;
  &lt;li&gt;GPU硬件结构&lt;/li&gt;
  &lt;li&gt;GPU手机管线与PC管线的差异&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;简单回顾下前文，前文我们主要讲了显卡的发展历史，知道了显卡功能和管线是如何一步步转变为现在这样子的。&lt;/p&gt;

&lt;h2 id=&quot;cpu结构与工作原理&quot;&gt;CPU结构与工作原理&lt;/h2&gt;

&lt;p&gt;我们知道，CPU运行时有三类元器件构成，取指器、译码器、运算器（逻辑算术运算器、浮点数运算器、单指令多数据运算器等）。&lt;/p&gt;

&lt;p&gt;这三类元器件代表三个阶段取指阶段（Fetch）、指令译码阶段（Decode）、执行阶段（Execute），它们在CPU内执行的步骤如下图：&lt;/p&gt;

&lt;p&gt;（图-取指-译指-执行三步骤）&lt;/p&gt;

&lt;p&gt;取指阶段为从内存或缓存中取得指令并存放到寄存器中的过程。&lt;/p&gt;

&lt;p&gt;接着，译码器会将寄存器中的指令翻译成操作指令，指令译码器按照预定的指令格式，对取回的指令进行拆分和解释，识别区分出不同的指令类别以及各种获取操作数的方法。在组合逻辑控制的计算机中，指令译码器对不同的指令操作码产生不同的控制电位，以形成不同的微操作序列；在微程序控制的计算机中，指令译码器用指令操作码来找到执行该指令的微程序的入口，并从此入口开始执行。&lt;/p&gt;

&lt;p&gt;运算阶段，则根据指令执行不同的运算单元，完成指令所规定的各种操作，具体实现指令的功能。为此，CPU 的不同部分被连接起来，以执行所需的操作。&lt;/p&gt;

&lt;p&gt;（图-控制单元-运算单元-存储单元）&lt;/p&gt;

&lt;p&gt;因此，通常我们将取指器、译码器统称为控制单元，计算器称为算术逻辑单元（ALU），寄存器和高速缓存称为存储单元。&lt;/p&gt;

&lt;p&gt;除了这三个基本单元，当下这样复杂的CPU中还有包括分支预测器、乱序控制器、内存预加载器等等。&lt;/p&gt;

&lt;p&gt;这里简单介绍下CPU指令流水线、分支预测、乱序执行的原理。&lt;/p&gt;

&lt;h2 id=&quot;指令流水线&quot;&gt;指令流水线&lt;/h2&gt;

&lt;p&gt;起初CPU指令执行是线性的，只靠取指、译码、运算顺序执行三个模块，这导致元器件的工作顺序是线性的，当一个元器件执行时，其他元器件是空等待状态，CPU执行效率比较低。&lt;/p&gt;

&lt;p&gt;为了提高效率，提高空等待的元器件的利用率，对指令执行流水线进行了拆分，并同时增加多个流水线不断减少元器件的空等待装填。如下图：&lt;/p&gt;

&lt;p&gt;（拆分多级流水线）&lt;/p&gt;

&lt;p&gt;将原本线性的三个指令执行顺序，拆分成一个个小模块，让这些独立的小模块可以自顾自的循环工作，减少前后的等待时间，从而提高了指令执行效率。&lt;/p&gt;

&lt;p&gt;用这种方式把一个指令拆分成“取指令 - 指令译码 - 执行指令”这样三个部分，这就是一个三级的流水线。进一步把“执行指令”拆分成“ALU 计算（指令执行）- 内存访问 - 数据写回”，就会变成一个五级的流水线。&lt;/p&gt;

&lt;p&gt;继续拆分，将一个长时间的操作步骤，拆分成更多的步骤，让所有步骤需要执行的时间尽量都差不多长。这样，也就可以解决我们在单指令周期处理器中遇到的复杂指令性能问题。（同时多级流水线会出现许多问题，例如模块间寄存器的写入次数太多，多模块读写同一个资源相互冲突等，这里不细说，CPU最终都有解决方案去解决）现代的 ARM 或 Intel 的 CPU，流水线级数都已经到了 14 级。&lt;/p&gt;

&lt;h2 id=&quot;乱序执行&quot;&gt;乱序执行&lt;/h2&gt;

&lt;p&gt;我们在写程序时，常常会发现函数内几个执行操作顺序并不互相依赖，哪个在前哪个在后都没有太大的关系。此时不仅编译器会对这些不相互依赖的计算操作进行重新顺序排序用于优化CPU执行效率（这也是导致线程不同步的其中一个原因），CPU也会将不相互依赖的指令放在不相同的指令流水线上以加快执行速度。&lt;/p&gt;

&lt;p&gt;（指令在不同CPU流水线上乱序执行：图来源网络）&lt;/p&gt;

&lt;p&gt;我们从图中可以看到，在流水线里，当后面的指令不依赖前面的指令时，就不用等待前面的指令执行完毕后再执行，可以另起一个流水线执行，否则就需要用NOP隔周期等待的方式将执行单元延后计算。因此我们所写的代码的执行顺序其实并不是我们所想象的那样，在CPU中大部分时候其实是乱序执行的，这样元器件的利用率更高，执行效率也更高，而依赖而停顿的次数也更少。&lt;/p&gt;

&lt;p&gt;（乱序执行的流程图）&lt;/p&gt;

&lt;p&gt;乱序执行实际的过程比我们想象的要复杂一些，总体上它会先拆分指令，再分发给执行单元，结束后将结果重新排序，最后提交缓冲。&lt;/p&gt;

&lt;h2 id=&quot;分支预测&quot;&gt;分支预测&lt;/h2&gt;

&lt;p&gt;程序中有很多true或false的判断来跳转下文要执行的指令，这种跳转会使得执行流水线发生停顿，因为要依赖前面代码计算的结果再决定要执行哪段程序，因此流水线不中断并等待结果，这会使CPU执行效率降低。&lt;/p&gt;

&lt;p&gt;在CPU中有分支预测器，它是一种数字电路，在分支指令执行前，猜测哪一个分支会被执行，这样能显著提高pipeline的性能。&lt;/p&gt;

&lt;p&gt;可以理解为，分支预测器会主动猜测分支是true还是false。&lt;/p&gt;

&lt;p&gt;如果猜错了，处理器要flush掉pipeline, 回滚到之前的分支，然后重新热启动，选择另一条路径。 
如果猜对了，处理器不需要暂停，继续往下执行。&lt;/p&gt;

&lt;p&gt;也就是说，如果CPU每次都猜错，处理器将耗费大量时间在停止-回滚-热启动这一周期性过程里。反之，如果侥幸每次都猜对了，那么处理器将从不停止、无需等待的执行后面的指令。&lt;/p&gt;

&lt;p&gt;（分支预测图）&lt;/p&gt;

&lt;p&gt;CPU执行指令遇到条件时不知道该读取哪些指令，需要等待判断条件中的计算结果，这样就中断了后面指令执行流水线使得执行效率下降。于是CPU增加了分支预测器，猜if条件中是True还是False，如果猜对了效率就会提高，如果猜错了，则重新计算。&lt;/p&gt;

&lt;p&gt;分支预测的关键是，预测算法能猜对多少。&lt;/p&gt;

&lt;p&gt;分支预测分为动态分支预测和静态分支预测。动态预测在执行过程中统计了通过率，根据通过率去调整预测方向，静态则始终以一个值作为判断标准。动态预测有好几种，最常见的是双模预测，通过四个状态位来动态调整预测结果。其它常见分支预测器如两级自适应预测器，局部/全局分支预测器，融合分支预测器，Agree预测期，神经分支预测器等。&lt;/p&gt;

&lt;h2 id=&quot;cpu原理小结&quot;&gt;CPU原理小结&lt;/h2&gt;

&lt;p&gt;（CPU抽象元件图）&lt;/p&gt;

&lt;p&gt;现在我们知道了CPU指令周期的工作方式，分为三个步骤，取指、译码、运算。运算后需要寄存器和高速缓存来作为存储器，CPU会从内存中获取指令并最终将数据写入内存。&lt;/p&gt;

&lt;p&gt;我们把CPU中的元件抽象成，取指和译码元件、逻辑运算元件、数据缓存，就有了上面这幅简单抽象的CPU结构图。&lt;/p&gt;

&lt;p&gt;下面我们来看看硬件上的元器件是如何分布的：&lt;/p&gt;

&lt;p&gt;（CPU硬件结构图：来源网络）&lt;/p&gt;

&lt;p&gt;我们看到CPU除了基本的控制器、运算器、寄存器、高速缓存外，还额外放置了乱序执行器、分支预测器、内存预装载器等用于提高CPU效率。这些元器件全部加起来，整个就是一个CPU Core。&lt;/p&gt;

&lt;p&gt;（多核架构图：来源网络）&lt;/p&gt;

&lt;p&gt;实际的设备中通常由多个CPU Core组成多核的架构，每个CPU Core都有自己的高速缓存L1，不同CPU Core之间也有共享的高速缓存L2，通常每级缓存的存取速度有10倍的差距，而内存的存取速度比高速缓存差的更多，对于CPU Core来说可以认为它是一个外部存储设备，通过桥接芯片连接。&lt;/p&gt;

&lt;p&gt;GPU硬件结构与原理&lt;/p&gt;

&lt;p&gt;前面介绍了CPU的内部结构，现代无论是手机还是PC机基本都是多核的，每个核就是1个CPU Core，每个CPU Core里都有取指器和译码器，还有逻辑运算器，以及寄存器和高速缓存。除了上述基本元件外还有其他元器件用于优化CPU执行效率，包括乱序执行器、分支预测器、内存预装载器等。&lt;/p&gt;

&lt;p&gt;GPU图形管线的变迁&lt;/p&gt;

&lt;p&gt;我们从GPU历史里知道，原本显卡只是一个数据传输和画面转换接口，在不断的变革下成了主板上一个独立的芯片，之后就有了GPU的概念。CPU将数据传输到显存再通知GPU处理这些数据，GPU则拥有图形图像的处理流水线，专门处理图像。&lt;/p&gt;

&lt;p&gt;起初图形的顶点、片元都在CPU上计算，到了Voodoo FX显卡时已经将图元生成后的步骤拆分到了GPU上，最后再将顶点处理部分的计算合入到GPU上，此时GPU才真正形成了自己的图形管线。如下图：&lt;/p&gt;

&lt;p&gt;（图形计算管线变迁1-1982年前的纯2D时代）&lt;/p&gt;

&lt;p&gt;1982年前，CPU承担大部分的工作，当时还没有GPU的概念，还只能以显示适配器的名称称呼。&lt;/p&gt;

&lt;p&gt;（图形计算管线变迁2-1996年3dfx Voodoo）&lt;/p&gt;

&lt;p&gt;到1996年，GPU已经可以分担CPU的部分功能，只留下顶点处理部分部分给CPU。&lt;/p&gt;

&lt;p&gt;（图形计算管线变迁3-1998年GeForce）&lt;/p&gt;

&lt;p&gt;到1998年，所有顶点处理和片元处理都由GPU来完成了，但没有可编程部分，管线是固定的，传入顶点后无法控制顶点和片元的变化。&lt;/p&gt;

&lt;p&gt;（图形计算管线变迁4-2002年GeForce FX）&lt;/p&gt;

&lt;p&gt;到2002年，正式加入了可编程着色器，让顶点和片元的计算和展示有了更多变化。&lt;/p&gt;

&lt;p&gt;（图形计算管线变迁5-2006年GeForce 8800）&lt;/p&gt;

&lt;p&gt;到2006年，GPU管线中又增加了细分着色器，pre-Z等节点。&lt;/p&gt;

&lt;p&gt;这部分历史我们也可以通过OpenGL的功能变化来看这段历史的发展过程。&lt;/p&gt;

&lt;p&gt;（来源 wiki）&lt;/p&gt;

&lt;p&gt;1.1 1997 年 3 月，纹理对象，顶点数组&lt;/p&gt;

&lt;p&gt;1.2 1998 年 3 月，3D 纹理、BGRA 和打包像素格式&lt;/p&gt;

&lt;p&gt;1.2.1 1998年10月，ARB 扩展概念&lt;/p&gt;

&lt;p&gt;1.3 2001 年 8 月，多重纹理、多重采样、纹理压缩&lt;/p&gt;

&lt;p&gt;1.4 2002 年 7 月，深度图，GLSlang&lt;/p&gt;

&lt;p&gt;1.5 2003 年 7 月，顶点缓冲对象 (VBO)，遮挡查询&lt;/p&gt;

&lt;p&gt;2.0 2004 年 9 月， GLSL 1.1，MRT，两个纹理的非幂，点精灵，双面模板&lt;/p&gt;

&lt;p&gt;2.1 2006 年 7 月 ，GLSL 1.2，像素缓冲对象 (PBO)，sRGB 纹理&lt;/p&gt;

&lt;p&gt;3.0 2008 年 8 月 ，GLSL 1.3，纹理数组，条件渲染，帧缓冲对象 (FBO)&lt;/p&gt;

&lt;p&gt;3.1 2009 年 3 月， GLSL 1.4，Instancing，纹理缓存对象，统一缓存对象，图元重启&lt;/p&gt;

&lt;p&gt;3.2 2009 年 8 月， GLSL 1.5，几何着色器，多重采样纹理&lt;/p&gt;

&lt;p&gt;3.3 2010 年 3 月， GLSL 3.30，从 OpenGL 4.0 规范向后移植尽可能多的功能&lt;/p&gt;

&lt;p&gt;4.0 2010 年 3 月， GLSL 4.00，GPU 上的曲面细分，具有 64 位精度的着色器&lt;/p&gt;

&lt;p&gt;4.1 2010 年 7 月， GLSL 4.10，开发人员友好的调试输出，与 OpenGL ES 2.0 的兼容性&lt;/p&gt;

&lt;p&gt;4.2 2011 年 8 月， GLSL 4.20，带原子计数器的着色器，绘制传输给Feed back实例，着色器打包，性能改进&lt;/p&gt;

&lt;p&gt;4.3 2012 年 8 月， GLSL 4.30，利用 GPU 并行性的计算着色器、着色器存储缓冲区对象、高质量 ETC2/EAC 纹理压缩、增强的内存安全性、多应用程序稳健性扩展、与 OpenGL ES 3.0 的兼容性&lt;/p&gt;

&lt;p&gt;4.4 2013 年 7 月， GLSL 4.40，缓冲区放置控制，高效异步查询，着色器变量布局，高效多对象绑定，Direct3D 应用程序的流线型移植，无绑定纹理扩展，稀疏纹理扩展&lt;/p&gt;

&lt;p&gt;4.5 2014 年 8 月， GLSL 4.50，直接状态访问 (DSA)，刷新控制，鲁棒性，OpenGL ES 3.1 API 和着色器兼容性，DX11 仿真功能&lt;/p&gt;

&lt;p&gt;4.6 2017 年 7 月， GLSL 4.60，更高效的几何处理和着色器执行，更多信息，无错误上下文，多边形偏移钳位，SPIR-V，各向异性过滤&lt;/p&gt;

&lt;p&gt;经过显卡历史、GPU管线的变化历史、OpenGL的功能变迁史，让我们把GPU看的更清楚。&lt;/p&gt;

&lt;h2 id=&quot;gpu-core结构&quot;&gt;GPU Core结构&lt;/h2&gt;

&lt;p&gt;我们知道现代的 CPU 里除了基本的元器件外，还有许多围绕提高执行效率的元器件，以及增加诸多功能的其他元器件。这些元器件在 GPU 里有点多余了，GPU 的整个处理过程是一个流式处理过程，没有那么多分支条件，以及复杂的依赖关系。&lt;/p&gt;

&lt;p&gt;因此我们可以把 GPU 里这些对应的元器件去掉，只留下取指令、指令译码、ALU 以及执行这些计算需要的寄存器和缓存。如图：&lt;/p&gt;

&lt;p&gt;（GPU元器件瘦身图）&lt;/p&gt;

&lt;p&gt;这样看来GPU core比CPU Core的构造简单的多了，由于传输GPU的数据并不相互依赖的，因此我们可以用很多个GPU Core来并行计算这些数据。&lt;/p&gt;

&lt;p&gt;于是就有了，多GPU Core的结构，如下图：&lt;/p&gt;

&lt;p&gt;（多个Core并行工作图）&lt;/p&gt;

&lt;p&gt;多个Core并行工作时它们使用了相同的取指器并且有相同的代码，为什么不把它们并起来呢。&lt;/p&gt;

&lt;p&gt;前面我们说过SIMD，它把4个数据一起提交并用一个指令执行它完成计算。在GPU中借鉴了SIMD，用了一种跟它很像的处理技术叫做SIMT（Single Instruction Multiple Threads），如下图：&lt;/p&gt;

&lt;p&gt;（ 单指令多数据流管线）&lt;/p&gt;

&lt;p&gt;在SIMT中，向GPU Core输入的是8个图元或片元，同时输出8个结果，每次输入多个数据到GPU Core中，并获得多个结果。SIMT 比 SIMD 更加灵活。&lt;/p&gt;

&lt;p&gt;SIMT可以把多条数据，交给不同的线程去处理。各个线程里面执行的指令流程是一样的，但是可能根据数据的不同，走到不同的条件分支。这样，相同的代码和相同的流程，可能执行不同的具体的指令。这个线程走到的是 if 的条件分支，另外一个线程走到的就是 else 的条件分支了。&lt;/p&gt;

&lt;h2 id=&quot;gpu的分支处理&quot;&gt;GPU的分支处理&lt;/h2&gt;

&lt;p&gt;我们CPU有对分支做预测，让流水线停顿更少，GPU Core也会对分支做优化处理。&lt;/p&gt;

&lt;p&gt;（GPU的分支处理）&lt;/p&gt;

&lt;p&gt;常用的GPU分支处理SIMD里，为每个指令都分配一个ALU做并行处理，用多个周期分别计算分支的两种结果。&lt;/p&gt;

&lt;p&gt;这样做就不会让流水线停滞，但是这样做有效率问题，在一个指令周期里，很多ALU是闲置的。&lt;/p&gt;

&lt;p&gt;因此在SIMD之后，SIMT（Single Instruction，Multiple Threads）技术可以变相的做分支的顺序执行，如下图：&lt;/p&gt;

&lt;p&gt;（SIMT 分支预测并行计算）&lt;/p&gt;

&lt;p&gt;在SIMT中，各个线程里面执行的指令流程是一样的，只是走的不同的分支。相同的代码和相同的流程，执行不同的分支。
可能一些线程走到的是 if 的条件分支，而另外一些线程走到的就是 else 的条件分支，这种并行计算使得计算本身无需依赖上文，也让ALU不再空闲停滞。&lt;/p&gt;

&lt;p&gt;这里简单说下解决SIMIT流水线中的卡顿问题&lt;/p&gt;

&lt;p&gt;拆分存储缓存，让上下文依赖的计算在不同时段同时计算，以提高ALU的利用率。&lt;/p&gt;

&lt;p&gt;（卡顿时启动另一条管线）&lt;/p&gt;

&lt;p&gt;（拆分整个缓存为独立缓存）&lt;/p&gt;

&lt;p&gt;GPU为了不等待分支条件而导致的停顿流水线，就要对每个分支做都做计算。分支内的数据仍然会有依赖关系，依赖关系就会造成卡顿，需要等待计算或等待获取资源。&lt;/p&gt;

&lt;p&gt;因此将原来的一整个缓存，拆分为多个缓存，使得流水线在阻塞时能更好的使用闲置ALU计算下一条数据。这样就能更好的利用ALU计算做优化了。&lt;/p&gt;

&lt;p&gt;现实GPU硬件中的物理架构&lt;/p&gt;

&lt;p&gt;前面我们说的都是抽象的GPU Core结构，下面我们来看下实际中的GPU物理架构。&lt;/p&gt;

&lt;p&gt;看到这些GPU架构可以发现它们虽然彼此有差异，但很多概念相同，下面我们俩理清一下这些架构中组建的概念：&lt;/p&gt;

&lt;p&gt;GPC（Graphics Processing Cluster） ： 图形处理集群，GPU划分多个GPC，每个GPC里有多个TPC，每个TPC里包含了多个SM和1个Rester Engine&lt;/p&gt;

&lt;p&gt;TPC（Texture Processing Cluster） ： 图像处理集群，是由若干个SM、1个纹理单元（Texture Unit）和一些逻辑控制和ALU组成。&lt;/p&gt;

&lt;p&gt;RT Core（Ray Trace Core） ： RT Core是SM里面加了一条专用的流水线(ASIC)来计算射线和三角形求交（可以访问BVH，用于光线追踪）。由于是ASIC专用电路逻辑，与shader code做求交计算相比，性能有数量级的提升。&lt;/p&gt;

&lt;p&gt;Rester Engine ： 光栅引擎，处理它接收到的三角形，并为它负责的那些部分生成像素信息（也处理背面剔除和 Z 剔除）。&lt;/p&gt;

&lt;p&gt;PolyMorp Engine：曲面引擎，是一个带有顶点提取器、视口变换的累积集群，它处理属性设置和流输出，这些都合并到了这个处理器中，极大地扩展了曲面细分和（当发送到光栅引擎时）光栅化性能。&lt;/p&gt;

&lt;p&gt;Thread Engine：线程引擎，调度线程到核的引擎&lt;/p&gt;

&lt;p&gt;SM（Stream Multiprocessor）、SMX、SMM ：SM包含GPU Core内核，指令单位，调度程序。&lt;/p&gt;

&lt;p&gt;Warp Scheduler、Dispatch Unit：负责线程束调度，将软件线程按一捆一捆（不是一个一个）的方式分配到计算核上。一个Warp由32个线程组成，Warp Scheduler的指令通过Dispatch Units派送到Core核上执行。&lt;/p&gt;

&lt;p&gt;SP（Streaming Processors）、Core ：SP有时也叫CUDA core，一个 SP 包括多个 ALU 和 FPU。SP是作用于顶点或像素数据的真正处理单元。&lt;/p&gt;

&lt;p&gt;ALU（Arithmetic Logic Unit）、FPU（Float Point Unit）：ALU 是算术和逻辑单元，FPU 是浮点单元。&lt;/p&gt;

&lt;p&gt;INT32，FP32 ：在GPU里支持单精度运算的Single Precision ALU称之为FP32 core或简称core，而把双精度运算的Double Precision ALU称之为DP unit或者FP64 core。第三代的Kepler架构里，FP64单元和FP32单元的比例是高端机1:3或者低端机1:24，到了第五代比例为1:2，低端型号里仍然保持为1:32。&lt;/p&gt;

&lt;p&gt;SFU（Special Function Unit）：执行特殊数学运算（sin、cos、log等）&lt;/p&gt;

&lt;p&gt;TENSO CORE ： 精度混合计算单元，转换不同精度之间的运算结果，用于执行矩阵乘法的计算单元，精度混合分为整数精度和浮点数精度。&lt;/p&gt;

&lt;p&gt;ROP（Render Output Unit） ：渲染输出单元 ，一个ROP内部有很多ROP单元，在ROP单元中有深度测试和Framebuffer混合，深度和颜色的设置必须是原子操作，否则两个不同的三角形在同一个像素点就会有冲突和错误。&lt;/p&gt;

&lt;p&gt;LD/ST（Load/Store Unit）：加载和存储数据&lt;/p&gt;

&lt;p&gt;Share Memory、L1 Data Cache、L1 Cache、L2 Cache ：共享内存，以及多级的高速缓存&lt;/p&gt;

&lt;p&gt;RF（Register File）：寄存器堆，多个寄存器组成的阵列&lt;/p&gt;

&lt;p&gt;Instruction Cache ：指令缓存&lt;/p&gt;

&lt;p&gt;未完待续…&lt;/p&gt;

&lt;p&gt;参考资料：&lt;/p&gt;

&lt;p&gt;《How Shader Cores Work》&lt;/p&gt;

&lt;p&gt;https://engineering.purdue.edu/~smidkiff/KKU/files/GPUIntro.pdf&lt;/p&gt;

&lt;p&gt;《CPU体系结构》&lt;/p&gt;

&lt;p&gt;https://my.oschina.net/fileoptions/blog/1633021&lt;/p&gt;

&lt;p&gt;《深入理解CPU的分支预测(Branch Prediction)模型》&lt;/p&gt;

&lt;p&gt;https://zhuanlan.zhihu.com/p/22469702&lt;/p&gt;

&lt;p&gt;《分析Unity在移动设备的GPU内存机制（iOS篇）》&lt;/p&gt;

&lt;p&gt;https://www.jianshu.com/p/68b41a8d0b37&lt;/p&gt;

&lt;p&gt;《针对移动端TBDR架构GPU特性的渲染优化》&lt;/p&gt;

&lt;p&gt;https://gameinstitute.qq.com/community/detail/123220&lt;/p&gt;

&lt;p&gt;《A look at the PowerVR graphics architecture: Tile-based rendering》&lt;/p&gt;

&lt;p&gt;https://www.imaginationtech.com/blog/a-look-at-the-powervr-graphics-architecture-tile-based-rendering/&lt;/p&gt;

&lt;p&gt;《A look at the PowerVR graphics architecture: Deferred rendering》&lt;/p&gt;

&lt;p&gt;https://www.imaginationtech.com/blog/the-dr-in-tbdr-deferred-rendering-in-rogue/&lt;/p&gt;

&lt;p&gt;《深入GPU硬件架构及运行机制》&lt;/p&gt;

&lt;p&gt;https://www.cnblogs.com/timlly/p/11471507.html&lt;/p&gt;

&lt;p&gt;《深入浅出计算机组成原理》&lt;/p&gt;

&lt;p&gt;https://time.geekbang.org/column/article/105401?code=7VZ-Md9oM7vSBSE6JyOgcoQhDWTOd-bz5CY8xqGx234%3D&lt;/p&gt;

&lt;p&gt;《Nvidia Geforce RTX-series is born》&lt;/p&gt;

&lt;p&gt;https://www.fudzilla.com/reviews/47224-nvidia-geforce-rtx-series-is-born?start=2&lt;/p&gt;

&lt;p&gt;《渲染管线与GPU（Shading前置知识）》&lt;/p&gt;

&lt;p&gt;https://zhuanlan.zhihu.com/p/336999443&lt;/p&gt;

&lt;p&gt;《剖析虚幻渲染体系（12）- 移动端专题Part 1（UE移动端渲染分析）》&lt;/p&gt;

&lt;p&gt;https://www.cnblogs.com/timlly/p/15511402.html&lt;/p&gt;

&lt;p&gt;《tpc-texture-processing-cluster》&lt;/p&gt;

&lt;p&gt;https://gputoaster.wordpress.com/2010/12/11/tpc-texture-processing-cluster/&lt;/p&gt;

&lt;p&gt;《Life of a triangle - NVIDIA’s logical pipeline》&lt;/p&gt;

&lt;p&gt;https://developer.nvidia.com/content/life-triangle-nvidias-logical-pipeline&lt;/p&gt;

&lt;p&gt;《Rasterisation wiki》&lt;/p&gt;

&lt;p&gt;https://en.wikipedia.org/wiki/Rasterisation&lt;/p&gt;

&lt;p&gt;《PolyMorph engine and Data Caches by Hilbert Hagedoorn》&lt;/p&gt;

&lt;p&gt;https://www.guru3d.com/articles-pages/nvidia-gf100-(fermi)-technology-preview,3.html&lt;/p&gt;

&lt;p&gt;《NVIDIA GPU的一些解析》&lt;/p&gt;

&lt;p&gt;https://zhuanlan.zhihu.com/p/258196004&lt;/p&gt;

&lt;p&gt;《tensor-core-performance-the-ultimate-guide》&lt;/p&gt;

&lt;p&gt;https://developer.download.nvidia.cn/video/gputechconf/gtc/2019/presentation/s9926-tensor-core-performance-the-ultimate-guide.pdf&lt;/p&gt;

&lt;p&gt;《Understanding the Understanding the graphics pipeline》&lt;/p&gt;

&lt;p&gt;https://www.seas.upenn.edu/~cis565/LECTURES/Lecture2%20New.pdf&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;amp;mid=2247485051&amp;amp;idx=1&amp;amp;sn=e98f1e1971d56ce6543926b4f9bad204&amp;amp;chksm=fc22637ccb55ea6a4c16c5c0d8fd43cff936350490d79f1e377b61e4914300c39c4fc2911da1&amp;amp;token=53415989&amp;amp;lang=zh_CN#rd&quot;&gt;已发布在微信公众号上，点击跳转&lt;/a&gt;&lt;/p&gt;

</description>
               <pubDate>Mon, 22 Nov 2021 00:00:00 +0800</pubDate>
               <link>http://www.luzexi.com/2021/11/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B050</link>
               <guid isPermaLink="true">http://www.luzexi.com/2021/11/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B050</guid>
            </item>
        
    </channel>
</rss>