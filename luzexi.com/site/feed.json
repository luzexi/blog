{
    "version": "https://jsonfeed.org/version/1",
    "title": "技术人生",
    "home_page_url": "http://www.luzexi.com/",
    "feed_url": "http://www.luzexi.com/feed.json",
    "description": "技术，哲学，金融",
    "icon": "http://www.luzexi.com/apple-touch-icon.png",
    "favicon": "http://www.luzexi.com/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Jesse Lu",
        "url": "http://www.luzexi.com",
        "avatar": null
    },
    
"items": [
    
        {
            "id": "http://www.luzexi.com/2022/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B066",
            "title": "读书笔记(六十六) 如何做软件分析4 - 策略、用例、接口",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485593&amp;idx=1&amp;sn=11f282bcd666b1fd29a267bc095e1d15&amp;chksm=fc226d9ecb55e488d854395bde94f4459208d8ab4c5b4fbd430f72750e010061226f8218e1cf&amp;token=546801700&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2022/09/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B066",
            
            
            
            
            
            "date_published": "2022-09-12T00:00:00+08:00",
            "date_modified": "2022-09-12T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/08/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B065",
            "title": "读书笔记(六十五) 如何做软件分析3 - 分析的目标与层次",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485559&amp;idx=1&amp;sn=c1e0179ea5cf96c0e4f747e2716eab94&amp;chksm=fc226d70cb55e4666e71c519db815a5434b07ae1698b132fed8225bedd87b6d7b0660031b202&amp;token=546801700&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2022/08/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B065",
            
            
            
            
            
            "date_published": "2022-08-26T00:00:00+08:00",
            "date_modified": "2022-08-26T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/08/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B064",
            "title": "读书笔记(六十四) 游戏引擎架构#5 - 剔除与合批",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485541&amp;idx=1&amp;sn=1adc3d4bd3573b58dbc56e81be963abf&amp;chksm=fc226d62cb55e474965abb9a2fbbff8eee8daaa2e541310279178af01984c0882060273fe026&amp;token=546801700&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2022/08/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B064",
            
            
            
            
            
            "date_published": "2022-08-01T00:00:00+08:00",
            "date_modified": "2022-08-01T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/07/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B063",
            "title": "读书笔记(六十三) 如何做软件分析2 - 分析的模型",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485499&amp;idx=1&amp;sn=bff40ccff3934df847c03f170680fb34&amp;chksm=fc226d3ccb55e42a91b4ba0e59ee9902b29541fbdd6f5e78a5088eab624f944ecb66ce3a9ff7&amp;token=546801700&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2022/07/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B063",
            
            
            
            
            
            "date_published": "2022-07-10T00:00:00+08:00",
            "date_modified": "2022-07-10T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/07/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B062",
            "title": "读书笔记(六十二) 《如何精彩演讲》#4 演讲比赛复盘总结",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：对演讲和表达仍然在继续学习中，前面参加了一次线下的课程，最近参加了一次线上的演讲训练营，两次课程的最后都有比赛，一次是线下的比赛，一次是线上的比赛。我认真的完成了两次训练营的课程，同时把自己的所思所想，所练所感记录下来，总结、反思、调整、完善，为以后的演讲打好基础做好复盘，提升学习效率。概述：训练营分为5节课，都是看视频，看完会布置作业，按照作业上传视频，导师根据视频点评反馈，我们将反馈的内容运用到下一个课程。练习与反馈的好处是，我们能通过练习观察自己的演讲，通过反馈得知正确的改进方向，再通过练习来修补自己的缺失，这种学习方式非常有效。这也是生活和工作中，高效学习的方式方法。第一课讲紧张的原理和应对技巧，第二课讲故事的结构，第三课讲故事如何表现，第四课讲声音的变化，第五课讲肢体语言，最后一天是一个线上比赛，由评委导师打分给出比赛名次。整个过程7天内完成，由于我本身在前面练习过演讲一段时间，所以虽然强度比较大，但对这种学习方式和学习效率比较认可。同时最后一天的比赛吸引了我，因为我知道比赛是学习效率最高的机会，通过比赛我可以学习到更多东西，同时比赛的形式也能让自己有一个可见的目标。目录：  如何克服紧张  故事的结构力和故事力  语音语速语调技巧  表情、手势、移动技巧  比赛与准备内容：我用一节课一节课的内容来复述整个过程。首先是开营仪式，开营仪式为我们介绍了课程的大致内容和计划，并且为我们提供了一个介绍自我的机会。我把每次上台都视为一次机会，并绝不放过任何一次上台练习的机会，所以即使是开营仪式，我也会在上台介绍自己的时候拉满注意力。下面是5节课的经验和分享，每节课都凝结了导师的心血，所以每个字每句话都是他们的心得体会，细心琢磨就会发现其中的奥秘。如何克服紧张第一节课主要讲紧张的原理，从根源上去认知紧张，这对我们在面对紧张的时候，去克服紧张回更有效果。如果我们很理性的观察到自己身体的反应，就能做出调整，从而化解掉这个紧张。(杏仁体大脑原理图-图来源网络)那么原理是什么呢？当我们紧张时，脑袋中的杏仁体处于劫持状态，当它感知到危险时，会挣脱大脑的控制，向肾上腺发出警告，肾上腺素分泌，流向我们的全身，此时你的呼吸会急促，为你的血液补充氧气，你的心跳会加快，为你的行动做准备。你的血液会流向四肢，为战斗或逃跑做好准备，从而导致大脑失血。（《即兴演讲》书中有类似的生理原理）（压力下和正常脑部图-图来源网络）其生理反应表现为：当我们的大脑血液流网四肢的时候，我们的大脑就会一片空白，因此我们会忘了准备的内容。这就是杏仁体直接挣脱大脑，直接指挥身体的状态。简单说就是，我们人对危险情况启动的应激反应，是人的正常状态。一紧张血液流往了四肢，手脚乱动，手舞足蹈，站上舞台动来动去。（紧张大脑状态图-图来源网络）导师提出了，消除紧张的关键：消除陌生感三熟悉三熟悉，即熟悉环境（提前熟悉）、熟悉观众（台上台下连接观众）、熟悉内容（多次练习）一、在演讲前，我们要首先提前到达会场，熟悉环境，如果可以的话，与台上台下的人聊聊天，熟悉周围的环境。二、上台时，不要急着讲自己的内容，这样容易让自己处于陌生状态，容易紧张，要先跟大家互动一下，连接一下台上的人和台下的人，这样做的目的就是让自己熟悉这些人，与大家打成一片。三、熟悉内容，在上台前不断练习自己的稿子，可以通过读稿的方式来加深肌肉记忆。除了消除陌生感，我们还需要在舞台上用一些技巧来消除紧张。这个技巧实际上是消除观众的紧张的，只有观众放松了，我们才会放松，所以观众很重要。导师用三定来消除观众紧张，让观众在看和听同时保持放松状态，前面我们说了，只有观众放松了，我们才会轻松下来，紧张自然就不见了。三定三定，即身定（挺身站稳）、眼定（看的到稳）、笑定（保持微笑）一、身定，即挺身站稳，只有挺身站稳了，才能让大家看到精神抖擞的你，用积极自信的体态面对大家，是对大家的一种尊重。二、眼定，看人要稳，直接看着对方，时不时的切换看的对象，同时眼睛不要飘来飘去，显得慌张三、笑定，要保持微笑，让大家感觉到轻松自在，而不是板着脸让人难受。导师编了一首词，让大家好记住这些。身定：头顶一碗水，背靠一堵墙，胸提一公分，两腿一线直，手是一把刀，放在大腿的两侧。眼定：模糊看，或直视看着对方，练习时可以找个人与对方深情凝望5分钟，点视（看给予支持的人，线上时看镜头），扫视（注意停顿，并扫视全场）笑定：嘴角上扬成一条直线（做到极限，有种酸酸的感觉，习惯了就会更放松），可以用咬筷子方式练习说实话第一堂课很充实，让我知道了演讲紧张的原理以及如何去应对的具体技巧，我有一种“啊~原来是这样，我也可以通过练习来达到”的感觉。同时我通过原理与技巧的练习，每次练习时都注意三定，同时回忆起自己以前台上演讲时的表现，明显能感觉到自己在各个细节技巧上有所提升，感觉到自己可以通过这样的训练来达到自己理想的状态。这次的课让我对紧张有了更深层次的理解。故事的结构力和故事力第二、三节课连起来是一个整体，主要讲两个内容，故事的结构和内容。其目标是，告诉大家在台上，我们该如何讲好一个故事。在导师讲这些内容之前，我听过很多人介绍过如何讲故事的方法，并且自己专门买了一本书《如何讲好一个故事》来专门学习这门技巧，因此对这部分内容有自己的理解。（讲故事图-图来源网络）结构力首先，讲的顺序很重要，如果演讲没有顺序，那么全乱套了，大家听不懂，自己也很难记得自己讲到哪了。所以一般讲故事，都要有一个主线在，比如以时间为主线，比如以距离为主线，比如以地点为主线等等。我们常常以时间为主线较多，因为这样大家比较容易理解，比如以前发生了XXX，后来到了现在，发生了XXX。说到故事，其实我们每天都在讲故事，只是我们不知道。当我们讲话时，时常会用故事来表达自己的感想和当时的情景，有时候故事短，有时候故事长。同时我们讲故事时也是时好时坏，有时逻辑清晰有时混乱。如果我们能在平时，在重要的说话前，打个草稿，那么我们在说话时就会更加有掌控感，知道自己要说什么，该怎么说。同时，这样的草稿和练习，也给自己在平时工作和生活中，一个比较好的场景，让自己能够更好的去练习表达练习沟通，这就是聊天写稿，沟通写稿的意思。当然，更多的时候是没有时间打草稿的，而是即兴讲，那怎么办呢，也有对策，如果你每天讲故事，每天写故事的话，总会那么几个故事，你可以讲很多遍。所以想要故事讲的好，想要随口就来、张口就上的地步，你就要每天都在练习讲故事，把讲故事的能力深深印刻在自己肌肉里。（讲故事框架图）接着来说说故事内容本身，实际上，故事内容本身结构上有很多套路。比如说“勇难成，勇敢出发、艰难取胜、成长回归”是用的最多的一种，也可以“是什么、为什么、怎么办”，同时也可以是“结果、阻碍、努力、结果”等。都是值得借鉴的模式，这些模式让我们在说故事和准备故事时有了可以矫正的参考尺。拿“勇难成”举个例子：勇：我一想到高考承载着我未来的希望，是我通往梦想的桥梁，我就行动起来了，为了上好大学努力学习。难：可是经过几个月没日没夜的努力，自己的成绩依然没有变动，洁白的考试纸上赫然写着一个数字65分，我的脸色苍白。紧接着，我开始思考我的学习效率问题，终于我发现我练习的太快太多却没有复习和订正，这导致自己学了后面忘了前面。于是我开始放慢脚步，每次写完作业，考完试，在批改后都仔仔细细的订正和复习，让遗漏的知识点，一个个的挑出来逐项学习理解加深印象。终于期末考试结束了，我拿到批改过的考卷时，手里有些颤抖，眼里喊着泪水，我的努力没有白费，我得到了自己想要的分数，太棒了。成：我高高兴兴的把试卷拿回了家。这次的经历给了一个深刻的印象，很多时候我们都太快了，实际上快并不能代表什么，没有头脑的努力只会浪费精力和时间。这次的经历让我明白，只有当我们观察到自己的问题，分析问题、调整方向后，我们才能获得更有效的行动。拿“是什么、为什么、怎么办”举例子：是什么：2017年时我阅读了很多书，而且我发现我阅读的速度越来越快，同时发现我的阅读效率并不高，读了很多书但记不住，有时候连书名都忘了。为什么：阅读效率为什么会这么低呢？我一直在琢磨着。后来我发现，我读的书太快了，囫囵吞枣，就跟看小说一样，一页页翻过去，从眼睛里进，从耳朵里出，脑子过一遍然后就忘记了。怎么办：于是我特意找了三本关于如何阅读的书，其中包括《如何阅读》、《如何有效阅读》、《如何阅读一本书》，经过对阅读书籍技巧的学习，我开始注重阅读效率。比如，我开始培养自己在书上记笔记的习惯，每次看书时我都会在书本上写下自己的感想，记下与作者有共鸣的部分。同时，我开始用不同的阅读速度来对待不同类型的书籍，有的书不用细看因为知识点不是很深，快速阅读一遍就能快速总结出来书中的内容，而有的书则思想深刻需要我去细细品味。又比如，我会为每一本书写一篇文章，经典的书籍会写三四篇用于加深理解。再比如，我开始用演讲的方式输出书中所学，把自己所学的所理解的分享出来，跟大家一起学习同时加深我对这方面知识的理解。拿“结果、阻碍、努力、结果”举例子：结果：这些年经过我的学习和努力，我赢得了女儿的信任。阻碍：在女儿刚出生时那3年，我并不清楚如何当一个好爸爸，我还一直用管员工的方式来管孩子，所以那段时间孩子跟我相处的很不愉快。每天到家我问孩子的第一句话便是，今天听妈妈的话了吗？或者今天有学习功课吗？还时不时武力威慑孩子，这让孩子很痛苦，时常会选择逃避，同时感觉压力很大。我与女儿的关系很难融洽的相处。努力：于是我开始学习一些教育方面的知识。一开始我到处乱翻资料，有网上的评论，抖音上的资料，知乎上的介绍等等，看的我眼花缭乱，但一点都没学进去。于是开始看书，我找了《成长心理学》《自卑与超越》《终身成长》等来看，还觉得意犹未尽，又看了《非暴力沟通》《沟通的方法》等，发现书中的知识点和技巧与我现在当下的情况非常符合。我还为他们每本书写了一片总结文章，让自己的想法和感受沉淀下来，我对沟通和成长的知识理解更深刻了。我又一点点的落实技巧，比如我每个月给孩子写一封信，每封信都会录一个视频，跟孩子聊聊天讲讲我遇到的故事。结果：经过1年多的不断学习和努力，我和孩子的关系终于又开始亲密了，女儿很喜欢和我在一起，也喜欢跟我一起看书，一起学习。我赢得了女儿的信任。除了故事结构，故事本身内容也非常重要，只有故事内容吸引人，才能让故事体现出价值。因此，导师把这个“故事的吸引力”定义为故事力。故事力故事力表现为分布在三个地方，故事的开头，故事的内容，故事的收尾。要把故事讲好，首先讲话的开头很重要，可能并不是故事的开头，但一定是你演讲的开头。好的演讲的开头，能提起观众的兴趣，能吸引观众的注意力，能吊起观众的好奇心。总而言之就是吸引他们关注你下面的内容，这称为“龙头”。故事的内容上，我们不仅仅要考虑故事的结构，更我们同样要考虑到观众，考虑观众的兴趣点，考虑观众的思考点，考虑观众的共鸣点。只有从观众角度考虑故事的内容和编排，我们的演讲才能最大限度的发挥其效果。另外，我们在讲故事时也有技巧，这在《如何讲好一个故事》这本书的总结中我写过讲故事的关键。简单来说就是用五感法描述场景和细节，听觉、触觉、嗅觉、视觉、味觉，把这五感描述出来，与这五感无关的评判都去除，让观众发挥想象的空间，对故事的画面自由想象。最后故事的收尾也非常重要，一个好的收尾可以让演讲由差变好，由好变精彩。收尾是至关重要的环节，也是给观众留下最大印象的环节，因此要认真对待。导师说，这个叫“凤尾”，我们可以用很多种技巧来收尾，比如排比就很好。我拿最近一篇演讲稿的收尾来示范：最后我想告诉大家，其实生活和远方是可以兼顾的，虽然很辛苦，但却真的很值得，可能过程中，你会面对诸多的压力，诸多的困扰，但是请相信我，只要你坚持下去，一直朝着远方前进，前进、前进，我们就一定能够成为更美好的自己。其中“前进、前进、前进”三个重复词，让演讲的收尾变得很燃，鼓动了大家澎湃的心。语音语速语调技巧这一课时我的弱项，因为我站在演讲台上时，时常控制不了自己的音量和语气。我记得我最近一次在台上演讲时，就发现自己全程都用一个高音量在台上演讲，当我回顾自己的演讲时听的我鸡皮疙瘩都起来了，高音量就像是吵架一样很难听。这节课的内容非常适合我，对于我来说，语速、音量、语调都是需要锻炼的地方。（声音美化要点图）导师提出了核心观点：要富于变化，且要变化的合适。什么是富于变化且合适呢？它分为三个方面，语速、音量、语调。语速语速决定这段内容的基调，它有快节奏，慢节奏，快慢节奏融合的情况。我常常上台时会紧张，能从嘴巴里蹦出内容来已经非常不容易了，因此常常忽略语速。有一次上台，主持人给了我7分钟时间来讲我自己的故事，我为此准备了1300字左右的稿子，并且在台下已经背的滚瓜烂熟。上台后说完第一句话“大家晚上好”就观察到自己的脑袋紧绷，左右太阳穴上两条神经拉紧着，无法思考太多。这时我急切的想说稿子的内容，于是就像背书那样，文字内容急速的从我的嘴巴里冲了出来。不到5分钟，我就把1300字的内容全说完了，下面的观众一脸茫然。当时我并不以为然，我的敏感度还没有关注到语速上，所以感知不到速度带给我的影响，但观众的感觉和反应是实实在在的，结束后有点评人给我反馈，只顾着快速的输出完全没有顾及观众的感受。（语速变化图-图来源网络）举个节奏变化的例子：我们加快了脚本，三步并成两步走着，不一会就到达了港口，并且马不停蹄的上了船回到了房间。（快语速）这时的我们心中的石头才渐渐落下，眉头开始舒展，紧张的情绪慢慢舒缓。（慢语速）小明吐了口气，道“好惊险，差点没赶上”，天天回到，“如果有辆车就好了，这样我们可以慢慢来”。（中语速）此时，小天打开了窗户，只听见“轰轰轰”三声船鸣声，游轮开始出发了，但是没过多久，“咣机”震了一下，大家的心又被提上来了。（先慢后快）小明立刻推开门，朝船的西面望去，我们游轮尽然搁浅在了港口边。（先快后中）大家要注意，语速也是节奏，是演讲的关键点，我们不能一直快同样也不能一直慢，要记住我们提到过的核心：富于变化且合适。语音音量分为大、中、小三档，用来表达不同场景中的人物情绪和现场情景。举个例子，我们在表达激昂情绪时就会用大音量，特别是在演讲收尾时，我们时常需要做出一些行动呼吁，就需要大音量来带动观众的情绪。再举个例子，表达宁静安详的场景时就会用中音量，演讲中我们运用在叙述周围的环境周围的景物，例如我们在看日出，描写缓缓升起的太阳，或在办公室里环视着周围的布置等等。再举个例子，表达温柔，含蓄，谨慎时就会用到低音量，例如我轻轻的告诉身边的同事，台上的主持人是我初中同学。例如妻子双手轻轻的搭在我的肩上，凑到我的耳边低声说道“老公，我们出去吃吧”。（语音变化图-图来源网络）不同大小的音量表达了不同的情景，富于变化的音量给故事增添不少色彩，这会在演讲中给观众和自己非常强烈的印象。语调语调用来塑造语境，这方面我可以说完全没有经验，这次训练也是初步接触。语调分为三种，升调、平调、曲调。升调一般用在肯定、赞美、祝福等，例如，“你做的真棒！”，“你的未来会更美好！”，“太棒了吧，你刚才的那番话引起了大家共鸣”等等。平调一般用于陈述、庄严、冷淡等，例如，“新华社消息”，”这里是北京朝阳区中关村，我在2022年6月30日在此为大家报道”，“当前任务正在执行中”等等。曲调通常用于讽刺、厌恶等，例如，“你的吃干饭的吗”，“我们都在太阳底下干活，而你，却在办公室里躺着睡觉”，“他突然考了这么高的分数，会不会是作弊”等等。（语调变化图-图来源网络）语调随着内容的变化而变化，让我们在讲出情节的同时，能够身临其境的体会当时的氛围，让观众感受到并发挥想象空间。表情、手势、移动技巧以前对姿态了解的并不是很深刻，这是由于自己无法评估自己的姿态带给观众的感受。但自从自己开始复盘自己的演讲视频后，逐渐发现姿态的重要性，一个好的姿态呈现给别人的感觉是完全不一样的，即是你不说话，或者说错了话，好姿态与坏姿态给观众的感受时完全两个样子，好姿态给观众感受时优雅从容，坏姿态给观众感受是“蹩脚”“糟心”甚至“猥琐”。因此后来我特别在意姿态，但始终没有养成好习惯，这次训练让我能在这方面得到提高，把好姿态融入到习惯中去，而且生活和工作中也需要好姿态。（表情手势动作要点图）导师说这是“台风”，从视觉方面呈现出，我们的风度和气质。其实在第一课里说过“三定”就是姿态里的技巧，我们在台上时身体要站稳挺直、眼睛要扫视观众、脸上要有微笑，这不仅让观众在视觉上有很好的体验，感受到我们站台上的优雅，而且我们自身在保持这种姿态时也会给自己一个非常大的信心，为后面即将进行的演讲打好基础。导师说台风包括三部分：面部表情，手势，移动面部表情面部表情关键是，脸部要放松，切记僵硬，可以时不时微笑，也可以做各种与表达内容相匹配的表情动作。我时常能感觉到在上台时，脸部肌肉的抽搐，这是我紧张和紧绷导致的。我试图去化解很多词，但任然掌握的不熟练。紧张情绪的化解方法我们在前面第一部分内容中已经提及，可以回头去看下三熟三定部分的内容，我认为这是非常好的化解紧张的技巧，同时是基础能力也是核心能力。我清晰的记得我最近一次上台分享我的技术，也就是上周的事，上台后由于过分紧张且没有很好的运用技巧去化解自己的紧张，导致我整个演讲都语速超快，逻辑混乱，会前想好要着重强调的内容一个没讲，还把不该讲的讲进去了。回头看了我自己录制视频（我在分享ppt时，特意用电脑录制了我上半身的动作和表情），观察到自己的表情僵硬且死板，脸上没有挂着一丝笑容，从脸部表情上就能感觉到我的紧张和不知所措。所以我想说，面部表情真的非常关键，脸部的肌肉放不放松这是完全的两种状态。手势手势是我在演讲时一直在关注的东西，可惜前面没有去系统性的学习，导致我在平时讲话和演讲时手势都是乱的，常常与内容不符，观众看到的只是手舞足蹈的样子，这导致两个结果，第一发挥不稳定，当不知道该用什么手势和动作表达时就会乱作一团，第二呈现混乱，该有动作时没有动作，不该有动作时乱动，内容与动作不匹配，观众的注意力无法集中。（手势图-图来源网络）指、掌、拳导师说手势可分为，指、掌、拳。实际上，手势的作用非常大，可以丰富表达的同时也更有趣了。手势在恰当的时候可以弥补我们口语的不足，为情节内容增添色彩和动感。它不仅可以激发听众的热情，还能加深观众对内容的理解。导师说可以把做手势的区域拆分一下，上去、中区、下区。上区，表达激昂慷慨的情况中区，叙事事物，说明事理，较为平静的表达下区，表达负面情绪，憎恨、反对、批评、嘲讽等举例上区手势，“相信我，我们一定能赢！（握拳举手）”，“我们的目标是奔向全球，奔向世界（双手举头顶）”。举例中区手势，“我走到了经理室门前，深深吸了口气，自己倒数3、2、1（拿出手指笔画321）”，“我看到她的眼睛里泪水在打转（模拟打转的手势），手上还一刻不停的在缝补衣裳（模拟缝补的手势）”。举例下区手势，“他们就是这样践踏我们的尊严的（手指向下的手势）”，“那能怎么办，我已经无计可施了（两手掌摊开来）”，“你还是走吧（向外挥手），这里不需要你（左右摇手）”。三个区域的手势对应上表达的场景和情绪，让内容更添色彩。手势六道菜记忆法（手势图-图来源网络）导师用六道菜的记忆法，解剖了我们做手势时的动作，即点菜、切菜、锤菜、炒菜、感恩菜。点菜，与身子保持45度，伸出手指，1、2、3切菜，拇指与手掌垂直，上手臂和身子45度锤菜，与身子保持45度，上锤、下锤炒菜，从外到内，从下到上感恩菜，摸着胸口这是手势基本功，单手点、单手或双手切、单手或双手锤、两手炒，摸胸口，我们可以在平时的演讲中在做手势时多注意练习，切记死板的运用，而是灵活的组合和变化。还记得我们说的核心吗，富于变化且合适。举例台上的手势配合内容：点菜，  “我现在要讲3个方面内容（手指1、2、3），第一…第二…第三…”，  “我们的业绩每年都在上升（食指手指向上）”，  “希望就在前方（食指向前）”，切菜，  “从12年前的杭州，到8年前的上海，再到3年前的深圳，我一直在不断努力的去寻找上升通道（手势从12切到8切到3）”，  “保持节奏，稳住情绪，步步向前（切手势从上到中到切移动）”，  “你过去的思维方式和现在的思维方式已经完全不同了（切手势从左移动到中间位置）”，锤菜，  “我们能挺的过去（上方做锤手势）”，  “我可不是个轻易服输的人（中间做锤手势）”，炒菜,  “这是一个相辅相成的过程（顺时针炒菜）”，  “工作就是修行，内修外炼（顺时针炒菜）”，感恩菜，  “他的一举一动我都看在眼里，我很感动（摸胸口）”，  “我带着喜悦的心情踏上了回杭州的火车（摸胸口）”，  “他从我侧面走过没有理我，我很沮丧，心里想着我该怎么办（摸胸口）”，手势除了配合内容外，还可以用于表达情绪的强弱，即调整手势的强弱，如：刚强的风格（迅速有力），温柔的风格（缓慢优雅）。注意：舞台上不能用手指指着观众，可以用上菜手势请观众。移动步伐我以前在舞台上一直会有来回走动的习惯，这是我的一个坏习惯，我通常会用不停来回走动的方式来回想我想讲的内容，或思考我想讲的内容。但我后来发现，这个习惯非常不好，首先不停的在观众眼前幌来幌去，给观众的视觉体验很差，其次让人感觉我没有准备的充分。所以后来我不再走来走去去了，稳稳的站着讲，虽然培养这个习惯并不容易，但稳稳的站着讲也有问题。没有动感，让人觉得死板。最后才领悟到前面说的关键，要富于变化且合适，不要乱动也不要不动，要根据内容需要动，下面就来说说移动的技巧。（步伐图-图来源网络）上台五步走导师说上台可以拆分成五步，即：起身、上台、致敬、交接、开场，下场。起身稳健，起身时不要轻佻这会让人有随意的印象，要时刻准备着，时刻有相机对准的准备，稳健让人看着舒服。上台注意台阶，上台由于紧张、路滑等原因，时常容易绊倒，因此我们要准备一些绊倒的句子，这样不仅巧妙化解了尴尬同时也能为自己加分。挥手致意，眼神传情，（这是大方，得体的表现，我们在压力下表现的越得体，就越能体现我们的综合素质）。微笑示意，主动接麦，（这是大方，得体的表现，我们在压力下表现的越得体，就越能体现我们的综合素质）。扫视震场，一鸣惊人，上台不必急着讲内容，这会让自己过早进入紧张状态，我们可以先练习三定再扫视全场，说出的第一句话一定要一鸣惊人，因为第一句话是大家的注意力最集中的时候。下场时，挥手示意，眼神传情，得体收尾。这五步不容易，拥有大量丰富经验的人有时也做不好，或出意外或有遗漏，可想而知，基础能力（核心能力）有多重要。舞台走动当我在舞台上走动时，时常不知道我为什么要走动，以前我的走动都是随意的，没有目的的。这导致一个问题，观众弄不清我为什么要走动，即使我的内容吸引了观众的注意力，同时他们的注意力会随时被我的小动作分散，最后被我的走动弄的精疲力劲，失去兴趣。所以走动也有技巧，也需要符合内容和情节以及目的的需要。导师说，走动技巧有，横走，纵走，侧身跨步。当我们需要观众记住内容的时候，横着走，比如，强调知识点当我们需要拉近与听众距离的时候，纵着走，比如，哪位伙伴能回答这个问题当我们模仿不同角色对话时，可以左右侧身来跨步来模拟，比如，模仿两人对话时，左右侧身注意：不要动太多，容易引起视觉疲劳，忽视了内容。比赛与准备（比赛图-图来源网络）小树林演讲比赛是比较正规的，有主持人有评委有时间官。比赛给人的历练最大，提高提升的最快，前面如果实在太忙可以不参加，但比赛一定要全力以赴，他能一下子拔高你的好几级。我曾有一次在小树林精英训练营中，由于实在太忙，没时间做前面的培训，但依然硬着头皮来到了最后的比赛日。比赛日前我还没写稿，逼着自己早上6点多起床，写演讲稿，写到9点半，差不多了，跟导师请教下演讲稿的调整和更改。然后开始练习和演绎演讲稿，顾不上吃饭，中途为了让自己形象更好一些，回去换了件衣服，来回路上都不忘在练稿，就这样折腾到下午2点半开始上台演讲。上台时，我脑子里转的都是如何把我学到的技巧运用到这次演讲中去，我豁出去了，所有我能想到的技巧都使出来，听朋友们说，相当精彩，可惜最后超时无法参与评分（反面教材）。最后我很清楚的看到自己收获非常大，有种蜕变的感觉，这是我参加现场比赛努力认真对待的结果。最后的最后我对我的比赛视频进行了复盘，并对其关键问题做了调整和完善，运用在未来的（比赛要点图）赛前准备我经历过几次比赛，所以对比赛前的准备有自己的心得，下面我来阐述一下。  1.比赛前首当其冲的是打磨演讲和讲稿，我们要花大量时间来想结构、故事、过渡和情节描述。  2.其次是练习演讲，把所学的内容全部运用进去，包括姿态、动作、声音、故事、表情等。练习是时务必把手、眼、声音、走的技巧运用进去，用情景再现的方式去演绎故事和场景。  3.再者上台前，我喜欢用冥想的方式先让自己冷静下来，让紧张的情绪得到舒缓。  4.接着，我会不断的念演讲稿，这时我肯定已经背了很多遍了不用再背了，就用念稿的方式来增加脸部的肌肉记忆。  5.最后上台前3分钟，我喜欢不停的踱步，让自己保持兴奋且不致于过度兴奋。如果你没有比赛经验可以参考这份准备顺序，如果有已经有比赛经验则可以参考这份提高自己的赛前准备效率。演讲稿大纲我举例最近一次比赛演讲稿的大纲，讲的是我在上海时的一段经历。大纲：  1.开头，问题 + 我的感受  2.刚进入公司，很兴奋 + 忙碌  3.项目成型的同时发现问题  4.谋求转型但转型出现问题  5.描述自己如何转型，工作中争取时间，疲惫但坚持着  6.转型成功，把握机会，获得认可，达成目标  7.发起感悟，虽然艰辛但很值得，努力前进，终获新生已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485456&amp;idx=1&amp;sn=a69f45ddb80b9c31bd79c9eb9cfb84e3&amp;chksm=fc226d17cb55e4016569080d868884610cd9fc49c2abba0ac7cb3e7eafbd19fa672201a53349&amp;token=1541713099&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>对演讲和表达仍然在继续学习中，前面参加了一次线下的课程，最近参加了一次线上的演讲训练营，两次课程的最后都有比赛，一次是线下的比赛，一次是线上的比赛。</p><p>我认真的完成了两次训练营的课程，同时把自己的所思所想，所练所感记录下来，总结、反思、调整、完善，为以后的演讲打好基础做好复盘，提升学习效率。</p><h1 id=\"概述\">概述：</h1><p>训练营分为5节课，都是看视频，看完会布置作业，按照作业上传视频，导师根据视频点评反馈，我们将反馈的内容运用到下一个课程。</p><p>练习与反馈的好处是，我们能通过练习观察自己的演讲，通过反馈得知正确的改进方向，再通过练习来修补自己的缺失，这种学习方式非常有效。这也是生活和工作中，高效学习的方式方法。</p><p>第一课讲紧张的原理和应对技巧，第二课讲故事的结构，第三课讲故事如何表现，第四课讲声音的变化，第五课讲肢体语言，最后一天是一个线上比赛，由评委导师打分给出比赛名次。</p><p>整个过程7天内完成，由于我本身在前面练习过演讲一段时间，所以虽然强度比较大，但对这种学习方式和学习效率比较认可。同时最后一天的比赛吸引了我，因为我知道比赛是学习效率最高的机会，通过比赛我可以学习到更多东西，同时比赛的形式也能让自己有一个可见的目标。</p><h1 id=\"目录\">目录：</h1><ul>  <li>如何克服紧张</li>  <li>故事的结构力和故事力</li>  <li>语音语速语调技巧</li>  <li>表情、手势、移动技巧</li>  <li>比赛与准备</li></ul><h1 id=\"内容\">内容：</h1><p>我用一节课一节课的内容来复述整个过程。</p><p>首先是开营仪式，开营仪式为我们介绍了课程的大致内容和计划，并且为我们提供了一个介绍自我的机会。我把每次上台都视为一次机会，并绝不放过任何一次上台练习的机会，所以即使是开营仪式，我也会在上台介绍自己的时候拉满注意力。</p><p>下面是5节课的经验和分享，每节课都凝结了导师的心血，所以每个字每句话都是他们的心得体会，细心琢磨就会发现其中的奥秘。</p><h1 id=\"如何克服紧张\">如何克服紧张</h1><p>第一节课主要讲紧张的原理，从根源上去认知紧张，这对我们在面对紧张的时候，去克服紧张回更有效果。如果我们很理性的观察到自己身体的反应，就能做出调整，从而化解掉这个紧张。</p><p>(杏仁体大脑原理图-图来源网络)</p><p>那么原理是什么呢？</p><p>当我们紧张时，脑袋中的杏仁体处于劫持状态，当它感知到危险时，会挣脱大脑的控制，向肾上腺发出警告，肾上腺素分泌，流向我们的全身，此时你的呼吸会急促，为你的血液补充氧气，你的心跳会加快，为你的行动做准备。你的血液会流向四肢，为战斗或逃跑做好准备，从而导致大脑失血。（《即兴演讲》书中有类似的生理原理）</p><p>（压力下和正常脑部图-图来源网络）</p><p>其生理反应表现为：</p><p>当我们的大脑血液流网四肢的时候，我们的大脑就会一片空白，因此我们会忘了准备的内容。这就是杏仁体直接挣脱大脑，直接指挥身体的状态。简单说就是，我们人对危险情况启动的应激反应，是人的正常状态。一紧张血液流往了四肢，手脚乱动，手舞足蹈，站上舞台动来动去。</p><p>（紧张大脑状态图-图来源网络）</p><p>导师提出了，消除紧张的关键：消除陌生感</p><h2 id=\"三熟悉\">三熟悉</h2><p>三熟悉，即熟悉环境（提前熟悉）、熟悉观众（台上台下连接观众）、熟悉内容（多次练习）</p><p>一、在演讲前，我们要首先提前到达会场，熟悉环境，如果可以的话，与台上台下的人聊聊天，熟悉周围的环境。</p><p>二、上台时，不要急着讲自己的内容，这样容易让自己处于陌生状态，容易紧张，要先跟大家互动一下，连接一下台上的人和台下的人，这样做的目的就是让自己熟悉这些人，与大家打成一片。</p><p>三、熟悉内容，在上台前不断练习自己的稿子，可以通过读稿的方式来加深肌肉记忆。</p><p>除了消除陌生感，我们还需要在舞台上用一些技巧来消除紧张。这个技巧实际上是消除观众的紧张的，只有观众放松了，我们才会放松，所以观众很重要。导师用三定来消除观众紧张，让观众在看和听同时保持放松状态，前面我们说了，只有观众放松了，我们才会轻松下来，紧张自然就不见了。</p><h2 id=\"三定\">三定</h2><p>三定，即身定（挺身站稳）、眼定（看的到稳）、笑定（保持微笑）</p><p>一、身定，即挺身站稳，只有挺身站稳了，才能让大家看到精神抖擞的你，用积极自信的体态面对大家，是对大家的一种尊重。</p><p>二、眼定，看人要稳，直接看着对方，时不时的切换看的对象，同时眼睛不要飘来飘去，显得慌张</p><p>三、笑定，要保持微笑，让大家感觉到轻松自在，而不是板着脸让人难受。</p><p>导师编了一首词，让大家好记住这些。</p><p>身定：头顶一碗水，背靠一堵墙，胸提一公分，两腿一线直，手是一把刀，放在大腿的两侧。</p><p>眼定：模糊看，或直视看着对方，练习时可以找个人与对方深情凝望5分钟，点视（看给予支持的人，线上时看镜头），扫视（注意停顿，并扫视全场）</p><p>笑定：嘴角上扬成一条直线（做到极限，有种酸酸的感觉，习惯了就会更放松），可以用咬筷子方式练习</p><p>说实话第一堂课很充实，让我知道了演讲紧张的原理以及如何去应对的具体技巧，我有一种“啊~原来是这样，我也可以通过练习来达到”的感觉。</p><p>同时我通过原理与技巧的练习，每次练习时都注意三定，同时回忆起自己以前台上演讲时的表现，明显能感觉到自己在各个细节技巧上有所提升，感觉到自己可以通过这样的训练来达到自己理想的状态。</p><p>这次的课让我对紧张有了更深层次的理解。</p><h1 id=\"故事的结构力和故事力\">故事的结构力和故事力</h1><p>第二、三节课连起来是一个整体，主要讲两个内容，故事的结构和内容。其目标是，告诉大家在台上，我们该如何讲好一个故事。</p><p>在导师讲这些内容之前，我听过很多人介绍过如何讲故事的方法，并且自己专门买了一本书《如何讲好一个故事》来专门学习这门技巧，因此对这部分内容有自己的理解。</p><p>（讲故事图-图来源网络）</p><h2 id=\"结构力\">结构力</h2><p>首先，讲的顺序很重要，如果演讲没有顺序，那么全乱套了，大家听不懂，自己也很难记得自己讲到哪了。所以一般讲故事，都要有一个主线在，比如以时间为主线，比如以距离为主线，比如以地点为主线等等。我们常常以时间为主线较多，因为这样大家比较容易理解，比如以前发生了XXX，后来到了现在，发生了XXX。</p><p>说到故事，其实我们每天都在讲故事，只是我们不知道。当我们讲话时，时常会用故事来表达自己的感想和当时的情景，有时候故事短，有时候故事长。同时我们讲故事时也是时好时坏，有时逻辑清晰有时混乱。如果我们能在平时，在重要的说话前，打个草稿，那么我们在说话时就会更加有掌控感，知道自己要说什么，该怎么说。</p><p>同时，这样的草稿和练习，也给自己在平时工作和生活中，一个比较好的场景，让自己能够更好的去练习表达练习沟通，这就是聊天写稿，沟通写稿的意思。</p><p>当然，更多的时候是没有时间打草稿的，而是即兴讲，那怎么办呢，也有对策，如果你每天讲故事，每天写故事的话，总会那么几个故事，你可以讲很多遍。</p><p>所以想要故事讲的好，想要随口就来、张口就上的地步，你就要每天都在练习讲故事，把讲故事的能力深深印刻在自己肌肉里。</p><p>（讲故事框架图）</p><p>接着来说说故事内容本身，实际上，故事内容本身结构上有很多套路。</p><p>比如说“勇难成，勇敢出发、艰难取胜、成长回归”是用的最多的一种，也可以“是什么、为什么、怎么办”，同时也可以是“结果、阻碍、努力、结果”等。都是值得借鉴的模式，这些模式让我们在说故事和准备故事时有了可以矫正的参考尺。</p><p>拿“勇难成”举个例子：</p><h3 id=\"勇\">勇：</h3><p>我一想到高考承载着我未来的希望，是我通往梦想的桥梁，我就行动起来了，为了上好大学努力学习。</p><h3 id=\"难\">难：</h3><p>可是经过几个月没日没夜的努力，自己的成绩依然没有变动，洁白的考试纸上赫然写着一个数字65分，我的脸色苍白。紧接着，我开始思考我的学习效率问题，终于我发现我练习的太快太多却没有复习和订正，这导致自己学了后面忘了前面。于是我开始放慢脚步，每次写完作业，考完试，在批改后都仔仔细细的订正和复习，让遗漏的知识点，一个个的挑出来逐项学习理解加深印象。终于期末考试结束了，我拿到批改过的考卷时，手里有些颤抖，眼里喊着泪水，我的努力没有白费，我得到了自己想要的分数，太棒了。</p><h3 id=\"成\">成：</h3><p>我高高兴兴的把试卷拿回了家。这次的经历给了一个深刻的印象，很多时候我们都太快了，实际上快并不能代表什么，没有头脑的努力只会浪费精力和时间。这次的经历让我明白，只有当我们观察到自己的问题，分析问题、调整方向后，我们才能获得更有效的行动。</p><p>拿“是什么、为什么、怎么办”举例子：</p><h3 id=\"是什么\">是什么：</h3><p>2017年时我阅读了很多书，而且我发现我阅读的速度越来越快，同时发现我的阅读效率并不高，读了很多书但记不住，有时候连书名都忘了。</p><h3 id=\"为什么\">为什么：</h3><p>阅读效率为什么会这么低呢？我一直在琢磨着。后来我发现，我读的书太快了，囫囵吞枣，就跟看小说一样，一页页翻过去，从眼睛里进，从耳朵里出，脑子过一遍然后就忘记了。</p><h3 id=\"怎么办\">怎么办：</h3><p>于是我特意找了三本关于如何阅读的书，其中包括《如何阅读》、《如何有效阅读》、《如何阅读一本书》，经过对阅读书籍技巧的学习，我开始注重阅读效率。比如，我开始培养自己在书上记笔记的习惯，每次看书时我都会在书本上写下自己的感想，记下与作者有共鸣的部分。同时，我开始用不同的阅读速度来对待不同类型的书籍，有的书不用细看因为知识点不是很深，快速阅读一遍就能快速总结出来书中的内容，而有的书则思想深刻需要我去细细品味。又比如，我会为每一本书写一篇文章，经典的书籍会写三四篇用于加深理解。再比如，我开始用演讲的方式输出书中所学，把自己所学的所理解的分享出来，跟大家一起学习同时加深我对这方面知识的理解。</p><p>拿“结果、阻碍、努力、结果”举例子：</p><h3 id=\"结果\">结果：</h3><p>这些年经过我的学习和努力，我赢得了女儿的信任。</p><h3 id=\"阻碍\">阻碍：</h3><p>在女儿刚出生时那3年，我并不清楚如何当一个好爸爸，我还一直用管员工的方式来管孩子，所以那段时间孩子跟我相处的很不愉快。每天到家我问孩子的第一句话便是，今天听妈妈的话了吗？或者今天有学习功课吗？还时不时武力威慑孩子，这让孩子很痛苦，时常会选择逃避，同时感觉压力很大。我与女儿的关系很难融洽的相处。</p><h3 id=\"努力\">努力：</h3><p>于是我开始学习一些教育方面的知识。一开始我到处乱翻资料，有网上的评论，抖音上的资料，知乎上的介绍等等，看的我眼花缭乱，但一点都没学进去。于是开始看书，我找了《成长心理学》《自卑与超越》《终身成长》等来看，还觉得意犹未尽，又看了《非暴力沟通》《沟通的方法》等，发现书中的知识点和技巧与我现在当下的情况非常符合。我还为他们每本书写了一片总结文章，让自己的想法和感受沉淀下来，我对沟通和成长的知识理解更深刻了。我又一点点的落实技巧，比如我每个月给孩子写一封信，每封信都会录一个视频，跟孩子聊聊天讲讲我遇到的故事。</p><h3 id=\"结果-1\">结果：</h3><p>经过1年多的不断学习和努力，我和孩子的关系终于又开始亲密了，女儿很喜欢和我在一起，也喜欢跟我一起看书，一起学习。我赢得了女儿的信任。</p><p>除了故事结构，故事本身内容也非常重要，只有故事内容吸引人，才能让故事体现出价值。</p><p>因此，导师把这个“故事的吸引力”定义为故事力。</p><h2 id=\"故事力\">故事力</h2><p>故事力表现为分布在三个地方，故事的开头，故事的内容，故事的收尾。</p><p>要把故事讲好，首先讲话的开头很重要，可能并不是故事的开头，但一定是你演讲的开头。</p><p>好的演讲的开头，能提起观众的兴趣，能吸引观众的注意力，能吊起观众的好奇心。</p><p>总而言之就是吸引他们关注你下面的内容，这称为“龙头”。</p><p>故事的内容上，我们不仅仅要考虑故事的结构，更我们同样要考虑到观众，考虑观众的兴趣点，考虑观众的思考点，考虑观众的共鸣点。只有从观众角度考虑故事的内容和编排，我们的演讲才能最大限度的发挥其效果。</p><p>另外，我们在讲故事时也有技巧，这在《如何讲好一个故事》这本书的总结中我写过讲故事的关键。</p><p>简单来说就是用五感法描述场景和细节，听觉、触觉、嗅觉、视觉、味觉，把这五感描述出来，与这五感无关的评判都去除，让观众发挥想象的空间，对故事的画面自由想象。</p><p>最后故事的收尾也非常重要，一个好的收尾可以让演讲由差变好，由好变精彩。</p><p>收尾是至关重要的环节，也是给观众留下最大印象的环节，因此要认真对待。</p><p>导师说，这个叫“凤尾”，我们可以用很多种技巧来收尾，比如排比就很好。</p><p>我拿最近一篇演讲稿的收尾来示范：</p><p>最后我想告诉大家，其实生活和远方是可以兼顾的，虽然很辛苦，但却真的很值得，可能过程中，你会面对诸多的压力，诸多的困扰，但是请相信我，只要你坚持下去，一直朝着远方前进，前进、前进，我们就一定能够成为更美好的自己。</p><p>其中“前进、前进、前进”三个重复词，让演讲的收尾变得很燃，鼓动了大家澎湃的心。</p><h1 id=\"语音语速语调技巧\">语音语速语调技巧</h1><p>这一课时我的弱项，因为我站在演讲台上时，时常控制不了自己的音量和语气。</p><p>我记得我最近一次在台上演讲时，就发现自己全程都用一个高音量在台上演讲，当我回顾自己的演讲时听的我鸡皮疙瘩都起来了，高音量就像是吵架一样很难听。</p><p>这节课的内容非常适合我，对于我来说，语速、音量、语调都是需要锻炼的地方。</p><p>（声音美化要点图）</p><p>导师提出了核心观点：要富于变化，且要变化的合适。</p><p>什么是富于变化且合适呢？它分为三个方面，语速、音量、语调。</p><h2 id=\"语速\">语速</h2><p>语速决定这段内容的基调，它有快节奏，慢节奏，快慢节奏融合的情况。</p><p>我常常上台时会紧张，能从嘴巴里蹦出内容来已经非常不容易了，因此常常忽略语速。</p><p>有一次上台，主持人给了我7分钟时间来讲我自己的故事，我为此准备了1300字左右的稿子，并且在台下已经背的滚瓜烂熟。</p><p>上台后说完第一句话“大家晚上好”就观察到自己的脑袋紧绷，左右太阳穴上两条神经拉紧着，无法思考太多。</p><p>这时我急切的想说稿子的内容，于是就像背书那样，文字内容急速的从我的嘴巴里冲了出来。不到5分钟，我就把1300字的内容全说完了，下面的观众一脸茫然。</p><p>当时我并不以为然，我的敏感度还没有关注到语速上，所以感知不到速度带给我的影响，但观众的感觉和反应是实实在在的，结束后有点评人给我反馈，只顾着快速的输出完全没有顾及观众的感受。</p><p>（语速变化图-图来源网络）</p><p>举个节奏变化的例子：</p><p>我们加快了脚本，三步并成两步走着，不一会就到达了港口，并且马不停蹄的上了船回到了房间。（快语速）</p><p>这时的我们心中的石头才渐渐落下，眉头开始舒展，紧张的情绪慢慢舒缓。（慢语速）</p><p>小明吐了口气，道“好惊险，差点没赶上”，天天回到，“如果有辆车就好了，这样我们可以慢慢来”。（中语速）</p><p>此时，小天打开了窗户，只听见“轰轰轰”三声船鸣声，游轮开始出发了，但是没过多久，“咣机”震了一下，大家的心又被提上来了。（先慢后快）</p><p>小明立刻推开门，朝船的西面望去，我们游轮尽然搁浅在了港口边。（先快后中）</p><p>大家要注意，语速也是节奏，是演讲的关键点，我们不能一直快同样也不能一直慢，要记住我们提到过的核心：富于变化且合适。</p><h2 id=\"语音\">语音</h2><p>音量分为大、中、小三档，用来表达不同场景中的人物情绪和现场情景。</p><p>举个例子，我们在表达激昂情绪时就会用大音量，特别是在演讲收尾时，我们时常需要做出一些行动呼吁，就需要大音量来带动观众的情绪。</p><p>再举个例子，表达宁静安详的场景时就会用中音量，演讲中我们运用在叙述周围的环境周围的景物，例如我们在看日出，描写缓缓升起的太阳，或在办公室里环视着周围的布置等等。</p><p>再举个例子，表达温柔，含蓄，谨慎时就会用到低音量，例如我轻轻的告诉身边的同事，台上的主持人是我初中同学。例如妻子双手轻轻的搭在我的肩上，凑到我的耳边低声说道“老公，我们出去吃吧”。</p><p>（语音变化图-图来源网络）</p><p>不同大小的音量表达了不同的情景，富于变化的音量给故事增添不少色彩，这会在演讲中给观众和自己非常强烈的印象。</p><h2 id=\"语调\">语调</h2><p>语调用来塑造语境，这方面我可以说完全没有经验，这次训练也是初步接触。</p><p>语调分为三种，升调、平调、曲调。</p><p>升调一般用在肯定、赞美、祝福等，例如，“你做的真棒！”，“你的未来会更美好！”，“太棒了吧，你刚才的那番话引起了大家共鸣”等等。</p><p>平调一般用于陈述、庄严、冷淡等，例如，“新华社消息”，”这里是北京朝阳区中关村，我在2022年6月30日在此为大家报道”，“当前任务正在执行中”等等。</p><p>曲调通常用于讽刺、厌恶等，例如，“你的吃干饭的吗”，“我们都在太阳底下干活，而你，却在办公室里躺着睡觉”，“他突然考了这么高的分数，会不会是作弊”等等。</p><p>（语调变化图-图来源网络）</p><p>语调随着内容的变化而变化，让我们在讲出情节的同时，能够身临其境的体会当时的氛围，让观众感受到并发挥想象空间。</p><h1 id=\"表情手势移动技巧\">表情、手势、移动技巧</h1><p>以前对姿态了解的并不是很深刻，这是由于自己无法评估自己的姿态带给观众的感受。</p><p>但自从自己开始复盘自己的演讲视频后，逐渐发现姿态的重要性，一个好的姿态呈现给别人的感觉是完全不一样的，即是你不说话，或者说错了话，好姿态与坏姿态给观众的感受时完全两个样子，好姿态给观众感受时优雅从容，坏姿态给观众感受是“蹩脚”“糟心”甚至“猥琐”。因此后来我特别在意姿态，但始终没有养成好习惯，这次训练让我能在这方面得到提高，把好姿态融入到习惯中去，而且生活和工作中也需要好姿态。</p><p>（表情手势动作要点图）</p><p>导师说这是“台风”，从视觉方面呈现出，我们的风度和气质。</p><p>其实在第一课里说过“三定”就是姿态里的技巧，我们在台上时身体要站稳挺直、眼睛要扫视观众、脸上要有微笑，这不仅让观众在视觉上有很好的体验，感受到我们站台上的优雅，而且我们自身在保持这种姿态时也会给自己一个非常大的信心，为后面即将进行的演讲打好基础。</p><h3 id=\"导师说台风包括三部分面部表情手势移动\">导师说台风包括三部分：面部表情，手势，移动</h3><h2 id=\"面部表情\">面部表情</h2><p>面部表情关键是，脸部要放松，切记僵硬，可以时不时微笑，也可以做各种与表达内容相匹配的表情动作。</p><p>我时常能感觉到在上台时，脸部肌肉的抽搐，这是我紧张和紧绷导致的。我试图去化解很多词，但任然掌握的不熟练。</p><p>紧张情绪的化解方法我们在前面第一部分内容中已经提及，可以回头去看下三熟三定部分的内容，我认为这是非常好的化解紧张的技巧，同时是基础能力也是核心能力。</p><p>我清晰的记得我最近一次上台分享我的技术，也就是上周的事，上台后由于过分紧张且没有很好的运用技巧去化解自己的紧张，导致我整个演讲都语速超快，逻辑混乱，会前想好要着重强调的内容一个没讲，还把不该讲的讲进去了。回头看了我自己录制视频（我在分享ppt时，特意用电脑录制了我上半身的动作和表情），观察到自己的表情僵硬且死板，脸上没有挂着一丝笑容，从脸部表情上就能感觉到我的紧张和不知所措。</p><p>所以我想说，面部表情真的非常关键，脸部的肌肉放不放松这是完全的两种状态。</p><h2 id=\"手势\">手势</h2><p>手势是我在演讲时一直在关注的东西，可惜前面没有去系统性的学习，导致我在平时讲话和演讲时手势都是乱的，常常与内容不符，观众看到的只是手舞足蹈的样子，这导致两个结果，第一发挥不稳定，当不知道该用什么手势和动作表达时就会乱作一团，第二呈现混乱，该有动作时没有动作，不该有动作时乱动，内容与动作不匹配，观众的注意力无法集中。</p><p>（手势图-图来源网络）</p><h2 id=\"指掌拳\">指、掌、拳</h2><p>导师说手势可分为，指、掌、拳。</p><p>实际上，手势的作用非常大，可以丰富表达的同时也更有趣了。</p><p>手势在恰当的时候可以弥补我们口语的不足，为情节内容增添色彩和动感。</p><p>它不仅可以激发听众的热情，还能加深观众对内容的理解。</p><p>导师说可以把做手势的区域拆分一下，上去、中区、下区。</p><p>上区，表达激昂慷慨的情况</p><p>中区，叙事事物，说明事理，较为平静的表达</p><p>下区，表达负面情绪，憎恨、反对、批评、嘲讽等</p><p>举例上区手势，</p><p>“相信我，我们一定能赢！（握拳举手）”，</p><p>“我们的目标是奔向全球，奔向世界（双手举头顶）”。</p><p>举例中区手势，</p><p>“我走到了经理室门前，深深吸了口气，自己倒数3、2、1（拿出手指笔画321）”，</p><p>“我看到她的眼睛里泪水在打转（模拟打转的手势），手上还一刻不停的在缝补衣裳（模拟缝补的手势）”。</p><p>举例下区手势，</p><p>“他们就是这样践踏我们的尊严的（手指向下的手势）”，</p><p>“那能怎么办，我已经无计可施了（两手掌摊开来）”，</p><p>“你还是走吧（向外挥手），这里不需要你（左右摇手）”。</p><p>三个区域的手势对应上表达的场景和情绪，让内容更添色彩。</p><h2 id=\"手势六道菜记忆法\">手势六道菜记忆法</h2><p>（手势图-图来源网络）</p><p>导师用六道菜的记忆法，解剖了我们做手势时的动作，即点菜、切菜、锤菜、炒菜、感恩菜。</p><p>点菜，与身子保持45度，伸出手指，1、2、3</p><p>切菜，拇指与手掌垂直，上手臂和身子45度</p><p>锤菜，与身子保持45度，上锤、下锤</p><p>炒菜，从外到内，从下到上</p><p>感恩菜，摸着胸口</p><p>这是手势基本功，单手点、单手或双手切、单手或双手锤、两手炒，摸胸口，我们可以在平时的演讲中在做手势时多注意练习，切记死板的运用，而是灵活的组合和变化。还记得我们说的核心吗，富于变化且合适。</p><p>举例台上的手势配合内容：</p><h3 id=\"点菜\">点菜，</h3><ul>  <li>“我现在要讲3个方面内容（手指1、2、3），第一…第二…第三…”，</li>  <li>“我们的业绩每年都在上升（食指手指向上）”，</li>  <li>“希望就在前方（食指向前）”，</li></ul><h3 id=\"切菜\">切菜，</h3><ul>  <li>“从12年前的杭州，到8年前的上海，再到3年前的深圳，我一直在不断努力的去寻找上升通道（手势从12切到8切到3）”，</li>  <li>“保持节奏，稳住情绪，步步向前（切手势从上到中到切移动）”，</li>  <li>“你过去的思维方式和现在的思维方式已经完全不同了（切手势从左移动到中间位置）”，</li></ul><h3 id=\"锤菜\">锤菜，</h3><ul>  <li>“我们能挺的过去（上方做锤手势）”，</li>  <li>“我可不是个轻易服输的人（中间做锤手势）”，</li></ul><h3 id=\"炒菜\">炒菜,</h3><ul>  <li>“这是一个相辅相成的过程（顺时针炒菜）”，</li>  <li>“工作就是修行，内修外炼（顺时针炒菜）”，</li></ul><h3 id=\"感恩菜\">感恩菜，</h3><ul>  <li>“他的一举一动我都看在眼里，我很感动（摸胸口）”，</li>  <li>“我带着喜悦的心情踏上了回杭州的火车（摸胸口）”，</li>  <li>“他从我侧面走过没有理我，我很沮丧，心里想着我该怎么办（摸胸口）”，</li></ul><p>手势除了配合内容外，还可以用于表达情绪的强弱，即调整手势的强弱，如：刚强的风格（迅速有力），温柔的风格（缓慢优雅）。</p><p>注意：舞台上不能用手指指着观众，可以用上菜手势请观众。</p><h2 id=\"移动步伐\">移动步伐</h2><p>我以前在舞台上一直会有来回走动的习惯，这是我的一个坏习惯，我通常会用不停来回走动的方式来回想我想讲的内容，或思考我想讲的内容。但我后来发现，这个习惯非常不好，首先不停的在观众眼前幌来幌去，给观众的视觉体验很差，其次让人感觉我没有准备的充分。</p><p>所以后来我不再走来走去去了，稳稳的站着讲，虽然培养这个习惯并不容易，但稳稳的站着讲也有问题。没有动感，让人觉得死板。</p><p>最后才领悟到前面说的关键，要富于变化且合适，不要乱动也不要不动，要根据内容需要动，下面就来说说移动的技巧。</p><p>（步伐图-图来源网络）</p><h2 id=\"上台五步走\">上台五步走</h2><p>导师说上台可以拆分成五步，即：起身、上台、致敬、交接、开场，下场。</p><p>起身稳健，起身时不要轻佻这会让人有随意的印象，要时刻准备着，时刻有相机对准的准备，稳健让人看着舒服。</p><p>上台注意台阶，上台由于紧张、路滑等原因，时常容易绊倒，因此我们要准备一些绊倒的句子，这样不仅巧妙化解了尴尬同时也能为自己加分。</p><p>挥手致意，眼神传情，（这是大方，得体的表现，我们在压力下表现的越得体，就越能体现我们的综合素质）。</p><p>微笑示意，主动接麦，（这是大方，得体的表现，我们在压力下表现的越得体，就越能体现我们的综合素质）。</p><p>扫视震场，一鸣惊人，上台不必急着讲内容，这会让自己过早进入紧张状态，我们可以先练习三定再扫视全场，说出的第一句话一定要一鸣惊人，因为第一句话是大家的注意力最集中的时候。</p><p>下场时，挥手示意，眼神传情，得体收尾。</p><p>这五步不容易，拥有大量丰富经验的人有时也做不好，或出意外或有遗漏，可想而知，基础能力（核心能力）有多重要。舞台走动</p><p>当我在舞台上走动时，时常不知道我为什么要走动，以前我的走动都是随意的，没有目的的。</p><p>这导致一个问题，观众弄不清我为什么要走动，即使我的内容吸引了观众的注意力，同时他们的注意力会随时被我的小动作分散，最后被我的走动弄的精疲力劲，失去兴趣。</p><p>所以走动也有技巧，也需要符合内容和情节以及目的的需要。</p><p>导师说，走动技巧有，横走，纵走，侧身跨步。</p><p>当我们需要观众记住内容的时候，横着走，比如，强调知识点</p><p>当我们需要拉近与听众距离的时候，纵着走，比如，哪位伙伴能回答这个问题</p><p>当我们模仿不同角色对话时，可以左右侧身来跨步来模拟，比如，模仿两人对话时，左右侧身</p><p>注意：不要动太多，容易引起视觉疲劳，忽视了内容。</p><h1 id=\"比赛与准备\">比赛与准备</h1><p>（比赛图-图来源网络）</p><p>小树林演讲比赛是比较正规的，有主持人有评委有时间官。</p><p>比赛给人的历练最大，提高提升的最快，前面如果实在太忙可以不参加，但比赛一定要全力以赴，他能一下子拔高你的好几级。</p><p>我曾有一次在小树林精英训练营中，由于实在太忙，没时间做前面的培训，但依然硬着头皮来到了最后的比赛日。</p><p>比赛日前我还没写稿，逼着自己早上6点多起床，写演讲稿，写到9点半，差不多了，跟导师请教下演讲稿的调整和更改。</p><p>然后开始练习和演绎演讲稿，顾不上吃饭，中途为了让自己形象更好一些，回去换了件衣服，来回路上都不忘在练稿，就这样折腾到下午2点半开始上台演讲。</p><p>上台时，我脑子里转的都是如何把我学到的技巧运用到这次演讲中去，我豁出去了，所有我能想到的技巧都使出来，听朋友们说，相当精彩，可惜最后超时无法参与评分（反面教材）。</p><p>最后我很清楚的看到自己收获非常大，有种蜕变的感觉，这是我参加现场比赛努力认真对待的结果。最后的最后我对我的比赛视频进行了复盘，并对其关键问题做了调整和完善，运用在未来的</p><p>（比赛要点图）</p><h2 id=\"赛前准备\">赛前准备</h2><p>我经历过几次比赛，所以对比赛前的准备有自己的心得，下面我来阐述一下。</p><ul>  <li>1.比赛前首当其冲的是打磨演讲和讲稿，我们要花大量时间来想结构、故事、过渡和情节描述。</li>  <li>2.其次是练习演讲，把所学的内容全部运用进去，包括姿态、动作、声音、故事、表情等。练习是时务必把手、眼、声音、走的技巧运用进去，用情景再现的方式去演绎故事和场景。</li>  <li>3.再者上台前，我喜欢用冥想的方式先让自己冷静下来，让紧张的情绪得到舒缓。</li>  <li>4.接着，我会不断的念演讲稿，这时我肯定已经背了很多遍了不用再背了，就用念稿的方式来增加脸部的肌肉记忆。</li>  <li>5.最后上台前3分钟，我喜欢不停的踱步，让自己保持兴奋且不致于过度兴奋。</li></ul><p>如果你没有比赛经验可以参考这份准备顺序，如果有已经有比赛经验则可以参考这份提高自己的赛前准备效率。</p><h2 id=\"演讲稿大纲\">演讲稿大纲</h2><p>我举例最近一次比赛演讲稿的大纲，讲的是我在上海时的一段经历。</p><p>大纲：</p><ul>  <li>1.开头，问题 + 我的感受</li>  <li>2.刚进入公司，很兴奋 + 忙碌</li>  <li>3.项目成型的同时发现问题</li>  <li>4.谋求转型但转型出现问题</li>  <li>5.描述自己如何转型，工作中争取时间，疲惫但坚持着</li>  <li>6.转型成功，把握机会，获得认可，达成目标</li>  <li>7.发起感悟，虽然艰辛但很值得，努力前进，终获新生</li></ul><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485456&amp;idx=1&amp;sn=a69f45ddb80b9c31bd79c9eb9cfb84e3&amp;chksm=fc226d17cb55e4016569080d868884610cd9fc49c2abba0ac7cb3e7eafbd19fa672201a53349&amp;token=1541713099&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2022/07/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B062",
            
            
            
            
            
            "date_published": "2022-07-03T00:00:00+08:00",
            "date_modified": "2022-07-03T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/06/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B061",
            "title": "读书笔记(六十一) 如何更好的沟通 - 沟通风格",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：10年前，我对能说会道的人很厌恶，当时的我认为它是一个花里胡哨的东西，是一个专门糊弄人的技巧，特别讨厌。但是10年后的今天，我开始越来越关注它，首先是它对我的生活和工作产生了巨大的影响，我终于意识到10几年来我对它的疏忽导致自己在很多方面受到了巨大的限制。其次，我发现它是一门可训练的技巧，就像写作、编程、打鼓、修车一样是一门技能一种技巧，可以通过刻意的学习和训练来提高。对这两点的认知转变，对我极其重要，从此以后我开启了沟通技巧的刻意练习，并在生活和工作中观察自己的沟通技巧，越来越把沟通当作第一要素来认真对待。同时我看了7本书来做主题阅读，系统性的学习沟通技巧，它们包括《非暴力沟通》、《沟通的方法》、《社交与礼节》、《关键对话》、《高难度谈话》、《沟通的艺术》、《自信表达》，读完后写出自己的理解和总结，在生活和工作中去落地实践并总结经验，接着制作成一次讲座与大家分享我的实践经验。本篇主要围绕《沟通的方法》来提取知识和技巧，书本有370页左右，平时的书我看的很快基本一周一本，但这本书我花了将近1个月，因为书本中每个字对我来说都是醍醐灌顶，我深深被它吸引并仔仔细细的看完了每个字每句话，看完时我用四个字表达了我对此书的震撼：太强了吧。目录：1.如何倾听2.沟通风格3.回应技巧概述：沟通首先是倾听，其次每个人都有自己的沟通风格和沟通习惯，最后我们可以用一些通用技巧来与对方沟通，这样会更有方法些也更轻松一些。很多时候我们忽视了倾听，以为专注的听对方讲了什么就是倾听，其实不是的。不要小看倾听，倾听需要技巧，它是众多沟通技巧中的核心技巧之一，倾听不单单只是听，还要听懂对方背后的意思，只有听懂了背后的意思我们所说出的话才能真正达成我们想要的效果，我们也才能知道我们该如何去说。作者用结构化倾听，情绪、事实、期待，三方面来说明我们在沟通中如何做好倾听这件事。沟通对于每个人都是不一样的，每个人的沟通习惯有千千万万种，同时千千万万种沟通从整体上来看可以分成几类，作者就总结了这几类沟通的风格，同时跟我们阐述了我们在平时交流中所遇到的人，面对不同风格的人沟通该如何应对。最后作者说了几个即兴回应的的技巧，这些技巧都是常用的一些沟通手法，平时我们也常用只是没有注意到，当被以书面形式总结出来时，就会觉得它非同小可。内容：很多人看到沟通中有强势主动的一方和弱势被动的一方，就会认定沟通是一方搞定另外一方的有限游戏。其实不是的，沟通是一场无限游戏。在沟通后，具体的沟通事项可能结束了，但双方的关系依然存在，每次沟通都会让双方的关系产生变化，其中沟通高手就能够让双方的关系在今后很长一段时间里持续发展下去，甚至永远发展下去。这本书的作者把沟通拆解程了18个基本场景，通过这些场景“积木”的组合可以应付各种各样的复杂情况。通过系统的学习，我们完全有机会实现从抗拒沟通到掌控沟通的脱变。这里是第一部分，主要讲倾听、沟通风格和回应技巧。如何倾听沟通的起点是倾听，但是很不幸，我们平时沟通中有一半的信息会被自动忽略。常常我们并没有听出对方真实的意图，从而沟通中出现不少的问题。事实上，别人在表达时，无论是有意还是无意，都会隐藏一些信息。我们应该像侦探一样倾听，全神贯注，把所有隐藏线索都挖掘出来，拽在手里。所以只有全力以赴的去听，我们才能听出对方的真实意图，才能辨识出对方可能并不会说出口的那些潜在需求。同时也只有让对方看到我们已经全力以赴地去听了，我们给他们的回应才能被友好地接受。这里作者列出了结构化倾听的是那个要点：情绪、事实、期待。（情绪、事实、期待图）首先是情绪，我们在沟通中，对方有时可能不会把情绪展露在表情上，但话语里隐藏了情绪。这时我们可以捕捉到这些词汇来辨识他们的内在情绪，例如：总是、老是、每次、经常、永远，千万别，等等情绪路标词。这些词汇都是说明对方是在宣泄情绪。当路标词一旦出现，我们就要意识到，对方没有在陈述事实，而是在发泄情绪。其次是事实，我们只有在表达那些不受主观判断影响，可考证、可追溯的内容时，才会说它是一个事实。因此如果能用4个W（Who、Where、What、Why）还原实际场景，那么对方所言大概率是事实。相反，如果对这些要素语焉不详，而仅仅从诸如“我觉得”、“我判断”、“我认为”的主观推论出发，那我们听到的陈述很可能不是事实。最后是期待，期待就是找出对方内心真正想要的东西，这里我们需要结合情绪和事实来判断对方的期待。只有当我们发现对方的期待后，我们才能做出正确的反应。倾听后的回应我们在倾听时有一个重要的技能就是总结，当对方说完时我们需要做一些回应，其中总结对方说话的内容非常重要，如果对方说太多时对方自己也记不住，这时我们做一个总结，对方会觉得我是真的很认真在听他说话，他说的话起到了效果，他得到了尊重。这个方法作者称为“反向叙述”，我称它为“倾听总结”，都是一个意思，即按照自己理解的逻辑，重新描述一遍前面结构化倾听获得的信息，请对方做个确认。通过反向叙述的过程，双方有机会把对方的信息彻底听明白，更知悉彼此的意图。反向叙述也要掌握方法，这样才能做到正确的反向叙述，做到有效的沟通。作者把这一个技巧分成三步，响应情绪、确认事实、明确行动。（回应总结三步骤）第一步响应情绪这是一个排雷的步骤，首先我们要意识到对话前有很多雷在等着我们，一不小心踩到了就会有很多麻烦，效率和效果也就大打折扣，所以首先要排雷，这里的雷就是对方的情绪。对方和我们一样身上有很多情绪，很多时候连我们自己都无法察觉到（察觉到也无法化解它们），所以首先要解决情绪。这里有个关键，做事前先解决情绪，这个我们后面再细聊，但它确实很重要我先点出来。我们在沟通中之所以会不清楚对方到底想要什么，很多时候是因为情绪的阻隔。对方的情绪会影响他的思考和表达，这会增加我们倾听的难度，因此我们应该预先排除干扰信息，提前处理情绪这个地雷。然而情绪是对方的，就算我们识别出来了，怎么帮助对方把它从沟通中剥离呢？这里有个技巧：点破和接纳对方的情绪例如：我说，“我知道，这个时候你肯定特着急”这个技巧的核心是让对方感觉到他的情绪被你接纳了，这样他就会慢慢回归到理性状态，从而让沟通变得更加顺畅。第二步确认事实信息挖掘主要在这一步完成，我们可以先把听到的事实用自己的话描述一遍，此时如果正确，对方就会给你一个肯定的确认，如果不对，那他就会补充更多的信息。如果完全没听懂也不要逃避，借由一些提问技巧去追问。例如，我说，“您刚才说的这几点，我的理解是…”，“您能跟我再展开讲讲吗？”第三步明确行动按照前面的所有信息，把对方的期待翻译成接下来可实施的行动，让对方清晰地感受到，你确实听懂了他的意思，并按照他的期待规划出了行动。例如，我说，“针对你说的情况我微调一下文档再明确一下方案，明天下午4点，我们讨论一下可以吗？”。到这一步，就完成了反向叙述，拿到了所有信息，也让对方放心的全过程。反向叙述的作用，当信息不全时，就要跟对方反述一遍，挖掘出更多隐含信息，判断出对方真实的期待。这里作者聊了下倾听工具，比如用手写笔记本记笔记、录音等都是非常好的倾听工具。作者举例自己记笔记的方法，空白页上左边记录事实，右边记录情绪。并且在记录时边听边问自己，什么是我需要做的？我该怎么行动？最后把行动清单整理出来，用特殊记号标记。另外，用手写笔记本的方法的好处之一是让对方看到你的尊重。录音软件也是一种方法，在记录下来后，回去一定要复听，这样可以复盘自己的沟通能力和信息的总结能力，同时可以复盘我们的沟通效果和情况。沟通风格沟通对于每个人都是不一样的，因为我们的沟通习惯有千千万万种，同时千千万万种沟通从整体上来看可以分成几类，作者就总结了这4类的沟通风格，同时跟我们阐述了我们在平时交流中所遇到的人，面对不同风格的人沟通该如何应对。四种类型的沟通风格首先我想阐述一下，作者所说的四类沟通风格是自己思考后总结出来的，实际上代表了4类具有鲜明性格的人，这里面所用的每种动物都是一种代表，我们也可以用自己的方式去实践、思考、总结，构建出一套属于自己的分类。不过在还没有这么丰富的经验前，不妨听听作者是如何总结的，学习了她的经验后再融入我们的经验最后转化成属于自己的总结。四种沟通类型代表了，控制型、表现型、谨慎型、温和型，分别用老虎、孔雀、猫头鹰、考拉来标注。老虎型的特点是，目标感强，总是当机立断，能打仗但控制欲强。孔雀型的特点是，自来熟，经常把“关系维护”放在第一位，不自觉地取悦对方，具体沟通事项可能被搁置。而且他们非常愿意跟别人发生肢体接触。猫头鹰型的特点是，处事周全，善于观察，讲究事实依据。给人一种“聊天兴致不高”的感觉，但他们没有走神，一直在细心观察。迷恋结构、系统、流程，经常在不经意间流露出对严谨系统的崇拜。考拉型的特点是，相对被动，不愿意得罪人，时常展露出毫无攻击性的善意。这四种沟通风格可分为两类，主动型和被动型。老虎和孔雀就是主动型，老虎主要是为了掌控局面，会不由自主的成为控场者，而孔雀并没有主持意识，只想表现自己，取悦对方。猫头鹰和考拉虽然都经常表现得非常被动，但考拉的初衷是不得罪人，猫头鹰则是为了收集足够多的证据，决定接下来怎么做。不同风格怎样沟通首先我们要明白两点：  第一，不同沟通风格的人是均衡分布的。  第二，不同沟通风格的人之间会“不可避免”的产生矛盾。因此我们在工作、生活中会遇见各种沟通风格的人，和他们打照面时，我们要先摘除”喜欢不喜欢“的偏见，并通过学习，掌握“对他们最有效的沟通方式”。下面就来聊聊如何与不同风格的人沟通。（四种风格以及沟通的方法图）如何与老虎沟通第一，老虎喜欢直切主题所以沟通时就别做过多铺垫，也不要循序渐进，争取在一个回合里把他的疑惑解释清楚。第二，老虎喜欢有掌控感，所以别让老虎觉得你是一个“黑箱”，要给他足够的掌控感。虽然让老虎知道你的工作进度非常重要，但不等于天天汇报，和他约定一个时间定期汇报即可。第三，老虎的目标感很强，如果你发现对方没有设立目标，就表明他出于各种考虑憋着不表达自己真实意图。这时，就要让他提提意见，请求他把目标说出来，这才真正听懂老虎的无声呐喊。如何与孔雀沟通第一，孔雀喜欢表现自己所以只要表达对孔雀的喜爱就能让他特别满意，不过你要坚持不懈的表达喜爱，你得绞尽脑汁，变着花样赞美。第二，孔雀喜欢比较重视感受如果孔雀一直没表现出喜悦，则赶紧问他“现在有什么感受？”，不是问有什么想法、建议，而是感受。可以说人人都需要被看见，孔雀则特别需要被看见，他对感受很敏感，最受不了的就是他的感受被忽略。如何与猫头鹰沟通第一，猫头鹰处事周全，谨言慎行，所以他不会表扬人，他们要得出一个人“是否靠谱”的结论，要建立在足够多的证据上。所以如果猫头鹰没表扬你，不代表他不喜欢你，他只是在收集信息。而且猫头鹰还会经常提出负面的反馈，他们会不断指出任务中潜在的风险点，不过他们不认为自己在反对你。此时只要你给足正面的证据，用它们来“覆盖”负面反馈，猫头鹰就会马上改变态度相信你。第二，猫头鹰迷恋流程、结构、系统所以为人处事要结构化、系统化，让他看到你的严谨和思维。第三，猫头鹰时常给人一种“聊天兴致不高”的感觉，所以如果他对某事很积极，先表态，可能是迫于生活经验在客气，想尽快结束对话。这种情况，你要重新找个时间与他沟通，解决潜在的问题，别让他收集完证据后成为你坚定的反对派。如何与考拉沟通考拉比较被动，但他们是特别需要去维护和关照的一类人。当你和考拉沟通时，他说“都行”时，可能没讲真心话，也一定要去探寻“都行”背后的压力和顾虑。如果你是考拉，你要知道自己的“都行”是会让别人，特别是老虎抓狂的。要有意识的做出调整。一个人的复合沟通风格，大多是后天环境使然。这四种类型的人是极具鲜明的人格，但大部分人都是复合型人格，比如很多人具有老虎为主、孔雀为辅的复合特点，或者猫头鹰为主，老虎为辅的复合特点，或者猫头鹰为主，考拉为辅的特点，等等。这是由于他们生活的场景逼迫他们形成了这样或那样的习惯。比如，老虎为了获得更多掌控感，渐渐培养出了煽动周遭人的“孔雀特征”。比如，猫头鹰难以忍受混乱，把自己逼成了老虎。另外，当我们面对一个职位很高，年龄偏大、经验又非常丰富的领导时，你其实很难读出他的沟通风格。这不是你的问题，而是对方随着“战斗值”的提升，把自己修炼成了非常均衡的风格，随机应变，顺势而为。小结作者点出了两个核心要点，一是，与他人沟通时，要承认任何一种沟通类型的合理性，用最有效的方式与之沟通；二是，我们自己要努力修炼，学会在各种风格间切换，不让沟通能力“偏科”。当我们可以为了某个沟通任务，扮演一个与自己截然不同的角色时，我们的沟通能力就会得到显著提升。变化自己去适应环境。回应技巧在我们平时聊天中，不知道你有没注意到，很多时候我们回应的方式决定了事态的发展，因此作者特地把回应技巧单独提取出来，聊了一下这里面的技巧。她把回应技巧分为三部分，理念、技巧、习惯。我们首先来看看，核心理念有两个：  核心理念一：有话要直说，方式要恰当。  核心理念二：真话不全说，假话绝不说。“有话要直说，方式要恰当”意思是，我们不可能只接受那些能处理的问题，任何问题我们都要给予积极的、善意的回应，只不过回应的技巧我们需要不断优化和改进。所以作者说，我们要记住一句话：一个沟通高手，应该有这样的觉悟，可能有我们解决不了的问题，但没有沟通不了的问题。“真话不全说，假话绝不说”意思是，无论用什么技巧，沟通中假话绝不说。一个谎言需要用10个谎言去掩盖，这会耗费我们大量的精力，效率低下。所以说真话是效率最高的，同时绝不说假话也是我们的底线。这里强调一下，任何一种工具、任何一种能力都有限制的，也都有边界的，包括沟通能力，实际上说真话就是沟通的能力边界。真话不全说，即“我不见得要把所有的真话都表达出来”。俗话说“直言也应该有讳”，我可以有选择的和对方交流，不合适的信息不说，不合适的场景也不说。假话绝不说，即“我可以用各种技巧来回应对方，但过程中绝不说假话”。我们说的任何一句话都可能被传出去，被公开化，我的职场信用很快就消失，此时我的沟通技巧再好也无用。沟通能力越强，就越得要求自己绝对不说假话，这是高效沟通的首要原则。（回应技巧图）下面我们来介绍下回应中的一些技巧，包括换口径、换时间、换场合、换角色。换口径换口径是指，对方问你的是A问题，但你偷换个概念，用B口径来回应他。例如，对方说，“您可真是大忙人呢”，我说，“我就佩服你这样的大拿，什么事到你手上都能解决”当然这个方法有一定风险，分寸很难拿捏，特别容易被人看成抖机灵。换时间换时间是指，另找时间来解决对方的问题。当遇到突发问题时，一点心里准备都没有，而且只能回答行或不行。很多人在这个时候一定特别紧张，此时我们可以用换时间的方法，化被动为主动。例如，我说，“领导，这么重要的事情，我得认真想想。下周一我来给您汇报，您看行吗？”实际上给多长时间一点都不重要，重要的是，当你再次发起沟通时，你已经带上了你想好的目标、条件、计划、要求，来与领导沟通。通过这个举措，你把沟通的掌控权拿回到自己手上，变成了一个主动发起沟通的人。换时间，就是为自己争取机会，主动制造一个时间窗口。换场合换场合指，一句话换个场合，把事情降级或升级。如果你希望升级一件事的重要性，你就要把场合做扩大化的处理。比如，多叫两人一起，等于把这个场合扩大了，这个问题的重要程度也就升级了。注意：叫之前先说清楚，他们为什么来参与。又比如，会议上对话马上要演变成一场激烈冲突时，就说“等散会后来跟进”，从而把事情降级。换角色换角色是指，把球往回踢一下交由对方判断。即接受到问题时，先问一个问题，进而从回应者变成了提问者。如果是现场有很多人的话，可以用换角色大法，从这个尴尬问题的回应者变成为主持人。在把球传出去之前，我们至少对以下两个问题有足够清晰的认识：  第一，团队关系到底怎么样，你心里是有答案的。  第二，团队成员能不能接住提问，在了解他们的情况下，你肯定也会有基本判断。团队氛围如何自己该知道，这样我才能做到心里有数，接下来该如何去行动。而且在提问时，肯定要给能把问题接住人，比如把疑难问题交给团队里情商比较高，平时就接得住话的伙伴。对他来说，这不是个锅，而是在大领导面前展示的机会。主持习惯在职场沟通中要为自己种下一个意识，养成这样的习惯，一旦进入多人沟通场合，如果没人做主持，我就是主持人，此时不管今天我们职位高低，我就是球场上的“中场发动机”，所有的球都送到我这里，同时我也要不断发出去。例如，领导问，“这次的例会西西你给打几分”，我说，“东东，咱们团队你呆的最久资格最老，你觉得这次的例会你应该打几分”，然后说，“我很同意你的看法，我也又这样的体会，北北，你的想法是什么？”。所以下次遇到有机会当会议主持人时，一定要告诉自己，你对自己要求高，对自己期许更高，所以才接下这个话茬，主动做主持人，掌控全场接球，传球，要球。在全场会议中，派发提问，请求协助，总结提炼。肯定反射我们在回应时要养成这样的习惯，把第一句话处理成一个对方的肯定，这个叫肯定反射。例如，我说，“您刚刚说的这些太有启发了”，“您提的这个问题，对我们的帮助很大”等等。当我们传递肯定，不是为了取悦对方讨好对方。事实上，越是积极的肯定对方，就越是在彰显我很自信，我很有把握，我对接下来的局面很有掌控感，这对于我们后面的沟通是非常有价值的。假设有一天我们要表达一些负面情况，那么第1句话传递的肯定就更重要了。因为从长远来看我们还是希望互动能持续下去，这种时候肯定，对方其实为双方留下一个态度意义上的余地。已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485405&amp;idx=1&amp;sn=cc17252f23ec91046532269d7bd6b22d&amp;chksm=fc2262dacb55ebccb0c8f300db3cbed376d35ba1cfe6bb0061982c7f807b376c3ea6d8de2c93&amp;token=1541713099&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>10年前，我对能说会道的人很厌恶，当时的我认为它是一个花里胡哨的东西，是一个专门糊弄人的技巧，特别讨厌。但是10年后的今天，我开始越来越关注它，首先是它对我的生活和工作产生了巨大的影响，我终于意识到10几年来我对它的疏忽导致自己在很多方面受到了巨大的限制。其次，我发现它是一门可训练的技巧，就像写作、编程、打鼓、修车一样是一门技能一种技巧，可以通过刻意的学习和训练来提高。</p><p>对这两点的认知转变，对我极其重要，从此以后我开启了沟通技巧的刻意练习，并在生活和工作中观察自己的沟通技巧，越来越把沟通当作第一要素来认真对待。</p><p>同时我看了7本书来做主题阅读，系统性的学习沟通技巧，它们包括《非暴力沟通》、《沟通的方法》、《社交与礼节》、《关键对话》、《高难度谈话》、《沟通的艺术》、《自信表达》，读完后写出自己的理解和总结，在生活和工作中去落地实践并总结经验，接着制作成一次讲座与大家分享我的实践经验。</p><p>本篇主要围绕《沟通的方法》来提取知识和技巧，书本有370页左右，平时的书我看的很快基本一周一本，但这本书我花了将近1个月，因为书本中每个字对我来说都是醍醐灌顶，我深深被它吸引并仔仔细细的看完了每个字每句话，看完时我用四个字表达了我对此书的震撼：太强了吧。</p><h1 id=\"目录\">目录：</h1><p>1.如何倾听2.沟通风格3.回应技巧</p><h1 id=\"概述\">概述：</h1><p>沟通首先是倾听，其次每个人都有自己的沟通风格和沟通习惯，最后我们可以用一些通用技巧来与对方沟通，这样会更有方法些也更轻松一些。很多时候我们忽视了倾听，以为专注的听对方讲了什么就是倾听，其实不是的。不要小看倾听，倾听需要技巧，它是众多沟通技巧中的核心技巧之一，倾听不单单只是听，还要听懂对方背后的意思，只有听懂了背后的意思我们所说出的话才能真正达成我们想要的效果，我们也才能知道我们该如何去说。作者用结构化倾听，情绪、事实、期待，三方面来说明我们在沟通中如何做好倾听这件事。沟通对于每个人都是不一样的，每个人的沟通习惯有千千万万种，同时千千万万种沟通从整体上来看可以分成几类，作者就总结了这几类沟通的风格，同时跟我们阐述了我们在平时交流中所遇到的人，面对不同风格的人沟通该如何应对。最后作者说了几个即兴回应的的技巧，这些技巧都是常用的一些沟通手法，平时我们也常用只是没有注意到，当被以书面形式总结出来时，就会觉得它非同小可。</p><h1 id=\"内容\">内容：</h1><p>很多人看到沟通中有强势主动的一方和弱势被动的一方，就会认定沟通是一方搞定另外一方的有限游戏。其实不是的，沟通是一场无限游戏。在沟通后，具体的沟通事项可能结束了，但双方的关系依然存在，每次沟通都会让双方的关系产生变化，其中沟通高手就能够让双方的关系在今后很长一段时间里持续发展下去，甚至永远发展下去。</p><p>这本书的作者把沟通拆解程了18个基本场景，通过这些场景“积木”的组合可以应付各种各样的复杂情况。通过系统的学习，我们完全有机会实现从抗拒沟通到掌控沟通的脱变。这里是第一部分，主要讲倾听、沟通风格和回应技巧。如何倾听</p><p>沟通的起点是倾听，但是很不幸，我们平时沟通中有一半的信息会被自动忽略。常常我们并没有听出对方真实的意图，从而沟通中出现不少的问题。</p><p>事实上，别人在表达时，无论是有意还是无意，都会隐藏一些信息。我们应该像侦探一样倾听，全神贯注，把所有隐藏线索都挖掘出来，拽在手里。所以只有全力以赴的去听，我们才能听出对方的真实意图，才能辨识出对方可能并不会说出口的那些潜在需求。同时也只有让对方看到我们已经全力以赴地去听了，我们给他们的回应才能被友好地接受。</p><p>这里作者列出了结构化倾听的是那个要点：情绪、事实、期待。</p><p>（情绪、事实、期待图）</p><p>首先是情绪，我们在沟通中，对方有时可能不会把情绪展露在表情上，但话语里隐藏了情绪。</p><p>这时我们可以捕捉到这些词汇来辨识他们的内在情绪，例如：总是、老是、每次、经常、永远，千万别，等等情绪路标词。这些词汇都是说明对方是在宣泄情绪。当路标词一旦出现，我们就要意识到，对方没有在陈述事实，而是在发泄情绪。</p><p>其次是事实，我们只有在表达那些不受主观判断影响，可考证、可追溯的内容时，才会说它是一个事实。</p><p>因此如果能用4个W（Who、Where、What、Why）还原实际场景，那么对方所言大概率是事实。相反，如果对这些要素语焉不详，而仅仅从诸如“我觉得”、“我判断”、“我认为”的主观推论出发，那我们听到的陈述很可能不是事实。</p><p>最后是期待，期待就是找出对方内心真正想要的东西，这里我们需要结合情绪和事实来判断对方的期待。只有当我们发现对方的期待后，我们才能做出正确的反应。</p><h2 id=\"倾听后的回应\">倾听后的回应</h2><p>我们在倾听时有一个重要的技能就是总结，当对方说完时我们需要做一些回应，其中总结对方说话的内容非常重要，如果对方说太多时对方自己也记不住，这时我们做一个总结，对方会觉得我是真的很认真在听他说话，他说的话起到了效果，他得到了尊重。这个方法作者称为“反向叙述”，我称它为“倾听总结”，都是一个意思，即按照自己理解的逻辑，重新描述一遍前面结构化倾听获得的信息，请对方做个确认。通过反向叙述的过程，双方有机会把对方的信息彻底听明白，更知悉彼此的意图。</p><p>反向叙述也要掌握方法，这样才能做到正确的反向叙述，做到有效的沟通。作者把这一个技巧分成三步，响应情绪、确认事实、明确行动。</p><p>（回应总结三步骤）</p><h2 id=\"第一步响应情绪\">第一步响应情绪</h2><p>这是一个排雷的步骤，首先我们要意识到对话前有很多雷在等着我们，一不小心踩到了就会有很多麻烦，效率和效果也就大打折扣，所以首先要排雷，这里的雷就是对方的情绪。</p><p>对方和我们一样身上有很多情绪，很多时候连我们自己都无法察觉到（察觉到也无法化解它们），所以首先要解决情绪。这里有个关键，做事前先解决情绪，这个我们后面再细聊，但它确实很重要我先点出来。</p><p>我们在沟通中之所以会不清楚对方到底想要什么，很多时候是因为情绪的阻隔。对方的情绪会影响他的思考和表达，这会增加我们倾听的难度，因此我们应该预先排除干扰信息，提前处理情绪这个地雷。</p><p>然而情绪是对方的，就算我们识别出来了，怎么帮助对方把它从沟通中剥离呢？这里有个技巧：点破和接纳对方的情绪</p><p>例如：我说，“我知道，这个时候你肯定特着急”</p><p>这个技巧的核心是让对方感觉到他的情绪被你接纳了，这样他就会慢慢回归到理性状态，从而让沟通变得更加顺畅。</p><h2 id=\"第二步确认事实\">第二步确认事实</h2><p>信息挖掘主要在这一步完成，我们可以先把听到的事实用自己的话描述一遍，此时如果正确，对方就会给你一个肯定的确认，如果不对，那他就会补充更多的信息。如果完全没听懂也不要逃避，借由一些提问技巧去追问。</p><p>例如，我说，“您刚才说的这几点，我的理解是…”，“您能跟我再展开讲讲吗？”</p><h2 id=\"第三步明确行动\">第三步明确行动</h2><p>按照前面的所有信息，把对方的期待翻译成接下来可实施的行动，让对方清晰地感受到，你确实听懂了他的意思，并按照他的期待规划出了行动。例如，我说，“针对你说的情况我微调一下文档再明确一下方案，明天下午4点，我们讨论一下可以吗？”。</p><p>到这一步，就完成了反向叙述，拿到了所有信息，也让对方放心的全过程。</p><p>反向叙述的作用，当信息不全时，就要跟对方反述一遍，挖掘出更多隐含信息，判断出对方真实的期待。</p><p>这里作者聊了下倾听工具，比如用手写笔记本记笔记、录音等都是非常好的倾听工具。</p><p>作者举例自己记笔记的方法，空白页上左边记录事实，右边记录情绪。并且在记录时边听边问自己，什么是我需要做的？我该怎么行动？最后把行动清单整理出来，用特殊记号标记。另外，用手写笔记本的方法的好处之一是让对方看到你的尊重。</p><p>录音软件也是一种方法，在记录下来后，回去一定要复听，这样可以复盘自己的沟通能力和信息的总结能力，同时可以复盘我们的沟通效果和情况。沟通风格</p><p>沟通对于每个人都是不一样的，因为我们的沟通习惯有千千万万种，同时千千万万种沟通从整体上来看可以分成几类，作者就总结了这4类的沟通风格，同时跟我们阐述了我们在平时交流中所遇到的人，面对不同风格的人沟通该如何应对。</p><h1 id=\"四种类型的沟通风格\">四种类型的沟通风格</h1><p>首先我想阐述一下，作者所说的四类沟通风格是自己思考后总结出来的，实际上代表了4类具有鲜明性格的人，这里面所用的每种动物都是一种代表，我们也可以用自己的方式去实践、思考、总结，构建出一套属于自己的分类。不过在还没有这么丰富的经验前，不妨听听作者是如何总结的，学习了她的经验后再融入我们的经验最后转化成属于自己的总结。</p><h3 id=\"四种沟通类型代表了控制型表现型谨慎型温和型分别用老虎孔雀猫头鹰考拉来标注\">四种沟通类型代表了，控制型、表现型、谨慎型、温和型，分别用老虎、孔雀、猫头鹰、考拉来标注。</h3><p>老虎型的特点是，目标感强，总是当机立断，能打仗但控制欲强。</p><p>孔雀型的特点是，自来熟，经常把“关系维护”放在第一位，不自觉地取悦对方，具体沟通事项可能被搁置。而且他们非常愿意跟别人发生肢体接触。</p><p>猫头鹰型的特点是，处事周全，善于观察，讲究事实依据。给人一种“聊天兴致不高”的感觉，但他们没有走神，一直在细心观察。迷恋结构、系统、流程，经常在不经意间流露出对严谨系统的崇拜。</p><p>考拉型的特点是，相对被动，不愿意得罪人，时常展露出毫无攻击性的善意。</p><p>这四种沟通风格可分为两类，主动型和被动型。</p><p>老虎和孔雀就是主动型，老虎主要是为了掌控局面，会不由自主的成为控场者，而孔雀并没有主持意识，只想表现自己，取悦对方。</p><p>猫头鹰和考拉虽然都经常表现得非常被动，但考拉的初衷是不得罪人，猫头鹰则是为了收集足够多的证据，决定接下来怎么做。</p><h2 id=\"不同风格怎样沟通\">不同风格怎样沟通</h2><p>首先我们要明白两点：</p><ul>  <li>第一，不同沟通风格的人是均衡分布的。</li>  <li>第二，不同沟通风格的人之间会“不可避免”的产生矛盾。</li></ul><p>因此我们在工作、生活中会遇见各种沟通风格的人，和他们打照面时，我们要先摘除”喜欢不喜欢“的偏见，并通过学习，掌握“对他们最有效的沟通方式”。</p><p>下面就来聊聊如何与不同风格的人沟通。</p><p>（四种风格以及沟通的方法图）</p><h2 id=\"如何与老虎沟通\">如何与老虎沟通</h2><p>第一，老虎喜欢直切主题</p><p>所以沟通时就别做过多铺垫，也不要循序渐进，争取在一个回合里把他的疑惑解释清楚。</p><p>第二，老虎喜欢有掌控感，所以别让老虎觉得你是一个“黑箱”，要给他足够的掌控感。</p><p>虽然让老虎知道你的工作进度非常重要，但不等于天天汇报，和他约定一个时间定期汇报即可。</p><p>第三，老虎的目标感很强，如果你发现对方没有设立目标，就表明他出于各种考虑憋着不表达自己真实意图。</p><p>这时，就要让他提提意见，请求他把目标说出来，这才真正听懂老虎的无声呐喊。</p><h2 id=\"如何与孔雀沟通\">如何与孔雀沟通</h2><p>第一，孔雀喜欢表现自己</p><p>所以只要表达对孔雀的喜爱就能让他特别满意，不过你要坚持不懈的表达喜爱，你得绞尽脑汁，变着花样赞美。</p><p>第二，孔雀喜欢比较重视感受</p><p>如果孔雀一直没表现出喜悦，则赶紧问他“现在有什么感受？”，不是问有什么想法、建议，而是感受。</p><p>可以说人人都需要被看见，孔雀则特别需要被看见，他对感受很敏感，最受不了的就是他的感受被忽略。</p><h2 id=\"如何与猫头鹰沟通\">如何与猫头鹰沟通</h2><p>第一，猫头鹰处事周全，谨言慎行，所以他不会表扬人，他们要得出一个人“是否靠谱”的结论，要建立在足够多的证据上。</p><p>所以如果猫头鹰没表扬你，不代表他不喜欢你，他只是在收集信息。而且猫头鹰还会经常提出负面的反馈，他们会不断指出任务中潜在的风险点，不过他们不认为自己在反对你。</p><p>此时只要你给足正面的证据，用它们来“覆盖”负面反馈，猫头鹰就会马上改变态度相信你。</p><p>第二，猫头鹰迷恋流程、结构、系统</p><p>所以为人处事要结构化、系统化，让他看到你的严谨和思维。</p><p>第三，猫头鹰时常给人一种“聊天兴致不高”的感觉，所以如果他对某事很积极，先表态，可能是迫于生活经验在客气，想尽快结束对话。这种情况，你要重新找个时间与他沟通，解决潜在的问题，别让他收集完证据后成为你坚定的反对派。</p><h2 id=\"如何与考拉沟通\">如何与考拉沟通</h2><p>考拉比较被动，但他们是特别需要去维护和关照的一类人。</p><p>当你和考拉沟通时，他说“都行”时，可能没讲真心话，也一定要去探寻“都行”背后的压力和顾虑。</p><p>如果你是考拉，你要知道自己的“都行”是会让别人，特别是老虎抓狂的。要有意识的做出调整。</p><p>一个人的复合沟通风格，大多是后天环境使然。这四种类型的人是极具鲜明的人格，但大部分人都是复合型人格，比如很多人具有老虎为主、孔雀为辅的复合特点，或者猫头鹰为主，老虎为辅的复合特点，或者猫头鹰为主，考拉为辅的特点，等等。这是由于他们生活的场景逼迫他们形成了这样或那样的习惯。比如，老虎为了获得更多掌控感，渐渐培养出了煽动周遭人的“孔雀特征”。比如，猫头鹰难以忍受混乱，把自己逼成了老虎。</p><p>另外，当我们面对一个职位很高，年龄偏大、经验又非常丰富的领导时，你其实很难读出他的沟通风格。这不是你的问题，而是对方随着“战斗值”的提升，把自己修炼成了非常均衡的风格，随机应变，顺势而为。</p><h2 id=\"小结\">小结</h2><p>作者点出了两个核心要点，一是，与他人沟通时，要承认任何一种沟通类型的合理性，用最有效的方式与之沟通；二是，我们自己要努力修炼，学会在各种风格间切换，不让沟通能力“偏科”。当我们可以为了某个沟通任务，扮演一个与自己截然不同的角色时，我们的沟通能力就会得到显著提升。变化自己去适应环境。</p><h1 id=\"回应技巧\">回应技巧</h1><p>在我们平时聊天中，不知道你有没注意到，很多时候我们回应的方式决定了事态的发展，因此作者特地把回应技巧单独提取出来，聊了一下这里面的技巧。她把回应技巧分为三部分，理念、技巧、习惯。</p><p>我们首先来看看，核心理念有两个：</p><ul>  <li>核心理念一：有话要直说，方式要恰当。</li>  <li>核心理念二：真话不全说，假话绝不说。</li></ul><p>“有话要直说，方式要恰当”意思是，我们不可能只接受那些能处理的问题，任何问题我们都要给予积极的、善意的回应，只不过回应的技巧我们需要不断优化和改进。</p><p>所以作者说，我们要记住一句话：一个沟通高手，应该有这样的觉悟，可能有我们解决不了的问题，但没有沟通不了的问题。</p><p>“真话不全说，假话绝不说”意思是，无论用什么技巧，沟通中假话绝不说。</p><p>一个谎言需要用10个谎言去掩盖，这会耗费我们大量的精力，效率低下。所以说真话是效率最高的，同时绝不说假话也是我们的底线。</p><p>这里强调一下，任何一种工具、任何一种能力都有限制的，也都有边界的，包括沟通能力，实际上说真话就是沟通的能力边界。</p><p>真话不全说，即“我不见得要把所有的真话都表达出来”。俗话说“直言也应该有讳”，我可以有选择的和对方交流，不合适的信息不说，不合适的场景也不说。</p><p>假话绝不说，即“我可以用各种技巧来回应对方，但过程中绝不说假话”。我们说的任何一句话都可能被传出去，被公开化，我的职场信用很快就消失，此时我的沟通技巧再好也无用。</p><p>沟通能力越强，就越得要求自己绝对不说假话，这是高效沟通的首要原则。</p><p>（回应技巧图）</p><p>下面我们来介绍下回应中的一些技巧，包括换口径、换时间、换场合、换角色。</p><h2 id=\"换口径\">换口径</h2><p>换口径是指，对方问你的是A问题，但你偷换个概念，用B口径来回应他。</p><p>例如，对方说，“您可真是大忙人呢”，我说，“我就佩服你这样的大拿，什么事到你手上都能解决”</p><p>当然这个方法有一定风险，分寸很难拿捏，特别容易被人看成抖机灵。</p><h2 id=\"换时间\">换时间</h2><p>换时间是指，另找时间来解决对方的问题。</p><p>当遇到突发问题时，一点心里准备都没有，而且只能回答行或不行。很多人在这个时候一定特别紧张，此时我们可以用换时间的方法，化被动为主动。</p><p>例如，我说，“领导，这么重要的事情，我得认真想想。下周一我来给您汇报，您看行吗？”</p><p>实际上给多长时间一点都不重要，重要的是，当你再次发起沟通时，你已经带上了你想好的目标、条件、计划、要求，来与领导沟通。通过这个举措，你把沟通的掌控权拿回到自己手上，变成了一个主动发起沟通的人。</p><p>换时间，就是为自己争取机会，主动制造一个时间窗口。</p><h2 id=\"换场合\">换场合</h2><p>换场合指，一句话换个场合，把事情降级或升级。</p><p>如果你希望升级一件事的重要性，你就要把场合做扩大化的处理。</p><p>比如，多叫两人一起，等于把这个场合扩大了，这个问题的重要程度也就升级了。</p><p>注意：叫之前先说清楚，他们为什么来参与。</p><p>又比如，会议上对话马上要演变成一场激烈冲突时，就说“等散会后来跟进”，从而把事情降级。</p><h2 id=\"换角色\">换角色</h2><p>换角色是指，把球往回踢一下交由对方判断。即接受到问题时，先问一个问题，进而从回应者变成了提问者。</p><p>如果是现场有很多人的话，可以用换角色大法，从这个尴尬问题的回应者变成为主持人。</p><p>在把球传出去之前，我们至少对以下两个问题有足够清晰的认识：</p><ul>  <li>第一，团队关系到底怎么样，你心里是有答案的。</li>  <li>第二，团队成员能不能接住提问，在了解他们的情况下，你肯定也会有基本判断。</li></ul><p>团队氛围如何自己该知道，这样我才能做到心里有数，接下来该如何去行动。而且在提问时，肯定要给能把问题接住人，比如把疑难问题交给团队里情商比较高，平时就接得住话的伙伴。对他来说，这不是个锅，而是在大领导面前展示的机会。</p><h2 id=\"主持习惯\">主持习惯</h2><p>在职场沟通中要为自己种下一个意识，养成这样的习惯，一旦进入多人沟通场合，如果没人做主持，我就是主持人，此时不管今天我们职位高低，我就是球场上的“中场发动机”，所有的球都送到我这里，同时我也要不断发出去。</p><p>例如，领导问，“这次的例会西西你给打几分”，我说，“东东，咱们团队你呆的最久资格最老，你觉得这次的例会你应该打几分”，然后说，“我很同意你的看法，我也又这样的体会，北北，你的想法是什么？”。</p><p>所以下次遇到有机会当会议主持人时，一定要告诉自己，你对自己要求高，对自己期许更高，所以才接下这个话茬，主动做主持人，掌控全场接球，传球，要球。在全场会议中，派发提问，请求协助，总结提炼。</p><h2 id=\"肯定反射\">肯定反射</h2><p>我们在回应时要养成这样的习惯，把第一句话处理成一个对方的肯定，这个叫肯定反射。</p><p>例如，我说，“您刚刚说的这些太有启发了”，“您提的这个问题，对我们的帮助很大”等等。</p><p>当我们传递肯定，不是为了取悦对方讨好对方。事实上，越是积极的肯定对方，就越是在彰显我很自信，我很有把握，我对接下来的局面很有掌控感，这对于我们后面的沟通是非常有价值的。</p><p>假设有一天我们要表达一些负面情况，那么第1句话传递的肯定就更重要了。因为从长远来看我们还是希望互动能持续下去，这种时候肯定，对方其实为双方留下一个态度意义上的余地。</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485405&amp;idx=1&amp;sn=cc17252f23ec91046532269d7bd6b22d&amp;chksm=fc2262dacb55ebccb0c8f300db3cbed376d35ba1cfe6bb0061982c7f807b376c3ea6d8de2c93&amp;token=1541713099&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2022/06/15/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B061",
            
            
            
            
            
            "date_published": "2022-06-15T00:00:00+08:00",
            "date_modified": "2022-06-15T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/05/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B060",
            "title": "读书笔记(六十) 如何做软件分析1-建模",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：从入行以来自己做了很多项目，也分析了很多项目的程序架构。这次我希望能够更系统性的学习如何做架构分析和软件系统分析。我本身对游戏项目中的业务架构、引擎架构、操作系统架构都有所了解，10多年来从业务架构一步步的深入探索到达了较为底层的架构。最近我突然有感触，自己在分析、解剖这些架构时发现，自己的速度慢效率低，所以我想学习一下，看看业内大佬是如何做架构设计、架构分析、系统解剖的。找了3本书看《Thinking in UML》，《重构》，《系统分析师》这三本书。专门针对这一个主题做一个系统性的学习。由于内容过多，我只能一本本总结，完毕后再写个整体的总结。本篇主要总结《Thinking in UML》这本书。《Thinking in UML》这本书内容丰富，近80万字很厚，尽管我认为他有点啰嗦，但从书本文字内涵上看，作者对软件分析、架构分析、架构设计、系统设计有比较深度的理解，值得去阅读。概述：概述一下我的理解，首先我不想讲UML，因为UML只是工具，我们有很多种工具可以替代它，所以讲它没什么用，最好的结果是我们理解更深层次的分析和建模方法以及它的本质和原理，这对我们来说才是最好的学习内容。开头作者对建模方法做了些说明，从建模方式上看有两种，面向过程的建模方法和面向对象的建模方法，然后分别阐述了它俩的区别和优劣点，得出了一个结论，面向过程的建模方法更适合复杂度较低的系统，面向对象的建模方法更适合复杂度较高的系统。然后就开始说建模了，讲了从现实世界到业务模型应该如何建模，从业务模型到概念模型要如何转换，从概念模型到设计模型要转换，中间抛出很多建模的要素，对这些要素进行了一一说明。这其中有5个关键点，一是，抽象角度，二是，抽象层次，三是，用例，四是，参与者，五是，视图。抽象角度要全才能分析的彻底，抽象层次要适度才能分析的到位，用例的捕获和驱动是设计和执行的根本，参与者是所有建模的中心，视图是建模分析后的产物。下面就来详细说一下，以上概述的内容。目录：1.软件分析为什么要建模？2.建模过程是怎样的？3.建模的核心元素内容：人们做了很多努力积累了很多知识和经验，这些就是最佳实践。对于软件产品来说，最佳实践来自两个方面：一方面是技术类，如设计模式等。另一方面是过程类，如需求方法、分析方法、设计方法等。为什么要建模？建模的方法有哪些？（面向过程和面向对象分析的图）我们要分析这个世界，并用计算机来模拟它，首要的工作是将这个过程描绘出来，把它们的因果关系都定义出来；再通过结构化的设计方法，将这些过程进行细化，形成可以控制的、范围较小的部分。这里有两种方法，一种是面向过程的分析，一种是面向对象的分析。面向过程的分析方法是找到过程的起点，然后顺藤摸瓜，分析每一个部分，直至达到过程的终点。但是呢，面向过程有巨大的问题，随着需求越来越复杂，系统越来越庞大，功能点越来越多，一份数据经常被多个过程共享，这些过程对同一份数据的创建和读取要求越来越趋于复杂和多样，经常出现相矛盾的数据需求，因此分析和设计也变的越来越困难。面向过程遇到的困难，本质上是因为面向过程方法将世界看作是过程化的，一个个紧密相连的小系统，构成这个系统的各个部分之间有着密不可分的因果关系。这种分析方法在需求复杂度较低的时候非常管用，但当系统如此复杂如同蝴蝶效应那般轻轻扇动一下翅膀就能颠覆变得面目全非时，面向过程分析就不再能进行的下去了。实际上，并非面向过程的方法不正确，只是因为构成一个系统的因素太多，要把所有可能的因素都考虑到，把所有因素的因果关系都分析清楚，再把这个过程模拟出来实在是太困难了。我们的精力有限，计算能力有限，只能放弃对整个过程的了解，重新寻找一个方法，能够将复杂的系统转化成一个个我们可以控制的小单元。这个方法的转换正如：如果一次成型一辆汽车太过困难，我们可以将汽车分解为很多零件，分布制造，再依据预先设计好的接口把它们安装起来，形成最终的产品。而面向对象的方法则不同，汽车不再被看作一个一次成型的整体，而是被分解成了许多标准的功能部件来分布设计制造。面向对象方法将世界看作一个个互相独立的对象，相互之间并无因果关系，它们平时是“鸡犬之声相闻，老死不相往来”的，只有在某个外部力量驱动下，对象之间才会依据某种规律相互传递信息。对象从外部来看，对象与外界有消息通道，对象内部是一个黑匣子，什么也看不到，我们称为封装。当对象聚集在一起形成新的对象，结合后的对象具有前两者特性的总和，这称为聚合。对象繁殖产下孩子拥有父辈的全部本领，这称为继承。每个对象都有多个外貌，在不同情况下可以展现不同的外貌，但本质只有一个，这称为接口。多个对象可能长着相同的脸，但背后对象不同，且它们有着不同的行为，这称为多态。从宏观角度说，对象是“短视”的，它不知道也无法理解它所处的宏观环境，也不知道它的行为会对整个宏观环境造成怎样的影响。它只知道与它有着联系的身边的一小群伙伴，这称为依赖，并与小伙伴间保持着信息交流的关系，这称为耦合。一旦我们在对象之间确定了一系列的规则，把符合规则要求的对象组织起来形成特定的结构，它们就能拥有某些特定的能力；给这个结构一个推动力，它们就能做出规则要求的行为。建模过程是怎样的？（从用例建模到概念建模到设计建模图）建模过程首先要从现实世界出发，唯有从现实世界出发才是真正解决问题的出发点。接着从现实世界到业务模型，再从业务模型到概念模型，最后概念模型到设计模型。从现实世界到业务模型（从现实世界到业务模型图）建立模型的过程是一个抽象的过程，首先要知道我们应该如何抽象现实世界。当我们站在很高的抽象层次，以高度归纳的视角来看这个世界的运作时就会发现，现实世界无论多复杂，无论是哪个行业，无论做什么业务，其本质无非是由人、事、物、规则所组成。人是一切的中心，人要做事，做事就会使用一些物，同时做事需要遵循一定的规则。有了事、物、规则就会逐渐形成系统，事、物、规则、系统它们是相辅相成的，于是就有了，人驱动系统，事体现过程，物记录结果，规则代表控制。因此建立模型的关键就是弄明白有什么人，什么人做什么事，什么事产生什么物，中间有什么规则，再把人、事、物之间的关系定义出来，一个模型也就基本成型了。这里头最关键的就是参与者，也就是说，我们要建立的这个模型的意义，完全是被参与者所决定，所建立的这个模型也是完全为参与者所服务的，参与者是整个建模过程的中心。而用例是一种用元模型来表示驱动者的业务目标的这么一个东西，也就是说，用例代表了参与者想要做什么并且最终获得什么的模型。我们所说的这个业务目标就是现实世界中的“事”。而这件事是怎么做的，依据什么规则，则通过称之为业务场景和用例场景的视图来描绘，这些场景就是现实世界中的“规则”。UML通过元模型和视图，捕获现实世界的人、事、物和规则，于是现实信息转化成了业务模型，这也是面向对象方法中的第一步。从业务模型到概念模型（业务模型到概念模型图）得到业务模型仅仅是一个开始，要想将业务模型转化到计算机能理解的模型，还有重要的一步，概念模型。我们可以通过概念化的过程来建立适合计算机理解和实现的模型，这个模型称为分析模型。分析模型向下为计算机实现规定了一种高层次的抽象，这种抽象是一种指导也是一种约束，计算机实现过程非常容易遵循这种指导和约束来完成可执行代码的设计工作。从业务模型到概念模型的过程有个特点，就是：所有的操作都通过边界来决定，即能做什么不能做什么由边界决定。所以边界类实际上代表了原始需求中的“事”，实体类代表了现实世界中的“物”，控制类体现了现实世界中的“规则”，再加上由参与者转化而来的系统的“用户”，这样一来都有了。这个阶段，我们可以对这些分析类在不同的视角上进行归纳和整理，以表达软件所要求的一些信息。可以说，从业务模型到概念模型这一过程，正是我们需要的一种从对象世界来描述现实世界的方法。从概念模型到设计模型（概念模型到设计模型图）概念模型只是纸上谈兵，真正的对象世界行为是由java类、c++类、EJB、COM等这些可执行代码构成的，如果缺少了从概念模型到设计模型这个过程，java类和c++类的行为就无法得到验证。也就是说，设计模型是概念模型在特定环境和条件下的“实例”化，实例化后的对象行为“执行”了概念模型描述的那些信息，因此设计模型得以通过概念模型追溯到原始需求来验证，对象世界是否正确反映了现实世界。设计模型的工作就是建造零部件，组装汽车的过程。这里从概念到设计模型的转化有个技巧，即概念模型的边界类可以被转化为操作界面或系统接口；控制类可以被转化为计算机程序或控制程序；，例如工作流、算法等；实体类可以转化为数据库表、XML文档或者其他带有持久化特征的类。建模的核心元素不论在需求分析、系统分析还是系统设计上，我们一定要学会采用面向对象的方法。在面对问题领域的时候首先不要决定去通盘考虑，而是找出问题领域里包含的抽象角度。如果你把抽象角度都找全了，并且这些角度都分析清楚了，问题领域也就解决了。例如做需求时不要先去弄清楚业务是如何一步步完成的，而是要弄清楚，有多少业务参与者？每个参与者的目标是什么？参与者的目标就是做需求的抽象角度。那建模的“模”到底是什么呢？作者给出了答案，模就是“人、事、物、规则”，它是由抽象角度确定的，需要由静态事物加上特定条件产生的场景。也就是说，我们在建模时，是根据问题领域来建模的，针对问题领域抽象成N个角度，每个抽象角度都可以用一个业务用例来解释，每个业务用例都可以用N个特定场景来描述，每个特定场景都是由事物、规则、行为构成的。如下图：（问题领域图）问题领域 = N个抽象角度（抽象角度图）抽象角度 = 参与者的业务目标 = 业务用例（业务用例图）业务用例 = N个特定场景（用例场景图）用例场景 = 事物 + 规则 + 行为汇总起来：问题领域 = N个抽象角度抽象角度 = 参与者的业务目标 = 业务用例业务用例 = N个用例场景用例场景 = 事物 + 规则 + 行为这个建模公式可以帮助我们理清思路。这在业务建模、分析建模、设计建模时都能遵循同样的公式。这里我们来介绍下这里的一些元素，包括用例、抽象层次、抽象角度、视图、参与者。用例前面我们说过，用例代表了参与者想要做什么并且最终获得什么的模型，也就是说，用例是一种把现实世界的需求捕获下来的方法。例如我们要描述一个系统的功能性需求，就要找到对这个系统有愿望的人，让他们来说明他们会在这个系统里做什么事，想要什么结果。捕获功能性需求，就是用例的作用，而且通过用例，我们可以驱动软件架构的建立。一个软件要实现的功能可以通过用例来捕获，接下来的所有分析、设计、实现、测试都可以由用例来驱动，也就是以实现用例为目标。一个用例就是一个分析单元、设计单元、开发单元、测试单元和部署单元。（解释用例和用例场景图）除了用例，还有用例场景，就是做一件事可以有很多不同的办法和步骤，也会遇到各种意外，因此这件事由很多不同情况的集合构成，这就是用例场景。用例的颗粒度在建模的不同阶段有所不同。在概念建模阶段，用例的粒度以每个用例能描述一个完整的事件流为宜。可理解为一个用例描述一项完整业务中的一个步骤。在系统建模阶段，用例视角是针对计算机的，因此用例的粒度以一个用例能够描述操作者与计算机的一次完整交互为宜。而且不论粒度如何选择，必须把握的原则是，在同一个需求阶段，所有用例的粒度应该是同一个量级的。当我们使用用例来捕获需求时，可以从以下三个观点出发：这个事物是什么？这个事物能做什么？人们能够用这个事物做什么？对于正在准备开发的软件，最好的方法就是从使用者的观点去描述它。包括使用者可以怎么使用它，得到什么样的利益。至于功能性观点和结构性观点，则可以通过使用者观点推导出来。抽象层次抽象层次在面向对象方法中极其重要，学会站在不同抽象层次考虑问题是建立好模型的基础。首先我们要明白，抽象层次越高具体信息越少，但概括能力就越强；反之，具体信息越丰富，结果越确定，但相应的概括能力越弱。这个很好理解，就如公司里有员工、组长、部门长、总监、经理、总裁、总经理，越往上你越对公司整体的运作状况越清晰，但你对具体的执行细节知道的越少，相反你对整体的运作状况越模糊，细节则知道的越清楚。（抽象层次图）也就得到一条结论：抽象的层次越高，被屏蔽的信息也就越多，信息量越少，也就越容易理解和处理。也就说，反应到抽象对象上来说，在高层次抽象之上的对象，它的描述很粗略但适应能力大，在低层次抽象之上的对象，它的描述很精确但适应能力小。而当抽象的层次太高，信息量就会过少，人们实施起来就会产生新的困难。要关注一点，对象参与的场景越多，对象越有抽象的价值，反之则越没有抽象价值。因此在分析过程中，应该关注于那些参与了很多场景的对象，它们往往是分析设计中的重点以及成败的关键。（抽象方法图）抽象有两种方法，一种是自顶向下，一种是自底向上。自顶向下的方法适用于人们从头开始认识一个事物。例如刚开始学习引擎时，如果直接跟你讲引擎程序执行细节你就听不懂，但我换种方法，用比较高的层次的抽象概念来讲就会比较容易明白。自底向上的方法则适用于在实践中改进和提高认识。例如当我们迈过引擎的初级门槛后想要学习更多引擎知识时，就需要去拆解引擎渲染管线，拆解引擎的内存管理方式，拆解引擎资产管理等等，一个个拆解从底层开始学起了解整个引擎的运作方式。视图视图的准确应用是建立好模型的一个重要组成部分。视角是人们观察事物的角度，不同的人或者同一个人出于不同的目的会对同一个信息从不同的角度来审视和评估。视角是针对每个视图来说的，不同的视角展示了同样信息的不同认知角度，以便理解。（视图的价值图）从信息的展示角度来说，恰当的视角可以让观察者更容易抓住信息的本质；另一方面，从观察者角度说，观察者只会关心信息中他感兴趣的那一部分，其他视角的信息对他是没有多少用处的。为特定的信息选择正确的视图，为特定的干系人展示正确的视角并不容易，需要因时因地因人制宜。这里提供两个问题，可以在制图时，帮助大家更好知道该做什么图以及该如何作图。问题1，应该为哪些软件信息绘制哪些视图。问题2，应该给哪些干系人展示哪些视角。参与者参与者在建模过程中处于核心地位，建模是从寻找参与者开始的，有了人就有了事，有了事就有了物，有了事和物就有了规则，这样整个问题就清晰了。（参与者中心图）将所有的参与者找出来，是建模的重要关键点，因为人是一切的中心。在寻找参与者过程中，我们可以问自己以下问题来帮助确定参与者。谁负责提供、使用或删除信息？谁将使用此功能？谁对某个特定功能感兴趣？在组织中的什么地方使用系统？谁负责支持和维护系统？系统有哪些外部资源？其他还有哪些系统将需要与该系统进行交互？有助于检查发现参与者是否正确的问题：是否已找到所有的参与者？每个参与者是否至少涉及到一个用例？能否列出至少两名可以作为特定参与者的人员？是否有参与者担任与系统相关的相似角色？是否有两个参与者担任与用例相关的同一角色？特定的参与者是否将以几种完全不同的方式使用系统？参与者是否有直观名称和描述性名称？参考资料：《Thinking in UML》作者 谭云杰已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485392&amp;idx=1&amp;sn=cbabddfd5843d957cdfbe4b147462e21&amp;chksm=fc2262d7cb55ebc13ba52c468d750a3310db535c0598369ad9f6b3ad8ca33ecd36f11642be6a&amp;token=284980735&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>从入行以来自己做了很多项目，也分析了很多项目的程序架构。这次我希望能够更系统性的学习如何做架构分析和软件系统分析。</p><p>我本身对游戏项目中的业务架构、引擎架构、操作系统架构都有所了解，10多年来从业务架构一步步的深入探索到达了较为底层的架构。最近我突然有感触，自己在分析、解剖这些架构时发现，自己的速度慢效率低，所以我想学习一下，看看业内大佬是如何做架构设计、架构分析、系统解剖的。</p><p>找了3本书看《Thinking in UML》，《重构》，《系统分析师》这三本书。专门针对这一个主题做一个系统性的学习。由于内容过多，我只能一本本总结，完毕后再写个整体的总结。本篇主要总结《Thinking in UML》这本书。</p><p>《Thinking in UML》这本书内容丰富，近80万字很厚，尽管我认为他有点啰嗦，但从书本文字内涵上看，作者对软件分析、架构分析、架构设计、系统设计有比较深度的理解，值得去阅读。</p><h1 id=\"概述\">概述：</h1><p>概述一下我的理解，首先我不想讲UML，因为UML只是工具，我们有很多种工具可以替代它，所以讲它没什么用，最好的结果是我们理解更深层次的分析和建模方法以及它的本质和原理，这对我们来说才是最好的学习内容。</p><p>开头作者对建模方法做了些说明，从建模方式上看有两种，面向过程的建模方法和面向对象的建模方法，然后分别阐述了它俩的区别和优劣点，得出了一个结论，面向过程的建模方法更适合复杂度较低的系统，面向对象的建模方法更适合复杂度较高的系统。</p><p>然后就开始说建模了，讲了从现实世界到业务模型应该如何建模，从业务模型到概念模型要如何转换，从概念模型到设计模型要转换，中间抛出很多建模的要素，对这些要素进行了一一说明。</p><p>这其中有5个关键点，一是，抽象角度，二是，抽象层次，三是，用例，四是，参与者，五是，视图。</p><p>抽象角度要全才能分析的彻底，抽象层次要适度才能分析的到位，用例的捕获和驱动是设计和执行的根本，参与者是所有建模的中心，视图是建模分析后的产物。</p><p>下面就来详细说一下，以上概述的内容。</p><h1 id=\"目录\">目录：</h1><pre><code>1.软件分析为什么要建模？2.建模过程是怎样的？3.建模的核心元素</code></pre><h1 id=\"内容\">内容：</h1><p>人们做了很多努力积累了很多知识和经验，这些就是最佳实践。</p><p>对于软件产品来说，最佳实践来自两个方面：一方面是技术类，如设计模式等。另一方面是过程类，如需求方法、分析方法、设计方法等。</p><h2 id=\"为什么要建模建模的方法有哪些\">为什么要建模？建模的方法有哪些？</h2><p>（面向过程和面向对象分析的图）</p><p>我们要分析这个世界，并用计算机来模拟它，首要的工作是将这个过程描绘出来，把它们的因果关系都定义出来；再通过结构化的设计方法，将这些过程进行细化，形成可以控制的、范围较小的部分。</p><p>这里有两种方法，一种是面向过程的分析，一种是面向对象的分析。</p><p>面向过程的分析方法是找到过程的起点，然后顺藤摸瓜，分析每一个部分，直至达到过程的终点。</p><p>但是呢，面向过程有巨大的问题，随着需求越来越复杂，系统越来越庞大，功能点越来越多，一份数据经常被多个过程共享，这些过程对同一份数据的创建和读取要求越来越趋于复杂和多样，经常出现相矛盾的数据需求，因此分析和设计也变的越来越困难。</p><p>面向过程遇到的困难，本质上是因为面向过程方法将世界看作是过程化的，一个个紧密相连的小系统，构成这个系统的各个部分之间有着密不可分的因果关系。</p><p>这种分析方法在需求复杂度较低的时候非常管用，但当系统如此复杂如同蝴蝶效应那般轻轻扇动一下翅膀就能颠覆变得面目全非时，面向过程分析就不再能进行的下去了。</p><p>实际上，并非面向过程的方法不正确，只是因为构成一个系统的因素太多，要把所有可能的因素都考虑到，把所有因素的因果关系都分析清楚，再把这个过程模拟出来实在是太困难了。</p><p>我们的精力有限，计算能力有限，只能放弃对整个过程的了解，重新寻找一个方法，能够将复杂的系统转化成一个个我们可以控制的小单元。</p><p>这个方法的转换正如：如果一次成型一辆汽车太过困难，我们可以将汽车分解为很多零件，分布制造，再依据预先设计好的接口把它们安装起来，形成最终的产品。</p><p>而面向对象的方法则不同，汽车不再被看作一个一次成型的整体，而是被分解成了许多标准的功能部件来分布设计制造。</p><p>面向对象方法将世界看作一个个互相独立的对象，相互之间并无因果关系，它们平时是“鸡犬之声相闻，老死不相往来”的，只有在某个外部力量驱动下，对象之间才会依据某种规律相互传递信息。</p><p>对象从外部来看，对象与外界有消息通道，对象内部是一个黑匣子，什么也看不到，我们称为封装。当对象聚集在一起形成新的对象，结合后的对象具有前两者特性的总和，这称为聚合。对象繁殖产下孩子拥有父辈的全部本领，这称为继承。每个对象都有多个外貌，在不同情况下可以展现不同的外貌，但本质只有一个，这称为接口。多个对象可能长着相同的脸，但背后对象不同，且它们有着不同的行为，这称为多态。</p><p>从宏观角度说，对象是“短视”的，它不知道也无法理解它所处的宏观环境，也不知道它的行为会对整个宏观环境造成怎样的影响。它只知道与它有着联系的身边的一小群伙伴，这称为依赖，并与小伙伴间保持着信息交流的关系，这称为耦合。</p><p>一旦我们在对象之间确定了一系列的规则，把符合规则要求的对象组织起来形成特定的结构，它们就能拥有某些特定的能力；给这个结构一个推动力，它们就能做出规则要求的行为。</p><h2 id=\"建模过程是怎样的\">建模过程是怎样的？</h2><p>（从用例建模到概念建模到设计建模图）</p><p>建模过程首先要从现实世界出发，唯有从现实世界出发才是真正解决问题的出发点。接着从现实世界到业务模型，再从业务模型到概念模型，最后概念模型到设计模型。</p><p>从现实世界到业务模型</p><p>（从现实世界到业务模型图）</p><p>建立模型的过程是一个抽象的过程，首先要知道我们应该如何抽象现实世界。</p><p>当我们站在很高的抽象层次，以高度归纳的视角来看这个世界的运作时就会发现，</p><p>现实世界无论多复杂，无论是哪个行业，无论做什么业务，其本质无非是由人、事、物、规则所组成。</p><p>人是一切的中心，人要做事，做事就会使用一些物，同时做事需要遵循一定的规则。</p><p>有了事、物、规则就会逐渐形成系统，事、物、规则、系统它们是相辅相成的，</p><p>于是就有了，人驱动系统，事体现过程，物记录结果，规则代表控制。</p><p>因此建立模型的关键就是弄明白有什么人，什么人做什么事，什么事产生什么物，中间有什么规则，再把人、事、物之间的关系定义出来，一个模型也就基本成型了。</p><p>这里头最关键的就是参与者，也就是说，我们要建立的这个模型的意义，完全是被参与者所决定，所建立的这个模型也是完全为参与者所服务的，参与者是整个建模过程的中心。</p><p>而用例是一种用元模型来表示驱动者的业务目标的这么一个东西，也就是说，用例代表了参与者想要做什么并且最终获得什么的模型。</p><p>我们所说的这个业务目标就是现实世界中的“事”。而这件事是怎么做的，依据什么规则，则通过称之为业务场景和用例场景的视图来描绘，这些场景就是现实世界中的“规则”。</p><p>UML通过元模型和视图，捕获现实世界的人、事、物和规则，于是现实信息转化成了业务模型，这也是面向对象方法中的第一步。</p><p>从业务模型到概念模型</p><p>（业务模型到概念模型图）</p><p>得到业务模型仅仅是一个开始，要想将业务模型转化到计算机能理解的模型，还有重要的一步，概念模型。</p><p>我们可以通过概念化的过程来建立适合计算机理解和实现的模型，这个模型称为分析模型。</p><p>分析模型向下为计算机实现规定了一种高层次的抽象，这种抽象是一种指导也是一种约束，计算机实现过程非常容易遵循这种指导和约束来完成可执行代码的设计工作。</p><p>从业务模型到概念模型的过程有个特点，就是：</p><p>所有的操作都通过边界来决定，即能做什么不能做什么由边界决定。</p><p>所以边界类实际上代表了原始需求中的“事”，实体类代表了现实世界中的“物”，控制类体现了现实世界中的“规则”，再加上由参与者转化而来的系统的“用户”，这样一来都有了。</p><p>这个阶段，我们可以对这些分析类在不同的视角上进行归纳和整理，以表达软件所要求的一些信息。</p><p>可以说，从业务模型到概念模型这一过程，正是我们需要的一种从对象世界来描述现实世界的方法。</p><p>从概念模型到设计模型</p><p>（概念模型到设计模型图）</p><p>概念模型只是纸上谈兵，真正的对象世界行为是由java类、c++类、EJB、COM等这些可执行代码构成的，如果缺少了从概念模型到设计模型这个过程，java类和c++类的行为就无法得到验证。</p><p>也就是说，设计模型是概念模型在特定环境和条件下的“实例”化，实例化后的对象行为“执行”了概念模型描述的那些信息，因此设计模型得以通过概念模型追溯到原始需求来验证，对象世界是否正确反映了现实世界。</p><p>设计模型的工作就是建造零部件，组装汽车的过程。</p><p>这里从概念到设计模型的转化有个技巧，即概念模型的边界类可以被转化为操作界面或系统接口；控制类可以被转化为计算机程序或控制程序；，例如工作流、算法等；实体类可以转化为数据库表、XML文档或者其他带有持久化特征的类。</p><h2 id=\"建模的核心元素\">建模的核心元素</h2><p>不论在需求分析、系统分析还是系统设计上，我们一定要学会采用面向对象的方法。</p><p>在面对问题领域的时候首先不要决定去通盘考虑，而是找出问题领域里包含的抽象角度。</p><p>如果你把抽象角度都找全了，并且这些角度都分析清楚了，问题领域也就解决了。</p><p>例如做需求时不要先去弄清楚业务是如何一步步完成的，而是要弄清楚，有多少业务参与者？每个参与者的目标是什么？参与者的目标就是做需求的抽象角度。</p><p>那建模的“模”到底是什么呢？作者给出了答案，模就是“人、事、物、规则”，它是由抽象角度确定的，需要由静态事物加上特定条件产生的场景。</p><p>也就是说，我们在建模时，是根据问题领域来建模的，针对问题领域抽象成N个角度，每个抽象角度都可以用一个业务用例来解释，每个业务用例都可以用N个特定场景来描述，每个特定场景都是由事物、规则、行为构成的。</p><p>如下图：</p><p>（问题领域图）</p><p>问题领域 = N个抽象角度</p><p>（抽象角度图）</p><p>抽象角度 = 参与者的业务目标 = 业务用例</p><p>（业务用例图）</p><p>业务用例 = N个特定场景</p><p>（用例场景图）</p><p>用例场景 = 事物 + 规则 + 行为</p><p>汇总起来：</p><p>问题领域 = N个抽象角度</p><p>抽象角度 = 参与者的业务目标 = 业务用例</p><p>业务用例 = N个用例场景</p><p>用例场景 = 事物 + 规则 + 行为</p><p>这个建模公式可以帮助我们理清思路。这在业务建模、分析建模、设计建模时都能遵循同样的公式。</p><p>这里我们来介绍下这里的一些元素，包括用例、抽象层次、抽象角度、视图、参与者。</p><h3 id=\"用例\">用例</h3><p>前面我们说过，用例代表了参与者想要做什么并且最终获得什么的模型，也就是说，用例是一种把现实世界的需求捕获下来的方法。</p><p>例如我们要描述一个系统的功能性需求，就要找到对这个系统有愿望的人，让他们来说明他们会在这个系统里做什么事，想要什么结果。</p><p>捕获功能性需求，就是用例的作用，而且通过用例，我们可以驱动软件架构的建立。</p><p>一个软件要实现的功能可以通过用例来捕获，接下来的所有分析、设计、实现、测试都可以由用例来驱动，也就是以实现用例为目标。一个用例就是一个分析单元、设计单元、开发单元、测试单元和部署单元。</p><p>（解释用例和用例场景图）</p><p>除了用例，还有用例场景，就是做一件事可以有很多不同的办法和步骤，也会遇到各种意外，因此这件事由很多不同情况的集合构成，这就是用例场景。</p><p>用例的颗粒度在建模的不同阶段有所不同。</p><p>在概念建模阶段，用例的粒度以每个用例能描述一个完整的事件流为宜。可理解为一个用例描述一项完整业务中的一个步骤。</p><p>在系统建模阶段，用例视角是针对计算机的，因此用例的粒度以一个用例能够描述操作者与计算机的一次完整交互为宜。</p><p>而且不论粒度如何选择，必须把握的原则是，在同一个需求阶段，所有用例的粒度应该是同一个量级的。</p><p>当我们使用用例来捕获需求时，可以从以下三个观点出发：</p><pre><code>这个事物是什么？这个事物能做什么？人们能够用这个事物做什么？</code></pre><p>对于正在准备开发的软件，最好的方法就是从使用者的观点去描述它。</p><p>包括使用者可以怎么使用它，得到什么样的利益。</p><p>至于功能性观点和结构性观点，则可以通过使用者观点推导出来。</p><h3 id=\"抽象层次\">抽象层次</h3><p>抽象层次在面向对象方法中极其重要，学会站在不同抽象层次考虑问题是建立好模型的基础。</p><p>首先我们要明白，抽象层次越高具体信息越少，但概括能力就越强；反之，具体信息越丰富，结果越确定，但相应的概括能力越弱。</p><p>这个很好理解，就如公司里有员工、组长、部门长、总监、经理、总裁、总经理，越往上你越对公司整体的运作状况越清晰，但你对具体的执行细节知道的越少，相反你对整体的运作状况越模糊，细节则知道的越清楚。</p><p>（抽象层次图）</p><p>也就得到一条结论：</p><pre><code>抽象的层次越高，被屏蔽的信息也就越多，信息量越少，也就越容易理解和处理。</code></pre><p>也就说，反应到抽象对象上来说，在高层次抽象之上的对象，它的描述很粗略但适应能力大，在低层次抽象之上的对象，它的描述很精确但适应能力小。而当抽象的层次太高，信息量就会过少，人们实施起来就会产生新的困难。</p><p>要关注一点，对象参与的场景越多，对象越有抽象的价值，反之则越没有抽象价值。因此在分析过程中，应该关注于那些参与了很多场景的对象，它们往往是分析设计中的重点以及成败的关键。</p><p>（抽象方法图）</p><p>抽象有两种方法，一种是自顶向下，一种是自底向上。</p><p>自顶向下的方法适用于人们从头开始认识一个事物。</p><p>例如刚开始学习引擎时，如果直接跟你讲引擎程序执行细节你就听不懂，但我换种方法，用比较高的层次的抽象概念来讲就会比较容易明白。</p><p>自底向上的方法则适用于在实践中改进和提高认识。</p><p>例如当我们迈过引擎的初级门槛后想要学习更多引擎知识时，就需要去拆解引擎渲染管线，拆解引擎的内存管理方式，拆解引擎资产管理等等，一个个拆解从底层开始学起了解整个引擎的运作方式。</p><h3 id=\"视图\">视图</h3><p>视图的准确应用是建立好模型的一个重要组成部分。</p><p>视角是人们观察事物的角度，不同的人或者同一个人出于不同的目的会对同一个信息从不同的角度来审视和评估。</p><p>视角是针对每个视图来说的，不同的视角展示了同样信息的不同认知角度，以便理解。</p><p>（视图的价值图）</p><p>从信息的展示角度来说，恰当的视角可以让观察者更容易抓住信息的本质；</p><p>另一方面，从观察者角度说，观察者只会关心信息中他感兴趣的那一部分，其他视角的信息对他是没有多少用处的。</p><p>为特定的信息选择正确的视图，为特定的干系人展示正确的视角并不容易，需要因时因地因人制宜。</p><p>这里提供两个问题，可以在制图时，帮助大家更好知道该做什么图以及该如何作图。</p><pre><code>问题1，应该为哪些软件信息绘制哪些视图。问题2，应该给哪些干系人展示哪些视角。</code></pre><h3 id=\"参与者\">参与者</h3><p>参与者在建模过程中处于核心地位，建模是从寻找参与者开始的，有了人就有了事，有了事就有了物，有了事和物就有了规则，这样整个问题就清晰了。</p><p>（参与者中心图）</p><p>将所有的参与者找出来，是建模的重要关键点，因为人是一切的中心。</p><p>在寻找参与者过程中，我们可以问自己以下问题来帮助确定参与者。</p><pre><code>谁负责提供、使用或删除信息？谁将使用此功能？谁对某个特定功能感兴趣？在组织中的什么地方使用系统？谁负责支持和维护系统？系统有哪些外部资源？其他还有哪些系统将需要与该系统进行交互？</code></pre><p>有助于检查发现参与者是否正确的问题：</p><pre><code>是否已找到所有的参与者？每个参与者是否至少涉及到一个用例？能否列出至少两名可以作为特定参与者的人员？是否有参与者担任与系统相关的相似角色？是否有两个参与者担任与用例相关的同一角色？特定的参与者是否将以几种完全不同的方式使用系统？参与者是否有直观名称和描述性名称？</code></pre><h3 id=\"参考资料\">参考资料：</h3><p>《Thinking in UML》作者 谭云杰</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485392&amp;idx=1&amp;sn=cbabddfd5843d957cdfbe4b147462e21&amp;chksm=fc2262d7cb55ebc13ba52c468d750a3310db535c0598369ad9f6b3ad8ca33ecd36f11642be6a&amp;token=284980735&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2022/05/18/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B060",
            
            
            
            "tags": ["读书笔记","前端技术"],
            
            "date_published": "2022-05-18T00:00:00+08:00",
            "date_modified": "2022-05-18T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/05/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B059",
            "title": "读书笔记(五十九) 《游戏引擎架构》#4 低阶渲染器（6）",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》、《游戏引擎原理与实践》后对引擎架构的理解又深入了些。近段时间有对引擎剖析的想法，正好借这两本书对游戏引擎的架构做一个完整的分析。《游戏引擎架构》用简明、清楚的方式阐述引擎架构，知识覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。《游戏引擎原理与实践》有两册内容比较详尽，代码示例展示比较多，内容比较丰富。我结合这两本书以及自己的经验，写一些自己的知识总结以帮助自己学习引擎知识，文章中我会深入分析游戏引擎的历史、架构、模块，并通过引擎开发实践来完成对引擎知识的掌握。游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。概述：本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：  时间库  自定义容器库  字符串散列库  内存管理框架  RTTI与反射模块  图形计算库  资产管理模块  低阶渲染器  剔除与合批模块  动画模块  物理模块  UI底层框架  性能剖析器的核心部分  脚本系统  视觉效果模块本篇内容为列表中的第8个部分的第6节。正文：简单回顾下前文前几篇文章我们聊了GPU在计算机硬件主板中的位置与结构，知道了CPU、GPU的通信介质，手机上的主板结构。然后聊了下显卡的历史，图形驱动的历史，知道了GPU和图形接口在历史长河汇总的来龙去脉。接着聊了CPU的硬件架构，GPU硬件架构，以及GPU软件架构中的各个细节，其中还对比了GPU与CPU的相似与差异，大体明白了GPU是如何工作的。下面我们开始这篇内容本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。目录：  主板结构中的显卡  GPU功能发展史  GPU与CPU的差异  GPU硬件特点  图形驱动程序架构  引擎渲染架构  封装关系  图形API分类  引擎渲染流程拆解  渲染器的设计结构上篇聊了下图形驱动程序架构，它封装了各类显卡的驱动程序，根据描述的GPU指令和数据的流程图，我们能更好的理解驱动程序与GPU之间的责任划分与配合。接着为了能更好的理解低阶渲染器，先以统计和描述OpenGL接口的方式来了解和熟悉图形接口，本篇就继上一篇内容。二、引擎渲染架构本节重点介绍引擎中低阶渲染器的架构，包括渲染的封装关系、图形API的分类、引擎渲染流程的拆解、以及渲染器的设计结构，层层理解渲染架构是如何设计的。一、封装关系游戏的渲染从业务到引擎到图形API到操作系统到驱动程序到硬件经过层层的封装，每一层封装都是有意义的，每一层的封装的目的都有相通之处，都是更好的为上层提供服务。游戏引擎需要封装图形API，让引擎开发者不用关心底层的图形API，图形API则要封装硬件驱动API，让引擎渲染器开发者不需要关心底层的硬件驱动API。如下图：（渲染API层层封装图）从上图中，我们看到每种硬件都有自己的驱动程序，因此操作系统中有很多硬件的驱动程序，图形API就封装了所有的硬件驱动接口，为引擎调用提供了方便。而图形驱动程序又有很多种，这使得图形API在调用时也会遇到不同平台带来的麻烦，因此引擎封装了所有平台的图形API，为引擎其他模块使用图形API时提供了方便。就这样层层封装，图形驱动程序封装了硬件驱动，引擎封装了图形驱动，最终更方便了开发者使用游戏引擎开发游戏。二、图形API分类前文中我们描述了很多OpenGL的接口，我们可以通过对OpenGL接口的统计和描述，可以将所有的图形API可以划分成四部分：（图形API模块划分图）上图展示了四部分的内容，四部分包括：资源、状态、缓冲、接口资源：1.Shader着色器，相关图形接口2.纹理贴图，相关图形接口3.采样器，相关图形接口状态：1.视口，相关图形接口2.光栅化，相关图形接口3.Blend混合，相关图形接口缓冲：1.缓冲区，包括颜色缓冲、深度缓冲、模板缓冲，相关图形接口2.顶点，相关图形接口3.帧缓冲区对象（FBO），相关图形接口接口：1.图元绘制，相关图形接口2.开关、查询、判断等通用接口，相关图形接口3.其他非通用特殊接口对其精简后可理解为如下：  资源：Shader着色器、纹理贴图、采样器  状态：视口、光栅化、Blend混合  缓冲：顶点、缓冲区、帧缓冲对象（FBO）  接口：图元绘制、通用接口（开关、查询、判断等）、其他特殊接口现在，我们大致了解了图形API接口以及这些接口的分类，这样我们就能知道它到底可以做哪些事情，又是怎么去封装和定义驱动程序接口的。接着下面我们就来拆解下渲染流程以及渲染器。三、引擎渲染流程拆解渲染流程是整个引擎的核心，使用UE4可以轻松实现好的渲染效果，但它的架构较封闭难以实现自定义光照模型，而Unity渲染架构比较开放，但默认渲染效果一般，用户需要按照Unity的规则自己去实现一套好的效果。对于渲染流程和材质上的设计两个引擎都有优缺点，如果我们想得到希望的结果，还要看我们对游戏引擎的掌握程度。首先，我们来拆解下渲染的简易流程，对一个物体从加入渲染到最终渲染的过程进行拆解。(引擎中简易的渲染流程拆解示意图)如上图所示，一个物体的传统渲染流程如下：1.渲染前置裁剪2.前期数据整理3.裁剪相机外物体4.渲染准备工作5.提交渲染指令人们常说GPU中的渲染管线，实际上在GPU之前，引擎中的渲染管线非常重要，它就是引擎的渲染程序的执行过程。在引擎代码执行过程中，一个物体从加入渲染到最终提交渲染，这中间要经过以上5个阶段，包括前置裁剪，前期数据整理，裁剪相机外物体，渲染准备工作，提交渲染指令。渲染前置裁剪有很多方法，包括遮挡剔除裁剪，九宫格剔除裁剪，远距离物体剔除裁剪等。这些裁剪算法的应用可以根据业务场景不同而有所选择。前置数据整理，包括视口参数，节点整理，物体排序等。裁剪相机外物体，引擎一般用AABB包剔除，因为这是最快的剔除方法而且还可以多线程计算剔除，每个要渲染的物体都会计算一个长方体AABB范围，与相机的正交或透视范围进行相交计算。渲染准备工作，为渲染做准备，包括数据检查，Shader解析，深度图准备，色彩空间设置，相机设置等，在真正渲染场景内物体前做好准备工作。提交渲染指令，把所有渲染的指令提交给GPU，这里有两种情况，一种是立即调用图形API设置渲染状态并最后告诉GPU指令提交完毕，另一种是开线程提交。（引擎逻辑渲染流程图）上图为商业引擎中的逻辑渲染管线（实际上还有很多节点为了编辑和展示场景服务的，我暂时忽略它们），这里我用红色标出了3个关键节点，包括剔除相机外物体，渲染ShowMaps，调用渲染指令，它们在这个逻辑渲染管线中是比较重要的。引擎会从循环总入口开始执行逻辑管线，先检查数据与参数防止后面的逻辑执行出现异常，接着针对每个视口做渲染（多视口通常用于编辑器中多个窗口的渲染），然后由于收集了所有Camera，对每个Camera都执行一次渲染逻辑，紧接着是UI渲染，由于UI的特殊结构设计，它会与普通物体分开渲染（这里主要涉及到UI的渲染合批以及合批算法，会在后面的章节中详细展开分析），最后渲染结束清理数据。（逻辑渲染管线分两种的图）这里我着重提一下渲染Camera这个节点，它有两条线路可走。条是我们自定义的渲染管线，这在Unity商业引擎中就有这样的可编程逻辑渲染管线，通过可编程逻辑渲染管线，我们可以制定包括渲染物体的顺序、针对某些特殊物体的渲染、各种渲染效果的自定义处理，这么做的结果可以让我们去除掉多余的渲染操作提高性能，增加定制的渲染功能，让逻辑渲染管线更符合我们当下的项目。同时Unity引擎在此基础上打造了更加方便更加易于使用的逻辑渲染管线，即URP和HDRP。当然可编程渲染管线不是万能，因为引擎没有完全放手这块逻辑，它保留了通用的和固定逻辑的功能模块，从而减轻大家的编程负担（如果要重写整个管线工作量就太大了）。另一条是引擎固定的逻辑渲染管线，这条管线上包含了渲染需要的所有操作，包括数据准备、节点整理、相机外物体裁剪、渲染参数设置、深度图渲染、阴影图渲染、渲染状态提交等，通常是引擎根据所有渲染功能汇总编写的一套通用逻辑渲染管线。(渲染管线中的三个要点图)这里的逻辑渲染管线都有三个要点，第一个是剔除相机外物体，引擎会根据物体大小计算一个AABB包围盒，通过包围盒与相机正交或透视的计算得出它是否需要渲染。第二个是ShdowMaps绘制，在渲染物体前我们需要知道物体之间的遮挡关系才能计算出阴影，所以先让GPU跑一遍渲染管线计算每个像素点上物体的遮挡关系（这里简单介绍一下，后面在渲染效果章节再详细说明）。第三个是设置和提交渲染状态，引擎把物体归类为不透明物体、半透明物体、以及天空盒和其他，把相同的几何物体放在一起渲染减少了渲染指令重复提交的开销，提高了运行效率。在提交渲染指令时有两个方法，两个方法最终都是调用相应平台的图形API，一是直接调用图形API，每当需要设置渲染状态、提交渲染指令时，直接调用相应平台的图形API，将操作立即告诉GPU（GPU中也有自己的队列）。二是将要改变的渲染状态和指令推入进线程队列中，再在另一个线程里取出队列中的渲染状态和指令，接着调用图形API通知GPU，这样做就是为了不阻塞主线程。通常渲染引擎会把渲染线程和引擎主线程拆分开来，渲染线程单独处理渲染状态改变的指令，主线程和渲染线程之间则用队列通信，这个逻辑功能在Unity和Unreal中都有使用。四、渲染器的设计结构前面我们介绍了逻辑渲染管线，主要说明的是逻辑渲染管线中做了什么事情，有哪些关键点，逻辑渲染管线最终都会嗲用图形API去提交渲染指令，这些都是引擎中渲染器要做的事情，下面我们来介绍下渲染器的封装与结构设计。不同硬件通过不同驱动程序进行管理，图形API封装了很多驱动程序让开发者不必关心硬件驱动程序。引擎也是同样的作用，由于平台有很多种，图形API也有很多种，因此引擎需要封装图形API为渲染器，让开发者不用关心底层的图形API，这样引擎制作的游戏都可以发布到多个平台。（图形API封装图）为了拥有一个易用的多平台的可扩展的渲染器，引擎必须将图形API封装，也就是用对象的方式将部分渲染数据存储起来，在执行时立即使用并能减少不少渲染指令。由于每个平台的API不同，因此封装时首先将不同平台的API封装成统一的接口，这要求我们在封装时不仅仅只是检查参数这么简单，还需要我们针对性的用面向对象的方式去设计图形API封装结构。其次每个平台都有自己特殊的功能和接口，需要额外做一些封装提供给引擎使用。其中所有封装都可以归纳分类为4种类型，资源、缓冲、状态、接口。渲染资源属于API层的资源类型，原始的API使用起来比较繁琐，为了简化它的使用，游戏引擎都会再封装一次。资源类型的接口包括创建资源、设置资源、加载资源、销毁资源。缓冲对象的目的是更方便开发者把内存数据复制到显存中，状态对象的目的是为了记录当前状态并保留一份在主存中，以减少同一个绘制管线中的重复设置，接口的目的就是为了更方便开发者调用图形API。（渲染指令的对象设计图）渲染器是对图形API的进一步封装，用于提高资源的使用效率。通常我们用图形API实现一个功能要经过多个步骤。经过整合的渲染器接口，可以通过一两个步骤就可以实现原本需要多个步骤的功能。渲染器功能一般包括渲染窗口相关信息、创建资源、设置资源、销毁资源、获得显卡信息、完成渲染流程等。因此渲染器需要抽象出各种接口，以供子类去实现，这样就可以兼容各种渲染API。上图中详细举例了渲染状态、渲染缓冲、渲染资源、逻辑状态信息。将他们在引擎中封装成对象，就是为了更好的加快渲染器中处理资源的速度，减少设置资源时耗费的CPU时间。同时为了达到这个目标，我们就需要管理这些资源对象。额外话题，前面说到不同图形API不同平台设备有很多差异，这里就举个例子，简单介绍下DX12中的指令队列原理。（DX12与GPU引擎协作原理）现在大部分新式GPU都包含多个功能的独立引擎，例如复制引擎、计算引擎、3D引擎，把原本提交的GPU指令大杂烩拆分并交给不同的引擎，这样各大引擎可以根据自身情况做优化从而使得执行效率变得更高，而且拆分后引擎可以并行执行指令也使得整体指令执行效率变高。在使用DX12时，每个线程都会填入复制、计算和3D队列这三个队列，其中3D队列可以驱动另外两个GPU引擎，计算队列可以驱动计算和复制引擎，而复制队列只能驱动复制引擎。（GPU中三大引擎工作原理，来源：微软官网）上图说明了DX中的多引擎队列设计是如何跨多个GPU引擎协同工作的。它包括在必要时进行引擎间同步处理，因为引擎间有相互依赖的情况。复制引擎会复制转译所需的几何，3D引擎会等候这些复本完成，并透过几何呈现预先传递。计算引擎会使用此结果并分派结果，同时复制引擎上一直在拷贝需要的资源，最终被3d引擎使用并进行最终绘制。参考资料：《OpenGL ES3.0 编程指南》作者：金斯伯格《游戏引擎架构》作者：杰森.格雷戈瑞《游戏引擎原理与实践》作者：程东《GPU 引擎》https://docs.microsoft.com/zh-tw/windows/win32/direct3d12/user-mode-heap-synchronization《CPU体系结构》https://my.oschina.net/fileoptions/blog/1633021已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485343&amp;idx=1&amp;sn=78ee7bce86f53c7ed5cb59d08a6a29f2&amp;chksm=fc226298cb55eb8e89b22caa781fa0ed21dbb196720d633f62855bfd4d3a4959b78c343ac54b&amp;token=39636778&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》、《游戏引擎原理与实践》后对引擎架构的理解又深入了些。近段时间有对引擎剖析的想法，正好借这两本书对游戏引擎的架构做一个完整的分析。</p><p>《游戏引擎架构》用简明、清楚的方式阐述引擎架构，知识覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。《游戏引擎原理与实践》有两册内容比较详尽，代码示例展示比较多，内容比较丰富。</p><p>我结合这两本书以及自己的经验，写一些自己的知识总结以帮助自己学习引擎知识，文章中我会深入分析游戏引擎的历史、架构、模块，并通过引擎开发实践来完成对引擎知识的掌握。</p><p>游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。</p><h1 id=\"概述\">概述：</h1><p>本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：</p><ul>  <li>时间库</li>  <li>自定义容器库</li>  <li>字符串散列库</li>  <li>内存管理框架</li>  <li>RTTI与反射模块</li>  <li>图形计算库</li>  <li>资产管理模块</li>  <li>低阶渲染器</li>  <li>剔除与合批模块</li>  <li>动画模块</li>  <li>物理模块</li>  <li>UI底层框架</li>  <li>性能剖析器的核心部分</li>  <li>脚本系统</li>  <li>视觉效果模块</li></ul><p>本篇内容为列表中的第8个部分的第6节。</p><h1 id=\"正文\">正文：</h1><p>简单回顾下前文</p><p>前几篇文章我们聊了GPU在计算机硬件主板中的位置与结构，知道了CPU、GPU的通信介质，手机上的主板结构。然后聊了下显卡的历史，图形驱动的历史，知道了GPU和图形接口在历史长河汇总的来龙去脉。接着聊了CPU的硬件架构，GPU硬件架构，以及GPU软件架构中的各个细节，其中还对比了GPU与CPU的相似与差异，大体明白了GPU是如何工作的。</p><p>下面我们开始这篇内容</p><p>本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。</p><p>目录：</p><ul>  <li>主板结构中的显卡</li>  <li>GPU功能发展史</li>  <li>GPU与CPU的差异</li>  <li>GPU硬件特点</li>  <li>图形驱动程序架构</li>  <li>引擎渲染架构</li>  <li>封装关系</li>  <li>图形API分类</li>  <li>引擎渲染流程拆解</li>  <li>渲染器的设计结构</li></ul><p>上篇聊了下图形驱动程序架构，它封装了各类显卡的驱动程序，根据描述的GPU指令和数据的流程图，我们能更好的理解驱动程序与GPU之间的责任划分与配合。接着为了能更好的理解低阶渲染器，先以统计和描述OpenGL接口的方式来了解和熟悉图形接口，本篇就继上一篇内容。</p><h2 id=\"二引擎渲染架构\">二、引擎渲染架构</h2><p>本节重点介绍引擎中低阶渲染器的架构，包括渲染的封装关系、图形API的分类、引擎渲染流程的拆解、以及渲染器的设计结构，层层理解渲染架构是如何设计的。</p><h2 id=\"一封装关系\">一、封装关系</h2><p>游戏的渲染从业务到引擎到图形API到操作系统到驱动程序到硬件经过层层的封装，每一层封装都是有意义的，每一层的封装的目的都有相通之处，都是更好的为上层提供服务。</p><p>游戏引擎需要封装图形API，让引擎开发者不用关心底层的图形API，图形API则要封装硬件驱动API，让引擎渲染器开发者不需要关心底层的硬件驱动API。如下图：</p><p>（渲染API层层封装图）</p><p>从上图中，我们看到每种硬件都有自己的驱动程序，因此操作系统中有很多硬件的驱动程序，图形API就封装了所有的硬件驱动接口，为引擎调用提供了方便。而图形驱动程序又有很多种，这使得图形API在调用时也会遇到不同平台带来的麻烦，因此引擎封装了所有平台的图形API，为引擎其他模块使用图形API时提供了方便。就这样层层封装，图形驱动程序封装了硬件驱动，引擎封装了图形驱动，最终更方便了开发者使用游戏引擎开发游戏。</p><h2 id=\"二图形api分类\">二、图形API分类</h2><p>前文中我们描述了很多OpenGL的接口，我们可以通过对OpenGL接口的统计和描述，可以将所有的图形API可以划分成四部分：</p><p>（图形API模块划分图）</p><p>上图展示了四部分的内容，四部分包括：资源、状态、缓冲、接口</p><p>资源：1.Shader着色器，相关图形接口2.纹理贴图，相关图形接口3.采样器，相关图形接口</p><p>状态：1.视口，相关图形接口2.光栅化，相关图形接口3.Blend混合，相关图形接口</p><p>缓冲：1.缓冲区，包括颜色缓冲、深度缓冲、模板缓冲，相关图形接口2.顶点，相关图形接口3.帧缓冲区对象（FBO），相关图形接口</p><p>接口：1.图元绘制，相关图形接口2.开关、查询、判断等通用接口，相关图形接口3.其他非通用特殊接口</p><p>对其精简后可理解为如下：</p><ul>  <li>资源：Shader着色器、纹理贴图、采样器</li>  <li>状态：视口、光栅化、Blend混合</li>  <li>缓冲：顶点、缓冲区、帧缓冲对象（FBO）</li>  <li>接口：图元绘制、通用接口（开关、查询、判断等）、其他特殊接口</li></ul><p>现在，我们大致了解了图形API接口以及这些接口的分类，这样我们就能知道它到底可以做哪些事情，又是怎么去封装和定义驱动程序接口的。接着下面我们就来拆解下渲染流程以及渲染器。</p><h2 id=\"三引擎渲染流程拆解\">三、引擎渲染流程拆解</h2><p>渲染流程是整个引擎的核心，使用UE4可以轻松实现好的渲染效果，但它的架构较封闭难以实现自定义光照模型，而Unity渲染架构比较开放，但默认渲染效果一般，用户需要按照Unity的规则自己去实现一套好的效果。对于渲染流程和材质上的设计两个引擎都有优缺点，如果我们想得到希望的结果，还要看我们对游戏引擎的掌握程度。</p><p>首先，我们来拆解下渲染的简易流程，对一个物体从加入渲染到最终渲染的过程进行拆解。</p><p>(引擎中简易的渲染流程拆解示意图)</p><p>如上图所示，一个物体的传统渲染流程如下：1.渲染前置裁剪2.前期数据整理3.裁剪相机外物体4.渲染准备工作5.提交渲染指令</p><p>人们常说GPU中的渲染管线，实际上在GPU之前，引擎中的渲染管线非常重要，它就是引擎的渲染程序的执行过程。在引擎代码执行过程中，一个物体从加入渲染到最终提交渲染，这中间要经过以上5个阶段，包括前置裁剪，前期数据整理，裁剪相机外物体，渲染准备工作，提交渲染指令。</p><h3 id=\"渲染前置裁剪有很多方法包括遮挡剔除裁剪九宫格剔除裁剪远距离物体剔除裁剪等这些裁剪算法的应用可以根据业务场景不同而有所选择\">渲染前置裁剪有很多方法，包括遮挡剔除裁剪，九宫格剔除裁剪，远距离物体剔除裁剪等。这些裁剪算法的应用可以根据业务场景不同而有所选择。</h3><p>前置数据整理，包括视口参数，节点整理，物体排序等。</p><h3 id=\"裁剪相机外物体引擎一般用aabb包剔除因为这是最快的剔除方法而且还可以多线程计算剔除每个要渲染的物体都会计算一个长方体aabb范围与相机的正交或透视范围进行相交计算\">裁剪相机外物体，引擎一般用AABB包剔除，因为这是最快的剔除方法而且还可以多线程计算剔除，每个要渲染的物体都会计算一个长方体AABB范围，与相机的正交或透视范围进行相交计算。</h3><h3 id=\"渲染准备工作为渲染做准备包括数据检查shader解析深度图准备色彩空间设置相机设置等在真正渲染场景内物体前做好准备工作\">渲染准备工作，为渲染做准备，包括数据检查，Shader解析，深度图准备，色彩空间设置，相机设置等，在真正渲染场景内物体前做好准备工作。</h3><h3 id=\"提交渲染指令把所有渲染的指令提交给gpu这里有两种情况一种是立即调用图形api设置渲染状态并最后告诉gpu指令提交完毕另一种是开线程提交\">提交渲染指令，把所有渲染的指令提交给GPU，这里有两种情况，一种是立即调用图形API设置渲染状态并最后告诉GPU指令提交完毕，另一种是开线程提交。</h3><p>（引擎逻辑渲染流程图）</p><p>上图为商业引擎中的逻辑渲染管线（实际上还有很多节点为了编辑和展示场景服务的，我暂时忽略它们），这里我用红色标出了3个关键节点，包括剔除相机外物体，渲染ShowMaps，调用渲染指令，它们在这个逻辑渲染管线中是比较重要的。</p><h3 id=\"引擎会从循环总入口开始执行逻辑管线先检查数据与参数防止后面的逻辑执行出现异常接着针对每个视口做渲染多视口通常用于编辑器中多个窗口的渲染然后由于收集了所有camera对每个camera都执行一次渲染逻辑紧接着是ui渲染由于ui的特殊结构设计它会与普通物体分开渲染这里主要涉及到ui的渲染合批以及合批算法会在后面的章节中详细展开分析最后渲染结束清理数据\">引擎会从循环总入口开始执行逻辑管线，先检查数据与参数防止后面的逻辑执行出现异常，接着针对每个视口做渲染（多视口通常用于编辑器中多个窗口的渲染），然后由于收集了所有Camera，对每个Camera都执行一次渲染逻辑，紧接着是UI渲染，由于UI的特殊结构设计，它会与普通物体分开渲染（这里主要涉及到UI的渲染合批以及合批算法，会在后面的章节中详细展开分析），最后渲染结束清理数据。</h3><p>（逻辑渲染管线分两种的图）</p><p>这里我着重提一下渲染Camera这个节点，它有两条线路可走。</p><h3 id=\"条是我们自定义的渲染管线这在unity商业引擎中就有这样的可编程逻辑渲染管线通过可编程逻辑渲染管线我们可以制定包括渲染物体的顺序针对某些特殊物体的渲染各种渲染效果的自定义处理这么做的结果可以让我们去除掉多余的渲染操作提高性能增加定制的渲染功能让逻辑渲染管线更符合我们当下的项目同时unity引擎在此基础上打造了更加方便更加易于使用的逻辑渲染管线即urp和hdrp当然可编程渲染管线不是万能因为引擎没有完全放手这块逻辑它保留了通用的和固定逻辑的功能模块从而减轻大家的编程负担如果要重写整个管线工作量就太大了\">条是我们自定义的渲染管线，这在Unity商业引擎中就有这样的可编程逻辑渲染管线，通过可编程逻辑渲染管线，我们可以制定包括渲染物体的顺序、针对某些特殊物体的渲染、各种渲染效果的自定义处理，这么做的结果可以让我们去除掉多余的渲染操作提高性能，增加定制的渲染功能，让逻辑渲染管线更符合我们当下的项目。同时Unity引擎在此基础上打造了更加方便更加易于使用的逻辑渲染管线，即URP和HDRP。当然可编程渲染管线不是万能，因为引擎没有完全放手这块逻辑，它保留了通用的和固定逻辑的功能模块，从而减轻大家的编程负担（如果要重写整个管线工作量就太大了）。</h3><p>另一条是引擎固定的逻辑渲染管线，这条管线上包含了渲染需要的所有操作，包括数据准备、节点整理、相机外物体裁剪、渲染参数设置、深度图渲染、阴影图渲染、渲染状态提交等，通常是引擎根据所有渲染功能汇总编写的一套通用逻辑渲染管线。</p><p>(渲染管线中的三个要点图)</p><p>这里的逻辑渲染管线都有三个要点，第一个是剔除相机外物体，引擎会根据物体大小计算一个AABB包围盒，通过包围盒与相机正交或透视的计算得出它是否需要渲染。第二个是ShdowMaps绘制，在渲染物体前我们需要知道物体之间的遮挡关系才能计算出阴影，所以先让GPU跑一遍渲染管线计算每个像素点上物体的遮挡关系（这里简单介绍一下，后面在渲染效果章节再详细说明）。</p><p>第三个是设置和提交渲染状态，引擎把物体归类为不透明物体、半透明物体、以及天空盒和其他，把相同的几何物体放在一起渲染减少了渲染指令重复提交的开销，提高了运行效率。在提交渲染指令时有两个方法，两个方法最终都是调用相应平台的图形API，一是直接调用图形API，每当需要设置渲染状态、提交渲染指令时，直接调用相应平台的图形API，将操作立即告诉GPU（GPU中也有自己的队列）。二是将要改变的渲染状态和指令推入进线程队列中，再在另一个线程里取出队列中的渲染状态和指令，接着调用图形API通知GPU，这样做就是为了不阻塞主线程。</p><p>通常渲染引擎会把渲染线程和引擎主线程拆分开来，渲染线程单独处理渲染状态改变的指令，主线程和渲染线程之间则用队列通信，这个逻辑功能在Unity和Unreal中都有使用。</p><h2 id=\"四渲染器的设计结构\">四、渲染器的设计结构</h2><p>前面我们介绍了逻辑渲染管线，主要说明的是逻辑渲染管线中做了什么事情，有哪些关键点，逻辑渲染管线最终都会嗲用图形API去提交渲染指令，这些都是引擎中渲染器要做的事情，下面我们来介绍下渲染器的封装与结构设计。</p><p>不同硬件通过不同驱动程序进行管理，图形API封装了很多驱动程序让开发者不必关心硬件驱动程序。引擎也是同样的作用，由于平台有很多种，图形API也有很多种，因此引擎需要封装图形API为渲染器，让开发者不用关心底层的图形API，这样引擎制作的游戏都可以发布到多个平台。</p><p>（图形API封装图）</p><p>为了拥有一个易用的多平台的可扩展的渲染器，引擎必须将图形API封装，也就是用对象的方式将部分渲染数据存储起来，在执行时立即使用并能减少不少渲染指令。</p><p>由于每个平台的API不同，因此封装时首先将不同平台的API封装成统一的接口，这要求我们在封装时不仅仅只是检查参数这么简单，还需要我们针对性的用面向对象的方式去设计图形API封装结构。其次每个平台都有自己特殊的功能和接口，需要额外做一些封装提供给引擎使用。</p><p>其中所有封装都可以归纳分类为4种类型，资源、缓冲、状态、接口。</p><h3 id=\"渲染资源属于api层的资源类型原始的api使用起来比较繁琐为了简化它的使用游戏引擎都会再封装一次资源类型的接口包括创建资源设置资源加载资源销毁资源\">渲染资源属于API层的资源类型，原始的API使用起来比较繁琐，为了简化它的使用，游戏引擎都会再封装一次。资源类型的接口包括创建资源、设置资源、加载资源、销毁资源。</h3><h3 id=\"缓冲对象的目的是更方便开发者把内存数据复制到显存中状态对象的目的是为了记录当前状态并保留一份在主存中以减少同一个绘制管线中的重复设置接口的目的就是为了更方便开发者调用图形api\">缓冲对象的目的是更方便开发者把内存数据复制到显存中，状态对象的目的是为了记录当前状态并保留一份在主存中，以减少同一个绘制管线中的重复设置，接口的目的就是为了更方便开发者调用图形API。</h3><p>（渲染指令的对象设计图）</p><p>渲染器是对图形API的进一步封装，用于提高资源的使用效率。通常我们用图形API实现一个功能要经过多个步骤。经过整合的渲染器接口，可以通过一两个步骤就可以实现原本需要多个步骤的功能。渲染器功能一般包括渲染窗口相关信息、创建资源、设置资源、销毁资源、获得显卡信息、完成渲染流程等。因此渲染器需要抽象出各种接口，以供子类去实现，这样就可以兼容各种渲染API。</p><p>上图中详细举例了渲染状态、渲染缓冲、渲染资源、逻辑状态信息。将他们在引擎中封装成对象，就是为了更好的加快渲染器中处理资源的速度，减少设置资源时耗费的CPU时间。同时为了达到这个目标，我们就需要管理这些资源对象。</p><p>额外话题，前面说到不同图形API不同平台设备有很多差异，这里就举个例子，简单介绍下DX12中的指令队列原理。</p><p>（DX12与GPU引擎协作原理）</p><h3 id=\"现在大部分新式gpu都包含多个功能的独立引擎例如复制引擎计算引擎3d引擎把原本提交的gpu指令大杂烩拆分并交给不同的引擎这样各大引擎可以根据自身情况做优化从而使得执行效率变得更高而且拆分后引擎可以并行执行指令也使得整体指令执行效率变高\">现在大部分新式GPU都包含多个功能的独立引擎，例如复制引擎、计算引擎、3D引擎，把原本提交的GPU指令大杂烩拆分并交给不同的引擎，这样各大引擎可以根据自身情况做优化从而使得执行效率变得更高，而且拆分后引擎可以并行执行指令也使得整体指令执行效率变高。</h3><p>在使用DX12时，每个线程都会填入复制、计算和3D队列这三个队列，其中3D队列可以驱动另外两个GPU引擎，计算队列可以驱动计算和复制引擎，而复制队列只能驱动复制引擎。</p><p>（GPU中三大引擎工作原理，来源：微软官网）</p><p>上图说明了DX中的多引擎队列设计是如何跨多个GPU引擎协同工作的。它包括在必要时进行引擎间同步处理，因为引擎间有相互依赖的情况。复制引擎会复制转译所需的几何，3D引擎会等候这些复本完成，并透过几何呈现预先传递。计算引擎会使用此结果并分派结果，同时复制引擎上一直在拷贝需要的资源，最终被3d引擎使用并进行最终绘制。</p><h2 id=\"参考资料\">参考资料：</h2><p>《OpenGL ES3.0 编程指南》作者：金斯伯格</p><p>《游戏引擎架构》作者：杰森.格雷戈瑞</p><p>《游戏引擎原理与实践》作者：程东</p><p>《GPU 引擎》</p><p>https://docs.microsoft.com/zh-tw/windows/win32/direct3d12/user-mode-heap-synchronization</p><p>《CPU体系结构》</p><p>https://my.oschina.net/fileoptions/blog/1633021</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485343&amp;idx=1&amp;sn=78ee7bce86f53c7ed5cb59d08a6a29f2&amp;chksm=fc226298cb55eb8e89b22caa781fa0ed21dbb196720d633f62855bfd4d3a4959b78c343ac54b&amp;token=39636778&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2022/05/03/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B059",
            
            
            
            "tags": ["读书笔记","前端技术"],
            
            "date_published": "2022-05-03T00:00:00+08:00",
            "date_modified": "2022-05-03T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/05/02/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A124",
            "title": "给女儿的信(二十四) 沟通",
            "summary": "女儿 教育 亲情",
            "content_text": "要点沟通很重要，我在工作中学会了两个技巧，第一是沟通非常重要，我们要告诉对方我们的困难，需要怎样的帮助，同时也要去了解对方有什么困难，需要怎样的帮助。第二是沟通技巧，说话时常常带有情绪，例如，总是，老是，已经，等等，这些情绪会让人很不舒服，如果我们能去除这些情绪的词语，我们表达说话时，会让人感觉到如沐春风。大纲1.调节女儿间问题，引来女儿生气2.与女儿对话，引来厌烦3.与女儿讲自己的故事4.与女儿分享自己的成长结构1.给女儿讲自己在家里的故事2.两个女儿闹矛盾了我调节时，另一个女儿又生气了3.女儿生气了，躲在房间里不肯说话4.我走到女儿边上，想跟女儿对话，但女儿不肯开口5.我对着女儿开始讲自己的工作的故事6.故事发生在我1年半前，我刚到公司，对公司的流程和规则很不熟悉。7.工作中沟通并不好，于是就出现了问题。8.后来慢慢爸爸学习和练习沟通技巧，工作也变得顺利了。9.总结这个故事中学习到的事情内容hi秀恩，安妮，爸爸好想你们。上周爸爸回家虽然短暂，能看到你们很开心。今天爸爸给你们讲讲，我在家里的故事，好不好。上上次回杭州时，在家里跟我的女儿聊了好久，我很喜欢跟女儿聊天，其中有一天，妈妈不在家，于是我跟两个女儿一起在家，我刚看了会书，大女儿和小女儿就吵起来了，我想劝她们，但效果并不好，反而大女儿又伤心起来，于是我想上去安慰她，但她似乎不想跟我说话。一开始，她睡在房间里，我坐在她边上，我一直邀请她跟我说说话，后来，她又做到了沙发上，我也跟着来了，但她还是不理我，于是我开始自说自话，跟她讲了我自己的故事。这是一个我真实的故事，这个故事告诉我，沟通是非常重要的，故事发生在2年前，我刚到深圳，一开始，我认识的并人不多，工作也还算轻松，也不需要跟太多人打交道。后来领导派了一个重要的任务给我，但我并没有做好，于是我开始回顾和总结，我发现我平时跟人打交道并不多，这是直接导致我不善于沟通的一个直接原因。后来我慢慢学会了沟通，并且在沟通中找到了技巧，这些技巧让我在工作中更加顺利，并且与同事们和朋友们交流的非常好。在这期间我学到了很多沟通方法，其中又两个点比较重要。第一，我们经常在说话时，会使用一些情绪化的词语，比如总是、老是、已经、老早、早就等等，这些词语都是带有情绪的词语，让人听了很不舒服。如果我们能去掉这些词语，用一些比较理性的词语代替的话，沟通交流会舒服很多，就像被温柔的春风吹拂那样，如沐春风。第二，沟通很重要，每个人收到的信息是不对等的，我需要怎样的帮助，我的困难是什么，我们需要告诉同伴，同时也要通过友好的沟通，去了解对方需要怎样的帮助，遇到了什么困难。通过沟通，我们可以更加了解现在的情况是怎样的，我们可以怎么行动。讲完这个故事后，我的女儿愿意跟我说话了，我们两后来聊的很开心，相处的也很愉快。今天的故事就讲到这里，秀恩、安妮，爸爸爱你们哟。我们下次再见。",
            "content_html": "<h1 id=\"要点\">要点</h1><p>沟通很重要，我在工作中学会了两个技巧，第一是沟通非常重要，我们要告诉对方我们的困难，需要怎样的帮助，同时也要去了解对方有什么困难，需要怎样的帮助。第二是沟通技巧，说话时常常带有情绪，例如，总是，老是，已经，等等，这些情绪会让人很不舒服，如果我们能去除这些情绪的词语，我们表达说话时，会让人感觉到如沐春风。</p><h1 id=\"大纲\">大纲</h1><pre><code>1.调节女儿间问题，引来女儿生气2.与女儿对话，引来厌烦3.与女儿讲自己的故事4.与女儿分享自己的成长</code></pre><h1 id=\"结构\">结构</h1><pre><code>1.给女儿讲自己在家里的故事2.两个女儿闹矛盾了我调节时，另一个女儿又生气了3.女儿生气了，躲在房间里不肯说话4.我走到女儿边上，想跟女儿对话，但女儿不肯开口5.我对着女儿开始讲自己的工作的故事6.故事发生在我1年半前，我刚到公司，对公司的流程和规则很不熟悉。7.工作中沟通并不好，于是就出现了问题。8.后来慢慢爸爸学习和练习沟通技巧，工作也变得顺利了。9.总结这个故事中学习到的事情</code></pre><h1 id=\"内容\">内容</h1><p>hi秀恩，安妮，爸爸好想你们。</p><p>上周爸爸回家虽然短暂，能看到你们很开心。</p><p>今天爸爸给你们讲讲，我在家里的故事，好不好。</p><p>上上次回杭州时，在家里跟我的女儿聊了好久，我很喜欢跟女儿聊天，</p><p>其中有一天，妈妈不在家，于是我跟两个女儿一起在家，我刚看了会书，</p><p>大女儿和小女儿就吵起来了，我想劝她们，</p><p>但效果并不好，反而大女儿又伤心起来，于是我想上去安慰她，</p><p>但她似乎不想跟我说话。</p><p>一开始，她睡在房间里，我坐在她边上，我一直邀请她跟我说说话，</p><p>后来，她又做到了沙发上，我也跟着来了，但她还是不理我，</p><p>于是我开始自说自话，跟她讲了我自己的故事。</p><p>这是一个我真实的故事，</p><p>这个故事告诉我，沟通是非常重要的，</p><p>故事发生在2年前，我刚到深圳，</p><p>一开始，我认识的并人不多，工作也还算轻松，也不需要跟太多人打交道。</p><p>后来领导派了一个重要的任务给我，但我并没有做好，</p><p>于是我开始回顾和总结，我发现我平时跟人打交道并不多，</p><p>这是直接导致我不善于沟通的一个直接原因。</p><p>后来我慢慢学会了沟通，并且在沟通中找到了技巧，</p><p>这些技巧让我在工作中更加顺利，并且与同事们和朋友们交流的非常好。</p><p>在这期间我学到了很多沟通方法，其中又两个点比较重要。</p><p>第一，我们经常在说话时，会使用一些情绪化的词语，</p><p>比如总是、老是、已经、老早、早就等等，这些词语都是带有情绪的词语，</p><p>让人听了很不舒服。如果我们能去掉这些词语，用一些比较理性的词语代替的话，</p><p>沟通交流会舒服很多，就像被温柔的春风吹拂那样，如沐春风。</p><p>第二，沟通很重要，每个人收到的信息是不对等的，</p><p>我需要怎样的帮助，我的困难是什么，我们需要告诉同伴，</p><p>同时也要通过友好的沟通，去了解对方需要怎样的帮助，遇到了什么困难。</p><p>通过沟通，我们可以更加了解现在的情况是怎样的，我们可以怎么行动。</p><p>讲完这个故事后，我的女儿愿意跟我说话了，我们两后来聊的很开心，相处的也很愉快。</p><p>今天的故事就讲到这里，秀恩、安妮，爸爸爱你们哟。</p><p>我们下次再见。</p>",
            "url": "http://www.luzexi.com/2022/05/02/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A124",
            
            
            
            
            
            "date_published": "2022-05-02T00:00:00+08:00",
            "date_modified": "2022-05-02T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/04/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B058",
            "title": "读书笔记(五十八) 如何讲好一个故事 - 点燃观众的想象力",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：最近比较关注写故事的能力，于是看了《如何讲好一个故事》这本书。起初原因是我在做备稿演讲时，发现自己写故事的能力较弱，每次写故事绞尽脑汁都很难想出内容来。随着时间的推移，我越发觉得故事的用处很多，故事能力很需要实践落地到我的生活和工作当中去。通过这次学习，我希望提高自己讲故事的能力，并用于各种场合中，包括演讲、交流、分享、家庭生活、以及工作当中去。最终我希望我能以故事的形式将生活中的所有“枯燥”都转化为“有趣”，把一切“刻板”转化为“生动”，让生活变得丰富多彩。概述：本篇总结《如何讲好一个故事》的下半部分，主要内容是：1.讲述祖母的故事2.“发生了什么”相机故事法3.如何描述细节内容：简单回顾下前文，前面我们讲了障碍的倾听与释放，以及倾听和讲述的关系。这些都为我们创作故事和讲故事做好准备，通过识别障碍再释放障碍，可以让我们更好讲故事，通过了解倾听和讲述的关系，我们知道了讲述时的关键就是：与观众沟通。这篇文章主要来讲一讲，如何写故事。讲述祖母的故事作者提倡朋友们讲述祖母的故事，他建议通过讲祖母的故事来入门故事法。对于这种方法，我认为可以作为团队成员沟通的培训课程，至于用在练习写故事上恐怕效果不大。他认为，我们可以将自己想象成祖父母，然后做自我介绍。以第一人称“我”来讲述，告诉我们你的名字。通过站在祖母的立场去了解她的生活和状态，这使得祖母变得更加人性化。他说，“讲述祖母练习让我站在我祖母的立场去了解，她眼中的生活是怎样的，她认为自己的生活代表了什么，她经历了什么。我觉得我们大部分时候把祖父母看作是某种象征，而不是真实的人。我们可以通过设想自己就是她，再来谈论她的生活会有很大的不同。在我眼中，她变得更人性化。”（祖母故事的启发图）通过讲述祖母故事的练习，我们可以得到7个启发：1.倾听和讲述之间有一种互相关系2.倾听是一种才能3.每个人都有自己的故事4.每个人都有讲故事的能力5.讲故事的基本原则对任何人都适用6.故事可以用信息片段来构建7.无论你认为自己多么不擅长讲故事，都会发现讲故事是我们天生就具备的能力。（在工作中讲故事的好处图）书中在这里提到很多案例，是关于在工作中讲故事的案例。大部分案例中的主角都是因为沟通不顺利而导致团队难以形成好的氛围。这种情况我们可以通过讲故事的方式化解工作中的难题。作者说讲故事能够推动变革，这其中一些力量在于，如何通过意识到倾听和说话之间的互相关系来重构我们的沟通，有些则来自故事本身。故事为我们与工作中的同事建立新关系提供了桥梁，也使我们多维度化。它们通过层层剥离来揭示普遍性，可以在任何团队的沟通以及持续的富有成效的关系中发挥催化作用。在工作中讲故事可以让我们通过倾听和讲述与对方建立沟通，同时建立起了新的关系桥梁，也使得我们有更多维度化的交流和思考。富有远见的管理者通过故事提升洞察力、分享知识，并利用故事建立真正的联系。（为什么要分享真实的故事图）然后作者聊了聊，我们为什么要分享自己的真实故事。其实分享真实的故事是打破“为保护自己而筑起的防御墙”的一种强有力的方式，通过分享自己的真实故事（故事改编后更精彩）我们不仅可以审视自己，不断调整情绪调整认知，也能做到影响周围的人。书中介绍了许多这种分享自己故事的案例，他们把自己的真实遭遇讲给大家听，同时他们打破了局面迎接恐惧，用真实的人性去展现脆弱与强大打破了关系僵局，让倾听者更喜欢更了解讲述者，同时也释放了自己。“发生了什么”相机故事法作者多次提到叙事法，这个方法是贯穿故事法始终的方法，其中的技巧就是用“发生了什么”相机。我们在运用叙事法时，创作的故事是对“发生了什么”这个问题作回答，这个方法指导讲述者，只讲述能够看到、听到、品尝到、摸到、或闻到的事实。用“发生了什么”方法讲故事指的就是，将实际发生的事件与人们看到、听到、闻到、尝到或触摸到的事件联系起来。（为什么要剔除判断-图）那么为什么要这么做呢？原因是，当我们说出想法和感受时会遭到观众的不同观点的反对，这会引起不必要的倾听障碍，从而导致整个故事情节没有被完全的倾听。因此在这种讲故事的方法中，判断、评论、观点和批判都必须被排除在外，要完全依赖于事实描述能力来带领听众在故事场景中进行感官探索。简单来说就是，说出实际发生了什么，而不是你对所发生事情的想法或感受。即不带判断、评论观点，批判，说出实际发生了什么，而不是对所发生的事的想法和感受。作者称这种方法为，“发生了什么”照相机。（发生了什么相机图）1.你听到了什么？外部的声音？还是你对别人说了什么？还是别人对你说了什么？2.你看到了什么？描述你看到的周围的东西，包括环境、颜色、形状、布料等。3.你尝到了什么？你尝到了什么？描述食物、饮料、味道。4.你闻到了什么？周围有什么气味？5.你触摸了什么？描述触摸到的材质和感受到的温度。回到自己的身体，描述这种感觉。（相机无法拍摄到的内容图）感受：情绪，感受和内在体验（不是想法）。解释：主要基于我们对事物的理解。判断：基于我们对某些思考方式或观察他人的倾向，对某人进行客观化、限定或描述的倾向。观点：未必基于事实或知识的观点或判断，一般性看法。辩解：试图用逻辑推理证明（行动或态度）。评论：对某一事件或情况所表达的意见或做出的解释。内心想法：这些想法包括以“我心里想”或“我对自己说过”开头的评论。这些是讲述“发生了什么”值钱常用语句。当你使用“发生了什么”相机时，就不需要这些口头禅了。“你可以说‘我们去院子里吃午饭’，我说‘享受美好的天气吧’。”在“发生了什么”照相机镜头下，能拍到许多真实细节，包括听到的、看到的、尝到的、闻到的、摸到的，同时照相机也无法拍摄到一些精神层面的东西，包括感受、解释、判断、观点、内心想法。作者说，我们所有人都有这样一个坏习惯，我们习惯在故事中添加解释和判断等内心活动，这导致了听众在听故事时障碍了他们身临其境的感觉。“发生了什么”相机法，故意强加了一个限制，要求你公平、真诚地看待你的经历，剔除我们所有人在讲故事时添加解释和判断等内心活动的习惯。“专业”是能抛开偏见、判断、意见和成见，客观地分析事物。“发生了什么”是帮助我们成为“专业”的一个好方法。采用这种方法需要大量训练，因为陷入解释和判断的倾向犹如呼吸一样浸入在我们的习惯中。当大家都暂停了所有的判断和意见，只倾听接下来发生的事情，这相当于提供了一个足够宽广的倾听安全网。消除判断和意见，为倾听提供一个宽广的安全区。(听众感受障碍与无障碍对比图)设想一下，当别人用歪曲事实解释时，你能无动于衷吗？意见会产生意见，判断会导致判断。有且只有听到，听、看、尝、闻、摸，这五个感官方面的细节时，听众才听得清楚明白，才不会产生意见和分歧，才不会障碍听众身临其境，这五个感官细节为听众对故事的想象创造了空间。那么听众对故事的感觉为什么会增强呢？因为我们人自然而然地把自己的情绪和感觉投射到由事实组成的故事上，当我们想象自己沉浸在风景中（事实组成的故事）时，直觉被激活，洞察力被加强。（故事与观众的沟通图）我们回头再看下作者所阐述的讲故事中最重要的事情，专注于一件事：与观众沟通。根据“发生了什么”相机法来讲述，是倾听和讲述的最佳互动，这种方式让我们与听众保持了沟通，共同创作了一个故事。同时让我们在写故事时就能感知到观众的倾听障碍，从而更好的调整。我们选择讲述的、强调的、指向的内容都影响了故事的曲线，影响了倾听。当看到事物的落脚点，观察到听众如何倾听，我们就可以根据这些反馈来调整故事。在工作和生活中，我们可以用“发生了什么”的方式分享故事，这会以一种容易理解、令人难忘、强而有力的方式体现价值和目标，这样能更容易理解并令人难忘。不只作者，我也建议你，现在就可以尝试下，用“发生了什么”相机法，来描述最近的经历，写下你看到、听到、闻到、尝到或接触到的东西。如果你想看看那些精通用“发生了什么”相机法讲故事的人是如何讲故事的，只需看乔布斯在斯坦福大学的毕业典礼上的演讲就知道了。在开场白中，他定下了基调。他没有告诉我们他是怎么想的，只说了发生在他身上的事。他知道听众会有一种亲身经历的感觉和想法。他就是运用这种方法，陈述事实且不带想法和评判，从而让观众去体会这种亲身经历。他毫无保留的描述细节，从而点燃观众的想象力。如何描述细节叙事法的核心任务之一，就是运用感官感受的方法客观地讲述所发生的事情。它的技巧就是我们所说的，用“发生了什么”相机法来描述由事实组成的故事。其中讲述细节最大的困难就是要选择保留什么，放弃什么。其实很简单，细节的选择标准是，细节必须为故事服务。它不能只是为了增添色彩，它必须能推动情节发展，扩大我们对环境的理解，增强我们对角色的理解。细节可以故意放慢故事情节，提供短暂休息，或加快情节主线。它的作用类似于照相机的变焦镜头，让听众更接近你的世界观。常用细节，对话我们在描述细节时，对话的方式比较常见。叙事法与电影剧本使用的手法非常相似，剧本创作时，对话是揭示人物性格的重要媒介。我们不能诉诸角色刻画，例如“他很慷慨”，“她很邪恶”，“他缺乏勇气”，这些描述都是一种解释。我们不能去解释，而是要去描述，从而让观众自己去体会，人物性格、情节感受。（对话的功能图）对话有以下功能：1.体现人物性格2.推动故事情节发展3.向观众传达事实和信息4.建立关系5.揭示冲突和权力动态6.表达人物的情感状态提示：还有一个技巧是，说没发生的事情，有时候说没发生的事情要胜过说发生的事情。常用细节误区，情感我们前面说到很多关于情绪情感，这里罗列下错误的认知：1.错误的认为讲“发生了什么”这句话排除了表达情感的可能。2.错误的认为讲述情感就是表达情感。用“发生了什么”的描述，填充了故事画面，从而让听众产生故事需要的所有情感，我们可以享受选择细节来激活并参与这些情感，以达到戏剧性的效果。我们会发现我们越是坚持不去解释和评判，就越能消除这些阻碍我们交流的障碍。通过讲述所发生的事情和详细描述经过，我们可以给自己和他人展示更清晰的事件画面，而不会用情感的语言蒙蔽他们的倾听。我们的情感，判断，评价，蒙蔽了大家的倾听。我们允许情感出现，但要识别它们，释放它们，不能让它们牵引我们，所以要用“发生了什么”当作指引的原则。关于细节的总结（细节总结图）要点：1.根据五种感官感觉讲述“发生了什么”。如果你听不到、尝不到、闻不到、摸不到、看不到，就向相当于什么都没发生。2.把所有的解释、意见、判断、感情的陈述，以及“发生了什么”相机拍摄不到的一切东西都去除。可以在打磨稿件时，检查每个解释、判断和感情陈述之词，接着修改和调整。3.没有道德或经验教训方面的评判，这些不属于故事。让倾听者中自己构建感受。4.相信听众有能力理解你的信息。信息来源是从你对发生在的事情描述。5.这种方法需要大量练习，坚持练习。将经验与复杂的解释、观点和判断联系起来的习惯需要被改变，这种习惯已经成为讲好一个故事的最大障碍。练习时，一开始可能需要花些精力和时间，逐渐就会走上正轨。6.故事的目的在于，与听众建立联系。说出所发生的一切就能让这种联系产生，用故事连接听众。通过“发生了什么”照相机的故事讲述能力，你的创造力会不断提升，同时你会惊讶于自己看待周围事件、对象或人物越来越准确，维度更趋于多样化。通过这种练习，作为演讲者在进行演讲时会更加专注，方向也更加明确。最重要的是，它使我们熟悉我习惯中的，判断、意见和评论。我们会意识到，我们在谈到一件事或同事的某种行为时，总是从意见和判断出发。“发生了什么”这个方法，会逐渐的让我们看清事情的来龙去脉，练习的越多，你就收获的越多。巩固下故事创作过程：1.思考要讲故事的2个问题\t1.为什么要讲这个故事？\t2.为什么要现在讲？2.先识别障碍，再释放障碍。通过“发生了什么”来做沟通释放3.通过“发生了什么”相机收集故事各个部分的细节实际中，倾听和讲述的动态互动过程并不总是线性的。通过挖掘可以很快地进入创作，在创作过程中，可能会发现有必要进行更多的挖掘。很多领导者都会认识到讲故事能力是团队成功的基础。某种意义上说，他们爬上通往成功的阶梯时，动力来自于对自己讲述的故事。很多领导者意识到，必须有一个“更大的目标”，把每个人拉到同一条船上，把他们连在一起，使他们成为一个有凝聚力的整体。故事比数字更能表达这一点。其他(其他方面的总结图)如何开头根据叙事法的经验法则，开头就是故事事实的起点，每个故事都有一个起点，它是事实存在的。开头很重要，如果故事的第一句就能吸引听众的注意力，那么他们会跟着你的故事走。强有力的故事开头总是以“发生了什么”开始。你的故事的第一句话就可以把观众带入故事，由于不知道前因后果，被带入故事中会激发我们的好奇心。随着时间推移，你会对开头和结尾之间的关系有更敏锐的认识。你的故事开头变得不再那么随意，并且可以为结尾埋下微妙的伏笔。如何结尾你可能想总结自己故事中包含的教训，请不要这么做，让听众自己得出结论，从你的起源故事中得到教训，会更有说服力。寻找故事结尾，就是拟合故事创作和故事讲述之间的鸿沟。在故事创作过程中，结尾是一座里程碑，是要到达的彼岸，需要于故事的开头形成必要的张力。如何与听众建立联系从询问“为什么要讲故事？为什么要现在讲”那一刻起，你已经在开始思考和听众的关系。这种询问的方式用开放的模式和框架去引发我们的思考，接着就是挖掘故事并精心设计开头、情感转折点和结尾。为了故事的效果需要，你可以故意走到某个角落，或靠近观众。记住每一个选择都是为了引起别人的注意，吸引注意力是演示的关键。关于演讲的体会从本质上讲，演讲应该带你走出舒适区。你会发现，离开那个区域的每一步，都是迈向真实和个性化故事的一步。上台演讲的步骤：1.开始说之前与身体沟通，站稳、自然呼吸，扫视听众，偶尔将目光停留在某个人身上。2.与听众保持目光接触。演讲过程中，与5-6个人进行单独的眼神交流。3.放慢节奏。说的太快，会失去听众。4.注意音量。如果不确定后排是否能听到，就问问他们，这有利于增加信心，并与听众建立直接的联系。5.故事结束时要泰然自若，保持镇定，保持与听众的眼神接触，你的故事可以启发他们。注意，永远不要背诵故事，因为这会妨碍你的创造力和真实表现能力。一旦你练习通过大脑和身体讲述故事，并且已经充分准备好倾听环境，就没有什么需要记忆的了。我们要通过大脑和身体来讲述故事，而不是仅仅凭借记忆。最后，改变不是那么简单的，旧习惯的消除非一朝一夕，需要坚持和磨练。任何技能，都需要我们去实践。通过实践练习，会培养出更强的自我意识以及相应的能力，并在出现认知和情感障碍时能够注意到这些障碍。已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485311&amp;idx=1&amp;sn=e1acb7b446484043ae6541166172a48a&amp;chksm=fc226278cb55eb6e2633e99ff0b86f047eb5d36e4ef0a9bda7bfe10036c843af64c8919298dd&amp;token=39636778&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>最近比较关注写故事的能力，于是看了《如何讲好一个故事》这本书。</p><p>起初原因是我在做备稿演讲时，发现自己写故事的能力较弱，每次写故事绞尽脑汁都很难想出内容来。</p><p>随着时间的推移，我越发觉得故事的用处很多，故事能力很需要实践落地到我的生活和工作当中去。</p><p>通过这次学习，我希望提高自己讲故事的能力，并用于各种场合中，包括演讲、交流、分享、家庭生活、以及工作当中去。</p><h3 id=\"最终我希望我能以故事的形式将生活中的所有枯燥都转化为有趣把一切刻板转化为生动让生活变得丰富多彩\">最终我希望我能以故事的形式将生活中的所有“枯燥”都转化为“有趣”，把一切“刻板”转化为“生动”，让生活变得丰富多彩。</h3><h1 id=\"概述\">概述：</h1><p>本篇总结《如何讲好一个故事》的下半部分，主要内容是：1.讲述祖母的故事2.“发生了什么”相机故事法3.如何描述细节</p><h1 id=\"内容\">内容：</h1><p>简单回顾下前文，前面我们讲了障碍的倾听与释放，以及倾听和讲述的关系。这些都为我们创作故事和讲故事做好准备，通过识别障碍再释放障碍，可以让我们更好讲故事，通过了解倾听和讲述的关系，我们知道了讲述时的关键就是：与观众沟通。这篇文章主要来讲一讲，如何写故事。</p><h2 id=\"讲述祖母的故事\">讲述祖母的故事</h2><p>作者提倡朋友们讲述祖母的故事，他建议通过讲祖母的故事来入门故事法。对于这种方法，我认为可以作为团队成员沟通的培训课程，至于用在练习写故事上恐怕效果不大。</p><p>他认为，我们可以将自己想象成祖父母，然后做自我介绍。以第一人称“我”来讲述，告诉我们你的名字。通过站在祖母的立场去了解她的生活和状态，这使得祖母变得更加人性化。</p><p>他说，“讲述祖母练习让我站在我祖母的立场去了解，她眼中的生活是怎样的，她认为自己的生活代表了什么，她经历了什么。我觉得我们大部分时候把祖父母看作是某种象征，而不是真实的人。我们可以通过设想自己就是她，再来谈论她的生活会有很大的不同。在我眼中，她变得更人性化。”</p><p>（祖母故事的启发图）</p><p>通过讲述祖母故事的练习，我们可以得到7个启发：1.倾听和讲述之间有一种互相关系2.倾听是一种才能3.每个人都有自己的故事4.每个人都有讲故事的能力5.讲故事的基本原则对任何人都适用6.故事可以用信息片段来构建7.无论你认为自己多么不擅长讲故事，都会发现讲故事是我们天生就具备的能力。</p><p>（在工作中讲故事的好处图）</p><p>书中在这里提到很多案例，是关于在工作中讲故事的案例。大部分案例中的主角都是因为沟通不顺利而导致团队难以形成好的氛围。这种情况我们可以通过讲故事的方式化解工作中的难题。</p><h3 id=\"作者说讲故事能够推动变革这其中一些力量在于如何通过意识到倾听和说话之间的互相关系来重构我们的沟通有些则来自故事本身故事为我们与工作中的同事建立新关系提供了桥梁也使我们多维度化它们通过层层剥离来揭示普遍性可以在任何团队的沟通以及持续的富有成效的关系中发挥催化作用\">作者说讲故事能够推动变革，这其中一些力量在于，如何通过意识到倾听和说话之间的互相关系来重构我们的沟通，有些则来自故事本身。故事为我们与工作中的同事建立新关系提供了桥梁，也使我们多维度化。它们通过层层剥离来揭示普遍性，可以在任何团队的沟通以及持续的富有成效的关系中发挥催化作用。</h3><p>在工作中讲故事可以让我们通过倾听和讲述与对方建立沟通，同时建立起了新的关系桥梁，也使得我们有更多维度化的交流和思考。富有远见的管理者通过故事提升洞察力、分享知识，并利用故事建立真正的联系。</p><p>（为什么要分享真实的故事图）</p><p>然后作者聊了聊，我们为什么要分享自己的真实故事。</p><h3 id=\"其实分享真实的故事是打破为保护自己而筑起的防御墙的一种强有力的方式通过分享自己的真实故事故事改编后更精彩我们不仅可以审视自己不断调整情绪调整认知也能做到影响周围的人\">其实分享真实的故事是打破“为保护自己而筑起的防御墙”的一种强有力的方式，通过分享自己的真实故事（故事改编后更精彩）我们不仅可以审视自己，不断调整情绪调整认知，也能做到影响周围的人。</h3><p>书中介绍了许多这种分享自己故事的案例，他们把自己的真实遭遇讲给大家听，同时他们打破了局面迎接恐惧，用真实的人性去展现脆弱与强大打破了关系僵局，让倾听者更喜欢更了解讲述者，同时也释放了自己。</p><h2 id=\"发生了什么相机故事法\">“发生了什么”相机故事法</h2><p>作者多次提到叙事法，这个方法是贯穿故事法始终的方法，其中的技巧就是用“发生了什么”相机。</p><p>我们在运用叙事法时，创作的故事是对“发生了什么”这个问题作回答，这个方法指导讲述者，只讲述能够看到、听到、品尝到、摸到、或闻到的事实。用“发生了什么”方法讲故事指的就是，将实际发生的事件与人们看到、听到、闻到、尝到或触摸到的事件联系起来。</p><p>（为什么要剔除判断-图）</p><h3 id=\"那么为什么要这么做呢原因是当我们说出想法和感受时会遭到观众的不同观点的反对这会引起不必要的倾听障碍从而导致整个故事情节没有被完全的倾听因此在这种讲故事的方法中判断评论观点和批判都必须被排除在外要完全依赖于事实描述能力来带领听众在故事场景中进行感官探索\">那么为什么要这么做呢？原因是，当我们说出想法和感受时会遭到观众的不同观点的反对，这会引起不必要的倾听障碍，从而导致整个故事情节没有被完全的倾听。因此在这种讲故事的方法中，判断、评论、观点和批判都必须被排除在外，要完全依赖于事实描述能力来带领听众在故事场景中进行感官探索。</h3><p>简单来说就是，说出实际发生了什么，而不是你对所发生事情的想法或感受。即不带判断、评论观点，批判，说出实际发生了什么，而不是对所发生的事的想法和感受。</p><p>作者称这种方法为，“发生了什么”照相机。</p><p>（发生了什么相机图）</p><p>1.你听到了什么？外部的声音？还是你对别人说了什么？还是别人对你说了什么？</p><p>2.你看到了什么？描述你看到的周围的东西，包括环境、颜色、形状、布料等。</p><p>3.你尝到了什么？你尝到了什么？描述食物、饮料、味道。</p><p>4.你闻到了什么？周围有什么气味？</p><p>5.你触摸了什么？描述触摸到的材质和感受到的温度。</p><p>回到自己的身体，描述这种感觉。</p><p>（相机无法拍摄到的内容图）</p><p>感受：情绪，感受和内在体验（不是想法）。</p><p>解释：主要基于我们对事物的理解。</p><p>判断：基于我们对某些思考方式或观察他人的倾向，对某人进行客观化、限定或描述的倾向。</p><p>观点：未必基于事实或知识的观点或判断，一般性看法。</p><p>辩解：试图用逻辑推理证明（行动或态度）。</p><p>评论：对某一事件或情况所表达的意见或做出的解释。</p><p>内心想法：这些想法包括以“我心里想”或“我对自己说过”开头的评论。</p><p>这些是讲述“发生了什么”值钱常用语句。当你使用“发生了什么”相机时，</p><p>就不需要这些口头禅了。“你可以说‘我们去院子里吃午饭’，我说‘享受美好的天气吧’。”</p><p>在“发生了什么”照相机镜头下，能拍到许多真实细节，包括听到的、看到的、尝到的、闻到的、摸到的，同时照相机也无法拍摄到一些精神层面的东西，包括感受、解释、判断、观点、内心想法。</p><h3 id=\"作者说我们所有人都有这样一个坏习惯我们习惯在故事中添加解释和判断等内心活动这导致了听众在听故事时障碍了他们身临其境的感觉\">作者说，我们所有人都有这样一个坏习惯，我们习惯在故事中添加解释和判断等内心活动，这导致了听众在听故事时障碍了他们身临其境的感觉。</h3><h3 id=\"发生了什么相机法故意强加了一个限制要求你公平真诚地看待你的经历剔除我们所有人在讲故事时添加解释和判断等内心活动的习惯\">“发生了什么”相机法，故意强加了一个限制，要求你公平、真诚地看待你的经历，剔除我们所有人在讲故事时添加解释和判断等内心活动的习惯。</h3><p>“专业”是能抛开偏见、判断、意见和成见，客观地分析事物。“发生了什么”是帮助我们成为“专业”的一个好方法。采用这种方法需要大量训练，因为陷入解释和判断的倾向犹如呼吸一样浸入在我们的习惯中。</p><p>当大家都暂停了所有的判断和意见，只倾听接下来发生的事情，这相当于提供了一个足够宽广的倾听安全网。消除判断和意见，为倾听提供一个宽广的安全区。</p><p>(听众感受障碍与无障碍对比图)</p><p>设想一下，当别人用歪曲事实解释时，你能无动于衷吗？意见会产生意见，判断会导致判断。</p><h3 id=\"有且只有听到听看尝闻摸这五个感官方面的细节时听众才听得清楚明白才不会产生意见和分歧才不会障碍听众身临其境这五个感官细节为听众对故事的想象创造了空间\">有且只有听到，听、看、尝、闻、摸，这五个感官方面的细节时，听众才听得清楚明白，才不会产生意见和分歧，才不会障碍听众身临其境，这五个感官细节为听众对故事的想象创造了空间。</h3><h3 id=\"那么听众对故事的感觉为什么会增强呢因为我们人自然而然地把自己的情绪和感觉投射到由事实组成的故事上当我们想象自己沉浸在风景中事实组成的故事时直觉被激活洞察力被加强\">那么听众对故事的感觉为什么会增强呢？因为我们人自然而然地把自己的情绪和感觉投射到由事实组成的故事上，当我们想象自己沉浸在风景中（事实组成的故事）时，直觉被激活，洞察力被加强。</h3><p>（故事与观众的沟通图）</p><p>我们回头再看下作者所阐述的讲故事中最重要的事情，专注于一件事：与观众沟通。</p><h3 id=\"根据发生了什么相机法来讲述是倾听和讲述的最佳互动这种方式让我们与听众保持了沟通共同创作了一个故事同时让我们在写故事时就能感知到观众的倾听障碍从而更好的调整\">根据“发生了什么”相机法来讲述，是倾听和讲述的最佳互动，这种方式让我们与听众保持了沟通，共同创作了一个故事。同时让我们在写故事时就能感知到观众的倾听障碍，从而更好的调整。</h3><p>我们选择讲述的、强调的、指向的内容都影响了故事的曲线，影响了倾听。当看到事物的落脚点，观察到听众如何倾听，我们就可以根据这些反馈来调整故事。</p><p>在工作和生活中，我们可以用“发生了什么”的方式分享故事，这会以一种容易理解、令人难忘、强而有力的方式体现价值和目标，这样能更容易理解并令人难忘。不只作者，我也建议你，现在就可以尝试下，用“发生了什么”相机法，来描述最近的经历，写下你看到、听到、闻到、尝到或接触到的东西。</p><p>如果你想看看那些精通用“发生了什么”相机法讲故事的人是如何讲故事的，只需看乔布斯在斯坦福大学的毕业典礼上的演讲就知道了。在开场白中，他定下了基调。他没有告诉我们他是怎么想的，只说了发生在他身上的事。他知道听众会有一种亲身经历的感觉和想法。他就是运用这种方法，陈述事实且不带想法和评判，从而让观众去体会这种亲身经历。</p><p>他毫无保留的描述细节，从而点燃观众的想象力。</p><h2 id=\"如何描述细节\">如何描述细节</h2><p>叙事法的核心任务之一，就是运用感官感受的方法客观地讲述所发生的事情。它的技巧就是我们所说的，用“发生了什么”相机法来描述由事实组成的故事。其中讲述细节最大的困难就是要选择保留什么，放弃什么。</p><p>其实很简单，细节的选择标准是，细节必须为故事服务。它不能只是为了增添色彩，它必须能推动情节发展，扩大我们对环境的理解，增强我们对角色的理解。</p><p>细节可以故意放慢故事情节，提供短暂休息，或加快情节主线。它的作用类似于照相机的变焦镜头，让听众更接近你的世界观。</p><h2 id=\"常用细节对话\">常用细节，对话</h2><p>我们在描述细节时，对话的方式比较常见。叙事法与电影剧本使用的手法非常相似，剧本创作时，对话是揭示人物性格的重要媒介。</p><h3 id=\"我们不能诉诸角色刻画例如他很慷慨她很邪恶他缺乏勇气这些描述都是一种解释\">我们不能诉诸角色刻画，例如“他很慷慨”，“她很邪恶”，“他缺乏勇气”，这些描述都是一种解释。</h3><h3 id=\"我们不能去解释而是要去描述从而让观众自己去体会人物性格情节感受\">我们不能去解释，而是要去描述，从而让观众自己去体会，人物性格、情节感受。</h3><p>（对话的功能图）</p><p>对话有以下功能：1.体现人物性格2.推动故事情节发展3.向观众传达事实和信息4.建立关系5.揭示冲突和权力动态6.表达人物的情感状态</p><p>提示：还有一个技巧是，说没发生的事情，有时候说没发生的事情要胜过说发生的事情。</p><h2 id=\"常用细节误区情感\">常用细节误区，情感</h2><p>我们前面说到很多关于情绪情感，这里罗列下错误的认知：1.错误的认为讲“发生了什么”这句话排除了表达情感的可能。2.错误的认为讲述情感就是表达情感。</p><h3 id=\"用发生了什么的描述填充了故事画面从而让听众产生故事需要的所有情感我们可以享受选择细节来激活并参与这些情感以达到戏剧性的效果我们会发现我们越是坚持不去解释和评判就越能消除这些阻碍我们交流的障碍\">用“发生了什么”的描述，填充了故事画面，从而让听众产生故事需要的所有情感，我们可以享受选择细节来激活并参与这些情感，以达到戏剧性的效果。我们会发现我们越是坚持不去解释和评判，就越能消除这些阻碍我们交流的障碍。</h3><p>通过讲述所发生的事情和详细描述经过，我们可以给自己和他人展示更清晰的事件画面，而不会用情感的语言蒙蔽他们的倾听。我们的情感，判断，评价，蒙蔽了大家的倾听。我们允许情感出现，但要识别它们，释放它们，不能让它们牵引我们，所以要用“发生了什么”当作指引的原则。</p><h2 id=\"关于细节的总结\">关于细节的总结</h2><p>（细节总结图）</p><p>要点：</p><p>1.根据五种感官感觉讲述“发生了什么”。如果你听不到、尝不到、闻不到、摸不到、看不到，就向相当于什么都没发生。</p><p>2.把所有的解释、意见、判断、感情的陈述，以及“发生了什么”相机拍摄不到的一切东西都去除。可以在打磨稿件时，检查每个解释、判断和感情陈述之词，接着修改和调整。</p><p>3.没有道德或经验教训方面的评判，这些不属于故事。让倾听者中自己构建感受。</p><p>4.相信听众有能力理解你的信息。信息来源是从你对发生在的事情描述。</p><p>5.这种方法需要大量练习，坚持练习。将经验与复杂的解释、观点和判断联系起来的习惯需要被改变，这种习惯已经成为讲好一个故事的最大障碍。练习时，一开始可能需要花些精力和时间，逐渐就会走上正轨。</p><p>6.故事的目的在于，与听众建立联系。说出所发生的一切就能让这种联系产生，用故事连接听众。</p><h3 id=\"通过发生了什么照相机的故事讲述能力你的创造力会不断提升同时你会惊讶于自己看待周围事件对象或人物越来越准确维度更趋于多样化\">通过“发生了什么”照相机的故事讲述能力，你的创造力会不断提升，同时你会惊讶于自己看待周围事件、对象或人物越来越准确，维度更趋于多样化。</h3><h3 id=\"通过这种练习作为演讲者在进行演讲时会更加专注方向也更加明确最重要的是它使我们熟悉我习惯中的判断意见和评论我们会意识到我们在谈到一件事或同事的某种行为时总是从意见和判断出发发生了什么这个方法会逐渐的让我们看清事情的来龙去脉练习的越多你就收获的越多\">通过这种练习，作为演讲者在进行演讲时会更加专注，方向也更加明确。最重要的是，它使我们熟悉我习惯中的，判断、意见和评论。我们会意识到，我们在谈到一件事或同事的某种行为时，总是从意见和判断出发。“发生了什么”这个方法，会逐渐的让我们看清事情的来龙去脉，练习的越多，你就收获的越多。</h3><p>巩固下故事创作过程：</p><p>1.思考要讲故事的2个问题\t1.为什么要讲这个故事？\t2.为什么要现在讲？</p><p>2.先识别障碍，再释放障碍。通过“发生了什么”来做沟通释放</p><p>3.通过“发生了什么”相机收集故事各个部分的细节</p><p>实际中，倾听和讲述的动态互动过程并不总是线性的。通过挖掘可以很快地进入创作，在创作过程中，可能会发现有必要进行更多的挖掘。</p><p>很多领导者都会认识到讲故事能力是团队成功的基础。某种意义上说，他们爬上通往成功的阶梯时，动力来自于对自己讲述的故事。很多领导者意识到，必须有一个“更大的目标”，把每个人拉到同一条船上，把他们连在一起，使他们成为一个有凝聚力的整体。故事比数字更能表达这一点。</p><h2 id=\"其他\">其他</h2><p>(其他方面的总结图)</p><h2 id=\"如何开头\">如何开头</h2><p>根据叙事法的经验法则，开头就是故事事实的起点，每个故事都有一个起点，它是事实存在的。</p><p>开头很重要，如果故事的第一句就能吸引听众的注意力，那么他们会跟着你的故事走。</p><h3 id=\"强有力的故事开头总是以发生了什么开始你的故事的第一句话就可以把观众带入故事由于不知道前因后果被带入故事中会激发我们的好奇心\">强有力的故事开头总是以“发生了什么”开始。你的故事的第一句话就可以把观众带入故事，由于不知道前因后果，被带入故事中会激发我们的好奇心。</h3><p>随着时间推移，你会对开头和结尾之间的关系有更敏锐的认识。你的故事开头变得不再那么随意，并且可以为结尾埋下微妙的伏笔。</p><h2 id=\"如何结尾\">如何结尾</h2><h3 id=\"你可能想总结自己故事中包含的教训请不要这么做让听众自己得出结论从你的起源故事中得到教训会更有说服力\">你可能想总结自己故事中包含的教训，请不要这么做，让听众自己得出结论，从你的起源故事中得到教训，会更有说服力。</h3><p>寻找故事结尾，就是拟合故事创作和故事讲述之间的鸿沟。在故事创作过程中，结尾是一座里程碑，是要到达的彼岸，需要于故事的开头形成必要的张力。</p><h2 id=\"如何与听众建立联系\">如何与听众建立联系</h2><p>从询问“为什么要讲故事？为什么要现在讲”那一刻起，你已经在开始思考和听众的关系。</p><p>这种询问的方式用开放的模式和框架去引发我们的思考，接着就是挖掘故事并精心设计开头、情感转折点和结尾。</p><p>为了故事的效果需要，你可以故意走到某个角落，或靠近观众。</p><p>记住每一个选择都是为了引起别人的注意，吸引注意力是演示的关键。</p><h2 id=\"关于演讲的体会\">关于演讲的体会</h2><p>从本质上讲，演讲应该带你走出舒适区。你会发现，离开那个区域的每一步，都是迈向真实和个性化故事的一步。</p><p>上台演讲的步骤：1.开始说之前与身体沟通，站稳、自然呼吸，扫视听众，偶尔将目光停留在某个人身上。2.与听众保持目光接触。演讲过程中，与5-6个人进行单独的眼神交流。3.放慢节奏。说的太快，会失去听众。4.注意音量。如果不确定后排是否能听到，就问问他们，这有利于增加信心，并与听众建立直接的联系。5.故事结束时要泰然自若，保持镇定，保持与听众的眼神接触，你的故事可以启发他们。</p><p>注意，永远不要背诵故事，因为这会妨碍你的创造力和真实表现能力。一旦你练习通过大脑和身体讲述故事，并且已经充分准备好倾听环境，就没有什么需要记忆的了。我们要通过大脑和身体来讲述故事，而不是仅仅凭借记忆。</p><p>最后，改变不是那么简单的，旧习惯的消除非一朝一夕，需要坚持和磨练。任何技能，都需要我们去实践。通过实践练习，会培养出更强的自我意识以及相应的能力，并在出现认知和情感障碍时能够注意到这些障碍。</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485311&amp;idx=1&amp;sn=e1acb7b446484043ae6541166172a48a&amp;chksm=fc226278cb55eb6e2633e99ff0b86f047eb5d36e4ef0a9bda7bfe10036c843af64c8919298dd&amp;token=39636778&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2022/04/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B058",
            
            
            
            
            
            "date_published": "2022-04-22T00:00:00+08:00",
            "date_modified": "2022-04-22T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/04/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B057",
            "title": "读书笔记(五十七) 如何讲好一个故事 - 识别与释放倾听障碍",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：最近比较关注写故事的能力，于是看了《如何讲好一个故事》这本书。起初原因是我在做备稿演讲时，发现自己写故事的能力较弱，每次写故事绞尽脑汁都很难想出内容来。随着时间的推移，我越发觉得故事的用处很多，故事能力很需要实践落地到我的生活和工作当中去。通过这次学习，我希望提高自己讲故事的能力，并用于各种场合中，包括演讲、交流、分享、家庭生活、以及工作当中去。最终我希望我能以故事的形式将生活中的所有“枯燥”都转化为“有趣”，把一切“刻板”转化为“生动”，让生活变得丰富多彩。概述：本篇总结《如何讲好一个故事》的上半部分，主要内容是：1.挖掘故事2.倾听与讲述的关系3.识别倾听障碍4.释放倾听障碍内容：简单回顾下前面的内容，上篇主要说的是挖掘故事并阐述了倾听和讲述的关系。我们在创作故事的时候有很多误区，很多人都认为自己没有故事也写不出故事，实际上我们每个人都有很多故事可以写，而且故事会随着时间推移不断变化。作者说，写故事时最重要的是，专注于与听众沟通。这里介绍了两个技巧：第一问自己两个问题，“为什么要讲故事？为什么要现在讲”，通过回答这两个问题来挖掘故事，它会带来方向性和紧迫性，回答的越准确、越深入，讲故事的专注度就越高。第二问自己“发生了什么”，用不带评判的词语来挖掘故事，例如，“然后发生了什么”，“接着发生了什么”，“后来发生了什么”，“发生了什么”等等，我们带着好奇心并不带任何评判的寻求完整的故事情境再现。接着讲了倾听和讲述的关系，倾听和讲述是相互影响的，倾听（听觉与感受）会被内心和外界的事情影响，因此保持倾听的纯洁性是非常重要的一步。具体技巧是，我们叙述内容不加入任何评判，不加判断的讲述是一种技能和技巧，可以通过练习获得。然后通过倾听来识别障碍，接着释放障碍，为后面的沟通铺平道路。这篇我们来讲讲有哪些障碍，如何识别障碍，以及释放障碍。三、识别倾听障碍首先来介绍下倾听冥想，它可以帮助我们识别倾听障碍。冥想倾听步骤为：1.闭上眼睛，开始倾听冥想2.把注意力放在室内可能出现的任何声音上。室内听到了什么。3.把意识带到室外。室外有什么声音。4.把注意力集中到身边的人。身边听到了什么。5.把意识转回到自己身上，用大脑去倾听内脏。6.用脚去倾听，做几次呼吸放松一下。7.简单记下这些障碍倾听的事情，从非判断角度来认识它们。除了冥想倾听，我们也可以主动寻求倾听障碍，例如在沟通中我们可以用“发生了什么”来主动寻求反馈，询问周围的人的倾听障碍，“阿张，最近常减你独自沉默，发生了什么？”，“阿明，看到你比较忧郁，发生了什么？”。想要真正了解别人的倾听障碍，需要的是倾听，而不是判断、评价和解释。倾听而不评判是种技巧，逐渐你会意识到，试图把某些想法推开会适得其反，它们会变得更强大。换句话说，不要评判自己的判断，不要评判别人的判断，只要意识到它们的存在并加以观察便可。这种判断，虽然可能会让我们得到一种优越感和独立性，让自己独立出来。但它牺牲的是自己和他人的联系，失去了与他人互相理解的机会。归根结底，很多阻碍倾听的障碍源自恐惧。如果能够在自己倾听冥想中识别恐惧的障碍，对我们有很大好处。很多时候我们对事物的本能反应都是基于不被承认的恐惧。那是因为我们没有认识到自己内心的恐惧，而是把恐惧投射到其他人或其他物体上。这部分具体内容将在后面文章中详细讲述。总之，不管有多少障碍在倾听冥想或活动时显露出来，我们的立场都应该是，倾听障碍本身没有任何问题，仅此而已。现在，我们注意到了障碍，仅仅注意到这些障碍，有时也需要真正的自我意识。下面将列举所有的倾听障碍，讲倾听障碍分为5类:1.外部的倾听障碍2.身体上的倾听障碍3.内部的倾听障碍4.心理方面的倾听障碍5.人际关系方面的倾听障碍外部的倾听障碍在生物原理中，听觉是对声音的物理感知，在这种感知中，声波被耳膜接收，然后通过一套涉及细小骨骼的复杂机械互相作用，转换成神经脉冲传递到大脑，在大脑中被解释为意义。语句的声音和音调，在进入身体时，会产生广泛的影响。声音的质量可以引起身体的感觉。有些声音悦耳动听、抚慰人心，而另一些则嘈杂刺耳、令人不安。视觉是通过眼睛对视觉刺激的物理感知，在视觉刺激中，图像被感知并传递给大脑进行解释。你所看到的东西都会影响你的倾听能力，例如，讲故事的人看起来很悲伤，会影响你的倾听。又比如，讲故事的人看起来衣冠不整、蓬头垢面，会影响你的倾听。因此你所有看到的情形都会影响你的判断。嗅觉是通过鼻子对进入大脑的嗅觉刺激的物理感知。例如，房间里的气味，会影响你的倾听。强烈的香水或香蜡烛，会影响你的倾听。壁炉里啪啪作响的烟火，会影响你的倾听。你所闻到的都会影响你的判断。身体方面的倾听障碍包括饥饿、想上厕所、疲倦、身体疼痛、性刺激、衣服太紧不合身、皮疹、甚至发型都会障碍倾听。内部的倾听障碍包括思想、记忆、情感、感觉。这些都是噪声，指的是我们脑中的‘胡思乱想’。这种噪声主要由自由浮动的想法组成，这些想法的强度各不相同。心理方面的倾听障碍心里方面障碍较多，原因主要是我们对他人和我们自己的判断，使得倾听和发挥创造力变格外的困难。倾听者情感上的喜欢或不喜欢，强烈认同或非常反感，都会对倾听产生干扰。因此，例如宗教、政治或其他话题的观点可能会成为倾听的障碍。我们在倾听故事时，要避免自己做出分析和判断，因为对他人和我们自己的判断使我们很难有创造力。关系方面的倾听障碍我们和别人的关系也会影响我们的倾听。常见的是两个人中有一个人比另一个人地位高，父母与孩子，兄长与弟妹，上级与下级等。因此我们必须意识到，等级制度影响倾听，只有这样才不会影响开放真诚的倾听。总之，我们需要理解并贯彻了倾听和讲述故事之间的相互关系，这样才能从中受益。在倾听的时候，不要试图解决或抓住障碍，而是要释放障碍以便能更好的倾听和参与。不加判断的倾听绝非易事，但是做得越多，你的收获就会越多。要释放倾听障碍，同样需要练习。下面文章内容将介绍如何释放倾听障碍。四、释放倾听障碍作者说，倾听自己是一种自审，学会倾听自己会提高自己倾听他人的能力。再来回顾一下前面说的，讲好故事的关键，只要专注于一件事：与观众沟通。什么是与观众沟通？就是在看和听你故事的人，他们的情绪、想法、动作、噪声，都是与你沟通中的要素。一个好故事要与观众保持良好的沟通，而不是自顾自说话。你在讲和写故事的时候，可能会对观众产生恐惧、不适、喜悦、怨恨，这些都妨碍了我们倾听和表现，我们要去识别并承认这些障碍，而不是压抑或使用其他常见的心理策略。（与观众沟通障碍图）从某种意义上说，意识到这些障碍的存在强化了我们讲故事的能力，因为不再有任何隐藏的东西阻碍我们前进。提出这些障碍需要一点勇气，但这种勇气为讲故事创造了一个广阔的天地。因此通过识别听众，然后识别障碍，最后通过释放障碍来分析如何沟通，这是很有裨益的，让你可以继续前进。实际上障碍也可以成为我们故事的素材。很多障碍都与过去的经历和记忆有关，我们没有压制障碍，只是记下它们，让它们成为现实，原因之一就是其中一些障碍可以成为故事的素材。识别倾听障碍不仅为释放障碍铺平了道路，而且可能会从一些经历和记忆中挖掘出故事。通过识别障碍，再向对方讲述我所识别到的障碍来释放障碍，这是比较常见的释放障碍的方法。特别是领导角色，大家特别关注你的反应，因此经常会加上他们个人的评判。通过识别障碍、释放障碍练习，你可以把注意力集中在当下，产生更纯粹的注意力。作者以开会为例来说明我们讲故事时的障碍和释放方法。开会与讲故事有什么关联呢？它们都需要与听众沟通。与听众沟通过程中，有很多障碍需要识别和释放，并且最后都需要达到一些目标。开会和讲故事很相似，拿开会来做比喻非常恰当，我们来看看：如何开好一个会？首先，当你不断问自己，为什么要开这个会议？为什么要现在开？这样做，你就可以从头到尾都集中精力。其次，你要通知大家会议信息，安排专属会议地点，减少空间和时间中的干扰因素。接着，你要管理会议时间，计划会议的内容以及精确到分钟的时间，这样我们就能知道什么时间做什么事情，并密切关注时间是否合理。训练有素的时间管理创造了井井有条的环境，人们觉得自己都得到了倾听，因为每个人被分配了适当的发言时间和评论时间。这也是为了消除“注意力缺失”，让人们知道这次会议的发言是有时间限制的。最后，你的会议要有目标或产出，在为会议开始前，就要让大家知道会议的期望是什么。另外我们需要引导参与者讲述所发生的事，我们在讲述故事时不一定要带着感情，因为听众很容易就能理解讲述者的感受。不管沟通内容是什么，多问问“发生了什么”，这会改变会议的模式，影响会议的结果。当你向讲述者提出问题时，不要问“为什么”，问题要从“什么（what）”开始，例如“发生了什么”，“然后呢”，“还发生了什么”，“当时你做了什么”。通过保持故事的真实性，可以减少过多解释和判断导致的混乱。最后，记录者必须重视发生了什么重要的事情：会议本身的细节，即决定的行动和谁将对这些行动负责。这样我们就可以跟踪会议期间做的行动决定，并选择适合自己的方案。这里说一下，改编、改造故事其实是很好的事，改变意味着放弃旧的故事，创造新的故事，或寻求新的方法来讲述故事。有时候我们在倾听时会走神，那一刻失去对故事的倾听和理解，通过观察障碍将自己拉回来，然后让障碍从脑海中消失。这里面整理写一下，总共有7个关键：1.深度思考“为什么？”，即“为什么要？为什么现在要？”2.减少干扰因素3.多问发生了什么，来引导讲故事4.保持真实性，减少判断和混乱5.积极改编故事，让故事更适合当下6.计划内容、安排时间和篇幅，让结构清晰7.有目标的产出，提高效果这7个关键点也是如何讲好一个故事所具备的点。作者说，识别和释放障碍并不意味着抑制或拒绝某些东西，而是承认这些障碍的存在，然后将其搁置在一边，以便我们能从沟通中得到最大的收获。识别障碍和释放障碍这两者是不可或缺的，通过识别自己的障碍，我们可以知道我们在写故事时存在的问题，通过识别他人的障碍，你可以了解到你无需对他们的障碍负责，他们需要面对自己的障碍，而不是你。释放障碍可以帮助我们更好的讲故事，更好的与观众沟通。这里简单聊下反馈，反馈的核心是鼓励对方做出改变，正面的肯定反馈有助于缓和内心自我评价和自我批评的声音。倾听与反馈指导原则1.反馈永远是对内容的评论，而不是对讲述者的评论2.反馈不是评价、判断、解释或提意见。更确切的说，它是为了让讲述者对发生的事情做出说明。所有的反馈都应该从给予正面的肯定开始。从对方刚分享的内容里，总能找到一些有用的东西。及时给予认可是维持倾听的有效方式，因为它有助于缓和内心自我评价或自我批评的声音。下面是一些团队方面的障碍，因为作者是为公司做培训的，所以他有很多这方面的经验。我简单数偶一下，书本在这块的内容比较杂，比较乱，逻辑性不强，我自己对它进行了梳理。（沟通培训图）1.关系，无论是友谊关系还是权利关系都会导致倾听障碍。解决方案是通过挖掘倾听障碍，用讲故事的方式来释放和解决这些障碍。2.情感，情感会成为倾听障碍，无论是高兴还是悲伤还是惊讶都会造成沟通障碍，我们需要将反应搁置一边，先认真倾听，再讲述自己的故事。这种方式可以促成理解和同情，减轻怨恨和分裂。3.在专用的时间和空间下，释放倾听障碍遵循的规则  让每个人都有机会表达他的障碍是什么，这至关重要。根据时间长短，给每个人分配时间来做这个练习，这样大家都能被倾听。  当别人在和团队成员讲述障碍时，不要评论或打断，不要加入自己的想法和看法。  要感谢那些刚发现自己倾听障碍的人，然后继续倾听下一个人的发言。释放障碍的方法（释放障碍技巧图）外部的障碍，例如，外面有个人在用钻头打钻释放，关上窗户，或到另一个房间，或暂停工作休息一下身体方面的障碍例如，我很饿，听不进去释放，吃点能量棒，或休息一下内部的障碍例如，我很生气，有人盗用了我的点子释放，写下来，讲给自己听或可信赖的人，不断调整认知心理方面的障碍例如，我对老板产生了恐惧心理释放，注意自己的判断，把它写下来，以平述的方式跟自己或信赖的人讨论，直到调整认知。问问自己，自己为自己出头会如何，会得到什么，会失去什么？我能采取什么行动来释放障碍。关系方面的障碍例如，我与主管关系较差释放，与主管交谈，让他多多了解他人，描述他对团队的影响。问问团队成员，是否也这么看待主管。问问自己，采取行动会得到或失去什么。保持倾听环境处于最佳状态，其好处就像比赛前清理场地一样大又裨益。释放障碍后的好处：释放障碍的做法可以让人表达真实存在的东西，而不必害怕评判或批评。这样可以培养你的创造力，可以让你从一些本来毫无期待的团队成员那里获得想法。在最佳倾听环境中，团队可以识别隐藏的事情或问题。在识别障碍后，倾听可以帮助团队解决人际冲突。故事可以帮助团队成员建立联系和同理心。团队成员可以识别和欣赏其他团队成员独特的声音、风格和贡献。在讲故事前的准备工作：1.确定听众2.找出障碍3.释放障碍4.讲述发生了什么最后，想象一下，在一场会议中，你遇到了什么障碍，是否会因为一个高级经理的到来而感到恐惧，在公共场合讲话会让你不自在吗，计划中的不确定因素让你担忧吗？让这些障碍进入你的意识，然后释放它们，从某种意义上说，你是在释放它，让它出现在你的头脑中，而不是压抑它。这样可以为上台做好准备，让我们知道讲述故事时可能会遇到什么。识别听众，是一种提高沟通效果的有效工具。我们常常根据自己所知道的开始讲述，但这可能并不总是听众想听的。考虑听众的感受，意识到他们的兴趣和需要，反过来也可以塑造我们的故事。我们可以对倾听进行预测，而倾听反过来又会影响我们的讲述，其相互关系就像容器和导入容器的液体。以上说都是在写故事前的内容，关键是障碍，包括识别障碍、释放障碍，它们的方法和经验，下一篇我们来，实实在在的讲讲，如何用写好一个故事，有一些方法和技巧，这些方法和技巧结合中前面我们所说的内容，障碍。已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485242&amp;idx=1&amp;sn=127e82b7566e4463304ee972e56a2aa9&amp;chksm=fc22623dcb55eb2b5457161c985457302bc94ad3a9b3311938b54959fab9f79571127bb5501d&amp;token=39636778&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h2 id=\"背景\">背景：</h2><p>最近比较关注写故事的能力，于是看了《如何讲好一个故事》这本书。</p><p>起初原因是我在做备稿演讲时，发现自己写故事的能力较弱，每次写故事绞尽脑汁都很难想出内容来。</p><p>随着时间的推移，我越发觉得故事的用处很多，故事能力很需要实践落地到我的生活和工作当中去。</p><p>通过这次学习，我希望提高自己讲故事的能力，并用于各种场合中，包括演讲、交流、分享、家庭生活、以及工作当中去。</p><p>最终我希望我能以故事的形式将生活中的所有“枯燥”都转化为“有趣”，把一切“刻板”转化为“生动”，让生活变得丰富多彩。</p><h2 id=\"概述\">概述：</h2><p>本篇总结《如何讲好一个故事》的上半部分，主要内容是：1.挖掘故事2.倾听与讲述的关系3.识别倾听障碍4.释放倾听障碍</p><h2 id=\"内容\">内容：</h2><p>简单回顾下前面的内容，上篇主要说的是挖掘故事并阐述了倾听和讲述的关系。我们在创作故事的时候有很多误区，很多人都认为自己没有故事也写不出故事，实际上我们每个人都有很多故事可以写，而且故事会随着时间推移不断变化。</p><p>作者说，写故事时最重要的是，专注于与听众沟通。</p><p>这里介绍了两个技巧：</p><p>第一问自己两个问题，“为什么要讲故事？为什么要现在讲”，通过回答这两个问题来挖掘故事，它会带来方向性和紧迫性，回答的越准确、越深入，讲故事的专注度就越高。</p><p>第二问自己“发生了什么”，用不带评判的词语来挖掘故事，例如，“然后发生了什么”，“接着发生了什么”，“后来发生了什么”，“发生了什么”等等，我们带着好奇心并不带任何评判的寻求完整的故事情境再现。</p><p>接着讲了倾听和讲述的关系，倾听和讲述是相互影响的，倾听（听觉与感受）会被内心和外界的事情影响，因此保持倾听的纯洁性是非常重要的一步。</p><p>具体技巧是，我们叙述内容不加入任何评判，不加判断的讲述是一种技能和技巧，可以通过练习获得。然后通过倾听来识别障碍，接着释放障碍，为后面的沟通铺平道路。</p><p>这篇我们来讲讲有哪些障碍，如何识别障碍，以及释放障碍。</p><h2 id=\"三识别倾听障碍\">三、识别倾听障碍</h2><p>首先来介绍下倾听冥想，它可以帮助我们识别倾听障碍。冥想倾听步骤为：</p><p>1.闭上眼睛，开始倾听冥想2.把注意力放在室内可能出现的任何声音上。室内听到了什么。3.把意识带到室外。室外有什么声音。4.把注意力集中到身边的人。身边听到了什么。5.把意识转回到自己身上，用大脑去倾听内脏。6.用脚去倾听，做几次呼吸放松一下。7.简单记下这些障碍倾听的事情，从非判断角度来认识它们。</p><p>除了冥想倾听，我们也可以主动寻求倾听障碍，例如在沟通中我们可以用“发生了什么”来主动寻求反馈，询问周围的人的倾听障碍，“阿张，最近常减你独自沉默，发生了什么？”，“阿明，看到你比较忧郁，发生了什么？”。</p><p>想要真正了解别人的倾听障碍，需要的是倾听，而不是判断、评价和解释。</p><p>倾听而不评判是种技巧，逐渐你会意识到，试图把某些想法推开会适得其反，它们会变得更强大。换句话说，不要评判自己的判断，不要评判别人的判断，只要意识到它们的存在并加以观察便可。</p><p>这种判断，虽然可能会让我们得到一种优越感和独立性，让自己独立出来。但它牺牲的是自己和他人的联系，失去了与他人互相理解的机会。</p><p>归根结底，很多阻碍倾听的障碍源自恐惧。如果能够在自己倾听冥想中识别恐惧的障碍，对我们有很大好处。</p><p>很多时候我们对事物的本能反应都是基于不被承认的恐惧。那是因为我们没有认识到自己内心的恐惧，而是把恐惧投射到其他人或其他物体上。这部分具体内容将在后面文章中详细讲述。</p><h3 id=\"总之不管有多少障碍在倾听冥想或活动时显露出来我们的立场都应该是倾听障碍本身没有任何问题仅此而已现在我们注意到了障碍仅仅注意到这些障碍有时也需要真正的自我意识\">总之，不管有多少障碍在倾听冥想或活动时显露出来，我们的立场都应该是，倾听障碍本身没有任何问题，仅此而已。现在，我们注意到了障碍，仅仅注意到这些障碍，有时也需要真正的自我意识。</h3><p>下面将列举所有的倾听障碍，讲倾听障碍分为5类:</p><p>1.外部的倾听障碍2.身体上的倾听障碍3.内部的倾听障碍4.心理方面的倾听障碍5.人际关系方面的倾听障碍</p><h2 id=\"外部的倾听障碍\">外部的倾听障碍</h2><h3 id=\"在生物原理中听觉是对声音的物理感知在这种感知中声波被耳膜接收然后通过一套涉及细小骨骼的复杂机械互相作用转换成神经脉冲传递到大脑在大脑中被解释为意义\">在生物原理中，听觉是对声音的物理感知，在这种感知中，声波被耳膜接收，然后通过一套涉及细小骨骼的复杂机械互相作用，转换成神经脉冲传递到大脑，在大脑中被解释为意义。</h3><p>语句的声音和音调，在进入身体时，会产生广泛的影响。声音的质量可以引起身体的感觉。有些声音悦耳动听、抚慰人心，而另一些则嘈杂刺耳、令人不安。</p><h3 id=\"视觉是通过眼睛对视觉刺激的物理感知在视觉刺激中图像被感知并传递给大脑进行解释\">视觉是通过眼睛对视觉刺激的物理感知，在视觉刺激中，图像被感知并传递给大脑进行解释。</h3><p>你所看到的东西都会影响你的倾听能力，例如，讲故事的人看起来很悲伤，会影响你的倾听。又比如，讲故事的人看起来衣冠不整、蓬头垢面，会影响你的倾听。因此你所有看到的情形都会影响你的判断。</p><h3 id=\"嗅觉是通过鼻子对进入大脑的嗅觉刺激的物理感知\">嗅觉是通过鼻子对进入大脑的嗅觉刺激的物理感知。</h3><p>例如，房间里的气味，会影响你的倾听。强烈的香水或香蜡烛，会影响你的倾听。壁炉里啪啪作响的烟火，会影响你的倾听。你所闻到的都会影响你的判断。</p><h3 id=\"身体方面的倾听障碍\">身体方面的倾听障碍</h3><p>包括饥饿、想上厕所、疲倦、身体疼痛、性刺激、衣服太紧不合身、皮疹、甚至发型都会障碍倾听。</p><h3 id=\"内部的倾听障碍\">内部的倾听障碍</h3><p>包括思想、记忆、情感、感觉。这些都是噪声，指的是我们脑中的‘胡思乱想’。这种噪声主要由自由浮动的想法组成，这些想法的强度各不相同。</p><h3 id=\"心理方面的倾听障碍\">心理方面的倾听障碍</h3><p>心里方面障碍较多，原因主要是我们对他人和我们自己的判断，使得倾听和发挥创造力变格外的困难。</p><p>倾听者情感上的喜欢或不喜欢，强烈认同或非常反感，都会对倾听产生干扰。因此，例如宗教、政治或其他话题的观点可能会成为倾听的障碍。我们在倾听故事时，要避免自己做出分析和判断，因为对他人和我们自己的判断使我们很难有创造力。</p><h3 id=\"关系方面的倾听障碍\">关系方面的倾听障碍</h3><p>我们和别人的关系也会影响我们的倾听。常见的是两个人中有一个人比另一个人地位高，父母与孩子，兄长与弟妹，上级与下级等。因此我们必须意识到，等级制度影响倾听，只有这样才不会影响开放真诚的倾听。</p><p>总之，我们需要理解并贯彻了倾听和讲述故事之间的相互关系，这样才能从中受益。在倾听的时候，不要试图解决或抓住障碍，而是要释放障碍以便能更好的倾听和参与。不加判断的倾听绝非易事，但是做得越多，你的收获就会越多。</p><p>要释放倾听障碍，同样需要练习。下面文章内容将介绍如何释放倾听障碍。</p><h2 id=\"四释放倾听障碍\">四、释放倾听障碍</h2><p>作者说，倾听自己是一种自审，学会倾听自己会提高自己倾听他人的能力。</p><p>再来回顾一下前面说的，讲好故事的关键，只要专注于一件事：与观众沟通。</p><p>什么是与观众沟通？就是在看和听你故事的人，他们的情绪、想法、动作、噪声，都是与你沟通中的要素。一个好故事要与观众保持良好的沟通，而不是自顾自说话。</p><p>你在讲和写故事的时候，可能会对观众产生恐惧、不适、喜悦、怨恨，这些都妨碍了我们倾听和表现，我们要去识别并承认这些障碍，而不是压抑或使用其他常见的心理策略。</p><p>（与观众沟通障碍图）</p><p>从某种意义上说，意识到这些障碍的存在强化了我们讲故事的能力，因为不再有任何隐藏的东西阻碍我们前进。提出这些障碍需要一点勇气，但这种勇气为讲故事创造了一个广阔的天地。</p><p>因此通过识别听众，然后识别障碍，最后通过释放障碍来分析如何沟通，这是很有裨益的，让你可以继续前进。</p><p>实际上障碍也可以成为我们故事的素材。很多障碍都与过去的经历和记忆有关，我们没有压制障碍，只是记下它们，让它们成为现实，原因之一就是其中一些障碍可以成为故事的素材。识别倾听障碍不仅为释放障碍铺平了道路，而且可能会从一些经历和记忆中挖掘出故事。</p><p>通过识别障碍，再向对方讲述我所识别到的障碍来释放障碍，这是比较常见的释放障碍的方法。</p><p>特别是领导角色，大家特别关注你的反应，因此经常会加上他们个人的评判。</p><p>通过识别障碍、释放障碍练习，你可以把注意力集中在当下，产生更纯粹的注意力。</p><p>作者以开会为例来说明我们讲故事时的障碍和释放方法。</p><p>开会与讲故事有什么关联呢？它们都需要与听众沟通。</p><p>与听众沟通过程中，有很多障碍需要识别和释放，并且最后都需要达到一些目标。</p><p>开会和讲故事很相似，拿开会来做比喻非常恰当，我们来看看：如何开好一个会？</p><p>首先，当你不断问自己，为什么要开这个会议？为什么要现在开？这样做，你就可以从头到尾都集中精力。</p><p>其次，你要通知大家会议信息，安排专属会议地点，减少空间和时间中的干扰因素。</p><p>接着，你要管理会议时间，计划会议的内容以及精确到分钟的时间，这样我们就能知道什么时间做什么事情，并密切关注时间是否合理。</p><p>训练有素的时间管理创造了井井有条的环境，人们觉得自己都得到了倾听，因为每个人被分配了适当的发言时间和评论时间。这也是为了消除“注意力缺失”，让人们知道这次会议的发言是有时间限制的。</p><p>最后，你的会议要有目标或产出，在为会议开始前，就要让大家知道会议的期望是什么。</p><p>另外我们需要引导参与者讲述所发生的事，</p><p>我们在讲述故事时不一定要带着感情，因为听众很容易就能理解讲述者的感受。</p><p>不管沟通内容是什么，多问问“发生了什么”，这会改变会议的模式，影响会议的结果。</p><p>当你向讲述者提出问题时，不要问“为什么”，问题要从“什么（what）”开始，例如“发生了什么”，“然后呢”，“还发生了什么”，“当时你做了什么”。</p><p>通过保持故事的真实性，可以减少过多解释和判断导致的混乱。</p><p>最后，记录者必须重视发生了什么重要的事情：会议本身的细节，即决定的行动和谁将对这些行动负责。这样我们就可以跟踪会议期间做的行动决定，并选择适合自己的方案。</p><h3 id=\"这里说一下改编改造故事其实是很好的事改变意味着放弃旧的故事创造新的故事或寻求新的方法来讲述故事\">这里说一下，改编、改造故事其实是很好的事，改变意味着放弃旧的故事，创造新的故事，或寻求新的方法来讲述故事。</h3><p>有时候我们在倾听时会走神，那一刻失去对故事的倾听和理解，通过观察障碍将自己拉回来，然后让障碍从脑海中消失。</p><p>这里面整理写一下，总共有7个关键：1.深度思考“为什么？”，即“为什么要？为什么现在要？”2.减少干扰因素3.多问发生了什么，来引导讲故事4.保持真实性，减少判断和混乱5.积极改编故事，让故事更适合当下6.计划内容、安排时间和篇幅，让结构清晰7.有目标的产出，提高效果</p><p>这7个关键点也是如何讲好一个故事所具备的点。</p><h3 id=\"作者说识别和释放障碍并不意味着抑制或拒绝某些东西而是承认这些障碍的存在然后将其搁置在一边以便我们能从沟通中得到最大的收获\">作者说，识别和释放障碍并不意味着抑制或拒绝某些东西，而是承认这些障碍的存在，然后将其搁置在一边，以便我们能从沟通中得到最大的收获。</h3><h3 id=\"识别障碍和释放障碍这两者是不可或缺的通过识别自己的障碍我们可以知道我们在写故事时存在的问题通过识别他人的障碍你可以了解到你无需对他们的障碍负责他们需要面对自己的障碍而不是你释放障碍可以帮助我们更好的讲故事更好的与观众沟通\">识别障碍和释放障碍这两者是不可或缺的，通过识别自己的障碍，我们可以知道我们在写故事时存在的问题，通过识别他人的障碍，你可以了解到你无需对他们的障碍负责，他们需要面对自己的障碍，而不是你。释放障碍可以帮助我们更好的讲故事，更好的与观众沟通。</h3><p>这里简单聊下反馈，反馈的核心是鼓励对方做出改变，正面的肯定反馈有助于缓和内心自我评价和自我批评的声音。</p><p>倾听与反馈指导原则</p><p>1.反馈永远是对内容的评论，而不是对讲述者的评论</p><p>2.反馈不是评价、判断、解释或提意见。更确切的说，它是为了让讲述者对发生的事情做出说明。</p><p>所有的反馈都应该从给予正面的肯定开始。从对方刚分享的内容里，总能找到一些有用的东西。及时给予认可是维持倾听的有效方式，因为它有助于缓和内心自我评价或自我批评的声音。</p><p>下面是一些团队方面的障碍，因为作者是为公司做培训的，所以他有很多这方面的经验。我简单数偶一下，书本在这块的内容比较杂，比较乱，逻辑性不强，我自己对它进行了梳理。</p><p>（沟通培训图）</p><p>1.关系，无论是友谊关系还是权利关系都会导致倾听障碍。解决方案是通过挖掘倾听障碍，用讲故事的方式来释放和解决这些障碍。</p><p>2.情感，情感会成为倾听障碍，无论是高兴还是悲伤还是惊讶都会造成沟通障碍，我们需要将反应搁置一边，先认真倾听，再讲述自己的故事。这种方式可以促成理解和同情，减轻怨恨和分裂。</p><p>3.在专用的时间和空间下，释放倾听障碍遵循的规则</p><ul>  <li>让每个人都有机会表达他的障碍是什么，这至关重要。根据时间长短，给每个人分配时间来做这个练习，这样大家都能被倾听。</li>  <li>当别人在和团队成员讲述障碍时，不要评论或打断，不要加入自己的想法和看法。</li>  <li>要感谢那些刚发现自己倾听障碍的人，然后继续倾听下一个人的发言。</li></ul><h2 id=\"释放障碍的方法\">释放障碍的方法</h2><p>（释放障碍技巧图）</p><p>外部的障碍，</p><p>例如，外面有个人在用钻头打钻</p><p>释放，关上窗户，或到另一个房间，或暂停工作休息一下</p><p>身体方面的障碍</p><p>例如，我很饿，听不进去</p><p>释放，吃点能量棒，或休息一下</p><p>内部的障碍</p><p>例如，我很生气，有人盗用了我的点子</p><p>释放，写下来，讲给自己听或可信赖的人，不断调整认知</p><p>心理方面的障碍</p><p>例如，我对老板产生了恐惧心理</p><p>释放，注意自己的判断，把它写下来，以平述的方式跟自己或信赖的人讨论，直到调整认知。</p><p>问问自己，自己为自己出头会如何，会得到什么，会失去什么？我能采取什么行动来释放障碍。</p><p>关系方面的障碍</p><p>例如，我与主管关系较差</p><p>释放，与主管交谈，让他多多了解他人，描述他对团队的影响。</p><p>问问团队成员，是否也这么看待主管。</p><p>问问自己，采取行动会得到或失去什么。</p><p>保持倾听环境处于最佳状态，其好处就像比赛前清理场地一样大又裨益。</p><p>释放障碍后的好处：</p><p>释放障碍的做法可以让人表达真实存在的东西，而不必害怕评判或批评。</p><p>这样可以培养你的创造力，可以让你从一些本来毫无期待的团队成员那里获得想法。</p><p>在最佳倾听环境中，团队可以识别隐藏的事情或问题。</p><p>在识别障碍后，倾听可以帮助团队解决人际冲突。</p><p>故事可以帮助团队成员建立联系和同理心。</p><p>团队成员可以识别和欣赏其他团队成员独特的声音、风格和贡献。</p><p>在讲故事前的准备工作：</p><p>1.确定听众</p><p>2.找出障碍</p><p>3.释放障碍</p><p>4.讲述发生了什么</p><p>最后，想象一下，在一场会议中，你遇到了什么障碍，是否会因为一个高级经理的到来而感到恐惧，在公共场合讲话会让你不自在吗，计划中的不确定因素让你担忧吗？让这些障碍进入你的意识，然后释放它们，从某种意义上说，你是在释放它，让它出现在你的头脑中，而不是压抑它。这样可以为上台做好准备，让我们知道讲述故事时可能会遇到什么。</p><p>识别听众，是一种提高沟通效果的有效工具。</p><p>我们常常根据自己所知道的开始讲述，但这可能并不总是听众想听的。</p><p>考虑听众的感受，意识到他们的兴趣和需要，反过来也可以塑造我们的故事。</p><p>我们可以对倾听进行预测，而倾听反过来又会影响我们的讲述，其相互关系就像容器和导入容器的液体。</p><p>以上说都是在写故事前的内容，关键是障碍，包括识别障碍、释放障碍，它们的方法和经验，下一篇我们来，实实在在的讲讲，如何用写好一个故事，有一些方法和技巧，这些方法和技巧结合中前面我们所说的内容，障碍。</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485242&amp;idx=1&amp;sn=127e82b7566e4463304ee972e56a2aa9&amp;chksm=fc22623dcb55eb2b5457161c985457302bc94ad3a9b3311938b54959fab9f79571127bb5501d&amp;token=39636778&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2022/04/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B057",
            
            
            
            
            
            "date_published": "2022-04-11T00:00:00+08:00",
            "date_modified": "2022-04-11T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/04/06/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A123",
            "title": "给女儿的信(二十三) 调整",
            "summary": "女儿 教育 亲情",
            "content_text": "要点“调整”是一项技能，这个技能在我们生活当中起到很关键的作用，我希望能更多的练习它。结构1.环境变化2.情绪失控3.调整自己4.习得技能大纲1.遇到环境变化，自己被困在家里2.发现自己在家里一直呆着很闷，情绪很糟糕3.试图调整自己，让自己去适应环境4.根据环境去调整自己的作息和饮食，以及学习和工作的方式内容Sharon、Anne爸爸好想你们，再过两个星期爸爸就回来了哟。爸爸在深圳最近遇到疫情了，公司通知说，大家都呆在家里办公。没办法，为了不让病毒传播的更厉害，爸爸要遵从政府的要求在深圳家里办公了。一开始，爸爸以为会很轻松，毕竟在家里会更自由些。没想到在家里时间长了，心情很郁闷，因为出不去啊，心情很糟糕。而且爸爸发现，呆在家里时间长了，椅子不舒服，坐得我屁股疼。爸爸心里很闷，想出去散散心，但门口保安说，不能出去，出去就回不来啦。于是爸爸被赶回了屋里了。被关在家里的前1周，爸爸很难受。我想，我不能这样下去啊，情绪会崩溃的。于是想着怎么去调整自己，才能让舒服一些。爸爸开始闭上眼睛做深呼吸，吸气，呼气。爸爸开始承认环境在变化，只是自己没有变化，同时发现自己试图改变和突破环境，比如我想出去走走，但环境不允许。我想回公司工作，因为这里效率比较低，这些都是环境不允许的。由于我一直在对抗环境，而环境比我强大很多，这种对抗永远以我的失败告终的，因此我很难受很痛苦。好了，想到这里，爸爸明白了，环境改变不了，需要我自己调整自己去适应环境，才能会更加顺利。接着开始做出改变，爸爸先用冥想和跟自己说说话的方式来化解情绪调整认知。冥想就是闭上眼睛数自己的呼吸，这样能让注意力从琐碎的事情回到自己身上，跟自己说说，则是用跟自己聊聊天的方式，跟自己聊聊最近的心情，最近发生的事，以及自己的想法，这些想法会发生怎样的后果，怎么样做会更好一些，把这些跟自己说明白了，我的情绪也就彻底释放了，认知也调整过来了。后来，由于爸爸还是出不去，所以爸爸只能用这两种方式来化解在家里的情绪。慢慢的爸爸发现，我的注意力更加集中了，爸爸借这个关在家里的机会，看了很多书，写了很多文章，学习了好多东西，爸爸发现被关在家里也很有充实呢，太好了。Sharon和Anne也要像爸爸一样，当遇到困难的时候，积极去调整自己哟，这样就能让事情更加顺利，让我们自己变的更好更厉害，加油。爸爸喜欢你们，照顾好妈妈哟。",
            "content_html": "<h1 id=\"要点\">要点</h1><p>“调整”是一项技能，这个技能在我们生活当中起到很关键的作用，我希望能更多的练习它。</p><h1 id=\"结构\">结构</h1><pre><code>1.环境变化2.情绪失控3.调整自己4.习得技能</code></pre><h1 id=\"大纲\">大纲</h1><pre><code>1.遇到环境变化，自己被困在家里2.发现自己在家里一直呆着很闷，情绪很糟糕3.试图调整自己，让自己去适应环境4.根据环境去调整自己的作息和饮食，以及学习和工作的方式</code></pre><h1 id=\"内容\">内容</h1><p>Sharon、Anne爸爸好想你们，再过两个星期爸爸就回来了哟。</p><p>爸爸在深圳最近遇到疫情了，公司通知说，大家都呆在家里办公。</p><p>没办法，为了不让病毒传播的更厉害，爸爸要遵从政府的要求在深圳家里办公了。</p><p>一开始，爸爸以为会很轻松，毕竟在家里会更自由些。</p><p>没想到在家里时间长了，心情很郁闷，因为出不去啊，心情很糟糕。</p><p>而且爸爸发现，呆在家里时间长了，椅子不舒服，坐得我屁股疼。</p><p>爸爸心里很闷，想出去散散心，但门口保安说，不能出去，出去就回不来啦。于是爸爸被赶回了屋里了。</p><p>被关在家里的前1周，爸爸很难受。我想，我不能这样下去啊，情绪会崩溃的。</p><p>于是想着怎么去调整自己，才能让舒服一些。爸爸开始闭上眼睛做深呼吸，吸气，呼气。</p><p>爸爸开始承认环境在变化，只是自己没有变化，同时发现自己试图改变和突破环境，</p><p>比如我想出去走走，但环境不允许。我想回公司工作，因为这里效率比较低，这些都是环境不允许的。</p><p>由于我一直在对抗环境，而环境比我强大很多，这种对抗永远以我的失败告终的，因此我很难受很痛苦。</p><p>好了，想到这里，爸爸明白了，环境改变不了，需要我自己调整自己去适应环境，才能会更加顺利。</p><p>接着开始做出改变，爸爸先用冥想和跟自己说说话的方式来化解情绪调整认知。</p><p>冥想就是闭上眼睛数自己的呼吸，这样能让注意力从琐碎的事情回到自己身上，跟自己说说，则是用跟自己聊聊天的方式，跟自己聊聊最近的心情，最近发生的事，以及自己的想法，这些想法会发生怎样的后果，怎么样做会更好一些，把这些跟自己说明白了，我的情绪也就彻底释放了，认知也调整过来了。</p><p>后来，由于爸爸还是出不去，所以爸爸只能用这两种方式来化解在家里的情绪。</p><p>慢慢的爸爸发现，我的注意力更加集中了，爸爸借这个关在家里的机会，看了很多书，写了很多文章，学习了好多东西，爸爸发现被关在家里也很有充实呢，太好了。</p><p>Sharon和Anne也要像爸爸一样，当遇到困难的时候，积极去调整自己哟，这样就能让事情更加顺利，让我们自己变的更好更厉害，加油。</p><p>爸爸喜欢你们，照顾好妈妈哟。</p>",
            "url": "http://www.luzexi.com/2022/04/06/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A123",
            
            
            
            
            
            "date_published": "2022-04-06T00:00:00+08:00",
            "date_modified": "2022-04-06T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/04/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B056",
            "title": "读书笔记(五十六) 如何讲好一个故事 - 挖掘与倾听",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：最近比较关注写故事的能力，于是看了《如何讲好一个故事》这本书。起初原因是我在做备稿演讲时，发现自己写故事的能力较弱，每次写故事绞尽脑汁都很难想出内容来。随着时间的推移，我越发觉得故事的用处很多，故事能力很需要实践落地到我的生活和工作当中去。通过这次学习，我希望提高自己讲故事的能力，并用于各种场合中，包括演讲、交流、分享、家庭生活、以及工作当中去。最终我希望我能以故事的形式将生活中所有的“枯燥”都转化为“有趣”，把一切“刻板”转化为“生动”，让生活变得丰富多彩。概述：本篇总结《如何讲好一个故事》的上半部分，主要内容是：1.挖掘故事2.倾听与讲述的关系3.识别障碍4.释放障碍内容：听故事和讲故事之间存在着一种相互的关系，当我们使用叙事型故事倾听和讲述法时，可以让倾听者感受到这一切。听和讲的关系认知提醒了我，即所有关系之间有着自然而然的相互性，这些相互关系为深化合作、加强沟通铺平了道路。很多时候，我们的倾听和交流能力，并没有得到有效的开发。一旦这种能力被激活，可以帮助我们把分析能力和情绪智力结合起来，从工作和生活中得到更多的满足感。说到创造力，与之相关的是洞察力，实际上要提高它们最有效的方法是，学会中止判断。当我们不进行评判时，创造力和洞察力也会随之而来（不做价值判断，不批判），移情和理解亦取决于此。作者说：我们在讲述故事时，只要专注于一件事：与听众沟通。这是整本书的中心思想，具体如何与听众沟通，下面就来讲讲。一、挖掘故事我们大部分人在写故事时，常常有很多认知的误区。比如，我写不好故事。比如，我的人生很平淡，没有故事好讲。比如，我的经历很倒霉，写不出好故事。等等等，实际上这些认知都是错误的。图片（创作故事的4个原则）作者有6个原则来说明如何创作故事的基本原则，我认为可以浓缩为4个原则，即：1.任何人通过训练都能讲好故事。2.生活本身就是了不起的故事，能从中挖掘出许许多多的故事。3.通过细致观察会发现，我们的故事一直在演变，因此能够创造出各种不同的故事。4.倾听和讲述是相辅相成的。知道了这四个原则后，我们可以用叙述法来创造故事，它有三个步骤，挖掘、创作、展示。通过挖掘素材，形成故事的初步设想，接着将故事素材设计成典型的故事结构，即勇敢出发遇到危机逐步解决达成胜利平淡归来，最后将这个故事向观众展示。叙事法提供了一个循序渐进的框架。这个框架里首先要求我们在讲故事前，先问自己两个问题：“为什么要讲故事？”，“为什么要现在讲？”。这两个问题并不会阻碍我们讲故事，恰恰相反，它能促进我们讲好故事。设想一下，当我们在写故事前，先回答这两个问题，并将回答的内容写下来，会是怎样的情景。你会发现，我们对想要创作的故事在脑海中变得更清晰了，同时在逐步挖掘和创作的路上变得更加自信，更加勇敢。用这两个问题进行故事的探索，可以使得我们更深入的认识所要创作的故事，同时它会带来方向性和紧迫性，从而让故事拥有活力。你对这两个问题的回答越准确、越深入，讲故事的专注度就越高。图片（挖掘故事的关键）此外，在讲故事时，如果我们以“发生了什么”方法作为基础来讲故事，会有更好的呈现。我们很多时候会一直以为自己是在讲给别人听，用这种方式来挖掘故事通常比较困难。如果讲故事的人没有意识到听众的存在而陷入了自己的语言泡沫，我们也就无法真正倾听故事。实际上我们在挖掘别人的故事时，会问“发生了什么”，这个方法非常管用，它没有带着任何评判并且带着好奇心寻求完整的情景再现，这个方法也同样可以用于自己身上来挖掘我们自己的故事。至于不用“为什么”而是“发生了什么”来挖掘故事的原因，由于这里涉及到了讲述和倾听的关系，放到了下一节里讲解。这里只简单提一句，倾听的重要性绝不亚于讲述。整本书中，作者都用“发生了什么”来让，与他对话的人，不断讲述出故事的每个细节，因此我们也可以用同样的手法，用在我们创作故事的时候。二、倾听与讲述的关系很多人可能并没认知到，倾听和讲述是相互影响的，即讲述影响倾听，倾听也影响讲述不过作者并没有解释倾听在书中含义，因此这里容易引起疑问。倾听，有两种含义，第一种是‘我’作为讲述者听到或感受到的，包括周围环境，内心心理，以及观众等。另一种是观众听到或感受到的，也同样包括周围环境、内心心理，以及讲述者的动作、语音语调、姿势等。简单来说，倾听实际上是感受，当感受比较复杂或比较糟糕时，就会影响讲述者，以及影响讲述者传达给观众的内容和效果。因此我们在讲述时，尽量不增加倾听的障碍，其中的关键是不评判。图片(倾听的关键-图)理想的倾听是建立在非判断的基础上的，因为就交流的纯洁性而言，判断只会搅浑水。在叙事法中，不加判断被认为是一种技能和技巧，可以通过练习获得。当然不只是讲述者需要不判断，倾听者也需要不判断，但这非常困难，我们能做的只有控制自己，让讲述的内容是在不判断的基础上的。我们可以把倾听比作容器，把故事比作倒进容器中的液体。这种对倾听和讲述之间互相关系的认识就像透视镜，可以用来审视任何组织的沟通环境。在大型科技公司工作的人往往思想单纯，但雄心勃勃，求胜心切。尽管这些品质与公司企业文化一致，但不符合员工互相支持、彼此成就，在团队中建立更牢固纽带的愿望。事实上，一旦事情出了差错，就会出现一种互相指责的倾向，这会导致冲突与怨恨，成员之间的互相理解会崩溃。出现这种问题的关键是人们忽视了协作和沟通依赖于倾听的事实。很多时候我们的互动所带给我们的感受，直接阻碍了我们更好的互动，究其原因阻碍互动的就是倾听障碍。因此想要有一次成功的交流，必须先识别倾听障碍，再释放倾听障碍。先识别听众，然后识别障碍，最后通过释放障碍来分析如何沟通，这是很有裨益的，让你可以继续前进。回到创作故事上，当我们认识到倾听和讲述相互影响的关系时，我们就能更好的创作故事。也就是说，为了让我们的故事内容和观点传达的更加有效，首要原则是在故事内不做判断，并且在讲述前先识别倾听障碍，再释放倾听障碍，最终让观众的有一个纯粹的倾听环境。–由于内容较多，识别倾听障碍和释放倾听障碍，放在下一篇。已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485230&amp;idx=1&amp;sn=5f2594652488e4c6f6cd95e730256b4a&amp;chksm=fc226229cb55eb3fbc59c616a104c08b1cded6aa293f2685bae16b52dcd400151a75552037b3&amp;token=1152981748&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>最近比较关注写故事的能力，于是看了《如何讲好一个故事》这本书。</p><p>起初原因是我在做备稿演讲时，发现自己写故事的能力较弱，每次写故事绞尽脑汁都很难想出内容来。</p><p>随着时间的推移，我越发觉得故事的用处很多，故事能力很需要实践落地到我的生活和工作当中去。</p><p>通过这次学习，我希望提高自己讲故事的能力，并用于各种场合中，包括演讲、交流、分享、家庭生活、以及工作当中去。</p><h3 id=\"最终我希望我能以故事的形式将生活中所有的枯燥都转化为有趣把一切刻板转化为生动让生活变得丰富多彩\">最终我希望我能以故事的形式将生活中所有的“枯燥”都转化为“有趣”，把一切“刻板”转化为“生动”，让生活变得丰富多彩。</h3><h1 id=\"概述\">概述：</h1><p>本篇总结《如何讲好一个故事》的上半部分，主要内容是：</p><p>1.挖掘故事</p><p>2.倾听与讲述的关系</p><p>3.识别障碍</p><p>4.释放障碍</p><h1 id=\"内容\">内容：</h1><p>听故事和讲故事之间存在着一种相互的关系，当我们使用叙事型故事倾听和讲述法时，可以让倾听者感受到这一切。</p><p>听和讲的关系认知提醒了我，即所有关系之间有着自然而然的相互性，这些相互关系为深化合作、加强沟通铺平了道路。</p><p>很多时候，我们的倾听和交流能力，并没有得到有效的开发。一旦这种能力被激活，可以帮助我们把分析能力和情绪智力结合起来，从工作和生活中得到更多的满足感。</p><p>说到创造力，与之相关的是洞察力，实际上要提高它们最有效的方法是，学会中止判断。当我们不进行评判时，创造力和洞察力也会随之而来（不做价值判断，不批判），移情和理解亦取决于此。</p><h3 id=\"作者说我们在讲述故事时只要专注于一件事与听众沟通\">作者说：我们在讲述故事时，只要专注于一件事：与听众沟通。</h3><p>这是整本书的中心思想，具体如何与听众沟通，下面就来讲讲。</p><h1 id=\"一挖掘故事\">一、挖掘故事</h1><p>我们大部分人在写故事时，常常有很多认知的误区。</p><p>比如，我写不好故事。</p><p>比如，我的人生很平淡，没有故事好讲。</p><p>比如，我的经历很倒霉，写不出好故事。</p><p>等等等，实际上这些认知都是错误的。</p><p>图片</p><p>（创作故事的4个原则）</p><p>作者有6个原则来说明如何创作故事的基本原则，我认为可以浓缩为4个原则，即：</p><h3 id=\"1任何人通过训练都能讲好故事\">1.任何人通过训练都能讲好故事。</h3><h3 id=\"2生活本身就是了不起的故事能从中挖掘出许许多多的故事\">2.生活本身就是了不起的故事，能从中挖掘出许许多多的故事。</h3><h3 id=\"3通过细致观察会发现我们的故事一直在演变因此能够创造出各种不同的故事\">3.通过细致观察会发现，我们的故事一直在演变，因此能够创造出各种不同的故事。</h3><h3 id=\"4倾听和讲述是相辅相成的\">4.倾听和讲述是相辅相成的。</h3><p>知道了这四个原则后，我们可以用叙述法来创造故事，它有三个步骤，挖掘、创作、展示。</p><p>通过挖掘素材，形成故事的初步设想，接着将故事素材设计成典型的故事结构，即勇敢出发遇到危机逐步解决达成胜利平淡归来，最后将这个故事向观众展示。</p><p>叙事法提供了一个循序渐进的框架。</p><h3 id=\"这个框架里首先要求我们在讲故事前先问自己两个问题为什么要讲故事为什么要现在讲这两个问题并不会阻碍我们讲故事恰恰相反它能促进我们讲好故事\">这个框架里首先要求我们在讲故事前，先问自己两个问题：“为什么要讲故事？”，“为什么要现在讲？”。这两个问题并不会阻碍我们讲故事，恰恰相反，它能促进我们讲好故事。</h3><p>设想一下，当我们在写故事前，先回答这两个问题，并将回答的内容写下来，会是怎样的情景。你会发现，我们对想要创作的故事在脑海中变得更清晰了，同时在逐步挖掘和创作的路上变得更加自信，更加勇敢。</p><p>用这两个问题进行故事的探索，可以使得我们更深入的认识所要创作的故事，同时它会带来方向性和紧迫性，从而让故事拥有活力。你对这两个问题的回答越准确、越深入，讲故事的专注度就越高。</p><p>图片</p><p>（挖掘故事的关键）</p><h3 id=\"此外在讲故事时如果我们以发生了什么方法作为基础来讲故事会有更好的呈现\">此外，在讲故事时，如果我们以“发生了什么”方法作为基础来讲故事，会有更好的呈现。</h3><p>我们很多时候会一直以为自己是在讲给别人听，用这种方式来挖掘故事通常比较困难。如果讲故事的人没有意识到听众的存在而陷入了自己的语言泡沫，我们也就无法真正倾听故事。</p><h3 id=\"实际上我们在挖掘别人的故事时会问发生了什么这个方法非常管用它没有带着任何评判并且带着好奇心寻求完整的情景再现这个方法也同样可以用于自己身上来挖掘我们自己的故事\">实际上我们在挖掘别人的故事时，会问“发生了什么”，这个方法非常管用，它没有带着任何评判并且带着好奇心寻求完整的情景再现，这个方法也同样可以用于自己身上来挖掘我们自己的故事。</h3><p>至于不用“为什么”而是“发生了什么”来挖掘故事的原因，由于这里涉及到了讲述和倾听的关系，放到了下一节里讲解。这里只简单提一句，倾听的重要性绝不亚于讲述。</p><p>整本书中，作者都用“发生了什么”来让，与他对话的人，不断讲述出故事的每个细节，因此我们也可以用同样的手法，用在我们创作故事的时候。</p><h1 id=\"二倾听与讲述的关系\">二、倾听与讲述的关系</h1><p>很多人可能并没认知到，倾听和讲述是相互影响的，即讲述影响倾听，倾听也影响讲述</p><p>不过作者并没有解释倾听在书中含义，因此这里容易引起疑问。</p><h3 id=\"倾听有两种含义第一种是我作为讲述者听到或感受到的包括周围环境内心心理以及观众等另一种是观众听到或感受到的也同样包括周围环境内心心理以及讲述者的动作语音语调姿势等\">倾听，有两种含义，第一种是‘我’作为讲述者听到或感受到的，包括周围环境，内心心理，以及观众等。另一种是观众听到或感受到的，也同样包括周围环境、内心心理，以及讲述者的动作、语音语调、姿势等。</h3><p>简单来说，倾听实际上是感受，当感受比较复杂或比较糟糕时，就会影响讲述者，以及影响讲述者传达给观众的内容和效果。因此我们在讲述时，尽量不增加倾听的障碍，其中的关键是不评判。</p><p>图片</p><p>(倾听的关键-图)</p><h3 id=\"理想的倾听是建立在非判断的基础上的因为就交流的纯洁性而言判断只会搅浑水\">理想的倾听是建立在非判断的基础上的，因为就交流的纯洁性而言，判断只会搅浑水。</h3><p>在叙事法中，不加判断被认为是一种技能和技巧，可以通过练习获得。</p><p>当然不只是讲述者需要不判断，倾听者也需要不判断，但这非常困难，我们能做的只有控制自己，让讲述的内容是在不判断的基础上的。</p><p>我们可以把倾听比作容器，把故事比作倒进容器中的液体。这种对倾听和讲述之间互相关系的认识就像透视镜，可以用来审视任何组织的沟通环境。</p><p>在大型科技公司工作的人往往思想单纯，但雄心勃勃，求胜心切。尽管这些品质与公司企业文化一致，但不符合员工互相支持、彼此成就，在团队中建立更牢固纽带的愿望。</p><p>事实上，一旦事情出了差错，就会出现一种互相指责的倾向，这会导致冲突与怨恨，成员之间的互相理解会崩溃。</p><h3 id=\"出现这种问题的关键是人们忽视了协作和沟通依赖于倾听的事实\">出现这种问题的关键是人们忽视了协作和沟通依赖于倾听的事实。</h3><p>很多时候我们的互动所带给我们的感受，直接阻碍了我们更好的互动，究其原因阻碍互动的就是倾听障碍。</p><p>因此想要有一次成功的交流，必须先识别倾听障碍，再释放倾听障碍。先识别听众，然后识别障碍，最后通过释放障碍来分析如何沟通，这是很有裨益的，让你可以继续前进。</p><h3 id=\"回到创作故事上当我们认识到倾听和讲述相互影响的关系时我们就能更好的创作故事也就是说为了让我们的故事内容和观点传达的更加有效首要原则是在故事内不做判断并且在讲述前先识别倾听障碍再释放倾听障碍最终让观众的有一个纯粹的倾听环境\">回到创作故事上，当我们认识到倾听和讲述相互影响的关系时，我们就能更好的创作故事。也就是说，为了让我们的故事内容和观点传达的更加有效，首要原则是在故事内不做判断，并且在讲述前先识别倾听障碍，再释放倾听障碍，最终让观众的有一个纯粹的倾听环境。</h3><p>–</p><p>由于内容较多，识别倾听障碍和释放倾听障碍，放在下一篇。</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485230&amp;idx=1&amp;sn=5f2594652488e4c6f6cd95e730256b4a&amp;chksm=fc226229cb55eb3fbc59c616a104c08b1cded6aa293f2685bae16b52dcd400151a75552037b3&amp;token=1152981748&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2022/04/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B056",
            
            
            
            
            
            "date_published": "2022-04-05T00:00:00+08:00",
            "date_modified": "2022-04-05T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/03/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B055",
            "title": "读书笔记(五十五) 如何做好PPT - PPT内容策略",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：近段时间在练习演讲，一开始只是想练习下自己的口头表达能力和沟通能力，但渐渐的我发现我喜欢上了演讲，它不仅可以锻炼我的表达能力，还能锻炼我对知识的理解和总结能力。这段时间里，我发现演讲的其中关键用途是汇报和分享，这让我欣喜若狂。同时苦于自己不太会写PPT，屡次上台屡次搞砸，这激起了我对PPT学习的渴望。实际上观众除了听到还要看到，这种视觉呈现分为两种，一种是身体和语音演绎出来，另一种就是PPT呈现出来的，PPT如同台上的演绎，它让演讲内容呈现的更优雅更人性化，在听觉和视觉双重冲击之下发挥演讲的最大效果。我找了四本同类书籍，《PPT设计的艺术》、《你就是干不过做PPT的》、《精进PPT》、《PPT设计思维、技术与实践》进行主题阅读，看完后根据自己的实践经验和对书本知识的理解做回顾和总结。概述：本篇基于《你就是干不过做PPT的》、《精进PPT》《PPT设计思维、技术与实现》三本书，结合我的经验总结。前者对于PPT的策略性会更多一些，后者两者更多是制图上的技巧，说实话我对制图技巧不太感兴趣，其方法在前一篇总结过一些，这里不再重复。看书前给自己提了几个问题以便在文中解答：1.优秀的PPT的核心是什么？2.它有哪几个特点？3.我在制作过程中需要注意哪些要点？4.有哪些技巧我可以使用？目录：1.如何让观众容易理解2.如何抓住观众的注意力3.如何增强说服力内容：前文主要讲了PPT设计，它主要有两个关键1.传递一个核心观念2.围绕核心观念打造呈现效果本文与前文相同点都是，传递一个核心观念。不同的是，前文讲了很多如何用视觉冲击去打造呈现效果，而本文主要讲的如何用策略去打造呈现效果。书中多次提到一个词，‘一次成功’，这个词语很吸引我，因为我每次做PPT都在想一个问题：我如何才能让这个PPT‘成功’具体的技巧文章中会一一介绍，我将这些技巧融入到生活中去，让自己在生活中练习，在练习中生活。其实整本书本身的排序和制作就很好的诠释了如何做资料这件事，开头就有一句话让我恍然大悟：一般看一个人制作的资料就能大体知道他的工作能力是优秀还是平庸。这句话打开了我对整本书的浓厚的兴趣。原来一个人的工作能力，可以如实地反映在他所制作的资料当中。经过这几年的历练，我觉得这句话说的毫不夸张。下面文章中提到的‘PPT’字样实际上完全可以替换为‘资料’二字同样适用。先搬出PPT制作流程和打磨流程，以便大家明白这篇文章能帮助你到什么程度：1.确定主题2.明确核心观点，观点需用简洁的语句表达3.为内容写大致的结构，初步思考下表达顺序4.为每页PPT制作具体的内容，首版内容可以不用太精细5.整理表达顺序，排序下把重要的提上来先说6.优化每页内容，包括例子、数据、图片、图表、图标等7.优化视觉效果，调整排版，精简内容，更多留白，调整颜色数量和饱和度，适当加入动画8.尝试自己对着PPT阐述一次，并记录下自己阐述的内容成为备稿9.将备稿内容文字优化并持续练习10.练习时将稿件内容映射到PPT的图像中11.持续打磨，练习，调整，直到上台特点书中说优秀的‘资料’有6个共同的特点：1.容易理解的表达顺序2.第一页抓住读者的心，最后一页促成决策3.用细节增强说服力4.短小精悍一目了然5.图表图解引起重视6.突出重点化繁为简（三个核心图）我觉得这6点说的不错，同时仍然觉得有点多，人们很难记得住并运用，因此我结合四本书对PPT内容策略提出了3个核心：1.观众容易理解，包括顺序和结构2.抓住观众的注意力，尤其是每一部分的开头和收尾3.增强说服力，用数字和细节去增强说服力下面我就围绕这3个核心，结合个人实战和经验，将这四本书合起来做一个综合性的陈述。怎么才能让观众容易理解？很多人都按自己喜欢的顺序表达，自己喜欢讲到哪里就是哪里，自己是爽了，别人完全听不懂。实际上对于一份听不懂的PPT报告，没人会想做出行动或给予好的决策。曾经的我就是这样一个人，喜欢按自己的方式去表达，去做PPT，结果，谁都听不懂，没有任何的结果。因此在做PPT时，我们首先要考虑的事情是，如何让对方能够容易理解我们所要表达的内容。原理是一些有关倾听和讲述的知识挺多的可以在《如何讲好一个故事里》学到，简单来说，我们一般在听别人讲话时，通常都不愿意听一大堆解释和判断，反过来也是一样，我们在制作PPT的时候，如果能先给结论或要点，对方听和看起来就会舒服很多。实际上，想让对方听懂我们所表达的内容，技巧有很多，其中最关键的是表达结构。1.表达结构金字塔结构常用于降低听众的理解难度，结论先行，归类分组，层层递进，最后强化结论。（结论先行图）另外表达内容的分类方法有5种，包括二分法（A、B分类）、过程法（时间分类、流程分类）、要素法（上下分类、内外分类、整体到局部分类）、公式法（成功 = 思维方式 x 热情 x 能力）、矩阵法（四象限分类，重要的、不重要的、紧急的、不紧急的）。这些分类方法具体不细说了，大家也略有所闻。还有些分析方法，PDCA、SWOT等，不再列举，他们核心都是：结构表达，即有次序、有分类、有总结。同时也可以使用‘问题与方案’的方式，先描述问题再提出方案的方式来制作PPT。在描述问题需要些技巧，否则很容易变得单调乏味，将在后面的抓住注意力内容里说明。2.需要注意的细节技巧：结构表达时，观点不能超过3个对比方案，能让方案本身更清晰尽量不使用晦涩难懂的说法，因为只有能力不足的人才直接使用专业术语最大限度的精简词汇，删除重复内容、修饰词、介词留白，一页内容尽量少，只表达重要内容用突出（上色和圈线），排序，连接（箭头和连线）的方式引导观众目光轨迹用树状图，能将复杂的结构拆解的更容易理解当需要在多个选项中选一个时，矩阵图可以将其优点和缺点表现出来明确目的，让大家都知道当前展示的目的，然后以此为前提，聆听你的讲解鲜明的标题，让大家知道该页要讲的内容其实以上所有的结构和技巧都是为了：突出重点，化繁为简。让观众的注意力从纷繁复杂的内容中解脱出来，更聚焦于我们想要表达的核心观点上。3.用总结页帮助观众理清内容很多长文PPT都需要总结页，因为总结页可以强调结论，同时也帮助观众梳理内容。总结页在制作时也同样可以帮助自己梳理结构、理清思路。注意：先把PPT（资料）的结构确定好之后，再集中精力去思考内容。如何抓住对方的注意力?一份优秀的PPT，开头一定会有吸引人的内容。首先换位思考下，通常我们对于自己感兴趣的话题，以及与自己相关的语言会比较感兴趣。反过来也是一样，当我们成为讲述者时，要考虑对方感兴趣的事情，以及与对方有关的话题，才能引起对方的注意。有时候需要我们在对方和我之间找到一个共同点或共同利益点，让彼此能够链接起来，比如我们的目标和对方的想法相结合就能碰撞出精彩的火花。我们可以用三个角度去审视我们的PPT：1.对方视角，对方做决策时重视什么？2.自身视角，有没有充分体现自己的见解？3.数字视角，有没有具体的数字和方案？一，从决策者的角度想问题由于最终是由决策者来决定是否使用我们的方案，因此我们必须以终为始，思考决策者想要什么?这需要我们观察对方重视的是什么，这样可以站在对方的角度来思考我们制作的资料。例如，他在阅读汇报资料时，想知道的是‘结果’还是‘解决方案’，还是其他的比如某类知识。实际上，善于制作优秀PPT的人，在日常工作中就会仔细观察其他人究竟重视什么？只有站在决策者的角度想问题，我们才能提出更好的抓住决策者注意力的资料。我们可以从决策者重视的东西，反推出我应该如何与我们的情况相结合。例如，我们制定的目标是否与决策者想要的一致，我们遇到的问题是否与决策者的想要的有相关性，我们的计划是否与决策者重视的有密切联系。二、自己独特的见解除了考虑对方重视什么，还要考虑自己的独特见解。很多时候，决策者不单单要选出好方案，更要选出能胜任的人。因此要展现出自己的独特见解以及热情，让决策者的决策方向偏向于我们。（独特的见解示例图）在PPT中加入自己的思考并讲述独特之处：1.我的方案与别人相比有哪些独特之处，2.遇到问题时我有怎样的独特方式，3.计划中是如何根据自己独特理解来调整的总之，论述自己独特的见解，可以让人眼前一亮的感觉，这会让决策者相信我们深入思考了这些问题，并拥有自己的理解。三、放大问题通过放大问题，可以让决策者产生危机感，从而吸引对方的注意力。当决策者认识到该问题的重要性，并且产生危机意识时，就表明他已经准备好继续聆听下一步的‘提出解决方案’了。虽然放大问题是抓住决策者注意力的好方法，但也要注意我们找出的问题必须是真正需要解决的，而不是凭空捏造的或者虚假的。（放大问题的核心图）放大问题的核心是，找出真正需要解决的问题。为了能找出，真正需要解决的问题，就需要我们提出一个好问题好的问题提出具备3个要素目的，问题点，根本原因问题的目标是什么？问题点在哪？根本原因是什么？目标要符合决策者想要的，问题点要尽可能找到要害点，根本原因要深入挖掘。放大问题的三个要素：1.通过目标里的内容让决策者产生兴趣2.通过问题点指出问题的要害3.通过根本原因找出问题背后的真正原因目标很重要，这能让决策者知道，最终的结果会如何，会产生怎样的效果。如果首先在资料开头目的中阐述一点提案背景，再通过达成目标来说明方案被采纳后会带来什么样的效果，这样的效果更佳，观众的注意力会一点点的被吸引直到全部被吸住。一旦观众们知道结果和最终效果，他们就会对我们的PPT产生浓厚的兴趣。接着通过问题点指出要害，方法可以对比应有（或理想）状态和当前的现状来形成差距，从而指出要害。接着找出根本原因，可以从这8个方面来思考：规则、效率、技术、人和时间、资金、检查、交流、职责。同时，我们要多次深入思考，最好先列出已知原因，再逐个思考，接着根据原因继续深入问自己‘为什么’。通过问自己三层‘为什么’来深入挖掘出问题背后的真正的原因。如何增强说服力增强说服力很重要，它是我们说服观众的有效手段。这里介绍几种方式，大家在平时使用制作PPT时可以混合使用。增强说服力的主要核心是，细节。如何用细节？下面介绍有几种方法。（用细节增强说服力的几种方式图）1.用具体数字，增加说服力以数字切入，会让人感觉，你把握了整体情况，确实仔细进行过调查。数字可以大大增加说服力，同时要注意展示的数字必须能让对方感觉到自己是经过仔细确认的。如何让观众感觉数字是经过仔细确认的呢？1.数字经过严格的筛选，能够作为具体的理论和依据来支持你观点的信息。2.对数据的理解有自己的思考和表达。3.有多个数字进行关联。有说服力的数据包括：现状数据，方案比较数据，关键数据，目标成果数据，因果关系数据我们在列举数字时，要先找到关键点，即对事实关系进行慎密的调查接着，用定量数字去描述它，让人感觉你仔细调查过，再用，定性数据让数据更加立体化。2.用对比，增强说服力通过对比，能够让观众更容易理解，我们想要表达的内容。同时帮助我们找出最佳方案，并向决策者们传递，我们的方案是最佳的。对比方式：可以通过列举应有状态和现有状态的对比差异。也可以先全列出方案，再进行方案混合，再做出差异比较。通过对比，不但可以抓住观众的注意力，同时让观众更容易理解我们所要表达的内容。3.举成功的例子，增强说服力特别是当成功的例子是一个事实时，会大大增强说服力。实际上，对于一个提案来说，在决策者中尝鲜的人是极少的，大多数人是跟进者，而且他们只有看到成功的例子才会愿意跟进。通过举成功的例子来说服跟进者，就能说服大部分人。这里有3个关键点：1.符合常理的内容2.具体的事实3.成功的例子所谓说服力，指的就是道理+具体的事例。符合常理的内容，再加上具体的事例，能够极大提高资料的说服力。4.列举问题与方案，增强说服力这种方式比较常用，其关键是要抛出能吸引决策者的问题，也就是前面说的放大问题。用抛出问题和陈述方案的方式会引起决策者对问题和答案的兴趣，在讲述时可以用1、2、3按步讲解，先展现结构和顺序，再展现内容，让表达更容易接受。5.明确目标拆解目标制定计划，增强说服力所谓目标，就是用一个具体的数值表现出最终的效果。我们在制定目标时，目标要是一个可量化的具体数字。接着，拆解目标，把大目标拆解成小目标，因为这样更容易实现，也更容易制定计划。通过将目标拆解，决策者也能做出更加具体的判断。如果决策者对每个拆解后的小目标都认可，那么方案通过的可能性将极大提升。最后制定计划，通过制定详细的计划，能让决策者了解方案的可行性和可靠性，最终说服对方行动。6.其他，增强说服力用真实图片增强说服力：可以用真实的照片，加大说服力效果，特别是当现场照片，当两张照片进行差异比较时，能提升真实感，加大反差效果。用图表增强说服力：当具体数字放入图表中更有立体感，包括：饼状图，适合表示明细，柱状图，适合表示比较差异（项目较多时可以选择横向），折线图，适合表示变化。制作图表时应当尽量简化内容，突出重点（饼状图，柱状图，折线图示例图）除了图，还有表。好的表格，最大的特点是，只表达重点信息，这需要我们先理清思路，思考表达的重点。用说服策略，增强说服力：先说服部分方案，再逐步说服对方先提出部分提案，再提出整体方案，或先提出预案，再提出详细方案注意：PPT上切记不要太细，只要大致流程便可其他制作小细节：1.通过图的并、连来表达各信息之间的关系2.流程图适合表达工作流程，关键是不要过于详细，可以划分模块和步骤3.各种图形代表意义，方形-&gt;具体事实，圆形-&gt;概念和关键词，圆角形-&gt;抽象概念，三角形-&gt;上下关系通过简单的图形可以增加美观，统一风格，增加冲击感4.字体的选择要舒适，易于阅读，市面上更有几种常用的字体组合。参考资料：《PPT设计的艺术》  作者：林屹《你就是干不过做PPT的》 译者：朱悦玮《PPT设计思维、技术与实践》 作者：周庆麟等《精进PPT-成为PPT高手》 作者：周庆麟、胡子平",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485214&amp;idx=1&amp;sn=26d7841d6ddbb23925b2be5c7d914256&amp;chksm=fc226219cb55eb0f168abb24ffeeaa1f7d899ff43fd2a308de29a67bb20925644d244c07d174&amp;token=537319754&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>近段时间在练习演讲，一开始只是想练习下自己的口头表达能力和沟通能力，但渐渐的我发现我喜欢上了演讲，它不仅可以锻炼我的表达能力，还能锻炼我对知识的理解和总结能力。</p><p>这段时间里，我发现演讲的其中关键用途是汇报和分享，这让我欣喜若狂。同时苦于自己不太会写PPT，屡次上台屡次搞砸，这激起了我对PPT学习的渴望。</p><p>实际上观众除了听到还要看到，这种视觉呈现分为两种，一种是身体和语音演绎出来，另一种就是PPT呈现出来的，PPT如同台上的演绎，它让演讲内容呈现的更优雅更人性化，在听觉和视觉双重冲击之下发挥演讲的最大效果。</p><p>我找了四本同类书籍，《PPT设计的艺术》、《你就是干不过做PPT的》、《精进PPT》、《PPT设计思维、技术与实践》进行主题阅读，看完后根据自己的实践经验和对书本知识的理解做回顾和总结。</p><h1 id=\"概述\">概述：</h1><p>本篇基于《你就是干不过做PPT的》、《精进PPT》《PPT设计思维、技术与实现》三本书，结合我的经验总结。</p><p>前者对于PPT的策略性会更多一些，后者两者更多是制图上的技巧，</p><p>说实话我对制图技巧不太感兴趣，其方法在前一篇总结过一些，这里不再重复。</p><p>看书前给自己提了几个问题以便在文中解答：</p><p>1.优秀的PPT的核心是什么？</p><p>2.它有哪几个特点？</p><p>3.我在制作过程中需要注意哪些要点？</p><p>4.有哪些技巧我可以使用？</p><h1 id=\"目录\">目录：</h1><p>1.如何让观众容易理解</p><p>2.如何抓住观众的注意力</p><p>3.如何增强说服力</p><h1 id=\"内容\">内容：</h1><p>前文主要讲了PPT设计，它主要有两个关键</p><p>1.传递一个核心观念</p><p>2.围绕核心观念打造呈现效果</p><p>本文与前文相同点都是，传递一个核心观念。不同的是，前文讲了很多如何用视觉冲击去打造呈现效果，而本文主要讲的如何用策略去打造呈现效果。</p><p>书中多次提到一个词，‘一次成功’，这个词语很吸引我，</p><p>因为我每次做PPT都在想一个问题：我如何才能让这个PPT‘成功’</p><p>具体的技巧文章中会一一介绍，我将这些技巧融入到生活中去，让自己在生活中练习，在练习中生活。</p><p>其实整本书本身的排序和制作就很好的诠释了如何做资料这件事，</p><h3 id=\"开头就有一句话让我恍然大悟一般看一个人制作的资料就能大体知道他的工作能力是优秀还是平庸\">开头就有一句话让我恍然大悟：一般看一个人制作的资料就能大体知道他的工作能力是优秀还是平庸。</h3><p>这句话打开了我对整本书的浓厚的兴趣。</p><p>原来一个人的工作能力，可以如实地反映在他所制作的资料当中。</p><p>经过这几年的历练，我觉得这句话说的毫不夸张。</p><p>下面文章中提到的‘PPT’字样实际上完全可以替换为‘资料’二字同样适用。</p><p>先搬出PPT制作流程和打磨流程，以便大家明白这篇文章能帮助你到什么程度：1.确定主题2.明确核心观点，观点需用简洁的语句表达3.为内容写大致的结构，初步思考下表达顺序4.为每页PPT制作具体的内容，首版内容可以不用太精细5.整理表达顺序，排序下把重要的提上来先说6.优化每页内容，包括例子、数据、图片、图表、图标等7.优化视觉效果，调整排版，精简内容，更多留白，调整颜色数量和饱和度，适当加入动画8.尝试自己对着PPT阐述一次，并记录下自己阐述的内容成为备稿9.将备稿内容文字优化并持续练习10.练习时将稿件内容映射到PPT的图像中11.持续打磨，练习，调整，直到上台</p><h1 id=\"特点\">特点</h1><p>书中说优秀的‘资料’有6个共同的特点：1.容易理解的表达顺序2.第一页抓住读者的心，最后一页促成决策3.用细节增强说服力4.短小精悍一目了然5.图表图解引起重视6.突出重点化繁为简</p><p>（三个核心图）</p><p>我觉得这6点说的不错，同时仍然觉得有点多，人们很难记得住并运用，</p><p>因此我结合四本书对PPT内容策略提出了3个核心：</p><h3 id=\"1观众容易理解包括顺序和结构\">1.观众容易理解，包括顺序和结构</h3><h3 id=\"2抓住观众的注意力尤其是每一部分的开头和收尾\">2.抓住观众的注意力，尤其是每一部分的开头和收尾</h3><h3 id=\"3增强说服力用数字和细节去增强说服力\">3.增强说服力，用数字和细节去增强说服力</h3><p>下面我就围绕这3个核心，结合个人实战和经验，将这四本书合起来做一个综合性的陈述。</p><h1 id=\"怎么才能让观众容易理解\">怎么才能让观众容易理解？</h1><p>很多人都按自己喜欢的顺序表达，自己喜欢讲到哪里就是哪里，自己是爽了，别人完全听不懂。</p><p>实际上对于一份听不懂的PPT报告，没人会想做出行动或给予好的决策。</p><p>曾经的我就是这样一个人，喜欢按自己的方式去表达，去做PPT，结果，谁都听不懂，没有任何的结果。</p><p>因此在做PPT时，我们首先要考虑的事情是，如何让对方能够容易理解我们所要表达的内容。</p><p>原理是一些有关倾听和讲述的知识挺多的可以在《如何讲好一个故事里》学到，简单来说，我们一般在听别人讲话时，通常都不愿意听一大堆解释和判断，反过来也是一样，我们在制作PPT的时候，</p><h3 id=\"如果能先给结论或要点对方听和看起来就会舒服很多\">如果能先给结论或要点，对方听和看起来就会舒服很多。</h3><p>实际上，想让对方听懂我们所表达的内容，技巧有很多，其中最关键的是表达结构。</p><h2 id=\"1表达结构\">1.表达结构</h2><p>金字塔结构常用于降低听众的理解难度，结论先行，归类分组，层层递进，最后强化结论。</p><p>（结论先行图）</p><p>另外表达内容的分类方法有5种，包括二分法（A、B分类）、过程法（时间分类、流程分类）、要素法（上下分类、内外分类、整体到局部分类）、公式法（成功 = 思维方式 x 热情 x 能力）、矩阵法（四象限分类，重要的、不重要的、紧急的、不紧急的）。这些分类方法具体不细说了，大家也略有所闻。</p><p>还有些分析方法，PDCA、SWOT等，不再列举，</p><h3 id=\"他们核心都是结构表达即有次序有分类有总结\">他们核心都是：结构表达，即有次序、有分类、有总结。</h3><p>同时也可以使用‘问题与方案’的方式，先描述问题再提出方案的方式来制作PPT。在描述问题需要些技巧，否则很容易变得单调乏味，将在后面的抓住注意力内容里说明。</p><h2 id=\"2需要注意的细节技巧\">2.需要注意的细节技巧：</h2><p>结构表达时，观点不能超过3个</p><p>对比方案，能让方案本身更清晰</p><p>尽量不使用晦涩难懂的说法，因为只有能力不足的人才直接使用专业术语</p><p>最大限度的精简词汇，删除重复内容、修饰词、介词</p><p>留白，一页内容尽量少，只表达重要内容</p><p>用突出（上色和圈线），排序，连接（箭头和连线）的方式引导观众目光轨迹</p><p>用树状图，能将复杂的结构拆解的更容易理解</p><p>当需要在多个选项中选一个时，矩阵图可以将其优点和缺点表现出来</p><p>明确目的，让大家都知道当前展示的目的，然后以此为前提，聆听你的讲解</p><p>鲜明的标题，让大家知道该页要讲的内容</p><p>其实以上所有的结构和技巧都是为了：突出重点，化繁为简。</p><p>让观众的注意力从纷繁复杂的内容中解脱出来，更聚焦于我们想要表达的核心观点上。</p><h2 id=\"3用总结页帮助观众理清内容\">3.用总结页帮助观众理清内容</h2><p>很多长文PPT都需要总结页，因为总结页可以强调结论，同时也帮助观众梳理内容。</p><p>总结页在制作时也同样可以帮助自己梳理结构、理清思路。</p><p>注意：先把PPT（资料）的结构确定好之后，再集中精力去思考内容。</p><h1 id=\"如何抓住对方的注意力\">如何抓住对方的注意力?</h1><p>一份优秀的PPT，开头一定会有吸引人的内容。</p><p>首先换位思考下，通常我们对于自己感兴趣的话题，以及与自己相关的语言会比较感兴趣。</p><p>反过来也是一样，当我们成为讲述者时，要考虑对方感兴趣的事情，以及与对方有关的话题，才能引起对方的注意。有时候需要我们在对方和我之间找到一个共同点或共同利益点，让彼此能够链接起来，比如我们的目标和对方的想法相结合就能碰撞出精彩的火花。</p><p>我们可以用三个角度去审视我们的PPT：</p><p>1.对方视角，对方做决策时重视什么？2.自身视角，有没有充分体现自己的见解？3.数字视角，有没有具体的数字和方案？</p><h2 id=\"一从决策者的角度想问题\">一，从决策者的角度想问题</h2><p>由于最终是由决策者来决定是否使用我们的方案，因此我们必须以终为始，思考决策者想要什么?</p><p>这需要我们观察对方重视的是什么，这样可以站在对方的角度来思考我们制作的资料。</p><p>例如，他在阅读汇报资料时，想知道的是‘结果’还是‘解决方案’，还是其他的比如某类知识。</p><h3 id=\"实际上善于制作优秀ppt的人在日常工作中就会仔细观察其他人究竟重视什么\">实际上，善于制作优秀PPT的人，在日常工作中就会仔细观察其他人究竟重视什么？</h3><p>只有站在决策者的角度想问题，我们才能提出更好的抓住决策者注意力的资料。</p><p>我们可以从决策者重视的东西，反推出我应该如何与我们的情况相结合。</p><p>例如，我们制定的目标是否与决策者想要的一致，我们遇到的问题是否与决策者的想要的有相关性，我们的计划是否与决策者重视的有密切联系。</p><h2 id=\"二自己独特的见解\">二、自己独特的见解</h2><p>除了考虑对方重视什么，还要考虑自己的独特见解。</p><h3 id=\"很多时候决策者不单单要选出好方案更要选出能胜任的人\">很多时候，决策者不单单要选出好方案，更要选出能胜任的人。</h3><p>因此要展现出自己的独特见解以及热情，让决策者的决策方向偏向于我们。</p><p>（独特的见解示例图）</p><p>在PPT中加入自己的思考并讲述独特之处：</p><p>1.我的方案与别人相比有哪些独特之处，2.遇到问题时我有怎样的独特方式，3.计划中是如何根据自己独特理解来调整的</p><p>总之，论述自己独特的见解，可以让人眼前一亮的感觉，这会让决策者相信我们深入思考了这些问题，并拥有自己的理解。</p><h2 id=\"三放大问题\">三、放大问题</h2><p>通过放大问题，可以让决策者产生危机感，从而吸引对方的注意力。</p><p>当决策者认识到该问题的重要性，并且产生危机意识时，就表明他已经准备好继续聆听下一步的‘提出解决方案’了。</p><p>虽然放大问题是抓住决策者注意力的好方法，但也要注意我们找出的问题必须是真正需要解决的，而不是凭空捏造的或者虚假的。</p><p>（放大问题的核心图）</p><h3 id=\"放大问题的核心是找出真正需要解决的问题\">放大问题的核心是，找出真正需要解决的问题。</h3><p>为了能找出，真正需要解决的问题，就需要我们提出一个好问题</p><p>好的问题提出具备3个要素</p><p>目的，问题点，根本原因</p><p>问题的目标是什么？问题点在哪？根本原因是什么？</p><p>目标要符合决策者想要的，问题点要尽可能找到要害点，根本原因要深入挖掘。</p><p>放大问题的三个要素：</p><h3 id=\"1通过目标里的内容让决策者产生兴趣\">1.通过目标里的内容让决策者产生兴趣</h3><h3 id=\"2通过问题点指出问题的要害\">2.通过问题点指出问题的要害</h3><h3 id=\"3通过根本原因找出问题背后的真正原因\">3.通过根本原因找出问题背后的真正原因</h3><p>目标很重要，这能让决策者知道，最终的结果会如何，会产生怎样的效果。</p><p>如果首先在资料开头目的中阐述一点提案背景，再通过达成目标来说明方案被采纳后会带来什么样的效果，这样的效果更佳，观众的注意力会一点点的被吸引直到全部被吸住。</p><p>一旦观众们知道结果和最终效果，他们就会对我们的PPT产生浓厚的兴趣。</p><p>接着通过问题点指出要害，方法可以对比应有（或理想）状态和当前的现状来形成差距，从而指出要害。</p><p>接着找出根本原因，可以从这8个方面来思考：规则、效率、技术、人和时间、资金、检查、交流、职责。</p><p>同时，我们要多次深入思考，最好先列出已知原因，再逐个思考，接着根据原因继续深入问自己‘为什么’。通过问自己三层‘为什么’来深入挖掘出问题背后的真正的原因。</p><h1 id=\"如何增强说服力\">如何增强说服力</h1><p>增强说服力很重要，它是我们说服观众的有效手段。</p><p>这里介绍几种方式，大家在平时使用制作PPT时可以混合使用。</p><h3 id=\"增强说服力的主要核心是细节\">增强说服力的主要核心是，细节。</h3><p>如何用细节？下面介绍有几种方法。</p><p>（用细节增强说服力的几种方式图）</p><h2 id=\"1用具体数字增加说服力\">1.用具体数字，增加说服力</h2><p>以数字切入，会让人感觉，你把握了整体情况，确实仔细进行过调查。</p><p>数字可以大大增加说服力，同时要注意展示的数字必须能让对方感觉到自己是经过仔细确认的。</p><p>如何让观众感觉数字是经过仔细确认的呢？</p><p>1.数字经过严格的筛选，能够作为具体的理论和依据来支持你观点的信息。2.对数据的理解有自己的思考和表达。3.有多个数字进行关联。</p><p>有说服力的数据包括：现状数据，方案比较数据，关键数据，目标成果数据，因果关系数据</p><p>我们在列举数字时，要先找到关键点，即对事实关系进行慎密的调查</p><p>接着，用定量数字去描述它，让人感觉你仔细调查过，</p><p>再用，定性数据让数据更加立体化。</p><h2 id=\"2用对比增强说服力\">2.用对比，增强说服力</h2><p>通过对比，能够让观众更容易理解，我们想要表达的内容。同时帮助我们找出最佳方案，并向决策者们传递，我们的方案是最佳的。</p><p>对比方式：</p><p>可以通过列举应有状态和现有状态的对比差异。</p><p>也可以先全列出方案，再进行方案混合，再做出差异比较。</p><p>通过对比，不但可以抓住观众的注意力，同时让观众更容易理解我们所要表达的内容。</p><h2 id=\"3举成功的例子增强说服力\">3.举成功的例子，增强说服力</h2><p>特别是当成功的例子是一个事实时，会大大增强说服力。</p><h3 id=\"实际上对于一个提案来说在决策者中尝鲜的人是极少的大多数人是跟进者而且他们只有看到成功的例子才会愿意跟进通过举成功的例子来说服跟进者就能说服大部分人\">实际上，对于一个提案来说，在决策者中尝鲜的人是极少的，大多数人是跟进者，而且他们只有看到成功的例子才会愿意跟进。通过举成功的例子来说服跟进者，就能说服大部分人。</h3><p>这里有3个关键点：1.符合常理的内容2.具体的事实3.成功的例子</p><p>所谓说服力，指的就是道理+具体的事例。符合常理的内容，再加上具体的事例，能够极大提高资料的说服力。</p><h2 id=\"4列举问题与方案增强说服力\">4.列举问题与方案，增强说服力</h2><p>这种方式比较常用，其关键是要抛出能吸引决策者的问题，也就是前面说的放大问题。</p><p>用抛出问题和陈述方案的方式会引起决策者对问题和答案的兴趣，</p><p>在讲述时可以用1、2、3按步讲解，先展现结构和顺序，再展现内容，让表达更容易接受。</p><h2 id=\"5明确目标拆解目标制定计划增强说服力\">5.明确目标拆解目标制定计划，增强说服力</h2><p>所谓目标，就是用一个具体的数值表现出最终的效果。</p><p>我们在制定目标时，目标要是一个可量化的具体数字。</p><p>接着，拆解目标，把大目标拆解成小目标，因为这样更容易实现，也更容易制定计划。</p><p>通过将目标拆解，决策者也能做出更加具体的判断。如果决策者对每个拆解后的小目标都认可，那么方案通过的可能性将极大提升。</p><h3 id=\"最后制定计划通过制定详细的计划能让决策者了解方案的可行性和可靠性最终说服对方行动\">最后制定计划，通过制定详细的计划，能让决策者了解方案的可行性和可靠性，最终说服对方行动。</h3><h2 id=\"6其他增强说服力\">6.其他，增强说服力</h2><p>用真实图片增强说服力：可以用真实的照片，加大说服力效果，特别是当现场照片，当两张照片进行差异比较时，能提升真实感，加大反差效果。</p><p>用图表增强说服力：</p><p>当具体数字放入图表中更有立体感，包括：</p><p>饼状图，适合表示明细，</p><p>柱状图，适合表示比较差异（项目较多时可以选择横向），</p><p>折线图，适合表示变化。</p><p>制作图表时应当尽量简化内容，突出重点</p><p>（饼状图，柱状图，折线图示例图）</p><p>除了图，还有表。好的表格，最大的特点是，只表达重点信息，这需要我们先理清思路，思考表达的重点。</p><p>用说服策略，增强说服力：</p><p>先说服部分方案，再逐步说服对方</p><p>先提出部分提案，再提出整体方案，或先提出预案，再提出详细方案</p><h3 id=\"注意ppt上切记不要太细只要大致流程便可\">注意：PPT上切记不要太细，只要大致流程便可</h3><h2 id=\"其他制作小细节\">其他制作小细节：</h2><p>1.通过图的并、连来表达各信息之间的关系2.流程图适合表达工作流程，关键是不要过于详细，可以划分模块和步骤3.各种图形代表意义，方形-&gt;具体事实，圆形-&gt;概念和关键词，圆角形-&gt;抽象概念，三角形-&gt;上下关系通过简单的图形可以增加美观，统一风格，增加冲击感4.字体的选择要舒适，易于阅读，市面上更有几种常用的字体组合。</p><h2 id=\"参考资料\">参考资料：</h2><p>《PPT设计的艺术》  作者：林屹</p><p>《你就是干不过做PPT的》 译者：朱悦玮</p><p>《PPT设计思维、技术与实践》 作者：周庆麟等</p><p>《精进PPT-成为PPT高手》 作者：周庆麟、胡子平</p>",
            "url": "http://www.luzexi.com/2022/03/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B055",
            
            
            
            
            
            "date_published": "2022-03-09T00:00:00+08:00",
            "date_modified": "2022-03-09T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/02/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B054",
            "title": "读书笔记(五十四) 《游戏引擎架构》#4 低阶渲染器（5）",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》后对引擎架构的理解又深入了些。近段时间有对引擎剖析的想法，正好借这书本对游戏引擎架构做一个完整分析。此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块，最后通过实践简单引擎开发来完成对引擎知识的掌握。游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。同时《游戏引擎架构》中部分知识太过陈旧的部分，会重新深挖后总结出自己的观点。概述：本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：1.时间库2.自定义容器库3.字符串散列库4.内存管理框架5.RTTI与反射模块6.图形计算库7.资产管理模块8.低阶渲染器9.剔除与合批模块10.动画模块11.物理模块12.UI底层框架13.性能剖析器的核心部分14.脚本系统15.视觉效果模块本篇内容为列表中的第8个部分的第5、6节。正文：简单回顾下前文前文我们聊了下显卡在计算机硬件主板中的位置与结构，知道了CPU、GPU的通信介质，并简单介绍了手机上的主板结构。本篇开头对上一篇做一些内容补充，PC和手机的不同硬件组织，以及CPU与其他芯片的通信过程。下面我们开始这篇内容本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。目录：主板结构中的显卡GPU功能发展史GPU与CPU的差异GPU硬件特点图形驱动程序架构引擎低阶渲染架构前面我们说了关于GPU硬件上的原理和运作机制，下面我们来讲一讲软件上的架构，尤其是渲染架构。指令和数据从CPU到GPU最终到帧缓冲的这个过程中，有三种类型的架构，第一种是图形驱动程序的架构，第二种是引擎上的低阶渲染器架构，第三种是GPU上的软件架构。这三种架构在互相配合，同时也是三个模块互相调用的过程。这也是为什么前面要提到这么多CPU与GPU硬件交互过程的原因。为了更好的了解这三者，我又研读了一遍《OpenGL ES3.0 编程指南》，通过对OpenGL接口的解读和分析，逐步剖析图形驱动程序架构、引擎低阶渲染器架构、以及GPU软件架构，我认为这种方式是最合适的。一、图形驱动程序架构我们使用的图形接口如OpenGL、Metal、DX的原理是基于驱动程序接口做的封装。因此，图形驱动调用接口有三步骤：检查调用参数、检查硬件是否支持接着调用硬件驱动程序接口将数据推入缓冲Buffer数据被推入缓冲，后续的详细路线如下图：（GPU中的数据流向图）GPU有线程来执行程序，线程通过Core来执行指令，每个线程的程序都是一样的，只是数据不同。因此很好理解，GPU中有许多线程，每个线程执行的指令是一样的，从三角形处理到光栅化以及片元处理，都是顺序执行的指令。因此数据流也跟着顺序的指令走。最后到达帧缓存。图形API适配了许多GPU驱动程序的接口，驱动程序先检查参数，再将指令推入队列，再刷新时将队列地址发送给GPU，GPU开始处理队列，由线程处理队列中的每个指令，每个线程拥有同样的程序，数据不断被处理，最后到达帧缓存。在最上层的图形接口之上，引擎低阶渲染器会调用很多不同类型的图形接口，将数据塞入到缓冲中。下面就来详细描述下，引擎低阶渲染器的架构是怎样的。二、引擎低阶渲染器架构前面我们说，图形API封装了硬件驱动程序，会先检查再调用。实际上，低阶渲染器也是一个封装图形API接口的程序，不同的是它封装的更适合渲染对象。其封装的目的是让散乱的图形API变得更方便使用，同时还能够优化掉重复的计算。这里首先我们来看下OpenGL ES图形API中的接口类型，通过了解图形API接口，能够想象出如果是我们自己来做低阶渲染器架构我们应该如何封装。所以，了解熟悉图形API对于低阶渲染器的架构非常重要。下面是一些OpenGL的接口描述和统计，有些枯燥，如已熟悉可以直接跳到描述架构部分。OpengGL接口描述与统计：状态开启和关闭，包括开启三角绘制、开启混合、开启模板等glEnableXXX、glDisableXXX获取或查询某数据，包括获取数据，获取日志，获取结果等glGetXXX绑定数据，包括绑定数据到着色器等glBindXXX开始和结束某处理，包括开始变换反馈，查询数据等glBeginXXXglEndXXX清除缓冲glClearXXX创建某对象，包括缓冲，数组，纹理，采样器对象等等glGenXXX，glCreateXXX删除某对象，包括着色器对象，数组，纹理对象，采样器对象等等glDeleteXXX还有其他的如:glDrawXXX，绘制相关glCopyXXX，拷贝复制相关glCheckXXX，检查相关glIsXXX，判断是否有效......下面按相关性划分为：（着色器相关接口图）着色器相关：创建着色器：glCreateShader加载着色器代码：glShaderSource编译着色器：glCompileShader创建着色器程序：glCreateProgram绑定着色器：glAttachShader解绑着色器：glDetachShader链接着色器程序：glLinkProgram使用着色器程序：glUseProgram删除着色器程序：glDeleteProgram（视口相关接口图）视口相关：设置视口：glViewport设置视口裁剪深度：glDepthRangef清除颜色缓冲：glClear置换缓冲区：eglSwapBuffers（顶点相关接口图）顶点相关：通过创建缓冲区，可以把顶点数据加载到缓冲区，从而绘制顶点。加载顶点属性：glVertexAttribXXX绘制三角形：glDrawArrays，glDrawElements启用/禁用顶点属性数组：glEnable/DisableVertexAttribArray申请缓冲：glGenBuffers指定缓冲：glBindBuffer向缓冲填入数据：glBufferData，glBufferSubData删除缓冲：glDeleteBuffers创建顶点数组对象：glGenVertexArrays绑定顶点数组：glBindVertexArray删除顶点数组：glDeleteVertexArrays映射并返回缓冲区数据：glMapBufferRange取消映射缓冲区：glUnmapBuffer刷新映射缓冲区：glFlushMappeBufferRange复制缓冲区数据：glCopyBufferSubData（图元绘制相关接口图）图元绘制相关：绘制几何形状对象：glDrawArrays, glDrawElements, glDrawRangeElements,绘制几何Instance：glDrawArraysInstanced, glDrawElementsInstanced绘制线段：glLineWidth（光栅化相关接口图）光栅化相关：指定正面顺序：glFrontFace剔除反面：glCullFace多边形偏移：glPolygonOffset遮挡查询：glBeginQuery, glEndQuery, glGenQueries, glDeleteQueries, glGetQueryObjectuiv遮挡查询用查询对象来跟踪通过深度测试的片段或样本。顶点着色器相关：内建特殊变量：gl_VertexID，当前顶点整数索引gl_InstanceID，当前图元实例编号gl_Position，输出顶点gl_PointSize，点精灵尺寸gl_FrontFacing，是否正面的布尔值内建常量：gl_MaxVertexAttribs，顶点属性最大数量gl_MaxVertexUniformVectors，使用vec4统一变量的最大数量gl_MaxVertexOutputVectors，输出向量的最大数量gl_MaxVertexTextureImageUnits，可用纹理单元的最大数量gl_MaxCombinedTextureImageUnits，顶点和片元着色器中可用纹理单元的最大数量总和（变换反馈相关接口图）变换反馈TransformFeedback相关：glTransformFeedbackVaryings，指定变换反馈时捕捉的顶点属性glBeginTransformFeedback，开始变换反馈（需先创建变换反馈缓冲区，再绑定到顶点索引）glEndTransformFeedback，结束变换反馈（纹理相关接口图）纹理相关：4种纹理类型：2D纹理、2D纹理数组、3D纹理、立方图纹理其中2D纹理数组和3D纹理有点相似，2D纹理数组常用于帧动画。两者区别为过滤和mipmap不同。glGenTextures，创建纹理对象glDeleteTextures，删除纹理对象glBindTexture，绑定到一个特定的纹理目标glTexImage2D，加载2D和立方图的纹理数据glTexSubImageXXX，加载部分纹理图像数据glTexImage3D，加载3D纹理数据glPixelStorei，设置解包对齐glTexParameteri，设置贴图的过滤模式glGenerateMipmap，自动生成mip贴图glActiveTexture，设置当前的纹理单元，以便后续将纹理绑定该单元glCompressedTexImageXXX，加载2D、立方图、3D等纹理的压缩图像数据（ETC、ASTC等压缩格式）glCompressedTexSubImageXXX，加载部分压缩纹理图像glReadBuffer，设置拷贝图像数据来源的颜色缓冲区glCopyTexImageXXX，从颜色缓冲区拷贝数据到纹理glCopyTexSubImageXXX，拷贝部分颜色缓冲区的数据到纹理（采样器相关接口图）采样器相关：glGenSamplers，生成采样器对象glDeleteSamplers，删除采样器对象glBindSampler，绑定纹理到采样器对象glSamplerParameterXXX，设置采样器对象参数glTexStorageXXX，分配纹理内存片段着色器相关：很久以前在固定功能管线中，使用3种输入：顶点颜色插值、纹理颜色、常量颜色，再使用一些公式的组合实现有趣的特效，包括：AB、A+B、A+B-0.5、AC+B*(1-C)、A-B等等。支持可编程管线后，我们可以通过可编程管线来实现固定功能管线的效果。现在的可编程管线的输入由四部分构成：顶点属性插值（顶点上的颜色、uv、法线等）统一变量（全局常量）采样纹理代码常量内建特殊变量：gl_FragCoord，片段的窗口相对坐标（可用于噪声贴图计算）gl_FrontFacing，是否正面朝向gl_PointCoord，点精灵的纹理坐标gl_FragDepth，输出变量，覆盖片段的固定功能深度值（会导致深度测试优化失效）内建常量：gl_MaxFragmentInputVectors，输入的最大数量gl_MaxTextureImageUnits，可用纹理图像单元的最大数量gl_MaxFragmentUniformVectors，使用vec4统一变量项目的最大数量gl_MaxDrawBuffers，多重渲染目标（MRT）的最大支持数量gl_(Min/Max)ProgramTexelOffset，通过内建ESSL函数texture*Offset()偏移参数支持的最大和最小偏移量（缓冲区相关接口图）缓冲区相关：缓冲区有三种，颜色缓冲区，深度缓冲区，模板缓冲区。缓冲清除相关：glClear，清除指定缓冲区glClearColor，清除颜色缓冲区中的指定颜色glClearDepth，清除深度缓冲区中的指定深度glClearStencil，清除模板缓冲区中的指定掩码glClearBufferXXX，清除指定缓冲区中的部分区域缓冲写入相关：glColorMask，像素写入颜色缓冲区时，哪些分量会被更新glDepthMask，深度写入深度缓冲区时，哪些深度可以修改glStencilMask，掩码写入模板缓冲区时，哪些掩码可以被修改glStencilMaskSeparate，根据正面和背面的图元使用不同的掩码glDrawBuffers，渲染指定颜色数组到多重渲染目标中（多重渲染目标允许一次渲染多个颜色缓冲区，从而实现高级渲染算法，如延迟渲染）（裁剪与测试相关图）模板缓冲裁剪与测试：glScissor，指定裁剪矩形区域glStencilFuncXXX，用指定公式指定值指定掩码测试比较模板缓冲glStencilOpXXX，将测试结果用于深度缓冲区的操作深度缓冲测试：glDepthFunc，设置深度测试的运算公式（混合相关接口图）混合相关：glBlendFuncXXX，设置混合系数glBlendColor，设置常量颜色glBlendEquationXXX，设置运算公式颜色缓冲区中读写像素：glReadPixels，从颜色缓冲区中取出数据返回到指定数组中，数据传输时会启动DMA传输，此时CPU会空出来。（帧缓冲区对象相关接口图）帧缓冲区对象（FBO）相关：可用于颜色、深度、模板纹理或渲染目标。glGenRenderbuffers，分配n个渲染缓冲区对象，返回到指针中。glBindRenderbuffer，绑定渲染缓冲区对象glRenderbufferStorageXXX，指定渲染缓冲区对象大小和格式glBindFramebuffer，设置当前帧缓冲区对象（渲染目标）glFramebufferRenderbuffer，将一个渲染缓冲区对象连接到帧缓冲区附着点glFramebufferTextureXXX，将纹理的某个mip级别连接到帧缓冲附着点glCheckFramebufferStatus，验证帧缓冲区对象是否完整glBlitFramebuffer，高效的将矩形区域的像素从一个帧缓冲区复制到另一个glInvalidate(Sub)Framebuffer，让整个帧缓冲区或子区域失效glDeleteRenderbuffers，删除指定渲染缓冲区对象，先断开缓冲区对象才能删除glDeleteFramebuffers，删除指定帧缓冲对象未完，最近忙新书和工作以及演讲训练，后续继续写……参考资料：《OpenGL ES3.0 编程指南》DanGinsburg等著《GPU 引擎》https://docs.microsoft.com/zh-tw/windows/win32/direct3d12/user-mode-heap-synchronization《CPU体系结构》https://my.oschina.net/fileoptions/blog/1633021",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485174&amp;idx=1&amp;sn=b8321c77f937537ce74fed145268f6c2&amp;chksm=fc2263f1cb55eae7d64f1343f6a8298e520cad81b574283dbd543970d59d60fb29716817d9aa&amp;token=537319754&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》后对引擎架构的理解又深入了些。</p><p>近段时间有对引擎剖析的想法，正好借这书本对游戏引擎架构做一个完整分析。</p><p>此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。</p><p>借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块，最后通过实践简单引擎开发来完成对引擎知识的掌握。</p><p>游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。</p><p>同时《游戏引擎架构》中部分知识太过陈旧的部分，会重新深挖后总结出自己的观点。</p><h1 id=\"概述\">概述：</h1><p>本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：</p><p>1.时间库2.自定义容器库3.字符串散列库4.内存管理框架5.RTTI与反射模块6.图形计算库7.资产管理模块8.低阶渲染器9.剔除与合批模块10.动画模块11.物理模块12.UI底层框架13.性能剖析器的核心部分14.脚本系统15.视觉效果模块</p><p>本篇内容为列表中的第8个部分的第5、6节。</p><h1 id=\"正文\">正文：</h1><p>简单回顾下前文</p><p>前文我们聊了下显卡在计算机硬件主板中的位置与结构，知道了CPU、GPU的通信介质，并简单介绍了手机上的主板结构。本篇开头对上一篇做一些内容补充，PC和手机的不同硬件组织，以及CPU与其他芯片的通信过程。</p><p>下面我们开始这篇内容</p><p>本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。</p><p>目录：</p><p>主板结构中的显卡</p><p>GPU功能发展史</p><p>GPU与CPU的差异</p><p>GPU硬件特点</p><p>图形驱动程序架构</p><p>引擎低阶渲染架构</p><p>前面我们说了关于GPU硬件上的原理和运作机制，下面我们来讲一讲软件上的架构，尤其是渲染架构。</p><p>指令和数据从CPU到GPU最终到帧缓冲的这个过程中，有三种类型的架构，第一种是图形驱动程序的架构，第二种是引擎上的低阶渲染器架构，第三种是GPU上的软件架构。</p><p>这三种架构在互相配合，同时也是三个模块互相调用的过程。这也是为什么前面要提到这么多CPU与GPU硬件交互过程的原因。</p><p>为了更好的了解这三者，我又研读了一遍《OpenGL ES3.0 编程指南》，通过对OpenGL接口的解读和分析，逐步剖析图形驱动程序架构、引擎低阶渲染器架构、以及GPU软件架构，我认为这种方式是最合适的。</p><h2 id=\"一图形驱动程序架构\">一、图形驱动程序架构</h2><p>我们使用的图形接口如OpenGL、Metal、DX的原理是基于驱动程序接口做的封装。因此，图形驱动调用接口有三步骤：检查调用参数、检查硬件是否支持接着调用硬件驱动程序接口将数据推入缓冲Buffer</p><p>数据被推入缓冲，后续的详细路线如下图：</p><p>（GPU中的数据流向图）</p><p>GPU有线程来执行程序，线程通过Core来执行指令，每个线程的程序都是一样的，只是数据不同。因此很好理解，GPU中有许多线程，每个线程执行的指令是一样的，从三角形处理到光栅化以及片元处理，都是顺序执行的指令。因此数据流也跟着顺序的指令走。最后到达帧缓存。</p><p>图形API适配了许多GPU驱动程序的接口，驱动程序先检查参数，再将指令推入队列，再刷新时将队列地址发送给GPU，GPU开始处理队列，由线程处理队列中的每个指令，每个线程拥有同样的程序，数据不断被处理，最后到达帧缓存。</p><p>在最上层的图形接口之上，引擎低阶渲染器会调用很多不同类型的图形接口，将数据塞入到缓冲中。下面就来详细描述下，引擎低阶渲染器的架构是怎样的。</p><h2 id=\"二引擎低阶渲染器架构\">二、引擎低阶渲染器架构</h2><p>前面我们说，图形API封装了硬件驱动程序，会先检查再调用。</p><p>实际上，低阶渲染器也是一个封装图形API接口的程序，不同的是它封装的更适合渲染对象。</p><p>其封装的目的是让散乱的图形API变得更方便使用，同时还能够优化掉重复的计算。</p><p>这里首先我们来看下OpenGL ES图形API中的接口类型，通过了解图形API接口，能够想象出如果是我们自己来做低阶渲染器架构我们应该如何封装。所以，了解熟悉图形API对于低阶渲染器的架构非常重要。</p><p>下面是一些OpenGL的接口描述和统计，有些枯燥，如已熟悉可以直接跳到描述架构部分。</p><p>OpengGL接口描述与统计：</p><pre><code>状态开启和关闭，包括开启三角绘制、开启混合、开启模板等glEnableXXX、glDisableXXX</code></pre><pre><code>获取或查询某数据，包括获取数据，获取日志，获取结果等glGetXXX</code></pre><pre><code>绑定数据，包括绑定数据到着色器等glBindXXX</code></pre><pre><code>开始和结束某处理，包括开始变换反馈，查询数据等glBeginXXXglEndXXX</code></pre><pre><code>清除缓冲glClearXXX</code></pre><pre><code>创建某对象，包括缓冲，数组，纹理，采样器对象等等glGenXXX，glCreateXXX</code></pre><pre><code>删除某对象，包括着色器对象，数组，纹理对象，采样器对象等等glDeleteXXX</code></pre><pre><code>还有其他的如:glDrawXXX，绘制相关glCopyXXX，拷贝复制相关glCheckXXX，检查相关glIsXXX，判断是否有效......</code></pre><p>下面按相关性划分为：</p><p>（着色器相关接口图）</p><pre><code>着色器相关：创建着色器：glCreateShader加载着色器代码：glShaderSource编译着色器：glCompileShader创建着色器程序：glCreateProgram绑定着色器：glAttachShader解绑着色器：glDetachShader链接着色器程序：glLinkProgram使用着色器程序：glUseProgram删除着色器程序：glDeleteProgram</code></pre><p>（视口相关接口图）</p><pre><code>视口相关：设置视口：glViewport设置视口裁剪深度：glDepthRangef清除颜色缓冲：glClear置换缓冲区：eglSwapBuffers</code></pre><p>（顶点相关接口图）</p><pre><code>顶点相关：通过创建缓冲区，可以把顶点数据加载到缓冲区，从而绘制顶点。加载顶点属性：glVertexAttribXXX绘制三角形：glDrawArrays，glDrawElements启用/禁用顶点属性数组：glEnable/DisableVertexAttribArray申请缓冲：glGenBuffers指定缓冲：glBindBuffer向缓冲填入数据：glBufferData，glBufferSubData删除缓冲：glDeleteBuffers创建顶点数组对象：glGenVertexArrays绑定顶点数组：glBindVertexArray删除顶点数组：glDeleteVertexArrays映射并返回缓冲区数据：glMapBufferRange取消映射缓冲区：glUnmapBuffer刷新映射缓冲区：glFlushMappeBufferRange复制缓冲区数据：glCopyBufferSubData</code></pre><p>（图元绘制相关接口图）</p><pre><code>图元绘制相关：绘制几何形状对象：glDrawArrays, glDrawElements, glDrawRangeElements,绘制几何Instance：glDrawArraysInstanced, glDrawElementsInstanced绘制线段：glLineWidth</code></pre><p>（光栅化相关接口图）</p><pre><code>光栅化相关：指定正面顺序：glFrontFace剔除反面：glCullFace多边形偏移：glPolygonOffset</code></pre><pre><code>遮挡查询：glBeginQuery, glEndQuery, glGenQueries, glDeleteQueries, glGetQueryObjectuiv遮挡查询用查询对象来跟踪通过深度测试的片段或样本。</code></pre><p>顶点着色器相关：</p><pre><code>内建特殊变量：gl_VertexID，当前顶点整数索引gl_InstanceID，当前图元实例编号gl_Position，输出顶点gl_PointSize，点精灵尺寸gl_FrontFacing，是否正面的布尔值</code></pre><pre><code>内建常量：gl_MaxVertexAttribs，顶点属性最大数量gl_MaxVertexUniformVectors，使用vec4统一变量的最大数量gl_MaxVertexOutputVectors，输出向量的最大数量gl_MaxVertexTextureImageUnits，可用纹理单元的最大数量gl_MaxCombinedTextureImageUnits，顶点和片元着色器中可用纹理单元的最大数量总和</code></pre><p>（变换反馈相关接口图）</p><pre><code>变换反馈TransformFeedback相关：glTransformFeedbackVaryings，指定变换反馈时捕捉的顶点属性glBeginTransformFeedback，开始变换反馈（需先创建变换反馈缓冲区，再绑定到顶点索引）glEndTransformFeedback，结束变换反馈</code></pre><p>（纹理相关接口图）</p><pre><code>纹理相关：4种纹理类型：2D纹理、2D纹理数组、3D纹理、立方图纹理其中2D纹理数组和3D纹理有点相似，2D纹理数组常用于帧动画。两者区别为过滤和mipmap不同。glGenTextures，创建纹理对象glDeleteTextures，删除纹理对象glBindTexture，绑定到一个特定的纹理目标glTexImage2D，加载2D和立方图的纹理数据glTexSubImageXXX，加载部分纹理图像数据glTexImage3D，加载3D纹理数据glPixelStorei，设置解包对齐glTexParameteri，设置贴图的过滤模式glGenerateMipmap，自动生成mip贴图glActiveTexture，设置当前的纹理单元，以便后续将纹理绑定该单元glCompressedTexImageXXX，加载2D、立方图、3D等纹理的压缩图像数据（ETC、ASTC等压缩格式）glCompressedTexSubImageXXX，加载部分压缩纹理图像glReadBuffer，设置拷贝图像数据来源的颜色缓冲区glCopyTexImageXXX，从颜色缓冲区拷贝数据到纹理glCopyTexSubImageXXX，拷贝部分颜色缓冲区的数据到纹理</code></pre><p>（采样器相关接口图）</p><pre><code>采样器相关：glGenSamplers，生成采样器对象glDeleteSamplers，删除采样器对象glBindSampler，绑定纹理到采样器对象glSamplerParameterXXX，设置采样器对象参数glTexStorageXXX，分配纹理内存</code></pre><p>片段着色器相关：</p><p>很久以前在固定功能管线中，使用3种输入：顶点颜色插值、纹理颜色、常量颜色，再使用一些公式的组合实现有趣的特效，包括：A<em>B、A+B、A+B-0.5、A</em>C+B*(1-C)、A-B等等。</p><p>支持可编程管线后，我们可以通过可编程管线来实现固定功能管线的效果。</p><pre><code>现在的可编程管线的输入由四部分构成：顶点属性插值（顶点上的颜色、uv、法线等）统一变量（全局常量）采样纹理代码常量</code></pre><pre><code>内建特殊变量：gl_FragCoord，片段的窗口相对坐标（可用于噪声贴图计算）gl_FrontFacing，是否正面朝向gl_PointCoord，点精灵的纹理坐标gl_FragDepth，输出变量，覆盖片段的固定功能深度值（会导致深度测试优化失效）</code></pre><pre><code>内建常量：gl_MaxFragmentInputVectors，输入的最大数量gl_MaxTextureImageUnits，可用纹理图像单元的最大数量gl_MaxFragmentUniformVectors，使用vec4统一变量项目的最大数量gl_MaxDrawBuffers，多重渲染目标（MRT）的最大支持数量gl_(Min/Max)ProgramTexelOffset，通过内建ESSL函数texture*Offset()偏移参数支持的最大和最小偏移量</code></pre><p>（缓冲区相关接口图）</p><p>缓冲区相关：</p><p>缓冲区有三种，颜色缓冲区，深度缓冲区，模板缓冲区。</p><pre><code>缓冲清除相关：glClear，清除指定缓冲区glClearColor，清除颜色缓冲区中的指定颜色glClearDepth，清除深度缓冲区中的指定深度glClearStencil，清除模板缓冲区中的指定掩码glClearBufferXXX，清除指定缓冲区中的部分区域</code></pre><pre><code>缓冲写入相关：glColorMask，像素写入颜色缓冲区时，哪些分量会被更新glDepthMask，深度写入深度缓冲区时，哪些深度可以修改glStencilMask，掩码写入模板缓冲区时，哪些掩码可以被修改glStencilMaskSeparate，根据正面和背面的图元使用不同的掩码glDrawBuffers，渲染指定颜色数组到多重渲染目标中（多重渲染目标允许一次渲染多个颜色缓冲区，从而实现高级渲染算法，如延迟渲染）</code></pre><p>（裁剪与测试相关图）</p><pre><code>模板缓冲裁剪与测试：glScissor，指定裁剪矩形区域glStencilFuncXXX，用指定公式指定值指定掩码测试比较模板缓冲glStencilOpXXX，将测试结果用于深度缓冲区的操作深度缓冲测试：glDepthFunc，设置深度测试的运算公式</code></pre><p>（混合相关接口图）</p><pre><code>混合相关：glBlendFuncXXX，设置混合系数glBlendColor，设置常量颜色glBlendEquationXXX，设置运算公式</code></pre><pre><code>颜色缓冲区中读写像素：glReadPixels，从颜色缓冲区中取出数据返回到指定数组中，数据传输时会启动DMA传输，此时CPU会空出来。</code></pre><p>（帧缓冲区对象相关接口图）</p><pre><code>帧缓冲区对象（FBO）相关：可用于颜色、深度、模板纹理或渲染目标。glGenRenderbuffers，分配n个渲染缓冲区对象，返回到指针中。glBindRenderbuffer，绑定渲染缓冲区对象glRenderbufferStorageXXX，指定渲染缓冲区对象大小和格式glBindFramebuffer，设置当前帧缓冲区对象（渲染目标）glFramebufferRenderbuffer，将一个渲染缓冲区对象连接到帧缓冲区附着点glFramebufferTextureXXX，将纹理的某个mip级别连接到帧缓冲附着点glCheckFramebufferStatus，验证帧缓冲区对象是否完整glBlitFramebuffer，高效的将矩形区域的像素从一个帧缓冲区复制到另一个glInvalidate(Sub)Framebuffer，让整个帧缓冲区或子区域失效glDeleteRenderbuffers，删除指定渲染缓冲区对象，先断开缓冲区对象才能删除glDeleteFramebuffers，删除指定帧缓冲对象</code></pre><p>未完，最近忙新书和工作以及演讲训练，后续继续写……</p><h2 id=\"参考资料\">参考资料：</h2><p>《OpenGL ES3.0 编程指南》DanGinsburg等著</p><p>《GPU 引擎》https://docs.microsoft.com/zh-tw/windows/win32/direct3d12/user-mode-heap-synchronization《CPU体系结构》https://my.oschina.net/fileoptions/blog/1633021</p>",
            "url": "http://www.luzexi.com/2022/02/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B054",
            
            
            
            "tags": ["读书笔记","前端技术"],
            
            "date_published": "2022-02-20T00:00:00+08:00",
            "date_modified": "2022-02-20T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/02/12/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A122",
            "title": "给女儿的信(二十二) 专注于技巧",
            "summary": "女儿 教育 亲情",
            "content_text": "要点：把公司晋升答辩当作一次有目标的练习，从中汲取经验，让自己专注于每件事的技巧。大纲：1.想要在公司晋升，规则是通过PPT演讲陈述的方式晋升2.晋升很重要，但不是我的最终目标，我的最终目标是让自己变得更好3.我拆解晋升需要的技巧，包括，编程技巧，PPT技巧，演讲技巧，表达技巧4.我想完成任务的同时，更好的练习技巧，专注于技巧的学习和练习5.于是我去演讲俱乐部练习演讲，学习编程技术，学习PPT演示技巧，学习表达技巧6.在这个练习过程中，爸爸不断的靠近目标，而且感觉到自己越来越有信心7.可惜晋级没有成功，但无论怎么样，爸爸知道自己成长了，变成了一个更好的自己同时，这些练习的技巧，可以用于未来的日子当中去，让自己变得更好内容：Hello Sharon，Hello Anne，爸爸好想你们，爸爸爱你们。最近杭州和深圳的疫情又有严重起来了，要多加小心哟。爸爸给你们讲一讲爸爸最近遇到的事好不好？爸爸最近在做一个晋升的演讲，爸爸想通过演讲来达成自己的目标，但是遇到了一些困难。第一个困难是爸爸不知道这个目标能不能达成，心里很恐慌，很慌，有可能达成，有可能达不成。所以爸爸想办法怎么更靠近这个目标，接着爸爸就把这个目标拆分成几个技巧。比如说上台演讲的技巧，比如说即兴演讲的技巧，比如说表达沟通的技巧，还有一些爸爸工作上的技巧。这些技巧爸爸一个个去练习，一个每天的都去练习。就拿平时的即兴演讲技巧来说，爸爸会叫Sharon跟安妮给爸爸出题，有时候讲的好，有时候讲的不好，不断的练习过程当中也会做一些总结和复盘，这样让自己学习效率会更高一些。通过这样的练习，每个技巧都去练习一下，爸爸能够更靠近目标，这些技巧都指向这个目标，在最后要上台的日子的日子里，爸爸更加有信心了，因为爸爸练习了这么多技巧，这个技巧我觉得也练得还可以，就上台了，虽然但是最后的结果不怎么样，最后结果没有达成，所以爸爸昨天心情很糟糕，很难受。昨天调整了一整天，终于在今天早上的时候心情好多了。爸爸想纵使结果没有达成，但是爸爸练习了这么多技巧，这些技巧都可以运用到未来的日子里面去。想到这里，爸爸又充满了力量，因为爸爸知道爸爸成长了，完善了自己，每个技能都学习到了新的知识，自己整个能力都提升了，成长了，爸爸感到很开心，未来更美好了。想到这里爸爸这个情绪就释放掉了，爸爸想跟安妮和Sharon说，跟爸爸一起来练习技巧好不好？我们在达成目标的过程当中有很多的技巧，每一个可以逐个的去练习，练习完毕以后我们会发现我们变得更好了，目标也达成了，太棒了，即使目标没有达成，就像爸爸这样，练习的技巧也可以运用到未来的日子里面去，希望跟Sharon和Anne一起加油。记得照顾好妈妈哟，笔芯。",
            "content_html": "<h1 id=\"要点\">要点：</h1><p>把公司晋升答辩当作一次有目标的练习，从中汲取经验，让自己专注于每件事的技巧。</p><h1 id=\"大纲\">大纲：</h1><pre><code>1.想要在公司晋升，规则是通过PPT演讲陈述的方式晋升2.晋升很重要，但不是我的最终目标，我的最终目标是让自己变得更好3.我拆解晋升需要的技巧，包括，编程技巧，PPT技巧，演讲技巧，表达技巧4.我想完成任务的同时，更好的练习技巧，专注于技巧的学习和练习5.于是我去演讲俱乐部练习演讲，学习编程技术，学习PPT演示技巧，学习表达技巧6.在这个练习过程中，爸爸不断的靠近目标，而且感觉到自己越来越有信心7.可惜晋级没有成功，但无论怎么样，爸爸知道自己成长了，变成了一个更好的自己</code></pre><p>同时，这些练习的技巧，可以用于未来的日子当中去，让自己变得更好</p><h1 id=\"内容\">内容：</h1><p>Hello Sharon，Hello Anne，爸爸好想你们，爸爸爱你们。</p><p>最近杭州和深圳的疫情又有严重起来了，要多加小心哟。</p><p>爸爸给你们讲一讲爸爸最近遇到的事好不好？</p><p>爸爸最近在做一个晋升的演讲，爸爸想通过演讲来达成自己的目标，但是遇到了一些困难。</p><p>第一个困难是爸爸不知道这个目标能不能达成，心里很恐慌，很慌，有可能达成，有可能达不成。</p><p>所以爸爸想办法怎么更靠近这个目标，接着爸爸就把这个目标拆分成几个技巧。</p><p>比如说上台演讲的技巧，比如说即兴演讲的技巧，比如说表达沟通的技巧，还有一些爸爸工作上的技巧。</p><p>这些技巧爸爸一个个去练习，一个每天的都去练习。</p><p>就拿平时的即兴演讲技巧来说，爸爸会叫Sharon跟安妮给爸爸出题，有时候讲的好，有时候讲的不好，</p><p>不断的练习过程当中也会做一些总结和复盘，这样让自己学习效率会更高一些。</p><p>通过这样的练习，每个技巧都去练习一下，爸爸能够更靠近目标，</p><p>这些技巧都指向这个目标，在最后要上台的日子的日子里，爸爸更加有信心了，因为爸爸练习了这么多技巧，这个技巧我觉得也练得还可以，就上台了，虽然但是最后的结果不怎么样，最后结果没有达成，所以爸爸昨天心情很糟糕，很难受。昨天调整了一整天，终于在今天早上的时候心情好多了。</p><p>爸爸想纵使结果没有达成，但是爸爸练习了这么多技巧，这些技巧都可以运用到未来的日子里面去。</p><p>想到这里，爸爸又充满了力量，因为爸爸知道爸爸成长了，完善了自己，每个技能都学习到了新的知识，自己整个能力都提升了，成长了，爸爸感到很开心，未来更美好了。</p><p>想到这里爸爸这个情绪就释放掉了，爸爸想跟安妮和Sharon说，跟爸爸一起来练习技巧好不好？</p><p>我们在达成目标的过程当中有很多的技巧，每一个可以逐个的去练习，练习完毕以后我们会发现我们变得更好了，目标也达成了，太棒了，即使目标没有达成，就像爸爸这样，练习的技巧也可以运用到未来的日子里面去，希望跟Sharon和Anne一起加油。</p><p>记得照顾好妈妈哟，笔芯。</p>",
            "url": "http://www.luzexi.com/2022/02/12/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A122",
            
            
            
            
            
            "date_published": "2022-02-12T00:00:00+08:00",
            "date_modified": "2022-02-12T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/01/23/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A121",
            "title": "给女儿的信(二十一) 早上运动的力量",
            "summary": "女儿 教育 亲情",
            "content_text": "主题：早上运动让我一天活力满满结构：1.以前我每天工作到下午时都精疲力尽2.我发现特别是下午4点后很疲惫，3.一直保持每天都锻炼，所以通常会选择晚上，或下午4.晚上常常会因为太疲惫而放弃锻炼5.中午常常会因为太忙而忘记锻炼6.运动一停下来，常常一停就是好几个月，非常苦恼7.于是把运动放到早上，尝试早上运动8.一开始很艰难，早上运动，要早起，很痛苦9.咬牙坚持，仍然会有波动，时常起不来，睡过头10.坚持了2个月后，发现人越来越精神11.于是满满的坚持了1整年，每天早上运动12.每次早上运动完毕后，发现自己的活力满满，可以维持一整天的高强度工作13.呼吁，孩子们，跟我一起早上起来运动30分钟哈喽，秀恩，安妮。爸爸到深圳了，一离开你们就好想你们。今天爸爸想跟你们讲一讲关于爸爸运动的事。爸爸以前小时候很喜欢运动的，但是长大了以后，特别是开始上班了以后每天忙于工作，运动的越来越少了。一开始爸爸觉得没什么问题，但是随着日子的过去，时间的流逝，爸爸发现自己的体力越来越差了。这是为什么呢？我想了好久，终于想明白了。因为爸爸没有很好地锻炼自己的身体，自己的身体慢慢变差了，俗话说得好，留得青山在不怕没材烧，身体是革命的本钱，我们应该好好的去加强自己的身体，锻炼自己的身体，从而让我们的学习和工作更有效率，也更容易集中注意力。最近这几年爸爸一直坚持锻炼身体，感觉到自己的身体恢复了以前的活力，但是这中间还有一些细节爸爸想跟你们讲一讲。以前爸爸虽然一直保持锻炼，但是通常都会选择晚上或者下午去锻炼。当我在晚上去锻炼的时候，由于工作和学习了一整天常常会感觉到疲惫，经常会想着哎呀算了，不要锻炼了。中午的时候也是，会很忙，经常会忘记锻炼。每次锻炼一停下来，常常就是好几个月非常苦恼。哎呀，没有把身体搞好，自己的工作和学习效率又下降了。于是想着说，如何才能让自己每天都坚持运动，同时又不会忘记呢？后来爸爸想到了早上锻炼，如果说在早上锻炼的话，我就不会忘记了接下来一整天的锻炼了。锻炼好再学习再工作，这样的话，我就不会忘记了，哈哈。一开始爸爸选择早上锻炼的时候，非常的痛苦非常的难，虽然爸爸咬牙坚持，但仍然时常起不来，睡过头。接着，爸爸继续咬牙坚持，坚持了两个月后慢慢发现，爸爸越来越精神了，活力越来越充足了。爸爸发现，每天早上动运动锻炼完后，一整天都是活力满满的，这个活力可以维持高强度的学习和工作一整天。太棒了，孩子们爸爸终于获得了这个技能。爸爸可以通过锻炼来加强自己的身体，让自己更有精神，体力更好，也更容易集中注意力，同时又能更好地坚持下去，让自己在高强度的学习和工作下，仍然能保持活力满满的一整天。希望你们也和我一起来早上运动，让自己有更强壮的身体，同时让自己有活力满满的一整天，进而让学习更高效。",
            "content_html": "<h1 id=\"主题\">主题：</h1><p>早上运动让我一天活力满满</p><h1 id=\"结构\">结构：</h1><pre><code>1.以前我每天工作到下午时都精疲力尽2.我发现特别是下午4点后很疲惫，3.一直保持每天都锻炼，所以通常会选择晚上，或下午4.晚上常常会因为太疲惫而放弃锻炼5.中午常常会因为太忙而忘记锻炼6.运动一停下来，常常一停就是好几个月，非常苦恼7.于是把运动放到早上，尝试早上运动8.一开始很艰难，早上运动，要早起，很痛苦9.咬牙坚持，仍然会有波动，时常起不来，睡过头10.坚持了2个月后，发现人越来越精神11.于是满满的坚持了1整年，每天早上运动12.每次早上运动完毕后，发现自己的活力满满，可以维持一整天的高强度工作13.呼吁，孩子们，跟我一起早上起来运动30分钟</code></pre><p>哈喽，秀恩，安妮。爸爸到深圳了，一离开你们就好想你们。</p><p>今天爸爸想跟你们讲一讲关于爸爸运动的事。</p><p>爸爸以前小时候很喜欢运动的，但是长大了以后，特别是开始上班了以后每天忙于工作，运动的越来越少了。</p><p>一开始爸爸觉得没什么问题，但是随着日子的过去，时间的流逝，爸爸发现自己的体力越来越差了。</p><p>这是为什么呢？我想了好久，终于想明白了。</p><p>因为爸爸没有很好地锻炼自己的身体，自己的身体慢慢变差了，俗话说得好，留得青山在不怕没材烧，身体是革命的本钱，我们应该好好的去加强自己的身体，锻炼自己的身体，从而让我们的学习和工作更有效率，也更容易集中注意力。</p><p>最近这几年爸爸一直坚持锻炼身体，感觉到自己的身体恢复了以前的活力，但是这中间还有一些细节爸爸想跟你们讲一讲。</p><p>以前爸爸虽然一直保持锻炼，但是通常都会选择晚上或者下午去锻炼。</p><p>当我在晚上去锻炼的时候，由于工作和学习了一整天常常会感觉到疲惫，经常会想着哎呀算了，不要锻炼了。</p><p>中午的时候也是，会很忙，经常会忘记锻炼。</p><p>每次锻炼一停下来，常常就是好几个月非常苦恼。</p><p>哎呀，没有把身体搞好，自己的工作和学习效率又下降了。</p><p>于是想着说，如何才能让自己每天都坚持运动，同时又不会忘记呢？</p><p>后来爸爸想到了早上锻炼，如果说在早上锻炼的话，我就不会忘记了接下来一整天的锻炼了。</p><p>锻炼好再学习再工作，这样的话，我就不会忘记了，哈哈。</p><p>一开始爸爸选择早上锻炼的时候，非常的痛苦非常的难，虽然爸爸咬牙坚持，但仍然时常起不来，睡过头。</p><p>接着，爸爸继续咬牙坚持，坚持了两个月后慢慢发现，爸爸越来越精神了，活力越来越充足了。</p><p>爸爸发现，每天早上动运动锻炼完后，一整天都是活力满满的，这个活力可以维持高强度的学习和工作一整天。</p><p>太棒了，孩子们爸爸终于获得了这个技能。</p><p>爸爸可以通过锻炼来加强自己的身体，让自己更有精神，体力更好，也更容易集中注意力，同时又能更好地坚持下去，让自己在高强度的学习和工作下，仍然能保持活力满满的一整天。</p><p>希望你们也和我一起来早上运动，让自己有更强壮的身体，同时让自己有活力满满的一整天，进而让学习更高效。</p>",
            "url": "http://www.luzexi.com/2022/01/23/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A121",
            
            
            
            
            
            "date_published": "2022-01-23T00:00:00+08:00",
            "date_modified": "2022-01-23T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/01/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B053",
            "title": "读书笔记(五十三) 《如何做好PPT》- PPT设计的艺术",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：近段时间在练习演讲，一开始只是想练习下自己的口头表达能力和沟通能力，但渐渐的我发现我爱上了演讲。又过了一段时间，我发现演讲的其中一个关键用途是汇报和培训，于是我又渐渐爱上了汇报和培训。但是光讲还不行，还得有演示的PPT，这样才能让观众不但有听觉上得冲击，还有视觉上冲击，双重冲击之下才能发挥最大效果。于是找了3本同类书籍读，《PPT设计的艺术》、《精进PPT》、《PPT设计思维、技术与实践》进行主题阅读，看完后根据自己的理解做总结。概述：PPT的核心关键是什么？如何达到最佳呈现效果？有哪些设计需要注意？有哪些搜图站点？总结：少就是多结构：结论先行、理由和论据在后、金字塔结构排版：统一、整齐、平衡小技巧：做图、色彩饱和度、图标、图表内容：本篇是针对《PPT设计的艺术》这本书做的一次总结，很不错的一本讲PPT的书，推荐。PPT的核心关键是什么？经过一段时间的PPT练习和演讲练习，再加上对理论知识的学习，我得出了PPT的核心关键：  传递核心观点（1个核心观点）  围绕核心观点打造呈现效果（清晰地传递信息，视觉冲击增强观众体验）做每件事的要素其实都很简单，简单的道理背后有复杂的经历和技巧。下面我就围绕这两个核心关键做更详细的技巧阐述。如何达到最佳呈现效果？为了达到最佳呈现效果，我们需要突出重点，用结构思维去传递信息，用视觉效果增强体验。少就是多人大脑的记忆是有限的，当展现在我们眼前的事物太多时，通常我们一个都记不住。当入眼的东西少了，我们反而记得更清楚。少即是多的本质就是，突出重点。结构：结论先行、理由和论据在后、金字塔结构我们在面对问题时，通过拆解可以把问题分成一个个你能解决的部分，高手最本质的不同就是事先花时间用心思考，再动手去实现。（高手制作PPT的五大步骤图）多思考，如何说别人才肯听，如果做才能印象深刻，如果讲才能理解我们的核心观点，这种思考显得尤为重要。用金字塔结构汇报工作用结构化思维做汇报工作，把信息整理、筛选成结论、理由和事实三部分。（结论先行金字塔结构）通过层层递进论述，将你的汇报变成一个金字塔结构。结论先行，再用理由来支撑结论，最后阐述事实和详情来支撑理由，层层递进。除了结论先行，还有一些成熟的表达架构:标准式：SCA，情景-冲突-答案开门见山式：ASC，答案-情景-冲突突出忧虑式：SCA，冲突-情景-答案突出信心式：QSCA，问题-情景-冲突-答案小结一下，有结构的表达中，适合汇报的结构为：以结论为开头，层层论证结论，最后强化结论的过程。MECE分析法则简单回顾下金字塔原理中的分析方法MECE法则：互相独立，完全穷尽这8个字可以理解为：不重不漏 – 保证信息分类中的独立性和完整性。独立性强调每项工作之间要独立，每项工作之间不要有交叉重叠。完整性说的是，在信息分类过程中不要遗漏掉某项，要保证其完整性。在分类信息和分析事物时，如果能做到不重不漏可以让事物变得更加清晰可控。在具体执行时可分为两步：1.确定主体，是大类还是复杂问题，区分对待2.把主体分为几个部分，再把小的部分拆解成更小的部分拆解问题直到拆解的小问题可以直接通过一次行动解决，其中分析和拆解时不能存在遗漏和重复的情况。总之，分析不重不漏，分析时的分类方法可以是时间线分类、流程线分类、以上统下、由内而外、从整体到局部。有哪些设计需要注意？（图：PPT制作技巧）PPT设计有了思维结构和逻辑外，还需要在制作上下功夫，这里有3点需要注意：  排版  色彩  图片排版（图：PPT排版技巧）PPT在设计中要注意的排版问题，统一、整齐、平衡，总之就是让人舒服不要有强迫症。各元素对齐能让视觉更舒适，包括边缘对齐、等距分布、总体兼顾。大脑不喜欢混乱，因此统一的样式是不可或缺的，同时这也是提高制作PPT效率的好方法。平衡需要建立在页面中要点的主次优先级上，突出主要信息，减弱次要信息，同时做好页面的视觉平衡。色彩（图：PPT色彩技巧）PPT的色彩有两大关键点：颜色选择颜色饱和度颜色和主题一样，多了会让人眼花缭乱，分不清主次，看不清记不住。颜色的选择有一个建议：除黑白之外最好不要超过两种颜色。颜色饱和度是指，颜色的鲜艳程度，饱和度低到一定程度，颜色就会变成灰色。优秀的PPT中，颜色饱和度普遍不高，这样看上去显得沉稳、专业。在颜色饱和度的选择上，尽量使用柔和的、适中的、不刺眼的颜色，作为同一章节甚至整个PPT的主色调。图片图片能帮助你快速引导观众的注意力并传递核心观点。同样的，图片不在于多，而在于精。我们在制图选图时需要特别留意，图片是否契合主题，色彩饱和度，尤其是在关键页。图片的制作有4个技巧  形状图  图标  选图  图表形状图在PPT软件中可插入丰富形状的图形，再通过组合、描边、填充、编辑顶点的制作有趣生动的图形。（图：生动的形状图-来源网络）通过形状图可以让PPT中的元素更有趣，也能达到吸引观众的效果。图标图标能让观众，快速、生动形象的表达我们想表达的意思，这比文字的力量要强大的多。因此用好图标也很关键。文章的后面介绍了一些图标网站可帮助大家快速搜索到自己称心的图标。（图：PPT中的图标-来源网络）图标选择的关键是：消除歧义图文主题吻合创意展示选图（图：选图的关键）选图的关键是，吸睛、吸睛、吸睛什么样的图片才能吸引我们的注意力呢？舒适有趣愉悦这里分别为这三种类型图片举常用的例子：婴儿图让人舒适幽默图让人有趣美女图让人愉悦在保证吸睛的同时，为了更好的呈现，图片还要保证，高清、简单、精炼：首先高清图保证不模糊其次选图要简单且紧扣主题最后文字要精炼才能记得住图表为什么要用图表？提供有理有据的数据、突出页面重点、简化表达逻辑、强化重点。（图：丰富的图标-来源网络）数据本身没有意义，我们要的是数据背后的事实，它为要点提供支撑。所有不能提高核心信息传递的元素都可以被精简。遇到一页多表的情况时，每个表都要支撑同一个观点，并且从不同侧重点展示各自维度的数据来支撑观点。图表修炼三招：用颜色突出重点文字辅助说明特别标注突显细节关键不是数据和图表，而是如何用感性的图片刺激观众的大脑。如果你想说服谁，那么尽量少用理性分析的数据堆砌图表，多用刺激大脑感性认知的可视化图片。因此如何用图表去刺激观众的大脑，向观众传递核心观点才是关键。图表从来不是重点，它背后所传达的核心观点才是重中之重。有哪些搜图站点？快速搜索适合的配图无版权图片素材网站：pixabay.com支持中文搜索pexels.com偏商务风的图片网站unsplash.com以自然风景为主的无版权图片网站gratisography.com创意图片网站vectorportal.com二次元，扁平化风格图片网站visualhunt.com根据颜色找图的网站foodiesfeed.com食物图片网站其他：polayoutu.comssyer.com好的icon图标网站：微软的PPT中有一些自带的图标iconfont.cn阿里图标icons8.cn扁平风格的图标flat-icon-design.com受女生欢迎的日本图标网站flaticon.com扁平化风格的图标网站",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485154&amp;idx=1&amp;sn=0e60371fd95e61debce8fa3518510470&amp;chksm=fc2263e5cb55eaf38998592671e335e143d1864119737b7c3ab5b02bc8fcebd7998e9c3d8d20&amp;token=1275740756&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h2 id=\"背景\">背景：</h2><p>近段时间在练习演讲，一开始只是想练习下自己的口头表达能力和沟通能力，但渐渐的我发现我爱上了演讲。又过了一段时间，我发现演讲的其中一个关键用途是汇报和培训，于是我又渐渐爱上了汇报和培训。</p><p>但是光讲还不行，还得有演示的PPT，这样才能让观众不但有听觉上得冲击，还有视觉上冲击，双重冲击之下才能发挥最大效果。</p><p>于是找了3本同类书籍读，《PPT设计的艺术》、《精进PPT》、《PPT设计思维、技术与实践》进行主题阅读，看完后根据自己的理解做总结。</p><h2 id=\"概述\">概述：</h2><p>PPT的核心关键是什么？如何达到最佳呈现效果？有哪些设计需要注意？有哪些搜图站点？</p><h2 id=\"总结\">总结：</h2><p>少就是多结构：结论先行、理由和论据在后、金字塔结构排版：统一、整齐、平衡小技巧：做图、色彩饱和度、图标、图表</p><h2 id=\"内容\">内容：</h2><p>本篇是针对《PPT设计的艺术》这本书做的一次总结，很不错的一本讲PPT的书，推荐。</p><h2 id=\"ppt的核心关键是什么\">PPT的核心关键是什么？</h2><p>经过一段时间的PPT练习和演讲练习，再加上对理论知识的学习，我得出了PPT的核心关键：</p><ol>  <li>传递核心观点（1个核心观点）</li>  <li>围绕核心观点打造呈现效果（清晰地传递信息，视觉冲击增强观众体验）</li></ol><p>做每件事的要素其实都很简单，简单的道理背后有复杂的经历和技巧。</p><p>下面我就围绕这两个核心关键做更详细的技巧阐述。</p><h2 id=\"如何达到最佳呈现效果\">如何达到最佳呈现效果？</h2><p>为了达到最佳呈现效果，我们需要突出重点，用结构思维去传递信息，用视觉效果增强体验。</p><h2 id=\"少就是多\">少就是多</h2><p>人大脑的记忆是有限的，当展现在我们眼前的事物太多时，通常我们一个都记不住。当入眼的东西少了，我们反而记得更清楚。</p><p>少即是多的本质就是，突出重点。</p><h2 id=\"结构结论先行理由和论据在后金字塔结构\">结构：结论先行、理由和论据在后、金字塔结构</h2><p>我们在面对问题时，通过拆解可以把问题分成一个个你能解决的部分，</p><p>高手最本质的不同就是事先花时间用心思考，再动手去实现。</p><p>（高手制作PPT的五大步骤图）</p><p>多思考，如何说别人才肯听，如果做才能印象深刻，如果讲才能理解我们的核心观点，这种思考显得尤为重要。</p><p>用金字塔结构汇报工作</p><p>用结构化思维做汇报工作，把信息整理、筛选成结论、理由和事实三部分。</p><p>（结论先行金字塔结构）</p><p>通过层层递进论述，将你的汇报变成一个金字塔结构。结论先行，再用理由来支撑结论，最后阐述事实和详情来支撑理由，层层递进。</p><p>除了结论先行，还有一些成熟的表达架构:标准式：SCA，情景-冲突-答案开门见山式：ASC，答案-情景-冲突突出忧虑式：SCA，冲突-情景-答案突出信心式：QSCA，问题-情景-冲突-答案</p><p>小结一下，有结构的表达中，适合汇报的结构为：以结论为开头，层层论证结论，最后强化结论的过程。</p><h2 id=\"mece分析法则\">MECE分析法则</h2><p>简单回顾下金字塔原理中的分析方法MECE法则：互相独立，完全穷尽</p><p>这8个字可以理解为：不重不漏 – 保证信息分类中的独立性和完整性。</p><p>独立性强调每项工作之间要独立，每项工作之间不要有交叉重叠。完整性说的是，在信息分类过程中不要遗漏掉某项，要保证其完整性。</p><p>在分类信息和分析事物时，如果能做到不重不漏可以让事物变得更加清晰可控。</p><p>在具体执行时可分为两步：1.确定主体，是大类还是复杂问题，区分对待2.把主体分为几个部分，再把小的部分拆解成更小的部分</p><p>拆解问题直到拆解的小问题可以直接通过一次行动解决，其中分析和拆解时不能存在遗漏和重复的情况。</p><p>总之，分析不重不漏，分析时的分类方法可以是时间线分类、流程线分类、以上统下、由内而外、从整体到局部。</p><h2 id=\"有哪些设计需要注意\">有哪些设计需要注意？</h2><p>（图：PPT制作技巧）</p><p>PPT设计有了思维结构和逻辑外，还需要在制作上下功夫，这里有3点需要注意：</p><ol>  <li>排版</li>  <li>色彩</li>  <li>图片</li></ol><p>排版</p><p>（图：PPT排版技巧）</p><p>PPT在设计中要注意的排版问题，统一、整齐、平衡，总之就是让人舒服不要有强迫症。</p><p>各元素对齐能让视觉更舒适，包括边缘对齐、等距分布、总体兼顾。</p><p>大脑不喜欢混乱，因此统一的样式是不可或缺的，同时这也是提高制作PPT效率的好方法。</p><p>平衡需要建立在页面中要点的主次优先级上，突出主要信息，减弱次要信息，同时做好页面的视觉平衡。</p><p>色彩</p><p>（图：PPT色彩技巧）</p><p>PPT的色彩有两大关键点：颜色选择颜色饱和度</p><p>颜色和主题一样，多了会让人眼花缭乱，分不清主次，看不清记不住。</p><p>颜色的选择有一个建议：除黑白之外最好不要超过两种颜色。</p><p>颜色饱和度是指，颜色的鲜艳程度，饱和度低到一定程度，颜色就会变成灰色。</p><p>优秀的PPT中，颜色饱和度普遍不高，这样看上去显得沉稳、专业。</p><p>在颜色饱和度的选择上，尽量使用柔和的、适中的、不刺眼的颜色，作为同一章节甚至整个PPT的主色调。</p><p>图片</p><p>图片能帮助你快速引导观众的注意力并传递核心观点。</p><p>同样的，图片不在于多，而在于精。我们在制图选图时需要特别留意，图片是否契合主题，色彩饱和度，尤其是在关键页。</p><p>图片的制作有4个技巧</p><ol>  <li>形状图</li>  <li>图标</li>  <li>选图</li>  <li>图表</li></ol><p>形状图</p><p>在PPT软件中可插入丰富形状的图形，再通过组合、描边、填充、编辑顶点的制作有趣生动的图形。</p><p>（图：生动的形状图-来源网络）</p><p>通过形状图可以让PPT中的元素更有趣，也能达到吸引观众的效果。</p><p>图标</p><p>图标能让观众，快速、生动形象的表达我们想表达的意思，这比文字的力量要强大的多。</p><p>因此用好图标也很关键。</p><p>文章的后面介绍了一些图标网站可帮助大家快速搜索到自己称心的图标。</p><p>（图：PPT中的图标-来源网络）</p><p>图标选择的关键是：消除歧义图文主题吻合创意展示</p><p>选图</p><p>（图：选图的关键）</p><p>选图的关键是，吸睛、吸睛、吸睛</p><p>什么样的图片才能吸引我们的注意力呢？舒适有趣愉悦</p><p>这里分别为这三种类型图片举常用的例子：婴儿图让人舒适幽默图让人有趣美女图让人愉悦</p><p>在保证吸睛的同时，为了更好的呈现，图片还要保证，高清、简单、精炼：首先高清图保证不模糊其次选图要简单且紧扣主题最后文字要精炼才能记得住</p><p>图表</p><p>为什么要用图表？提供有理有据的数据、突出页面重点、简化表达逻辑、强化重点。</p><p>（图：丰富的图标-来源网络）</p><p>数据本身没有意义，我们要的是数据背后的事实，它为要点提供支撑。所有不能提高核心信息传递的元素都可以被精简。</p><p>遇到一页多表的情况时，每个表都要支撑同一个观点，并且从不同侧重点展示各自维度的数据来支撑观点。</p><p>图表修炼三招：用颜色突出重点文字辅助说明特别标注突显细节</p><p>关键不是数据和图表，而是如何用感性的图片刺激观众的大脑。如果你想说服谁，那么尽量少用理性分析的数据堆砌图表，多用刺激大脑感性认知的可视化图片。</p><p>因此如何用图表去刺激观众的大脑，向观众传递核心观点才是关键。</p><p>图表从来不是重点，它背后所传达的核心观点才是重中之重。</p><p>有哪些搜图站点？</p><p>快速搜索适合的配图</p><p>无版权图片素材网站：</p><p>pixabay.com支持中文搜索</p><p>pexels.com偏商务风的图片网站</p><p>unsplash.com以自然风景为主的无版权图片网站</p><p>gratisography.com创意图片网站</p><p>vectorportal.com二次元，扁平化风格图片网站</p><p>visualhunt.com根据颜色找图的网站</p><p>foodiesfeed.com食物图片网站</p><p>其他：polayoutu.comssyer.com</p><p>好的icon图标网站：</p><p>微软的PPT中有一些自带的图标</p><p>iconfont.cn阿里图标</p><p>icons8.cn扁平风格的图标</p><p>flat-icon-design.com受女生欢迎的日本图标网站</p><p>flaticon.com扁平化风格的图标网站</p>",
            "url": "http://www.luzexi.com/2022/01/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B053",
            
            
            
            
            
            "date_published": "2022-01-10T00:00:00+08:00",
            "date_modified": "2022-01-10T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/01/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B052",
            "title": "读书笔记(五十二) 《如何精彩演讲》#3 如何即兴演讲",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景不知不觉看完了6本关于演讲的主题，按推荐顺序排列分别是《高效演讲》、《演讲与口才》、《即兴演讲》、《关键对话》、《TED演讲的力量》、《说话的艺术》。我希望自己能够对演讲有一个系统性的学习，于是自己在平常的生活和工作中做了很多实践和训练。目标是，改善平常的工作、生活中表达的流畅和清晰度，能让人感觉到舒服，让人感觉有活力。同时在公众演讲上，希望自己能够很好的呈现所思所想以及所知所学。因此开启这个精彩演讲系列的总结文章，我将对这六本书（其实不止六本）的内容加上我的实践经验做一次全面的系统性的总结。概述：1.即兴演讲与普通演讲的区别2.即兴演讲的框架3.即兴演讲的练习方法内容：如果你仔细一些，就会发现我们生活当中会用到很多很多的机械演讲，很多人并不在意进行演讲认为进行演讲，只是脑袋里迸发出了一些火花，或者说自己总结的那些方法。那其实在我们平常的沟通沟通跟表达过程当中进行演讲，在我们沟通表达当中占据的位置非常重要。（即兴演讲运用场景）特别是作为领导人，作为一个想要做更多有效工作的人。更多的需要激情演讲来，让自己的沟通效率更高，让自己的工作效率更高，让自己的生活效率更高。欣欣的我们会发现，在我们生活当中经常会有一些即兴演讲。讲的不好的情况让。让对话让对方让大家感觉到非常不舒服。其中一些高调的领导者，会在即兴时刻跟着感觉走，结果让自己。悔恨终生一些管理者在会议上被点名发言却无语无伦次，舌头就像打了结一样，还有一些管理者一开口就滔滔不绝没完没了，最后连自己讲了什么都忘记了。另一些领导者呢，在回答问题时没有主题，东拉西扯，最后拼命解释说我的意思是这种体验非常非常的不好。因此进行演讲，需要引起我们足够多的重视，这在我们平常沟通工作生活当中，有非常非常多的场景可以运用，并且它是我们。提高效率。让自己生活工作更美好的一个非常非常好的技巧。即兴演讲与普通演讲的区别（普通演讲特点）我们可以用几个星期甚至几个月的时间来准备我们的演讲稿，从计划、研究、大纲、讨论、草拟、完善的步骤来为即将到来的演讲准备演讲稿。这是一件非常有趣的事情，也非常值得去准备。（即兴演讲特点）只是平时的生活和工作当中，我们90%情况都没有任何准备，大部分人都会“临时抱佛脚”或“跟着感觉走”说两句，这让我们错失了很多关键时刻。对于普通的有预期的演讲，我们可以提前花时间去准备去练习，而即兴演讲大部分情况都不在我们的预料范围内，难道即兴演讲就只能靠天赋吗？并不是，它也是有方法可寻，并且可以通过练习来加强和巩固的。实际上，优秀的即兴演讲，它的秘密就在于准备。也就说，你必须为“看起来像是很自然的即兴发挥”而做充分的准备。（即兴演讲准备工作）我们要为此准备的东西很多，包括选择合适的时间和地点，在什么样的场合说什么样的话，会让对方感觉更自然。与此同时，在讲话前需要快速整理思路，知道自己要说的内容，围绕自己的中心思想讲话。同时自己的讲话的主题和内容要有价值，这是能够让周围的人愿意倾听且被你吸引的关键。最后要意识到我们的“麦克风”始终是开着的，要保持这种麦克风始终开着的状态，不管在办公室内还是办公室外，都要得体的沟通，语言可以激发人也可以威胁人，说符合自己身份的话。大量的练习让乔布斯可以在讲话时基本不用草稿。他在展示产品时，虽然也会小心遮住笔记不让观众看见，但他从来不会逐字逐句念出来。如果你什么都不准备就跟着感觉走，很容易让自己陷入尴尬的境地，到时候你只能胡乱说一些你不了解的东西。（即兴内容知识分类图）对于要说的主题人们总是期望你展示出科学、丰富、经验的知识内容。因此知识内容，通常分为三类：科学知识，讲话的内容有扎实的知识背景一般性知识，丰富的观点让你更有说服力经验性知识，讲述个人经历让讲话更有吸引力在我们即兴讲话前，写下这些关键信息和支持性信息，将这些信息记在脑子里，这将构成你即兴演讲草稿的基础。如果所有即兴演讲都事先做好准备、构建扎实的知识基础，牢记关键信息，相信我们会体会到最棒的即兴演讲体验：“最棒的即兴演讲，是当我做足准备，熟知相关材料时，脱口而出的状况。”（即兴演讲时的心态）演讲的心态非常重要，是与听众连接的通道，也是我们保持真实自我和正念的好方法。演讲心态，保持真实、保持专注、保持尊重非常重要，同时也是保持我们保持真实领导力的好方法。我们一定要有当领导者的意愿，让自己始终处于领导位置，将每一次讲话和沟通都视为潜在的领导力时刻，为此做出自己的进行领导力即兴讲话。真实领导力，让自己专注于当下的对话，真实有勇气的分享你的想法、价值观和信念，分享自己的感受、自己的故事和自己的脆弱。成为真正的领导者需要挖掘自己内在，不断与同事、队友和朋友分享你的当下、想法、价值观、信念、感受和故事。通过保持自己的真实性，激励鼓舞他人，这让我们变得更加温暖，同时也能让我们找到更多乐趣。即兴演讲的框架很多人会问“为什么要用框架？”，这会让我们感觉是把自己禁锢在一个笼子里，看上去有些死板。当然这也是我一开始接触框架的感受，但练习一段时间后我就改变了我的想法。实际上，我们在即兴演讲中，如果没有可依的规则会感觉迷茫。特别是在练习即兴演讲时，没有规则没有方法没有可依的练习方式，很容易迷失在五花八门的“错觉”中。因此框架就起到了重要作用，它为长期技能的练习提供规则，为技能成长提供了依据。用模板去建立自己的即兴演讲框架是一种非常好又非常有效提高自己即兴演讲水平的方法。框架让我们更好的总结完善自己的即兴技巧，通过模板（也有很多人称为模型）和框架，让我们有道可循的思考自己的即兴演讲该如何改进。（即兴演讲框架图）《即兴演讲》为我们介绍了一种即兴演讲的框架：抓手、要点、结构体、呼吁行动。实际上即兴演讲有很多种框架，但都离不开上述这个结构，因此我认为从这个最通用最中心的框架出发来看即兴演讲会更好一些。注意，即使有了即兴框架，也并不代表我们就万事大吉了，这是一个不断打磨和练习的过程。通过框架来练习，最终会做到将框架融会融入心中，做到心中有框架，口中无框架。如果我们可以无论事先还是在讲话现场，都用这个模板去写自己的讲话草稿，通过不断的练习，我们就能让即兴效果更好。（即兴模板应用步骤与调整）即使完全不允许我们打底草稿，我们也可以借助这个模板去讲话。这里有个关键点，即在每讲完每个部分后暂停下来，思考下一个部分的内容，然后再讲。在思考抓手时暂停；讲完抓手内容后暂停，思考一下讲话的核心要点；讲完要点后暂停，思考结构体的内容；讲完结构体后暂停，思考呼吁行动部分；最后讲呼吁行动部分。简而言之，在讲完每一部分后都要暂停，以便思考下一部分内容。但你暂停时，你会看起来更自信，而你讲话的脚本也会更好。注意，模板和模型在实际情况中需要我们灵活的去调整，例如，当你发现讲话的时间已经不允许我们继续完整的讲完所有部分时要即使的调整，特别是当你发现对方表现焦虑不安时，你就要马上精简模板，可能只说要点和呼吁，但无论什么情况下都必须包含要点。即兴框架：要点（即兴演讲框架-要点的关键点）坦率的说，说话没有要点就等于在浪费大家的时间。你会发现，当我们没有要点时，语音中会充满很多赘词，“你知道…”，“就是”，“那么”，“然后”，“是吧”等。究其原因时语言背后的思路不清。所以，一定要确保你的讲话有核心要点。乔布斯越成熟、自信，他就越能与周围实力强大、有想法的管理者自信地对话，而对方在和他争论时也感觉很舒适。要点的关键是三个部分：1.必须是你的观点2.要点要有吸引力3.要点必须积极正面首先，确保要点是的观点，是承载你信念的一部分，只要这样你才能有信心，并强势、明确的凸显出你的观点，并提炼中心思想，一句话简洁表达你的观点。其次，你的观点要有吸引力，这意味着你要了解什么会触动听众的内心，只有这样才能吸引听众的全部注意力，让你的即兴演讲效果发挥到极致。最后，要点必须是积极正面的，这是打动整个会场的必备前提。注意，你也可以在听众中先建立一种紧迫感，然后再转向更高层次的要点，但一定要确保最后以积极因素结尾。通过练习，每次即兴演讲都要有要点，让要点自然的成为你演讲时的第二天性。当你讲话时，胡自然地想讲要点，这在与上级对话，或汇报时尤为重要，它们希望你说话清晰、切中要害，而不浪费他们的时间。即兴框架：结构体一个合理的结构体，可以让你的讲话举重若轻，它可以让你更清楚地传达要点。（结构体组织模式）在讲具体内容是，最好用结构体的组织方式去讲话，这样会让讲话更有条理，清晰的表达我们的观点，支撑我们提出的要点。结构体组织模式：1.原因模式，罗列各种原因和理由来支撑我们提出的要点。2.方法模式，围绕提出的要点，我们可以罗列各种方法来支撑它。3.情况模式，通过描述当前的状况和对应的实施措施来支撑要点。4.时间模式，通过时间顺序来描述支撑要点的关键点。注意，我们在说完要点后一定要暂停，花一点时间思考后，再选择恰当的结构体模式。学习以上四种组织模式，构建讲话核心要点并加上标志词，如果你能做到这些，那么你的即兴演讲将非常有说服力。即兴框架：抓手我们必须思考如何讲话才能在争夺注意力中胜出，因为“获得整个会场”的注意力是很难的，甚至获得一个人的注意力也很难，如今社会有太多信息干扰我们的注意力，包括智能手机、电子邮件、主流话题、八卦信息等，所以我们更应该仔细思考这个部分。也就是说只有抓住大家的注意力，才能让我们的演讲放到最大的效果。(图：抓手关键点)把抓手部分看作是一种“口头的握手”会更好，它让你与听众建立联结，使听众想要跟随你。一旦与听众联结，你就可以讲述要点部分，而你也将获得听众的注意力并发挥领导力作用。抓手的关键点有三个：1.抓住听众注意力2.与听众建立联结3.避免偏离主题可以通过，直呼名称、说关于他们的事情、讲他们曾经的观点、提出与他们的某次对话、询问他们的情况等方式来抓住听众的注意力。总之，与听众有关的事情，才能将听众的注意力转移到你这里。同时，为了能更好的与听众链接，我们需要讲听众感兴趣的事，找到与他们的共同点和共同利益，建立积极、正面、有建设性的对话，来建立与听众的链接。总之，通过找对方的兴趣点和彼此共同利益点，才能触及听众的内心，通过触及内心来建立更好的链接。最后对话中避免抵触和反抗，或者让对话时间过长，以及说些无关紧要的话题。即兴框架：以呼吁行动结束呼吁行动通常要求听众采取行动，一旦后续行动发生，你将实现你的领导力。（图：呼吁行动分解）即兴演讲的收尾特别重要，我们人能记忆的东西很少，对于一件不是特别重要的事情来说，我们只会记住开头和结尾。如果开头和结尾是非常愉悦的，即使中间过程比较枯燥乏味，在人们的心中都是一场还不错的演讲和对话。这里罗列下如何收尾的方法：1.将话语权交给对方2.要求做出最终决定3.介绍具体步骤4.鼓励他人5.传达最后通牒根据现场实际和即兴的内容来选择收尾会更好一些，特别是在结构体讲完后，应该给自己暂停一下，流一点时间来思考该用什么方式收尾。了解听众当我们了解听众时会让即兴演讲更成功。（图：如何了解听众）听众分析包括：1.事前分析：提前了解听众会让你意识到可能存在与你想法完全不同的人，通过事先分析听众可以知道我们会遇到哪些问题，该如何应对。听众们关心什么事，把自己的观点建立在他们的想法上，这样才能有一个更稳固的协作式讨论。对方背景（组织）文化是如何，文化冲突有哪些，建立在尊重互利的基础上，会让即兴更加舒适。2.演讲中调整：现在观众的注意力如何哪些观点有吸引力可以把听众的注意力拉回来哪些听众头脑反应比较迅速是关键决策者，可以去征求他的意见，让他主动发言。最后，在讲话结束后，要对自己的即兴演讲做一个复盘，这是我们提高演讲技能有效快速的方法。关于生活中的即兴谈话在生活中交谈时尽量找到自己谈话的目标，否则将会成为一场空前浪费时间的闲聊。你可以这样想，当人们转身离开时，你想让他们记住关于你的什么信息？只要带着这个问题去思考，你将会让每次即兴谈话都畅快淋漓。一位副总裁这样说：“我发现闲谈非常耗费精力，除非是有目的的聊天。如果毫无准备就交谈，我就会觉得自己迫不及待地想结束谈话。但是如果事先准备了，谈话就会变得很顺利。”优秀的管理者会问自己，“我想让他们从这次谈话中记住什么？”，或者“人们为什么和我做生意”。让我们一起为每一场即兴谈话成为更有效的沟通。",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485133&amp;idx=1&amp;sn=6e8acd0c1b8f3cbf6c048d4ba4120776&amp;chksm=fc2263cacb55eadcd1533d68ab7f226020292b3bc8ec4bd5684ae07daa0dd8f41b05936c6600&amp;token=353183005&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h2 id=\"背景\">背景</h2><p>不知不觉看完了6本关于演讲的主题，按推荐顺序排列分别是《高效演讲》、《演讲与口才》、《即兴演讲》、《关键对话》、《TED演讲的力量》、《说话的艺术》。</p><p>我希望自己能够对演讲有一个系统性的学习，于是自己在平常的生活和工作中做了很多实践和训练。</p><p>目标是，改善平常的工作、生活中表达的流畅和清晰度，能让人感觉到舒服，让人感觉有活力。</p><p>同时在公众演讲上，希望自己能够很好的呈现所思所想以及所知所学。</p><p>因此开启这个精彩演讲系列的总结文章，我将对这六本书（其实不止六本）的内容加上我的实践经验做一次全面的系统性的总结。</p><h2 id=\"概述\">概述：</h2><h3 id=\"1即兴演讲与普通演讲的区别\">1.即兴演讲与普通演讲的区别</h3><h3 id=\"2即兴演讲的框架\">2.即兴演讲的框架</h3><h3 id=\"3即兴演讲的练习方法\">3.即兴演讲的练习方法</h3><h2 id=\"内容\">内容：</h2><p>如果你仔细一些，就会发现我们生活当中会用到很多很多的机械演讲，很多人并不在意进行演讲认为进行演讲，只是脑袋里迸发出了一些火花，或者说自己总结的那些方法。那其实在我们平常的沟通沟通跟表达过程当中进行演讲，在我们沟通表达当中占据的位置非常重要。</p><p>（即兴演讲运用场景）</p><p>特别是作为领导人，作为一个想要做更多有效工作的人。更多的需要激情演讲来，让自己的沟通效率更高，让自己的工作效率更高，让自己的生活效率更高。</p><p>欣欣的我们会发现，在我们生活当中经常会有一些即兴演讲。讲的不好的情况让。让对话让对方让大家感觉到非常不舒服。</p><p>其中一些高调的领导者，会在即兴时刻跟着感觉走，结果让自己。悔恨终生一些管理者在会议上被点名发言却无语无伦次，舌头就像打了结一样，还有一些管理者一开口就滔滔不绝没完没了，最后连自己讲了什么都忘记了。另一些领导者呢，在回答问题时没有主题，东拉西扯，最后拼命解释说我的意思是这种体验非常非常的不好。</p><p>因此进行演讲，需要引起我们足够多的重视，这在我们平常沟通工作生活当中，有非常非常多的场景可以运用，并且它是我们。提高效率。让自己生活工作更美好的一个非常非常好的技巧。</p><h2 id=\"即兴演讲与普通演讲的区别\">即兴演讲与普通演讲的区别</h2><p>（普通演讲特点）</p><p>我们可以用几个星期甚至几个月的时间来准备我们的演讲稿，从计划、研究、大纲、讨论、草拟、完善的步骤来为即将到来的演讲准备演讲稿。这是一件非常有趣的事情，也非常值得去准备。</p><p>（即兴演讲特点）</p><p>只是平时的生活和工作当中，我们90%情况都没有任何准备，大部分人都会“临时抱佛脚”或“跟着感觉走”说两句，这让我们错失了很多关键时刻。</p><p>对于普通的有预期的演讲，我们可以提前花时间去准备去练习，而即兴演讲大部分情况都不在我们的预料范围内，难道即兴演讲就只能靠天赋吗？并不是，它也是有方法可寻，并且可以通过练习来加强和巩固的。</p><h3 id=\"实际上优秀的即兴演讲它的秘密就在于准备\">实际上，优秀的即兴演讲，它的秘密就在于准备。</h3><h3 id=\"也就说你必须为看起来像是很自然的即兴发挥而做充分的准备\">也就说，你必须为“看起来像是很自然的即兴发挥”而做充分的准备。</h3><p>（即兴演讲准备工作）</p><p>我们要为此准备的东西很多，包括选择合适的时间和地点，在什么样的场合说什么样的话，会让对方感觉更自然。与此同时，在讲话前需要快速整理思路，知道自己要说的内容，围绕自己的中心思想讲话。同时自己的讲话的主题和内容要有价值，这是能够让周围的人愿意倾听且被你吸引的关键。最后要意识到我们的“麦克风”始终是开着的，要保持这种麦克风始终开着的状态，不管在办公室内还是办公室外，都要得体的沟通，语言可以激发人也可以威胁人，说符合自己身份的话。</p><p>大量的练习让乔布斯可以在讲话时基本不用草稿。他在展示产品时，虽然也会小心遮住笔记不让观众看见，但他从来不会逐字逐句念出来。如果你什么都不准备就跟着感觉走，很容易让自己陷入尴尬的境地，到时候你只能胡乱说一些你不了解的东西。</p><p>（即兴内容知识分类图）</p><p>对于要说的主题人们总是期望你展示出科学、丰富、经验的知识内容。因此知识内容，通常分为三类：科学知识，讲话的内容有扎实的知识背景一般性知识，丰富的观点让你更有说服力经验性知识，讲述个人经历让讲话更有吸引力</p><p>在我们即兴讲话前，写下这些关键信息和支持性信息，将这些信息记在脑子里，这将构成你即兴演讲草稿的基础。如果所有即兴演讲都事先做好准备、构建扎实的知识基础，牢记关键信息，相信我们会体会到最棒的即兴演讲体验：“最棒的即兴演讲，是当我做足准备，熟知相关材料时，脱口而出的状况。”</p><p>（即兴演讲时的心态）</p><p>演讲的心态非常重要，是与听众连接的通道，也是我们保持真实自我和正念的好方法。</p><p>演讲心态，保持真实、保持专注、保持尊重非常重要，同时也是保持我们保持真实领导力的好方法。</p><p>我们一定要有当领导者的意愿，让自己始终处于领导位置，将每一次讲话和沟通都视为潜在的领导力时刻，为此做出自己的进行领导力即兴讲话。</p><p>真实领导力，让自己专注于当下的对话，真实有勇气的分享你的想法、价值观和信念，分享自己的感受、自己的故事和自己的脆弱。</p><p>成为真正的领导者需要挖掘自己内在，不断与同事、队友和朋友分享你的当下、想法、价值观、信念、感受和故事。</p><h3 id=\"通过保持自己的真实性激励鼓舞他人这让我们变得更加温暖同时也能让我们找到更多乐趣\">通过保持自己的真实性，激励鼓舞他人，这让我们变得更加温暖，同时也能让我们找到更多乐趣。</h3><h2 id=\"即兴演讲的框架\">即兴演讲的框架</h2><p>很多人会问“为什么要用框架？”，这会让我们感觉是把自己禁锢在一个笼子里，看上去有些死板。当然这也是我一开始接触框架的感受，但练习一段时间后我就改变了我的想法。</p><p>实际上，我们在即兴演讲中，如果没有可依的规则会感觉迷茫。特别是在练习即兴演讲时，没有规则没有方法没有可依的练习方式，很容易迷失在五花八门的“错觉”中。因此框架就起到了重要作用，它为长期技能的练习提供规则，为技能成长提供了依据。</p><h3 id=\"用模板去建立自己的即兴演讲框架是一种非常好又非常有效提高自己即兴演讲水平的方法\">用模板去建立自己的即兴演讲框架是一种非常好又非常有效提高自己即兴演讲水平的方法。</h3><p>框架让我们更好的总结完善自己的即兴技巧，通过模板（也有很多人称为模型）和框架，让我们有道可循的思考自己的即兴演讲该如何改进。</p><p>（即兴演讲框架图）</p><p>《即兴演讲》为我们介绍了一种即兴演讲的框架：抓手、要点、结构体、呼吁行动。</p><p>实际上即兴演讲有很多种框架，但都离不开上述这个结构，因此我认为从这个最通用最中心的框架出发来看即兴演讲会更好一些。</p><h3 id=\"注意即使有了即兴框架也并不代表我们就万事大吉了这是一个不断打磨和练习的过程通过框架来练习最终会做到将框架融会融入心中做到心中有框架口中无框架\">注意，即使有了即兴框架，也并不代表我们就万事大吉了，这是一个不断打磨和练习的过程。通过框架来练习，最终会做到将框架融会融入心中，做到心中有框架，口中无框架。</h3><p>如果我们可以无论事先还是在讲话现场，都用这个模板去写自己的讲话草稿，通过不断的练习，我们就能让即兴效果更好。</p><p>（即兴模板应用步骤与调整）</p><p>即使完全不允许我们打底草稿，我们也可以借助这个模板去讲话。</p><h3 id=\"这里有个关键点即在每讲完每个部分后暂停下来思考下一个部分的内容然后再讲\">这里有个关键点，即在每讲完每个部分后暂停下来，思考下一个部分的内容，然后再讲。</h3><h3 id=\"在思考抓手时暂停讲完抓手内容后暂停思考一下讲话的核心要点讲完要点后暂停思考结构体的内容讲完结构体后暂停思考呼吁行动部分最后讲呼吁行动部分\">在思考抓手时暂停；讲完抓手内容后暂停，思考一下讲话的核心要点；讲完要点后暂停，思考结构体的内容；讲完结构体后暂停，思考呼吁行动部分；最后讲呼吁行动部分。</h3><h3 id=\"简而言之在讲完每一部分后都要暂停以便思考下一部分内容但你暂停时你会看起来更自信而你讲话的脚本也会更好\">简而言之，在讲完每一部分后都要暂停，以便思考下一部分内容。但你暂停时，你会看起来更自信，而你讲话的脚本也会更好。</h3><h3 id=\"注意模板和模型在实际情况中需要我们灵活的去调整例如当你发现讲话的时间已经不允许我们继续完整的讲完所有部分时要即使的调整特别是当你发现对方表现焦虑不安时你就要马上精简模板可能只说要点和呼吁但无论什么情况下都必须包含要点\">注意，模板和模型在实际情况中需要我们灵活的去调整，例如，当你发现讲话的时间已经不允许我们继续完整的讲完所有部分时要即使的调整，特别是当你发现对方表现焦虑不安时，你就要马上精简模板，可能只说要点和呼吁，但无论什么情况下都必须包含要点。</h3><h2 id=\"即兴框架要点\">即兴框架：要点</h2><p>（即兴演讲框架-要点的关键点）</p><p>坦率的说，说话没有要点就等于在浪费大家的时间。</p><p>你会发现，当我们没有要点时，语音中会充满很多赘词，“你知道…”，“就是”，“那么”，“然后”，“是吧”等。</p><p>究其原因时语言背后的思路不清。所以，一定要确保你的讲话有核心要点。</p><p>乔布斯越成熟、自信，他就越能与周围实力强大、有想法的管理者自信地对话，而对方在和他争论时也感觉很舒适。</p><p>要点的关键是三个部分：</p><p>1.必须是你的观点</p><p>2.要点要有吸引力</p><p>3.要点必须积极正面</p><p>首先，确保要点是的观点，是承载你信念的一部分，只要这样你才能有信心，并强势、明确的凸显出你的观点，并提炼中心思想，一句话简洁表达你的观点。</p><p>其次，你的观点要有吸引力，这意味着你要了解什么会触动听众的内心，只有这样才能吸引听众的全部注意力，让你的即兴演讲效果发挥到极致。</p><p>最后，要点必须是积极正面的，这是打动整个会场的必备前提。</p><p>注意，你也可以在听众中先建立一种紧迫感，然后再转向更高层次的要点，但一定要确保最后以积极因素结尾。</p><p>通过练习，每次即兴演讲都要有要点，让要点自然的成为你演讲时的第二天性。当你讲话时，胡自然地想讲要点，这在与上级对话，或汇报时尤为重要，它们希望你说话清晰、切中要害，而不浪费他们的时间。</p><h2 id=\"即兴框架结构体\">即兴框架：结构体</h2><p>一个合理的结构体，可以让你的讲话举重若轻，它可以让你更清楚地传达要点。</p><p>（结构体组织模式）</p><p>在讲具体内容是，最好用结构体的组织方式去讲话，这样会让讲话更有条理，清晰的表达我们的观点，支撑我们提出的要点。</p><p>结构体组织模式：1.原因模式，罗列各种原因和理由来支撑我们提出的要点。2.方法模式，围绕提出的要点，我们可以罗列各种方法来支撑它。3.情况模式，通过描述当前的状况和对应的实施措施来支撑要点。4.时间模式，通过时间顺序来描述支撑要点的关键点。</p><p>注意，我们在说完要点后一定要暂停，花一点时间思考后，再选择恰当的结构体模式。</p><p>学习以上四种组织模式，构建讲话核心要点并加上标志词，如果你能做到这些，那么你的即兴演讲将非常有说服力。</p><h2 id=\"即兴框架抓手\">即兴框架：抓手</h2><p>我们必须思考如何讲话才能在争夺注意力中胜出，因为“获得整个会场”的注意力是很难的，甚至获得一个人的注意力也很难，如今社会有太多信息干扰我们的注意力，包括智能手机、电子邮件、主流话题、八卦信息等，所以我们更应该仔细思考这个部分。</p><p>也就是说只有抓住大家的注意力，才能让我们的演讲放到最大的效果。</p><p>(图：抓手关键点)</p><h3 id=\"把抓手部分看作是一种口头的握手会更好它让你与听众建立联结使听众想要跟随你一旦与听众联结你就可以讲述要点部分而你也将获得听众的注意力并发挥领导力作用\">把抓手部分看作是一种“口头的握手”会更好，它让你与听众建立联结，使听众想要跟随你。一旦与听众联结，你就可以讲述要点部分，而你也将获得听众的注意力并发挥领导力作用。</h3><p>抓手的关键点有三个：1.抓住听众注意力2.与听众建立联结3.避免偏离主题</p><p>可以通过，直呼名称、说关于他们的事情、讲他们曾经的观点、提出与他们的某次对话、询问他们的情况等方式来抓住听众的注意力。</p><h3 id=\"总之与听众有关的事情才能将听众的注意力转移到你这里\">总之，与听众有关的事情，才能将听众的注意力转移到你这里。</h3><p>同时，为了能更好的与听众链接，我们需要讲听众感兴趣的事，找到与他们的共同点和共同利益，建立积极、正面、有建设性的对话，来建立与听众的链接。</p><h3 id=\"总之通过找对方的兴趣点和彼此共同利益点才能触及听众的内心通过触及内心来建立更好的链接\">总之，通过找对方的兴趣点和彼此共同利益点，才能触及听众的内心，通过触及内心来建立更好的链接。</h3><p>最后对话中避免抵触和反抗，或者让对话时间过长，以及说些无关紧要的话题。</p><h2 id=\"即兴框架以呼吁行动结束\">即兴框架：以呼吁行动结束</h2><p>呼吁行动通常要求听众采取行动，一旦后续行动发生，你将实现你的领导力。</p><p>（图：呼吁行动分解）</p><p>即兴演讲的收尾特别重要，我们人能记忆的东西很少，对于一件不是特别重要的事情来说，我们只会记住开头和结尾。</p><p>如果开头和结尾是非常愉悦的，即使中间过程比较枯燥乏味，在人们的心中都是一场还不错的演讲和对话。</p><p>这里罗列下如何收尾的方法：</p><p>1.将话语权交给对方2.要求做出最终决定3.介绍具体步骤4.鼓励他人5.传达最后通牒</p><p>根据现场实际和即兴的内容来选择收尾会更好一些，特别是在结构体讲完后，应该给自己暂停一下，流一点时间来思考该用什么方式收尾。</p><h2 id=\"了解听众\">了解听众</h2><p>当我们了解听众时会让即兴演讲更成功。</p><p>（图：如何了解听众）</p><p>听众分析包括：</p><p>1.事前分析：</p><p>提前了解听众会让你意识到可能存在与你想法完全不同的人，通过事先分析听众可以知道我们会遇到哪些问题，该如何应对。</p><p>听众们关心什么事，把自己的观点建立在他们的想法上，这样才能有一个更稳固的协作式讨论。</p><p>对方背景（组织）文化是如何，文化冲突有哪些，建立在尊重互利的基础上，会让即兴更加舒适。</p><p>2.演讲中调整：</p><p>现在观众的注意力如何</p><p>哪些观点有吸引力可以把听众的注意力拉回来</p><p>哪些听众头脑反应比较迅速是关键决策者，可以去征求他的意见，让他主动发言。</p><h3 id=\"最后在讲话结束后要对自己的即兴演讲做一个复盘这是我们提高演讲技能有效快速的方法\">最后，在讲话结束后，要对自己的即兴演讲做一个复盘，这是我们提高演讲技能有效快速的方法。</h3><h2 id=\"关于生活中的即兴谈话\">关于生活中的即兴谈话</h2><p>在生活中交谈时尽量找到自己谈话的目标，否则将会成为一场空前浪费时间的闲聊。</p><p>你可以这样想，当人们转身离开时，你想让他们记住关于你的什么信息？</p><p>只要带着这个问题去思考，你将会让每次即兴谈话都畅快淋漓。</p><h3 id=\"一位副总裁这样说我发现闲谈非常耗费精力除非是有目的的聊天如果毫无准备就交谈我就会觉得自己迫不及待地想结束谈话但是如果事先准备了谈话就会变得很顺利\">一位副总裁这样说：“我发现闲谈非常耗费精力，除非是有目的的聊天。如果毫无准备就交谈，我就会觉得自己迫不及待地想结束谈话。但是如果事先准备了，谈话就会变得很顺利。”</h3><p>优秀的管理者会问自己，“我想让他们从这次谈话中记住什么？”，或者“人们为什么和我做生意”。</p><p>让我们一起为每一场即兴谈话成为更有效的沟通。</p>",
            "url": "http://www.luzexi.com/2022/01/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B052",
            
            
            
            
            
            "date_published": "2022-01-06T00:00:00+08:00",
            "date_modified": "2022-01-06T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2022/01/03/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A120",
            "title": "给女儿的信(二十) 观察自己的情绪",
            "summary": "女儿 教育 亲情",
            "content_text": "要点：用跟自己说说话和闭上眼睛数数的方式，观察自己的情绪，同时化解了自己的情绪结构：  遇到困难的时候心里很难受  当遇到枯燥乏味的工作时心里很苦闷  爸爸想解决这些困难，但就是提不起劲  于是爸爸闭上眼睛观察自己  爸爸观察自己的情绪是怎样的  是难受还是紧张  难受是怎么个难受法，是脑袋嗡嗡的吗，还是整个人紧绷的  紧张是怎样的表现，是肌肉很痛吗，还是腿和胳膊在抖动  细致的观察自己的在难受和紧张时的身体状况  慢慢发现自己的难受和紧张被化解了  当我发现，原来紧张和难受时，脑袋时这样的感觉，肌肉时这样在抖动  难受和紧张就慢慢消失了，神奇吗  原来难受和紧张只是我们想当然的感受，其根本原因是因为肌肉在收缩内容：Hello 秀恩，Hello Anne。爸爸好想你们爸爸喜欢你们啊，爱你们哟。爸爸在深圳又过了2周多的时间了，这里的天气比以往更冷一些。爸爸给你们讲一讲爸爸最近的状况好不好？最近爸爸遇到一些困难，工作上的和学习上的困难都有。爸爸心里感觉到很难受。爸爸发现每次当遇到枯燥的乏味的工作时，心里就很郁闷。除了工作呢，有时候自己想要学习，但是又提不起劲的时候，心里也很难受。有时候爸爸觉得自己心里很浮躁，心情很急躁，就是看不进书，写不进东西，心里安静不下来。所以爸爸想着该怎么办呢？怎么解决这个心里难受情绪混乱的状态呢？爸爸想了两个办法，第1个办法是跟自己说说话，爸爸每天抽15分钟到20分钟的时间来跟自己说说话，每天跟自己说说今天我遇到了什么困难，我的感受怎样。然后跟自己说说，我应该怎么去解决这个困难，跟自己说说我应该怎样去调整自己的情绪。你知道吗？爸爸跟自己说着说着，自己的情绪就真的慢慢好起来了，不那么难受，也不那么急躁了，也不紧张了。所以爸爸觉得跟自己说说话，这个办法非常棒。跟自己说说话，不但练习了口头的表达能力和沟通能力，并且还化解了自己的情绪，爸爸觉得这个方法非常非常棒。所以呢，爸爸每天都在坚持跟自己说说话，像跟秀恩聊天一样跟自己说说话。第2个办法是。当爸爸感觉到紧张、难受、急躁的时候，就坐下来闭上眼睛去数数，数数的时候，我会观察自己。观察自己的哪里难受，哪里紧张，是哪块肌肉很难受，是紧张还是疼痛？细致的观察自己。爸爸就这样去观察自己的身体，在这种紧张和难受的状态下，肌肉是怎么收缩和抖动的？慢慢地观察着观察着，爸爸发现自己的情绪开始化解了，爸爸发现自己没有这么难受和紧张了，原来只要爸爸闭上眼睛专注地观察他们，观察肌肉的疼痛和收缩，观察脑袋的紧绷，观察整个人的状态的时候，难受和紧张就慢慢的消失了。这种感觉太棒了。就感觉自己重新平静了下来，无论是生气还是难受，情绪都被化解了。爸发现用这两种调节情绪的办法非常棒。爸爸现在常用这种方式去化解自己的情绪，那些痛苦啊、难受啊、紧张啊、焦虑啊、急躁啊，都可以通过这样的方式去把它化解。太棒了，爸爸每天都要坚持跟自己说说，观察自己的状态和身体的变化，化解掉自己的情绪。今天的写信就到这里喽，宝宝们喜欢你们，爸爸爱你们哟。",
            "content_html": "<h2 id=\"要点\">要点：</h2><p>用跟自己说说话和闭上眼睛数数的方式，观察自己的情绪，同时化解了自己的情绪</p><h2 id=\"结构\">结构：</h2><ol>  <li>遇到困难的时候心里很难受</li>  <li>当遇到枯燥乏味的工作时心里很苦闷</li>  <li>爸爸想解决这些困难，但就是提不起劲</li>  <li>于是爸爸闭上眼睛观察自己</li>  <li>爸爸观察自己的情绪是怎样的</li>  <li>是难受还是紧张</li>  <li>难受是怎么个难受法，是脑袋嗡嗡的吗，还是整个人紧绷的</li>  <li>紧张是怎样的表现，是肌肉很痛吗，还是腿和胳膊在抖动</li>  <li>细致的观察自己的在难受和紧张时的身体状况</li>  <li>慢慢发现自己的难受和紧张被化解了</li>  <li>当我发现，原来紧张和难受时，脑袋时这样的感觉，肌肉时这样在抖动</li>  <li>难受和紧张就慢慢消失了，神奇吗</li>  <li>原来难受和紧张只是我们想当然的感受，其根本原因是因为肌肉在收缩</li></ol><h2 id=\"内容\">内容：</h2><p>Hello 秀恩，Hello Anne。爸爸好想你们爸爸喜欢你们啊，爱你们哟。</p><p>爸爸在深圳又过了2周多的时间了，这里的天气比以往更冷一些。</p><p>爸爸给你们讲一讲爸爸最近的状况好不好？</p><p>最近爸爸遇到一些困难，工作上的和学习上的困难都有。爸爸心里感觉到很难受。</p><p>爸爸发现每次当遇到枯燥的乏味的工作时，心里就很郁闷。除了工作呢，有时候自己想要学习，但是又提不起劲的时候，心里也很难受。</p><p>有时候爸爸觉得自己心里很浮躁，心情很急躁，就是看不进书，写不进东西，心里安静不下来。所以爸爸想着该怎么办呢？怎么解决这个心里难受情绪混乱的状态呢？</p><p>爸爸想了两个办法，第1个办法是跟自己说说话，爸爸每天抽15分钟到20分钟的时间来跟自己说说话，每天跟自己说说今天我遇到了什么困难，我的感受怎样。然后跟自己说说，我应该怎么去解决这个困难，跟自己说说我应该怎样去调整自己的情绪。</p><p>你知道吗？爸爸跟自己说着说着，自己的情绪就真的慢慢好起来了，不那么难受，也不那么急躁了，也不紧张了。所以爸爸觉得跟自己说说话，这个办法非常棒。</p><p>跟自己说说话，不但练习了口头的表达能力和沟通能力，并且还化解了自己的情绪，爸爸觉得这个方法非常非常棒。所以呢，爸爸每天都在坚持跟自己说说话，像跟秀恩聊天一样跟自己说说话。</p><p>第2个办法是。当爸爸感觉到紧张、难受、急躁的时候，就坐下来闭上眼睛去数数，数数的时候，我会观察自己。</p><p>观察自己的哪里难受，哪里紧张，是哪块肌肉很难受，是紧张还是疼痛？细致的观察自己。</p><p>爸爸就这样去观察自己的身体，在这种紧张和难受的状态下，肌肉是怎么收缩和抖动的？</p><p>慢慢地观察着观察着，爸爸发现自己的情绪开始化解了，爸爸发现自己没有这么难受和紧张了，原来只要爸爸闭上眼睛专注地观察他们，观察肌肉的疼痛和收缩，观察脑袋的紧绷，观察整个人的状态的时候，难受和紧张就慢慢的消失了。这种感觉太棒了。就感觉自己重新平静了下来，无论是生气还是难受，情绪都被化解了。</p><p>爸发现用这两种调节情绪的办法非常棒。</p><p>爸爸现在常用这种方式去化解自己的情绪，那些痛苦啊、难受啊、紧张啊、焦虑啊、急躁啊，都可以通过这样的方式去把它化解。</p><p>太棒了，爸爸每天都要坚持跟自己说说，观察自己的状态和身体的变化，化解掉自己的情绪。</p><p>今天的写信就到这里喽，宝宝们喜欢你们，爸爸爱你们哟。</p>",
            "url": "http://www.luzexi.com/2022/01/03/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A120",
            
            
            
            
            
            "date_published": "2022-01-03T00:00:00+08:00",
            "date_modified": "2022-01-03T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/12/29/%E6%96%B0%E4%B9%A6%E5%8F%91%E5%94%AE",
            "title": "新书发售《Unity3D高级编程-主程手记》",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布微信公众号新书发售了，感恩朋友们的厚爱。这么多年读书与写作给我最大的体会是，静下心来保持专注，是最有效率的。希望自己继续保持这份专注，并用最真诚的方式对待朋友们。本书共10章，每章都是一个独立的知识领域，读者可以按照章节顺序阅读本书，也可以根据喜好挑选自己感兴趣的章节学习。第1章讲了架构的意义、架构的原理以及如何实现架构。第2章对C#技术的基础知识做了讲解。第3章针对客户端中的表格数据、程序的协作与应用进行讲解。第4章讲解了用户界面（UI）的工作原理与优化方法。第5章针对3D模型的原理、动画的原理以及两者的优化做了详细的讲解。第6章讲解的是网络层的业务架构与底层原理。第7章针对各类AI做了详细的讲解。第8章主要讲解场景构建与优化、地图构建以及寻路算法优化的相关知识。第9章讲解了图形数学、图形学常用算法、渲染管线的相关知识。第10章针对客户端各类渲染技术的渲染原理做了详细的解剖。此书非常适合那些上进、积极、热爱技术的伙伴们。如果你想更上一层楼，想了解主程需要做什么，主程需要哪方面的技术深度，就来看看这本书。整本书字里行间都透露着对游戏开发的深度理解，以及对主程工作的感悟。2021.12.28，预售开始了，后面的日子里会陆续上架各大平台，包括新华书店、机械工业出版社平台、以及当当网。感恩遇见",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485108&amp;idx=1&amp;sn=b949ce0d6f031a2108586940aa0eadfa&amp;chksm=fc2263b3cb55eaa5b5c3fe41399d47d7f1e0f66ce5b130c0e31648be035e9535f5c6c3d5ed39&amp;token=330432434&amp;lang=zh_CN#rd\">已发布微信公众号</a></p><p><img src=\"/assets/book/fengmian.jpg\" alt=\"封面\" /></p><h3 id=\"新书发售了感恩朋友们的厚爱\">新书发售了，感恩朋友们的厚爱。</h3><p>这么多年读书与写作给我最大的体会是，</p><p>静下心来保持专注，是最有效率的。</p><p>希望自己继续保持这份专注，并用最真诚的方式对待朋友们。</p><h3 id=\"本书共10章每章都是一个独立的知识领域读者可以按照章节顺序阅读本书也可以根据喜好挑选自己感兴趣的章节学习\">本书共10章，每章都是一个独立的知识领域，读者可以按照章节顺序阅读本书，也可以根据喜好挑选自己感兴趣的章节学习。</h3><p>第1章讲了架构的意义、架构的原理以及如何实现架构。</p><p>第2章对C#技术的基础知识做了讲解。</p><p>第3章针对客户端中的表格数据、程序的协作与应用进行讲解。</p><p>第4章讲解了用户界面（UI）的工作原理与优化方法。</p><p>第5章针对3D模型的原理、动画的原理以及两者的优化做了详细的讲解。</p><p>第6章讲解的是网络层的业务架构与底层原理。</p><p>第7章针对各类AI做了详细的讲解。</p><p>第8章主要讲解场景构建与优化、地图构建以及寻路算法优化的相关知识。</p><p>第9章讲解了图形数学、图形学常用算法、渲染管线的相关知识。</p><p>第10章针对客户端各类渲染技术的渲染原理做了详细的解剖。</p><h3 id=\"此书非常适合那些上进积极热爱技术的伙伴们\">此书非常适合那些上进、积极、热爱技术的伙伴们。</h3><p>如果你想更上一层楼，想了解主程需要做什么，主程需要哪方面的技术深度，就来看看这本书。</p><p>整本书字里行间都透露着对游戏开发的深度理解，以及对主程工作的感悟。</p><h3 id=\"20211228预售开始了后面的日子里会陆续上架各大平台包括新华书店机械工业出版社平台以及当当网\">2021.12.28，预售开始了，后面的日子里会陆续上架各大平台，包括新华书店、机械工业出版社平台、以及当当网。</h3><h2 id=\"感恩遇见\">感恩遇见</h2><p><img src=\"/assets/book/shudian1.jpg\" alt=\"淘宝预售\" /></p><p><img src=\"/assets/book/shudian3.jpg\" alt=\"京东预售\" /></p><p><img src=\"/assets/book/shudian2.jpg\" alt=\"淘宝搜索\" /></p>",
            "url": "http://www.luzexi.com/2021/12/29/%E6%96%B0%E4%B9%A6%E5%8F%91%E5%94%AE",
            
            
            
            "tags": ["书籍著作","前端技术","Unity3D"],
            
            "date_published": "2021-12-29T00:00:00+08:00",
            "date_modified": "2021-12-29T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/12/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B051",
            "title": "读书笔记(五十一) 《游戏引擎架构》#4 低阶渲染器（4）",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》后对引擎架构的理解又深入了些。近段时间有对引擎剖析的想法，正好借这书本对游戏引擎架构做一个完整分析。此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块，最后通过实践简单引擎开发来完成对引擎知识的掌握。游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。同时《游戏引擎架构》中部分知识太过陈旧的部分，会重新深挖后总结出自己的观点。概述：本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：1.时间库2.自定义容器库3.字符串散列库4.内存管理框架5.RTTI与反射模块6.图形计算库7.资产管理模块8.低阶渲染器9.剔除与合批模块10.动画模块11.物理模块12.UI底层框架13.性能剖析器的核心部分14.脚本系统15.视觉效果模块本篇内容为列表中的第8个部分的第1节。正文：简单回顾下前文前文我们聊了下显卡在计算机硬件主板中的位置与结构，知道了CPU、GPU的通信介质，并简单介绍了手机上的主板结构。本篇开头对上一篇做一些内容补充，PC和手机的不同硬件组织，以及CPU与其他芯片的通信过程。下面我们开始这篇内容本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。目录：  主板结构中的显卡  GPU功能发展史  GPU与CPU的差异  GPU硬件特点  图形驱动程序架构  引擎低阶渲染架构内容结构：  CPU硬件结构  GPU硬件结构  GPU手机管线与PC管线的差异接着上篇的内容。前面说了CPU、GPU的硬件结构，CPU的构造和GPU的构造，下面我们来聊聊GPU是如何工作的，以及GPU的管线在手机端和PC端的差异。NVIDIA基于Fermi管线的架构关于GPU的逻辑管线，这篇Nvidia这篇文章《Life of a triangle - NVIDIA’s logical pipeline》说的很清楚。（NVIDIA的整体架构图）下面我以此为标准进行翻译并重新剖析。为了简单起见，省略了几个细节，假设 drawcall 引用了一些已经充满数据并存在于 GPU DRAM 中的索引和顶点缓冲区，并且仅使用顶点和像素着色器（GL：片段着色器）。（从图形API调用到图元处理过程图）1.引擎或业务程序调用图形 API（DX 或 GL）中的绘图函数，接着驱动程序会被调用，驱动程序会进行一些验证以检查参数是否“合法”，再将指令写入到GPU可读写的缓冲队列中。在这个地方 CPU 方面可能会出现很多瓶颈，这也是为什么程序员要好好使用 API 以利用当今 GPU 的强大功能的技术很重要的原因。（绘制接口调用图）2.经过一段时间渲染，画面“刷新”被调用，驱动程序在缓冲区中已经缓冲了足够多的工作命令，接着将其发送给 GPU 进行处理（操作系统会参与）。最后 GPU 的主机接口接收命令并交给GPU前端的处理。（绘制队列与刷新图）3.接着图元分配器（Primitive Distributor）开始分配工作。为了批量处理索引和三角形，将数据发送给多个图形处理集群（GPC）并行处理。（SM整体结构图）4.在 GPC 中，每个 SM 的 Poly Morph 引擎负责从三角形索引中获取顶点数据(Vertex Fetch)。5.在获取数据后，SM中每32个线程为一捆线程束（Warp），它们被调度去处理这些顶点工作。 线程束（Warp）是典型的单指令多线程（SIMT，SIMD单指令多数据的升级）的实现，也就是32个线程同时执行的指令是一模一样的，只是线程数据不一样，这样的好处就是一个Warp只需要一套逻辑对指令进行解码和执行就可以了，芯片可以做的更小更快。（线程束与线程束调度器图）6.SM的线程束（Warp）调度器会按照顺序分发指令给整个线程束（Warp），单个线程束（Warp）中的线程会锁步(lock-step)执行各自的指令。线程束（Warp）会使用SIMT的方式来做分支预测，每个线程执行的分支会不同，当线程遇到到错误判断的执行情况会被遮蔽(be masked out)。（单个GPU线程与存储设备的关系图）被遮蔽的原因是SIMT执行中错误预测，例如当前的指令是if(true)的分支，但是当前线程的数据的条件是false，或者循环的次数不一样（比如for循环次数n不是常量，或被break提前终止了但是别的还在走），因此在Shader中的分支会显著增加时间消耗，在一个线程束（Warp）中的分支除非32个线程都走到同一个里面，否则相当于所有的分支都走了一遍，线程不能独立执行指令而是以线程束（Warp）为单位，而这些线程束中的线程之间才是相互独立的。（SIMT线程束做分支预测图）7、线程束（Warp）中的指令可以被一次完成，也可能经过多次调度，例如通常SM中的LD/ST(加载存取)单元数量明显少于基础数学操作单元。8、由于某些指令比其他指令需要更长的时间才能完成，特别是内存加载，线程束（Warp）调度器可能会简单地切换到另一个没有内存等待的线程束（Warp），这是GPU如何克服内存读取延迟的关键，其操作为简单地切换活动线程组。为了使这种切换更快，调度器管理的所有线程束（Warp）在寄存器列阵（Register File）中都有自己的寄存器。这里就会有个矛盾产生，Shader需要的寄存器越多，给线程束（Warp）留下的空间就越少，于是就会导致能用的线程束（Warp）就越少。此时如果碰到指令在内存获取数据等待就只会等待，而没有其他可以运行的线程束（Warp）可以切换。（线程与寄存器列阵关系图）（线程束调度器调度线程图）9、一旦线程束（Warp）完成了顶点着色器（vertex-shader）的所有指令，运算结果会被Viewport Transform模块处理，三角形会被裁剪然后准备光栅化，此时GPU会使用L1和L2缓存来进行顶点着色起（vertex-shader）和片元着色起（pixel-shader）的数据通信。（管线中节点、数据、存储器的关系图）10、接下来这些三角形将被分割，通过 Work Distribution Crossbar 将三角形再分配给多个GPC，三角形的范围决定着它将被分配到哪个光栅引擎(raster engines)，每个光栅引擎（raster engines）覆盖了多个屏幕上的图块（tile），这等于把三角形的渲染分配到多个图块（tile）上面。也就是说在像素阶段前就把三角形划分成了方块格式范围，三角形处理分成许多较小的工作。（三角形被拆分成多个块派发到多个光栅引擎图）（图块拆分任务派发图）11、SM上的属性安装器（Attribute Setup）保证了从顶点着色器（vertex-shader）生成的数据，经过插值后，在片元着色器（pixel-shade）上是可读的。12、GPC上的光栅引擎(raster engines)处理它接收到的三角形，并为它负责的那些部分生成像素信息（同时会处理裁剪Clipping、背面剔除和Early-Z剔除）。13、再次做批量处理，32个像素线程被分成一组（或者说8个2x2的像素块），这是在像素着色器上面的最小工作单元（2x2 四边形允许我们计算诸如纹理 mip 贴图过滤之类的导数–四边形内纹理坐标的大变化会导致更高的 mip）。在这个像素线程内，如果没有被任何三角形覆盖就会被剔除。SM中的线程束（Warp）调度器会管理像素着色器的任务。（2x2像素组传入到线程束处理像素着色器的图）14、接下来是同样的线程束调度策略，和顶点着色器（vertex-shader）中的逻辑步骤完全一样，但是变成了在像素着色器线程中执行。 由于不耗费任何性能从2x2四边形中获取一个像素，这使得锁步执行非常便利，于是所有的线程可以保证指令可以在同一点同步执行。（线程束锁步执行图）15、最后一步，现在像素着色器已经完成了颜色的计算和深度值的计算。在这个点上，我们必须考虑三角形的调用API顺序，然后才将数据移交给ROP(render output unit，渲染输出单元)，一个ROP内部有很多ROP单元，在ROP单元中处理深度测试和帧缓冲（framebuffer）的混合等，深度和颜色的设置必须是原子操作，否则两个不同的三角形在同一个像素点就会有冲突和错误。NVIDIA 通常应用内存压缩，以减少内存带宽要求，从而增加“有效”带宽。（像素着色器后的像素处理过程图）以上这些信息有助于我们理解 GPU 中的一些工作和数据流，还可以帮助我们理解CPU与GPU之间的交互。总结CPU和GPU的交互GPU是设备，设备都有驱动，CPU可以直接执行二进制指令集，对于GPU设备，图形接口有opengl，directx标准及库封装，计算有cuda和opencl封装。程序代码调用这些图形或计算库，这些库调用驱动，驱动再来对接操作GPU设备，CPU与GPU直接的通信是遵循总线和内存的规则。原则上CPU、内存外的设备都属于IO设备，通过总线连上来，它们必须遵守IO总线规范，如显卡就走pcie总线，这里还有ionmu，统一内存等，来共享资源，缩短路径，提升效率等。这里专门说下驱动，计算机有专门的程序接口指定一个计算任务到GPU上，这个接口程序就是驱动程序。CPU给GPU下发任务时通过调用驱动程序，不同GPU厂商实现自己的驱动，并且提供了各种的编程接口。图形计算上实现了OpenGL标准接口规范的图形库，它会调用各厂商的驱动，用户可以通过GLSL编写计算任务进行通用计算。后来的CUDA编程模型专门推出用于编写通用计算任务的接口，于是OpenGL就专门用于图形渲染了。而CUDA则是通过kenel函数来编写计算任务，通过cudaLaunch接口来下发任务。（从图形库到驱动到GPU指令队列的图）从硬件角度看：（从硬件角度看指令和数据处理流程图）1.GPU设备的配置空间物理地址映射到虚拟地址，可以被程序直接访问；同时建立任务队列缓冲，声明中断等等；2.CPU在进程内准备数据和缓冲，基于虚拟地址VA、VM将其转换为显存的物理地址IPA。驱动程序获取任务，再将任务信息填充至任务队列内。3.根据虚拟内存绑定的地址信息，将任务队列的指针更新至GPU设备侧，这个端口称为doorbell寄存器；4.设备接收到doorbell操作，会触发中断，再读取主存中的任务队列，包括队列内的信息和其指向的任务数据，GPU设备侧读取该数据。5.完成后，再将数据发送给CPU侧。一般来说，GPU设备侧发送至CPU的读写请求使用的是虚拟地址，由CPU的IOMMU或SMMU转换为物理地址。GPU手机管线与PC管线的差异为什么要了解手机与PC管线的差异？PC的能耗和发热比手机端可以更大一些，因此PC与手机在硬件架构上有天然的不同，进而使得它们在GPU管线上也有很大的差异，这使得我们在优化手机端时必须了解这种差异再做针对性的做优化。TBDR(Tile-Base-Deffered-Rendering)是现代移动端GPU的设计架构，它同传统PC上IR（Immediate-Rendering）架构的GPU在硬件设计上有很大的差别。为什么呢？因为功耗是Mobile设备设计的第一考虑因素，而带宽是功耗的第一杀手。我们来看PC的GPU管线，即传统的IR（Immediate-Rendering）模式：（IMR管线图：源自网络）IMR（Immediate Mode Rendering）模式中，GPU直接在主存或显存上读写深度缓存（Depth Buffer）和帧缓存（Frame Buffer），这导致带宽消耗很大，如果在手机上耗电和发热都无法承受。手机使用统一内存架构，CPU和GPU都通过总线来访问主存。GPU需要获取三角形数据（Geometry Data）、贴图数据（Texture Data）以及帧缓存（Frame Buffer），它们都在主存中。如果GPU直接从主存频繁地访问这些数据，就会导致带宽消耗大，成为性能瓶颈。TBR（Tile-Based-Rendering）管线基于以上所述原因，手机GPU使用自己的缓存区（SRAM），例如On-Chip深度缓存（On-Chip Depth Buffer）和On-Chip颜色缓存（On-Chip Color Buffer），它们与存取主存相比，速度更快，功耗更低。但它们的存储空间很小。（SRAM不需要充电来保持存储记忆，因此SRAM的读写基本不耗电，缺点是价格昂贵）如果手机直接读写帧缓存（Frame Buffer）就相当于让一辆火车在你家和公司之间来回奔跑，非常耗电。于是手机端想要拆分绘制内容，每次只绘制一小部分，再把所有绘制完成的部分拼起来。把帧缓存（Frame Buffer）拆分成很多个小块，使得每个小块可以被GPU附近的SRAM容纳，块的多少取决于GPU硬件的SRAM大小。这样GPU就可以分批的一块块的在SRAM上读写帧缓存（Frame Buffer），一整块都读写完毕后，再整体转移回主存上。这种模式就叫做TBR（Tile-Based-Rendering），整体管线如下图：（TBR管线图：源自网络）屏幕分块后的大小一般为16x16或32x32像素 ，在几何阶段之后再执行分块(Tiling)，接着将各个块（Tile）逐个光栅化，最后写入帧缓存中（Frame Buffer）中 。这里有一些细节要注意，TBR在接受每个指令（CommandBuffer）时并不立即绘制，而是先对这些数据做顶点处理，把顶点处理的结果暂时保存在主存上，等到非得刷新整个帧缓存时，才真正的用这批数据做光栅化。因此，TBR的管线实际可以认为被切分成两部分，前半部分为顶点数据部分，后半部分为片元数据部分：（TBR把管线切分为光栅化前和光栅化后）顶点数据先被处理并存储在Frame Data中，等到必须刷新时（例如帧缓存置换，调用glflush，调用glfinish，调用glreadpixels读取帧缓存像素时，调用glcopytexiamge拷贝贴图时，调用glbitframebuffer获取帧缓存时，调用queryingocclusion，解绑帧缓存时等等）才被集中的拿去处理光栅化。那么为什么PC不使用TBR呢？实际上直接对主存或显存（这里也有多级缓存）进行整块数据的读写速度是最快的，而TBR需要一块块的绘制，然后再回拷给主存。可以简单的认为TBR牺牲了执行效率，换来了相对更难解决的带宽功耗。如果哪一天手机上解决了带宽的功耗问题，或者说SRAM足够大了，可能就没有TBR了。TBDR（Tile-based deferred rendering）管线TBR会把顶点数据处理完毕后存储在Frame Data中，那么就会有很多厂商针对Frame Data做优化。TBDR整体的管线图如下：（TBDR管线图：源自网络）我们看到相比TBR，TBDR在光栅化（Raster）后多了一个HSR（Hidden Surface Removal）处理，这部分处理主要剔除无需绘制的元素，减少重绘（Overdraw）数量（高通通过优化划分块（Tile）之后执行顶点着色器（Vertex Shader）之前的节点来达到此目的，称为LRZ）。例如提前对不透明像素做深度测试并剔除，剔除被模板裁剪掉的像素等等，总之它们不会进入到像素着色器阶段（Pixel Shader）。因此在TBDR上，不透明物体的排序没有太大意义，Early-Z这种策略也不存在IOS上。这些GPU硬件巧妙的利用TBR的Frame Data队列实现了一种延迟渲染，尽可能只渲染那些会最终影响帧缓存（Frame Buffer）的像素。TBDR和软件上的延迟渲染相比有什么区别呢？软件层面的延迟渲染与TBDR不同。软件层面的延迟渲染是针对一个Drawcall，对于从后到前的不透明物体绘制是每次都要绘制的，而硬件层面的延迟渲染，处理的是一整批Drawcall，剔除这一整批Drawcall中不会绘制的像素最后再渲染。可以说现在大部分的移动端的GPU都使用TBDR架构。参考资料：《How Shader Cores Work》https://engineering.purdue.edu/~smidkiff/KKU/files/GPUIntro.pdf《CPU体系结构》https://my.oschina.net/fileoptions/blog/1633021《深入理解CPU的分支预测(Branch Prediction)模型》https://zhuanlan.zhihu.com/p/22469702《分析Unity在移动设备的GPU内存机制（iOS篇）》https://www.jianshu.com/p/68b41a8d0b37《PC与Mobile硬件架构对比》https://www.cnblogs.com/kekec/p/14487050.html《针对移动端TBDR架构GPU特性的渲染优化》https://gameinstitute.qq.com/community/detail/123220《A look at the PowerVR graphics architecture: Tile-based rendering》https://www.imaginationtech.com/blog/a-look-at-the-powervr-graphics-architecture-tile-based-rendering/《A look at the PowerVR graphics architecture: Deferred rendering》https://www.imaginationtech.com/blog/the-dr-in-tbdr-deferred-rendering-in-rogue/《深入GPU硬件架构及运行机制》https://www.cnblogs.com/timlly/p/11471507.html《深入浅出计算机组成原理》https://time.geekbang.org/column/article/105401?code=7VZ-Md9oM7vSBSE6JyOgcoQhDWTOd-bz5CY8xqGx234%3D《Nvidia Geforce RTX-series is born》https://www.fudzilla.com/reviews/47224-nvidia-geforce-rtx-series-is-born?start=2《渲染管线与GPU（Shading前置知识）》https://zhuanlan.zhihu.com/p/336999443《剖析虚幻渲染体系（12）- 移动端专题Part 1（UE移动端渲染分析）》https://www.cnblogs.com/timlly/p/15511402.html《tpc-texture-processing-cluster》https://gputoaster.wordpress.com/2010/12/11/tpc-texture-processing-cluster/《Life of a triangle - NVIDIA’s logical pipeline》https://developer.nvidia.com/content/life-triangle-nvidias-logical-pipeline《Rasterisation wiki》https://en.wikipedia.org/wiki/Rasterisation《PolyMorph engine and Data Caches by Hilbert Hagedoorn》https://www.guru3d.com/articles-pages/nvidia-gf100-(fermi)-technology-preview,3.html《NVIDIA GPU的一些解析》https://zhuanlan.zhihu.com/p/258196004《tensor-core-performance-the-ultimate-guide》https://developer.download.nvidia.cn/video/gputechconf/gtc/2019/presentation/s9926-tensor-core-performance-the-ultimate-guide.pdf《Understanding the Understanding the graphics pipeline》https://www.seas.upenn.edu/~cis565/LECTURES/Lecture2%20New.pdf已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485096&amp;idx=1&amp;sn=c027b6af4677515ba1e5950aac8ba68d&amp;chksm=fc2263afcb55eab9204898b39fb77ee04f5767ac450507b6192a5c6d5612a45b6d29b1bcee16&amp;token=853743270&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》后对引擎架构的理解又深入了些。</p><p>近段时间有对引擎剖析的想法，正好借这书本对游戏引擎架构做一个完整分析。</p><p>此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。</p><p>借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块，最后通过实践简单引擎开发来完成对引擎知识的掌握。</p><p>游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。</p><p>同时《游戏引擎架构》中部分知识太过陈旧的部分，会重新深挖后总结出自己的观点。</p><h1 id=\"概述\">概述：</h1><p>本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：</p><p>1.时间库2.自定义容器库3.字符串散列库4.内存管理框架5.RTTI与反射模块6.图形计算库7.资产管理模块8.低阶渲染器9.剔除与合批模块10.动画模块11.物理模块12.UI底层框架13.性能剖析器的核心部分14.脚本系统15.视觉效果模块</p><p>本篇内容为列表中的第8个部分的第1节。</p><h1 id=\"正文\">正文：</h1><p>简单回顾下前文</p><p>前文我们聊了下显卡在计算机硬件主板中的位置与结构，知道了CPU、GPU的通信介质，并简单介绍了手机上的主板结构。本篇开头对上一篇做一些内容补充，PC和手机的不同硬件组织，以及CPU与其他芯片的通信过程。</p><p>下面我们开始这篇内容</p><p>本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。</p><p>目录：</p><ul>  <li>主板结构中的显卡</li>  <li>GPU功能发展史</li>  <li>GPU与CPU的差异</li>  <li>GPU硬件特点</li>  <li>图形驱动程序架构</li>  <li>引擎低阶渲染架构</li></ul><p>内容结构：</p><ul>  <li>CPU硬件结构</li>  <li>GPU硬件结构</li>  <li>GPU手机管线与PC管线的差异</li></ul><p>接着上篇的内容。前面说了CPU、GPU的硬件结构，CPU的构造和GPU的构造，下面我们来聊聊GPU是如何工作的，以及GPU的管线在手机端和PC端的差异。</p><h2 id=\"nvidia基于fermi管线的架构\">NVIDIA基于Fermi管线的架构</h2><p>关于GPU的逻辑管线，这篇Nvidia这篇文章《Life of a triangle - NVIDIA’s logical pipeline》说的很清楚。</p><p>（NVIDIA的整体架构图）</p><p>下面我以此为标准进行翻译并重新剖析。</p><p>为了简单起见，省略了几个细节，假设 drawcall 引用了一些已经充满数据并存在于 GPU DRAM 中的索引和顶点缓冲区，并且仅使用顶点和像素着色器（GL：片段着色器）。</p><p>（从图形API调用到图元处理过程图）</p><p>1.引擎或业务程序调用图形 API（DX 或 GL）中的绘图函数，接着驱动程序会被调用，驱动程序会进行一些验证以检查参数是否“合法”，再将指令写入到GPU可读写的缓冲队列中。在这个地方 CPU 方面可能会出现很多瓶颈，这也是为什么程序员要好好使用 API 以利用当今 GPU 的强大功能的技术很重要的原因。</p><p>（绘制接口调用图）</p><p>2.经过一段时间渲染，画面“刷新”被调用，驱动程序在缓冲区中已经缓冲了足够多的工作命令，接着将其发送给 GPU 进行处理（操作系统会参与）。最后 GPU 的主机接口接收命令并交给GPU前端的处理。</p><p>（绘制队列与刷新图）</p><p>3.接着图元分配器（Primitive Distributor）开始分配工作。为了批量处理索引和三角形，将数据发送给多个图形处理集群（GPC）并行处理。</p><p>（SM整体结构图）</p><p>4.在 GPC 中，每个 SM 的 Poly Morph 引擎负责从三角形索引中获取顶点数据(Vertex Fetch)。</p><p>5.在获取数据后，SM中每32个线程为一捆线程束（Warp），它们被调度去处理这些顶点工作。 线程束（Warp）是典型的单指令多线程（SIMT，SIMD单指令多数据的升级）的实现，也就是32个线程同时执行的指令是一模一样的，只是线程数据不一样，这样的好处就是一个Warp只需要一套逻辑对指令进行解码和执行就可以了，芯片可以做的更小更快。</p><p>（线程束与线程束调度器图）</p><p>6.SM的线程束（Warp）调度器会按照顺序分发指令给整个线程束（Warp），单个线程束（Warp）中的线程会锁步(lock-step)执行各自的指令。线程束（Warp）会使用SIMT的方式来做分支预测，每个线程执行的分支会不同，当线程遇到到错误判断的执行情况会被遮蔽(be masked out)。</p><p>（单个GPU线程与存储设备的关系图）</p><p>被遮蔽的原因是SIMT执行中错误预测，例如当前的指令是if(true)的分支，但是当前线程的数据的条件是false，或者循环的次数不一样（比如for循环次数n不是常量，或被break提前终止了但是别的还在走），因此在Shader中的分支会显著增加时间消耗，在一个线程束（Warp）中的分支除非32个线程都走到同一个里面，否则相当于所有的分支都走了一遍，线程不能独立执行指令而是以线程束（Warp）为单位，而这些线程束中的线程之间才是相互独立的。</p><p>（SIMT线程束做分支预测图）</p><p>7、线程束（Warp）中的指令可以被一次完成，也可能经过多次调度，例如通常SM中的LD/ST(加载存取)单元数量明显少于基础数学操作单元。</p><p>8、由于某些指令比其他指令需要更长的时间才能完成，特别是内存加载，线程束（Warp）调度器可能会简单地切换到另一个没有内存等待的线程束（Warp），这是GPU如何克服内存读取延迟的关键，其操作为简单地切换活动线程组。为了使这种切换更快，调度器管理的所有线程束（Warp）在寄存器列阵（Register File）中都有自己的寄存器。这里就会有个矛盾产生，Shader需要的寄存器越多，给线程束（Warp）留下的空间就越少，于是就会导致能用的线程束（Warp）就越少。此时如果碰到指令在内存获取数据等待就只会等待，而没有其他可以运行的线程束（Warp）可以切换。</p><p>（线程与寄存器列阵关系图）</p><p>（线程束调度器调度线程图）</p><p>9、一旦线程束（Warp）完成了顶点着色器（vertex-shader）的所有指令，运算结果会被Viewport Transform模块处理，三角形会被裁剪然后准备光栅化，此时GPU会使用L1和L2缓存来进行顶点着色起（vertex-shader）和片元着色起（pixel-shader）的数据通信。</p><p>（管线中节点、数据、存储器的关系图）</p><p>10、接下来这些三角形将被分割，通过 Work Distribution Crossbar 将三角形再分配给多个GPC，三角形的范围决定着它将被分配到哪个光栅引擎(raster engines)，每个光栅引擎（raster engines）覆盖了多个屏幕上的图块（tile），这等于把三角形的渲染分配到多个图块（tile）上面。也就是说在像素阶段前就把三角形划分成了方块格式范围，三角形处理分成许多较小的工作。</p><p>（三角形被拆分成多个块派发到多个光栅引擎图）</p><p>（图块拆分任务派发图）</p><p>11、SM上的属性安装器（Attribute Setup）保证了从顶点着色器（vertex-shader）生成的数据，经过插值后，在片元着色器（pixel-shade）上是可读的。</p><p>12、GPC上的光栅引擎(raster engines)处理它接收到的三角形，并为它负责的那些部分生成像素信息（同时会处理裁剪Clipping、背面剔除和Early-Z剔除）。</p><p>13、再次做批量处理，32个像素线程被分成一组（或者说8个2x2的像素块），这是在像素着色器上面的最小工作单元（2x2 四边形允许我们计算诸如纹理 mip 贴图过滤之类的导数–四边形内纹理坐标的大变化会导致更高的 mip）。在这个像素线程内，如果没有被任何三角形覆盖就会被剔除。SM中的线程束（Warp）调度器会管理像素着色器的任务。</p><p>（2x2像素组传入到线程束处理像素着色器的图）</p><p>14、接下来是同样的线程束调度策略，和顶点着色器（vertex-shader）中的逻辑步骤完全一样，但是变成了在像素着色器线程中执行。 由于不耗费任何性能从2x2四边形中获取一个像素，这使得锁步执行非常便利，于是所有的线程可以保证指令可以在同一点同步执行。</p><p>（线程束锁步执行图）</p><p>15、最后一步，现在像素着色器已经完成了颜色的计算和深度值的计算。在这个点上，我们必须考虑三角形的调用API顺序，然后才将数据移交给ROP(render output unit，渲染输出单元)，一个ROP内部有很多ROP单元，在ROP单元中处理深度测试和帧缓冲（framebuffer）的混合等，深度和颜色的设置必须是原子操作，否则两个不同的三角形在同一个像素点就会有冲突和错误。NVIDIA 通常应用内存压缩，以减少内存带宽要求，从而增加“有效”带宽。</p><p>（像素着色器后的像素处理过程图）</p><p>以上这些信息有助于我们理解 GPU 中的一些工作和数据流，还可以帮助我们理解CPU与GPU之间的交互。</p><h2 id=\"总结cpu和gpu的交互\">总结CPU和GPU的交互</h2><p>GPU是设备，设备都有驱动，CPU可以直接执行二进制指令集，对于GPU设备，图形接口有opengl，directx标准及库封装，计算有cuda和opencl封装。程序代码调用这些图形或计算库，这些库调用驱动，驱动再来对接操作GPU设备，CPU与GPU直接的通信是遵循总线和内存的规则。</p><p>原则上CPU、内存外的设备都属于IO设备，通过总线连上来，它们必须遵守IO总线规范，如显卡就走pcie总线，这里还有ionmu，统一内存等，来共享资源，缩短路径，提升效率等。</p><p>这里专门说下驱动，计算机有专门的程序接口指定一个计算任务到GPU上，这个接口程序就是驱动程序。CPU给GPU下发任务时通过调用驱动程序，不同GPU厂商实现自己的驱动，并且提供了各种的编程接口。图形计算上实现了OpenGL标准接口规范的图形库，它会调用各厂商的驱动，用户可以通过GLSL编写计算任务进行通用计算。后来的CUDA编程模型专门推出用于编写通用计算任务的接口，于是OpenGL就专门用于图形渲染了。而CUDA则是通过kenel函数来编写计算任务，通过cudaLaunch接口来下发任务。</p><p>（从图形库到驱动到GPU指令队列的图）</p><p>从硬件角度看：</p><p>（从硬件角度看指令和数据处理流程图）</p><p>1.GPU设备的配置空间物理地址映射到虚拟地址，可以被程序直接访问；同时建立任务队列缓冲，声明中断等等；</p><p>2.CPU在进程内准备数据和缓冲，基于虚拟地址VA、VM将其转换为显存的物理地址IPA。驱动程序获取任务，再将任务信息填充至任务队列内。</p><p>3.根据虚拟内存绑定的地址信息，将任务队列的指针更新至GPU设备侧，这个端口称为doorbell寄存器；</p><p>4.设备接收到doorbell操作，会触发中断，再读取主存中的任务队列，包括队列内的信息和其指向的任务数据，GPU设备侧读取该数据。</p><p>5.完成后，再将数据发送给CPU侧。一般来说，GPU设备侧发送至CPU的读写请求使用的是虚拟地址，由CPU的IOMMU或SMMU转换为物理地址。</p><h2 id=\"gpu手机管线与pc管线的差异\">GPU手机管线与PC管线的差异</h2><p>为什么要了解手机与PC管线的差异？PC的能耗和发热比手机端可以更大一些，因此PC与手机在硬件架构上有天然的不同，进而使得它们在GPU管线上也有很大的差异，这使得我们在优化手机端时必须了解这种差异再做针对性的做优化。</p><h2 id=\"tbdrtile-base-deffered-rendering是现代移动端gpu的设计架构它同传统pc上irimmediate-rendering架构的gpu在硬件设计上有很大的差别\">TBDR(Tile-Base-Deffered-Rendering)是现代移动端GPU的设计架构，它同传统PC上IR（Immediate-Rendering）架构的GPU在硬件设计上有很大的差别。</h2><p>为什么呢？因为功耗是Mobile设备设计的第一考虑因素，而带宽是功耗的第一杀手。</p><p>我们来看PC的GPU管线，即传统的IR（Immediate-Rendering）模式：</p><p>（IMR管线图：源自网络）</p><p>IMR（Immediate Mode Rendering）模式中，GPU直接在主存或显存上读写深度缓存（Depth Buffer）和帧缓存（Frame Buffer），这导致带宽消耗很大，如果在手机上耗电和发热都无法承受。</p><p>手机使用统一内存架构，CPU和GPU都通过总线来访问主存。GPU需要获取三角形数据（Geometry Data）、贴图数据（Texture Data）以及帧缓存（Frame Buffer），它们都在主存中。如果GPU直接从主存频繁地访问这些数据，就会导致带宽消耗大，成为性能瓶颈。</p><h2 id=\"tbrtile-based-rendering管线\">TBR（Tile-Based-Rendering）管线</h2><p>基于以上所述原因，手机GPU使用自己的缓存区（SRAM），例如On-Chip深度缓存（On-Chip Depth Buffer）和On-Chip颜色缓存（On-Chip Color Buffer），它们与存取主存相比，速度更快，功耗更低。但它们的存储空间很小。（SRAM不需要充电来保持存储记忆，因此SRAM的读写基本不耗电，缺点是价格昂贵）</p><p>如果手机直接读写帧缓存（Frame Buffer）就相当于让一辆火车在你家和公司之间来回奔跑，非常耗电。于是手机端想要拆分绘制内容，每次只绘制一小部分，再把所有绘制完成的部分拼起来。</p><p>把帧缓存（Frame Buffer）拆分成很多个小块，使得每个小块可以被GPU附近的SRAM容纳，块的多少取决于GPU硬件的SRAM大小。这样GPU就可以分批的一块块的在SRAM上读写帧缓存（Frame Buffer），一整块都读写完毕后，再整体转移回主存上。</p><p>这种模式就叫做TBR（Tile-Based-Rendering），整体管线如下图：</p><p>（TBR管线图：源自网络）</p><p>屏幕分块后的大小一般为16x16或32x32像素 ，在几何阶段之后再执行分块(Tiling)，接着将各个块（Tile）逐个光栅化，最后写入帧缓存中（Frame Buffer）中 。</p><p>这里有一些细节要注意，TBR在接受每个指令（CommandBuffer）时并不立即绘制，而是先对这些数据做顶点处理，把顶点处理的结果暂时保存在主存上，等到非得刷新整个帧缓存时，才真正的用这批数据做光栅化。</p><p>因此，TBR的管线实际可以认为被切分成两部分，前半部分为顶点数据部分，后半部分为片元数据部分：</p><p>（TBR把管线切分为光栅化前和光栅化后）</p><h3 id=\"顶点数据先被处理并存储在frame-data中等到必须刷新时例如帧缓存置换调用glflush调用glfinish调用glreadpixels读取帧缓存像素时调用glcopytexiamge拷贝贴图时调用glbitframebuffer获取帧缓存时调用queryingocclusion解绑帧缓存时等等才被集中的拿去处理光栅化\">顶点数据先被处理并存储在Frame Data中，等到必须刷新时（例如帧缓存置换，调用glflush，调用glfinish，调用glreadpixels读取帧缓存像素时，调用glcopytexiamge拷贝贴图时，调用glbitframebuffer获取帧缓存时，调用queryingocclusion，解绑帧缓存时等等）才被集中的拿去处理光栅化。</h3><h3 id=\"那么为什么pc不使用tbr呢\">那么为什么PC不使用TBR呢？</h3><p>实际上直接对主存或显存（这里也有多级缓存）进行整块数据的读写速度是最快的，而TBR需要一块块的绘制，然后再回拷给主存。可以简单的认为TBR牺牲了执行效率，换来了相对更难解决的带宽功耗。如果哪一天手机上解决了带宽的功耗问题，或者说SRAM足够大了，可能就没有TBR了。</p><h2 id=\"tbdrtile-based-deferred-rendering管线\">TBDR（Tile-based deferred rendering）管线</h2><p>TBR会把顶点数据处理完毕后存储在Frame Data中，那么就会有很多厂商针对Frame Data做优化。</p><p>TBDR整体的管线图如下：</p><p>（TBDR管线图：源自网络）</p><p>我们看到相比TBR，TBDR在光栅化（Raster）后多了一个HSR（Hidden Surface Removal）处理，这部分处理主要剔除无需绘制的元素，减少重绘（Overdraw）数量（高通通过优化划分块（Tile）之后执行顶点着色器（Vertex Shader）之前的节点来达到此目的，称为LRZ）。例如提前对不透明像素做深度测试并剔除，剔除被模板裁剪掉的像素等等，总之它们不会进入到像素着色器阶段（Pixel Shader）。</p><p>因此在TBDR上，不透明物体的排序没有太大意义，Early-Z这种策略也不存在IOS上。这些GPU硬件巧妙的利用TBR的Frame Data队列实现了一种延迟渲染，尽可能只渲染那些会最终影响帧缓存（Frame Buffer）的像素。</p><h3 id=\"tbdr和软件上的延迟渲染相比有什么区别呢\">TBDR和软件上的延迟渲染相比有什么区别呢？</h3><p>软件层面的延迟渲染与TBDR不同。软件层面的延迟渲染是针对一个Drawcall，对于从后到前的不透明物体绘制是每次都要绘制的，而硬件层面的延迟渲染，处理的是一整批Drawcall，剔除这一整批Drawcall中不会绘制的像素最后再渲染。可以说现在大部分的移动端的GPU都使用TBDR架构。</p><h3 id=\"参考资料\">参考资料：</h3><p>《How Shader Cores Work》https://engineering.purdue.edu/~smidkiff/KKU/files/GPUIntro.pdf</p><p>《CPU体系结构》https://my.oschina.net/fileoptions/blog/1633021</p><p>《深入理解CPU的分支预测(Branch Prediction)模型》https://zhuanlan.zhihu.com/p/22469702</p><p>《分析Unity在移动设备的GPU内存机制（iOS篇）》https://www.jianshu.com/p/68b41a8d0b37</p><p>《PC与Mobile硬件架构对比》https://www.cnblogs.com/kekec/p/14487050.html</p><p>《针对移动端TBDR架构GPU特性的渲染优化》https://gameinstitute.qq.com/community/detail/123220</p><p>《A look at the PowerVR graphics architecture: Tile-based rendering》https://www.imaginationtech.com/blog/a-look-at-the-powervr-graphics-architecture-tile-based-rendering/</p><p>《A look at the PowerVR graphics architecture: Deferred rendering》https://www.imaginationtech.com/blog/the-dr-in-tbdr-deferred-rendering-in-rogue/</p><p>《深入GPU硬件架构及运行机制》https://www.cnblogs.com/timlly/p/11471507.html</p><p>《深入浅出计算机组成原理》https://time.geekbang.org/column/article/105401?code=7VZ-Md9oM7vSBSE6JyOgcoQhDWTOd-bz5CY8xqGx234%3D</p><p>《Nvidia Geforce RTX-series is born》https://www.fudzilla.com/reviews/47224-nvidia-geforce-rtx-series-is-born?start=2</p><p>《渲染管线与GPU（Shading前置知识）》https://zhuanlan.zhihu.com/p/336999443</p><p>《剖析虚幻渲染体系（12）- 移动端专题Part 1（UE移动端渲染分析）》https://www.cnblogs.com/timlly/p/15511402.html</p><p>《tpc-texture-processing-cluster》https://gputoaster.wordpress.com/2010/12/11/tpc-texture-processing-cluster/</p><p>《Life of a triangle - NVIDIA’s logical pipeline》https://developer.nvidia.com/content/life-triangle-nvidias-logical-pipeline</p><p>《Rasterisation wiki》https://en.wikipedia.org/wiki/Rasterisation</p><p>《PolyMorph engine and Data Caches by Hilbert Hagedoorn》https://www.guru3d.com/articles-pages/nvidia-gf100-(fermi)-technology-preview,3.html</p><p>《NVIDIA GPU的一些解析》https://zhuanlan.zhihu.com/p/258196004</p><p>《tensor-core-performance-the-ultimate-guide》https://developer.download.nvidia.cn/video/gputechconf/gtc/2019/presentation/s9926-tensor-core-performance-the-ultimate-guide.pdf</p><p>《Understanding the Understanding the graphics pipeline》https://www.seas.upenn.edu/~cis565/LECTURES/Lecture2%20New.pdf</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485096&amp;idx=1&amp;sn=c027b6af4677515ba1e5950aac8ba68d&amp;chksm=fc2263afcb55eab9204898b39fb77ee04f5767ac450507b6192a5c6d5612a45b6d29b1bcee16&amp;token=853743270&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2021/12/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B051",
            
            
            
            "tags": ["读书笔记","前端技术"],
            
            "date_published": "2021-12-12T00:00:00+08:00",
            "date_modified": "2021-12-12T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/12/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B049",
            "title": "读书笔记(五十) 《如何精彩演讲》#2 克服演讲时的恐惧",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景不知不觉看完了6本关于演讲的主题，按推荐顺序排列分别是《高效演讲》、《演讲与口才》、《即兴演讲》、《关键对话》、《TED演讲的力量》、《说话的艺术》。我希望自己能够对演讲有一个系统性的学习。于是自己在平常的生活和工作中实践了一段时间，前前后后加起来有两个月时间。目标是，改善平常的工作、生活中表达的流畅和清晰度，能让人感觉到舒服让人感觉有活力。同时在公众演讲上，希望自己能够很好的呈现自己的所思所想以及所知所学。因此开启这个演讲学习系列的总结文章，我将对这6本书的内容加上我的实践经验做一次全面的系统性的总结。概述：  恐惧的原因  克服恐惧的原理  制定克服恐惧的行动内容：为什么要了解演讲时的恐惧？  只有了解恐惧的原理才能正确认识它  它会使得事情更加糟糕  它会对我们的心理产生长短期的变化在平时的生活工作学习当中，当我们恐惧时很多时候并不能了解自己的恐惧情绪。由于在很多情况下，我们观察不到自己的情绪，导致我们常常无法在情绪有问题时，及时的调整它。因此你会看到很多时候，当出现了恐惧的症状时，我们没有调整它，这直接导致事情发展变得糟糕。（恐惧表情图：来源网络）不止如此，如果没有去很好的应对恐惧的话，长此以往我们在心里会有比较大的阴影。这使得，我们在一件比较重要的会议上，由于你的恐惧而退缩或退却，会使你在精神上遭受更大的打击。如果次数多了，你会发现你对这些重要的场所，重要的机会，会产生习惯性的恐惧，这常常使你对人生产生比较多的怀疑。因此无论从长期或短期来看，我们都需要去主动的了解恐惧。这是我们必须去了解恐惧的重要原因。它会将生活弄得更加糟糕，因此我们必须了解他，特别是在演讲时。恐惧有很多种，这里我们只关注演讲时的恐惧。但其实演讲的恐惧已经覆盖了生活中很多的方面，它与生活中的恐惧有很多共性。是什么让你恐惧？了解恐惧产生的原因，可以让我们对恐惧问题的形成有更深刻的认识。不管是普通焦虑还是惊恐障碍，都没有单一的成因，也不可能在消除这个成因后问题就得到彻底根除。焦虑问题是有多方面，多种原因引起的，包括遗传因素，生物因素，家庭背景和教养方式、心理条件作用、近期生活转变、自我对话和个人信念体系、表达情感的能力、当前环境压力等。恐惧的原因：  面对重要场面，准备不充分  对周围的环境很陌生  经历不足，导致的对事情没有底气  在意别人对自己的看法  生理反应，肌肉紧张、心跳加速、头脑晕眩  近期自己身边的环境变动较大  长期积累的心里因素，过分在意过去发生的事情我们在面对演讲时通常会有很多的恐惧，特别是在上台前一段时间，自己的恐惧心理被放大的特别多。其实说来不只是演讲，恐惧在我们平常的生活跟工作当中也非常多，我们心里常常会对某件即将到来的事产生恐惧。因此呢。并不是说在演讲时你才会恐惧，在平常的生活当中，你同样会有很多令你焦虑不安的事情。演讲跟平常我们生活、工作时产生的恐惧是一样的，并没有说因为演讲而特殊。我们究竟为什么而恐惧？我们来分析一下。前面列了7条恐惧的原因，但其实这7条可以归类一下变得更精简一些。（恐惧原因）恐惧的原因总的来说为三方面：  准备不充分  环境变化导致的恐惧  长期积累的心理因素（恐惧原因细节图）第一，准备不充分当我们知道我们将要去面对一件事情，但是这件事情并没有充足的把握时我们就会感到恐惧。因为这件事情是未知的，而且我预感到他可能不会有太好的结果，因为我对他没有把握，我也没有对他做任何的准备工作。可能有这么一件事情你是从来没有做过的，或者说你也不知道他将会发生什么样的情况。甚至在你的预感当中，这件事会发生比较差的或者糟糕的情况，此时你就会对这件事情产生恐惧。因而有逃避去面对这件事情的心理状态。在演讲时也是同样的，大部分人没有台上演讲的经验和习惯，因此对于上台演讲这件事情，大部分人都是有恐惧心理的。这个恐惧心理是因为我们没有，为这件事情做过任何的准备，也不知道这件事情会发生怎样的情况。此时我们心里隐隐的感觉到这这件事情会比较糟糕。因此，我们对演讲产生了恐惧。总之，当你面对一件即将到来，但未知的事情时，当你面对一件你觉得可能会发生比较糟糕的事情时，通常是因为我们没有做好足够的准备工作。这个准备工作可能需要花去几小时、几天、几个月甚至几年的时间，总之我们并没有为这件事做好足够的准备。第二，环境变化导致的恐惧我们周围的环境时常在变化，包括我们的工作，上下级人员调动，以及你身边人的来往，以及你亲人的离去与归来，这些的环境都在时刻变化着，影响着我们的心理。可能是你最近比较倒霉，碰到了一些小概率事件，或者可能会因为大环境的变化使得感到沮丧。甚至有可能你出差到了某个陌生的环境，让你感到很不舒服。这些环境的变化都会让你产生焦虑甚至恐惧的心理。总之，在当前这样的环境下，是你并不熟悉的环境，不是你能掌控而环境，因此导致你对周围的环境有一种隔离感，像是没有依靠的感觉。第三，长期积累的心理因素你可能会因为曾经的遭遇而感到痛苦，这些遭遇在你的脑中挥之不去，当再次发生或者即将发生这样的事情的时候，你就会感到焦虑和恐惧。这些痛苦的场景通常会延伸到我们生活的各个角落，比如说，你可能曾经在小组发言时，磕磕巴巴导致你对公众发言产生了恐惧，致使你在现在上台演讲时都会表现的异常的惊恐，当回忆起自己以前在小组发言时的那些场景，以及当时人们都的表情，你会不自觉的把这些场景延伸到现在的公众演讲以及公众表达上。常见比如，人们小时候玩水时掉入水中呛到过，成人后就对游泳产生了恐惧。或者在爬树时掉下来过，就对过山车产生了恐惧等等。不仅如此，人们通常会将一种痛苦的经历延展到另一个场景中，比如说，某人会因为小学里遭到过坏学生的殴打，致使他觉得现在自己面对他人安排的工作任务时会感觉自己是被压迫的或受虐待的，因此有很大的抵触情绪。总之，人们常常会延展过去的痛苦回忆，将这些痛苦的回忆放入到现在的场景里面去，这使得他们感到恐惧，同时也使他们有一个最佳的逃避借口。如何行动去克服恐惧？我罗列了所有的方法，有些方法是我自己总结的，有些则是参考《应对焦虑》埃德蒙.伯恩写的这本书。（克服恐惧的方法全图）  观察自己的恐惧  提前做好准备  积极变化适应环境  冥想练习排除杂念  渐进式肌肉放松  暴露疗法，应对暴露，完全暴露，想象暴露  运动，增加运动频率，增加强度增加抗压力  自我关怀，爱的言语、规律作息、简化生活、  转移注意力，专注于技巧，找人聊天，体验愉悦的事，听音乐以上这些技巧，可以用在我们生活当中面对焦虑与恐惧时的情况。虽然大部分技巧都可以用到演讲中，但我想讲其中在演讲时运用最有效的方法，我们来看下图：（克服演讲恐惧的有效方法）观察自己的恐惧我们最先要做的是观察自己的恐惧，这是所有技巧的前提。（观察恐惧图：来源网络）恐惧也是情绪的一种，我们需要观察恐惧发生时候我们的表现，我们的眼神，我们心跳，我们的肌肉，在做怎样的颤抖。通过观察我们身体上的变化，我们可以感知到自己的恐惧。当我们能够观察到恐惧时，恐惧本身就没有这么强烈了，所以我们首先要做的是，用第三者的角度观察自己的恐惧表现。通过观察我们能及时的发现我们的精神状态在变化，只要我们观察到恐惧，它就不会再扩散，此时我们就可以想办法逐渐的释放它。最糟糕的是你观察不到自己的恐惧，但仍然继续逼迫自己向前对劲，这时你会有一种无力感，同时恐惧会不断的蔓延到你的全身，使你的精神状态陷入更加崩溃的边缘。我们只有识别自己的恐惧状态，识别自己的恐惧表现，才能真正的认识到自己的情绪变化，以及事物对我们的影响程度。这为后面的措施，调整打下了好的基础。提前做好准备提前做好准备，通常是最明智的选择，也是克服恐惧的最好方法。（提前准备图：来源网络）它需要我们抽出时间去为这场演讲做准备。我需要写演讲稿，并且在演讲前打磨多次。通过自己不断的练习和打磨演讲，将演讲稿打磨成自己认为完美的样子。同时，在我们平时的生活中，要为未来的可能的演讲做好准备。所以，在我们平常的生活当中，要注重收集生活的细节，收集演讲的素材，这些素材能够更快更有效的运用在未来的演讲中，让演讲和故事呈现的效果更好。因此，提前做好准备，是每个演讲达人的最重要的工作之一。积极拥抱变化适应环境（拥抱变化：来源网络）很多时候我们避免不了会去自己陌生的地方演讲。这个时候，环境的变化对我们的精神冲击力很大，周围没有熟悉的环境没有熟悉的人，我们感到被隔离脱离群体从而感到恐惧。这个时候，我们需要积极的去拥抱变化。与台上台下的工作人员沟通，积极的与嘉宾沟通，与在场的观众沟通。通过这样沟通交流我们能够舒展我们的心情，能够释放我们的紧张情绪，能够释放我们的恐惧情绪。如果在现场当我们遇到困难的时候，需要主动寻求帮助。特别是当下环境中的管理者，或者比较熟悉的朋友，通过他们的帮助让自己这份不安的心能够安定下来，减少恐惧的蔓延。特别是在演讲开场时，自己在一个陌生的环境下非常容易紧张焦虑和恐惧，此时在开场时需要跟大家有一个沟通交流的时间，留出这样一个前置的时间跟大家沟通交流非常必要，然后再慢慢进入状态，开始自己的演讲。也可以通过说出自己的感受来跟大家做一些互动，这样让自己的紧张情绪和压力能够释放掉，这为后面的事情进展顺利而铺平了道路。放松练习我们可以用身体上的练习和精神的上的练习来放松自己。（冥想图：来源网络）精神上的练习，可以通过说出感受来接纳自己释放压力。也可以通过就地坐下或稳定站立并闭上眼睛来做冥想，通过专注于自己的呼吸，将杂念排除，也可以通过腹式呼吸来将注意力转移到自己的腹部上，让自己更加专注于当下。冥想的要点是专注于呼吸，这会让你排除杂念，专注于当下。身体上的练习，也可以起到放松作用。（与文无关的放松练习图：来源网络）这里有一个叫渐进式肌肉放松法。我们来具体介绍一下：腹式呼吸，用腹部呼吸，吸气时肚子吸入空气突出呼气时因气体排除而扁平，呼吸要慢，想象全身的紧张感开始从体内流去。撰紧拳头，保持7-10秒，再从开拳头15-20秒，反复循环双手前臂抬起，前臂与上臂尽量靠拢，紧绷肱二头肌，保持，然后放松。双手手臂向外延展到水平位置，伸肘，拉紧肱三头肌，保持，然后放松。尽量抬高眉毛，收缩前额肌肉，保持，然后放松。放松时，想象前额肌肉慢慢舒展、松弛。紧闭双眼，绷紧眼周肌肉，保持，然后放松。想象深度放松的感觉在眼镜周围蔓延。张大嘴巴，拉伸下颚关节周围的肌肉，绷紧下巴，保持，然后放松。张着嘴，让下巴自然放松。头向后仰，尽量靠向后背，收紧脖子后面的肌肉，专注于收紧颈部肌肉的动作，保持，然后放松。双肩同时最大限度地向上耸起，绷紧肩部肌肉，保持，然后放松。双肩外展，尽量向背部中线靠拢，绷紧肩胛骨周围的肌肉。让肩胛处的肌肉保持绷紧，然后放松。深吸一口气，绷紧胸部肌肉，保持10秒，然后慢慢呼气。收紧腹部肌肉，保持，然后放松。背部弓起，拉紧下背部肌肉，保持，然后放松。收紧臀部，保持，然后放松。收缩大腿肌肉，保持，然后放松。向自己的方向用力伸脚趾，绷紧小腿肌肉，保持，然后放松。卷起脚趾，绷紧脚面，保持，然后放松。以上是一整套的渐进式肌肉放松法，一整套下来需要20-30分钟，在平时的放松练习可以通过抽取几个对自己比较有效的姿势去做放松练习，这样更容易将这些放松练习融入到我们的生活中，特别是演讲前的放松练习。参考资料：《三招搞定演讲构思》朱林滢《应对焦虑》埃德蒙.伯恩《高效演讲》彼得.迈尔斯，尚恩.尼克斯",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485068&amp;idx=1&amp;sn=464d36573e97c69aeab4ab996885ccee&amp;chksm=fc22638bcb55ea9d3e4472e92a760b147dc2a816268e9d3a435842995723d3a02e9a26b0f4b5&amp;token=1416441933&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景</h1><p>不知不觉看完了6本关于演讲的主题，按推荐顺序排列分别是《高效演讲》、《演讲与口才》、《即兴演讲》、《关键对话》、《TED演讲的力量》、《说话的艺术》。</p><p>我希望自己能够对演讲有一个系统性的学习。于是自己在平常的生活和工作中实践了一段时间，前前后后加起来有两个月时间。</p><p>目标是，改善平常的工作、生活中表达的流畅和清晰度，能让人感觉到舒服让人感觉有活力。同时在公众演讲上，希望自己能够很好的呈现自己的所思所想以及所知所学。</p><p>因此开启这个演讲学习系列的总结文章，我将对这6本书的内容加上我的实践经验做一次全面的系统性的总结。</p><h3 id=\"概述\">概述：</h3><ol>  <li>恐惧的原因</li>  <li>克服恐惧的原理</li>  <li>制定克服恐惧的行动</li></ol><h3 id=\"内容\">内容：</h3><p>为什么要了解演讲时的恐惧？</p><ol>  <li>只有了解恐惧的原理才能正确认识它</li>  <li>它会使得事情更加糟糕</li>  <li>它会对我们的心理产生长短期的变化</li></ol><p>在平时的生活工作学习当中，当我们恐惧时很多时候并不能了解自己的恐惧情绪。由于在很多情况下，我们观察不到自己的情绪，导致我们常常无法在情绪有问题时，及时的调整它。</p><p>因此你会看到很多时候，当出现了恐惧的症状时，我们没有调整它，这直接导致事情发展变得糟糕。</p><p>（恐惧表情图：来源网络）</p><p>不止如此，如果没有去很好的应对恐惧的话，长此以往我们在心里会有比较大的阴影。这使得，我们在一件比较重要的会议上，由于你的恐惧而退缩或退却，会使你在精神上遭受更大的打击。</p><p>如果次数多了，你会发现你对这些重要的场所，重要的机会，会产生习惯性的恐惧，这常常使你对人生产生比较多的怀疑。</p><p>因此无论从长期或短期来看，我们都需要去主动的了解恐惧。这是我们必须去了解恐惧的重要原因。它会将生活弄得更加糟糕，因此我们必须了解他，特别是在演讲时。</p><p>恐惧有很多种，这里我们只关注演讲时的恐惧。但其实演讲的恐惧已经覆盖了生活中很多的方面，它与生活中的恐惧有很多共性。</p><h2 id=\"是什么让你恐惧\">是什么让你恐惧？</h2><p>了解恐惧产生的原因，可以让我们对恐惧问题的形成有更深刻的认识。</p><p>不管是普通焦虑还是惊恐障碍，都没有单一的成因，也不可能在消除这个成因后问题就得到彻底根除。焦虑问题是有多方面，多种原因引起的，包括遗传因素，生物因素，家庭背景和教养方式、心理条件作用、近期生活转变、自我对话和个人信念体系、表达情感的能力、当前环境压力等。</p><p>恐惧的原因：</p><ol>  <li>面对重要场面，准备不充分</li>  <li>对周围的环境很陌生</li>  <li>经历不足，导致的对事情没有底气</li>  <li>在意别人对自己的看法</li>  <li>生理反应，肌肉紧张、心跳加速、头脑晕眩</li>  <li>近期自己身边的环境变动较大</li>  <li>长期积累的心里因素，过分在意过去发生的事情</li></ol><p>我们在面对演讲时通常会有很多的恐惧，特别是在上台前一段时间，自己的恐惧心理被放大的特别多。</p><p>其实说来不只是演讲，恐惧在我们平常的生活跟工作当中也非常多，我们心里常常会对某件即将到来的事产生恐惧。</p><p>因此呢。并不是说在演讲时你才会恐惧，在平常的生活当中，你同样会有很多令你焦虑不安的事情。</p><p>演讲跟平常我们生活、工作时产生的恐惧是一样的，并没有说因为演讲而特殊。</p><p>我们究竟为什么而恐惧？我们来分析一下。</p><p>前面列了7条恐惧的原因，但其实这7条可以归类一下变得更精简一些。</p><p>（恐惧原因）</p><p>恐惧的原因总的来说为三方面：</p><ol>  <li>准备不充分</li>  <li>环境变化导致的恐惧</li>  <li>长期积累的心理因素</li></ol><p>（恐惧原因细节图）</p><h3 id=\"第一准备不充分\">第一，准备不充分</h3><p>当我们知道我们将要去面对一件事情，但是这件事情并没有充足的把握时我们就会感到恐惧。</p><p>因为这件事情是未知的，而且我预感到他可能不会有太好的结果，因为我对他没有把握，我也没有对他做任何的准备工作。</p><p>可能有这么一件事情你是从来没有做过的，或者说你也不知道他将会发生什么样的情况。甚至在你的预感当中，这件事会发生比较差的或者糟糕的情况，此时你就会对这件事情产生恐惧。因而有逃避去面对这件事情的心理状态。</p><p>在演讲时也是同样的，大部分人没有台上演讲的经验和习惯，因此对于上台演讲这件事情，大部分人都是有恐惧心理的。</p><p>这个恐惧心理是因为我们没有，为这件事情做过任何的准备，也不知道这件事情会发生怎样的情况。此时我们心里隐隐的感觉到这这件事情会比较糟糕。因此，我们对演讲产生了恐惧。</p><p>总之，当你面对一件即将到来，但未知的事情时，当你面对一件你觉得可能会发生比较糟糕的事情时，通常是因为我们没有做好足够的准备工作。这个准备工作可能需要花去几小时、几天、几个月甚至几年的时间，总之我们并没有为这件事做好足够的准备。</p><h3 id=\"第二环境变化导致的恐惧\">第二，环境变化导致的恐惧</h3><p>我们周围的环境时常在变化，包括我们的工作，上下级人员调动，以及你身边人的来往，以及你亲人的离去与归来，这些的环境都在时刻变化着，影响着我们的心理。可能是你最近比较倒霉，碰到了一些小概率事件，或者可能会因为大环境的变化使得感到沮丧。甚至有可能你出差到了某个陌生的环境，让你感到很不舒服。</p><p>这些环境的变化都会让你产生焦虑甚至恐惧的心理。</p><p>总之，在当前这样的环境下，是你并不熟悉的环境，不是你能掌控而环境，因此导致你对周围的环境有一种隔离感，像是没有依靠的感觉。</p><h3 id=\"第三长期积累的心理因素\">第三，长期积累的心理因素</h3><p>你可能会因为曾经的遭遇而感到痛苦，这些遭遇在你的脑中挥之不去，当再次发生或者即将发生这样的事情的时候，你就会感到焦虑和恐惧。</p><p>这些痛苦的场景通常会延伸到我们生活的各个角落，比如说，你可能曾经在小组发言时，磕磕巴巴导致你对公众发言产生了恐惧，致使你在现在上台演讲时都会表现的异常的惊恐，当回忆起自己以前在小组发言时的那些场景，以及当时人们都的表情，你会不自觉的把这些场景延伸到现在的公众演讲以及公众表达上。</p><p>常见比如，人们小时候玩水时掉入水中呛到过，成人后就对游泳产生了恐惧。或者在爬树时掉下来过，就对过山车产生了恐惧等等。</p><p>不仅如此，人们通常会将一种痛苦的经历延展到另一个场景中，比如说，某人会因为小学里遭到过坏学生的殴打，致使他觉得现在自己面对他人安排的工作任务时会感觉自己是被压迫的或受虐待的，因此有很大的抵触情绪。</p><p>总之，人们常常会延展过去的痛苦回忆，将这些痛苦的回忆放入到现在的场景里面去，这使得他们感到恐惧，同时也使他们有一个最佳的逃避借口。</p><h2 id=\"如何行动去克服恐惧\">如何行动去克服恐惧？</h2><p>我罗列了所有的方法，有些方法是我自己总结的，有些则是参考《应对焦虑》埃德蒙.伯恩写的这本书。</p><p>（克服恐惧的方法全图）</p><ol>  <li>观察自己的恐惧</li>  <li>提前做好准备</li>  <li>积极变化适应环境</li>  <li>冥想练习排除杂念</li>  <li>渐进式肌肉放松</li>  <li>暴露疗法，应对暴露，完全暴露，想象暴露</li>  <li>运动，增加运动频率，增加强度增加抗压力</li>  <li>自我关怀，爱的言语、规律作息、简化生活、</li>  <li>转移注意力，专注于技巧，找人聊天，体验愉悦的事，听音乐</li></ol><p>以上这些技巧，可以用在我们生活当中面对焦虑与恐惧时的情况。</p><p>虽然大部分技巧都可以用到演讲中，但我想讲其中在演讲时运用最有效的方法，我们来看下图：</p><p>（克服演讲恐惧的有效方法）</p><h3 id=\"观察自己的恐惧\">观察自己的恐惧</h3><p>我们最先要做的是观察自己的恐惧，这是所有技巧的前提。</p><p>（观察恐惧图：来源网络）</p><p>恐惧也是情绪的一种，我们需要观察恐惧发生时候我们的表现，我们的眼神，我们心跳，我们的肌肉，在做怎样的颤抖。通过观察我们身体上的变化，我们可以感知到自己的恐惧。当我们能够观察到恐惧时，恐惧本身就没有这么强烈了，所以我们首先要做的是，用第三者的角度观察自己的恐惧表现。</p><p>通过观察我们能及时的发现我们的精神状态在变化，只要我们观察到恐惧，它就不会再扩散，此时我们就可以想办法逐渐的释放它。</p><p>最糟糕的是你观察不到自己的恐惧，但仍然继续逼迫自己向前对劲，这时你会有一种无力感，同时恐惧会不断的蔓延到你的全身，使你的精神状态陷入更加崩溃的边缘。</p><p>我们只有识别自己的恐惧状态，识别自己的恐惧表现，才能真正的认识到自己的情绪变化，以及事物对我们的影响程度。这为后面的措施，调整打下了好的基础。</p><h3 id=\"提前做好准备\">提前做好准备</h3><p>提前做好准备，通常是最明智的选择，也是克服恐惧的最好方法。</p><p>（提前准备图：来源网络）</p><p>它需要我们抽出时间去为这场演讲做准备。</p><p>我需要写演讲稿，并且在演讲前打磨多次。通过自己不断的练习和打磨演讲，将演讲稿打磨成自己认为完美的样子。</p><p>同时，在我们平时的生活中，要为未来的可能的演讲做好准备。所以，在我们平常的生活当中，要注重收集生活的细节，收集演讲的素材，这些素材能够更快更有效的运用在未来的演讲中，让演讲和故事呈现的效果更好。</p><p>因此，提前做好准备，是每个演讲达人的最重要的工作之一。</p><h3 id=\"积极拥抱变化适应环境\">积极拥抱变化适应环境</h3><p>（拥抱变化：来源网络）</p><p>很多时候我们避免不了会去自己陌生的地方演讲。这个时候，环境的变化对我们的精神冲击力很大，周围没有熟悉的环境没有熟悉的人，我们感到被隔离脱离群体从而感到恐惧。</p><p>这个时候，我们需要积极的去拥抱变化。与台上台下的工作人员沟通，积极的与嘉宾沟通，与在场的观众沟通。通过这样沟通交流我们能够舒展我们的心情，能够释放我们的紧张情绪，能够释放我们的恐惧情绪。</p><p>如果在现场当我们遇到困难的时候，需要主动寻求帮助。特别是当下环境中的管理者，或者比较熟悉的朋友，通过他们的帮助让自己这份不安的心能够安定下来，减少恐惧的蔓延。</p><p>特别是在演讲开场时，自己在一个陌生的环境下非常容易紧张焦虑和恐惧，此时在开场时需要跟大家有一个沟通交流的时间，留出这样一个前置的时间跟大家沟通交流非常必要，然后再慢慢进入状态，开始自己的演讲。也可以通过说出自己的感受来跟大家做一些互动，这样让自己的紧张情绪和压力能够释放掉，这为后面的事情进展顺利而铺平了道路。</p><h3 id=\"放松练习\">放松练习</h3><p>我们可以用身体上的练习和精神的上的练习来放松自己。</p><p>（冥想图：来源网络）</p><p>精神上的练习，可以通过说出感受来接纳自己释放压力。也可以通过就地坐下或稳定站立并闭上眼睛来做冥想，通过专注于自己的呼吸，将杂念排除，也可以通过腹式呼吸来将注意力转移到自己的腹部上，让自己更加专注于当下。</p><p>冥想的要点是专注于呼吸，这会让你排除杂念，专注于当下。</p><p>身体上的练习，也可以起到放松作用。</p><p>（与文无关的放松练习图：来源网络）</p><p>这里有一个叫渐进式肌肉放松法。我们来具体介绍一下：</p><p>腹式呼吸，用腹部呼吸，吸气时肚子吸入空气突出呼气时因气体排除而扁平，呼吸要慢，想象全身的紧张感开始从体内流去。</p><p>撰紧拳头，保持7-10秒，再从开拳头15-20秒，反复循环</p><p>双手前臂抬起，前臂与上臂尽量靠拢，紧绷肱二头肌，保持，然后放松。</p><p>双手手臂向外延展到水平位置，伸肘，拉紧肱三头肌，保持，然后放松。</p><p>尽量抬高眉毛，收缩前额肌肉，保持，然后放松。放松时，想象前额肌肉慢慢舒展、松弛。</p><p>紧闭双眼，绷紧眼周肌肉，保持，然后放松。想象深度放松的感觉在眼镜周围蔓延。</p><p>张大嘴巴，拉伸下颚关节周围的肌肉，绷紧下巴，保持，然后放松。张着嘴，让下巴自然放松。</p><p>头向后仰，尽量靠向后背，收紧脖子后面的肌肉，专注于收紧颈部肌肉的动作，保持，然后放松。</p><p>双肩同时最大限度地向上耸起，绷紧肩部肌肉，保持，然后放松。</p><p>双肩外展，尽量向背部中线靠拢，绷紧肩胛骨周围的肌肉。让肩胛处的肌肉保持绷紧，然后放松。</p><p>深吸一口气，绷紧胸部肌肉，保持10秒，然后慢慢呼气。</p><p>收紧腹部肌肉，保持，然后放松。</p><p>背部弓起，拉紧下背部肌肉，保持，然后放松。</p><p>收紧臀部，保持，然后放松。</p><p>收缩大腿肌肉，保持，然后放松。</p><p>向自己的方向用力伸脚趾，绷紧小腿肌肉，保持，然后放松。</p><p>卷起脚趾，绷紧脚面，保持，然后放松。</p><p>以上是一整套的渐进式肌肉放松法，一整套下来需要20-30分钟，在平时的放松练习可以通过抽取几个对自己比较有效的姿势去做放松练习，这样更容易将这些放松练习融入到我们的生活中，特别是演讲前的放松练习。</p><h3 id=\"参考资料\">参考资料：</h3><p>《三招搞定演讲构思》朱林滢</p><p>《应对焦虑》埃德蒙.伯恩</p><p>《高效演讲》彼得.迈尔斯，尚恩.尼克斯</p>",
            "url": "http://www.luzexi.com/2021/12/05/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B049",
            
            
            
            
            
            "date_published": "2021-12-05T00:00:00+08:00",
            "date_modified": "2021-12-05T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/11/27/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A119",
            "title": "给女儿的信(十九) 说出自己的感受积极化解情绪",
            "summary": "女儿 教育 亲情",
            "content_text": "要点：说出自己的感受，积极化解情绪结构：  半年一次的俱乐部选举即将开始  我自己写了ppt，做了选举前的准备  选举很激烈，主席选举经过2次平分后终于选出结果，大家也很欢乐  接着我上台选举VPE，上台很紧张，自己讲的有点死板  由于最近在俱乐部里挺活跃的，抱着一线希望，但最后还是败下阵来  接着收拾下心情，继续竞选后面的职位  有人提议VPM，我接受了  我上台后，先化解自己的情绪，说出了自己的感受  同时为VPM制定了目标，并真诚说出自己的内心话，希望跟大家交朋友  爸爸认为练习技巧前应该先交朋友，有了朋友技巧才有用，得到大家的认可，最后成功选举获得VPM  价值升华，失败不可怕，及时调整心态，说出感受，主动卸下压力，能让事情进展的更加顺利内容：Hello Sharon and hello，Anne，爸爸喜欢你们。爸爸到深圳了，要再过一个月回来，到时候再跟你玩，爸爸喜欢跟你们玩游戏，喜欢跟你们聊天，喜欢跟你们一起学习，喜欢跟你们一起加油。今天爸爸跟你们聊一下，爸爸最近在演讲俱乐部里面做的一些事情好不好？最近半年爸爸都在演讲俱乐部里面练习演讲，练习表达，这和Sharon在学校里面练小主播一样，非常像，爸爸每天都会练习那个绕口令，都会练习口步操，是不是跟你们很像？平时的时候爸爸会做一些演讲，上台演讲，这样呢会让爸爸在公众表达上更好一些，平常跟人沟通交流时，也能更自然一些。那爸爸想跟确认跟安妮说说说最近爸爸在俱乐部里面的一件事好不好？最近俱乐部里面要选举官员，怎么是官员？呢就是嗯宣传学校里面选班长，选学习委员，选体育委员，这些是一样的，爸爸在俱乐部里面也要选主席，要选副会长，要选秘书长等这些岗位，那这些岗位呢要做竞选演讲。于是爸爸上台做了竞选演讲，爸爸上台了两次，做了两次竞选演讲，分别去竞选了两个职位。第一个职位的时候爸爸上台很紧张，自己说话也有点很死板，说话的内容不是很清楚，因为爸爸太紧张了，通常紧张的时候爸爸说话都是有一点点啊有语无伦次，虽然抱着一线希望，但是最后还是败下阵来了。于是就收拾了一下心情继续的后面的竞选岗位。等爸爸第二次上台的时候，爸爸先做的一件事情就是爸爸先化解情绪，再开始自己的演讲内容，爸爸第二次上台的时候也还是很紧张，于是我上台时先说出自己的感受，说说自己为什么紧张，说自己还在想怎么去改进就第二次上台了。在说出自己的感受的时候，爸爸已经慢慢的化解了自己的情绪，接着爸爸就说出自己的内心话，希望能跟大家交朋友，希望能在这个俱乐部里面啊有更好的练习，跟大家一起学习，真心真诚的跟大家交朋友。那当爸爸说出这些真心话的时候，得到了大家的认可，爸爸也同时告诉大家，来这里练习演讲，爸爸首先希望能跟大家先交朋友，然后再练习，这种方式。得到了大家的认可，最后成功获得了会员副主席的这个职位。爸爸想跟Sharon和安妮说，这次经历告诉爸爸，其实失败并不可怕，在失败以后要及时调整自己的状态，调整自己的心情，怎么去调整呢，就是说出自己的感受，向周围人说出自己的感受，说出自己的看法，这样就能主动卸下自己的压力，让自己放松下来，这杨可以让后面的事情进展的更加顺利。今天的故事就讲到这里，爸爸爱你们，喜欢你们了。",
            "content_html": "<h2 id=\"要点\">要点：</h2><p>说出自己的感受，积极化解情绪</p><h2 id=\"结构\">结构：</h2><ol>  <li>半年一次的俱乐部选举即将开始</li>  <li>我自己写了ppt，做了选举前的准备</li>  <li>选举很激烈，主席选举经过2次平分后终于选出结果，大家也很欢乐</li>  <li>接着我上台选举VPE，上台很紧张，自己讲的有点死板</li>  <li>由于最近在俱乐部里挺活跃的，抱着一线希望，但最后还是败下阵来</li>  <li>接着收拾下心情，继续竞选后面的职位</li>  <li>有人提议VPM，我接受了</li>  <li>我上台后，先化解自己的情绪，说出了自己的感受</li>  <li>同时为VPM制定了目标，并真诚说出自己的内心话，希望跟大家交朋友</li>  <li>爸爸认为练习技巧前应该先交朋友，有了朋友技巧才有用，得到大家的认可，最后成功选举获得VPM</li>  <li>价值升华，失败不可怕，及时调整心态，说出感受，主动卸下压力，能让事情进展的更加顺利</li></ol><h2 id=\"内容\">内容：</h2><p>Hello Sharon and hello，Anne，爸爸喜欢你们。爸爸到深圳了，要再过一个月回来，到时候再跟你玩，爸爸喜欢跟你们玩游戏，喜欢跟你们聊天，喜欢跟你们一起学习，喜欢跟你们一起加油。</p><p>今天爸爸跟你们聊一下，爸爸最近在演讲俱乐部里面做的一些事情好不好？</p><p>最近半年爸爸都在演讲俱乐部里面练习演讲，练习表达，这和Sharon在学校里面练小主播一样，非常像，爸爸每天都会练习那个绕口令，都会练习口步操，是不是跟你们很像？平时的时候爸爸会做一些演讲，上台演讲，这样呢会让爸爸在公众表达上更好一些，平常跟人沟通交流时，也能更自然一些。</p><p>那爸爸想跟确认跟安妮说说说最近爸爸在俱乐部里面的一件事好不好？最近俱乐部里面要选举官员，怎么是官员？呢就是嗯宣传学校里面选班长，选学习委员，选体育委员，这些是一样的，爸爸在俱乐部里面也要选主席，要选副会长，要选秘书长等这些岗位，那这些岗位呢要做竞选演讲。</p><p>于是爸爸上台做了竞选演讲，爸爸上台了两次，做了两次竞选演讲，分别去竞选了两个职位。</p><p>第一个职位的时候爸爸上台很紧张，自己说话也有点很死板，说话的内容不是很清楚，因为爸爸太紧张了，通常紧张的时候爸爸说话都是有一点点啊有语无伦次，虽然抱着一线希望，但是最后还是败下阵来了。</p><p>于是就收拾了一下心情继续的后面的竞选岗位。等爸爸第二次上台的时候，爸爸先做的一件事情就是爸爸先化解情绪，再开始自己的演讲内容，爸爸第二次上台的时候也还是很紧张，于是我上台时先说出自己的感受，说说自己为什么紧张，说自己还在想怎么去改进就第二次上台了。</p><p>在说出自己的感受的时候，爸爸已经慢慢的化解了自己的情绪，接着爸爸就说出自己的内心话，希望能跟大家交朋友，希望能在这个俱乐部里面啊有更好的练习，跟大家一起学习，真心真诚的跟大家交朋友。</p><p>那当爸爸说出这些真心话的时候，得到了大家的认可，爸爸也同时告诉大家，来这里练习演讲，爸爸首先希望能跟大家先交朋友，然后再练习，这种方式。得到了大家的认可，最后成功获得了会员副主席的这个职位。</p><p>爸爸想跟Sharon和安妮说，这次经历告诉爸爸，其实失败并不可怕，在失败以后要及时调整自己的状态，调整自己的心情，怎么去调整呢，就是说出自己的感受，向周围人说出自己的感受，说出自己的看法，这样就能主动卸下自己的压力，让自己放松下来，这杨可以让后面的事情进展的更加顺利。</p><p>今天的故事就讲到这里，爸爸爱你们，喜欢你们了。</p>",
            "url": "http://www.luzexi.com/2021/11/27/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A119",
            
            
            
            
            
            "date_published": "2021-11-27T00:00:00+08:00",
            "date_modified": "2021-11-27T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/11/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B050",
            "title": "读书笔记(四十九) 《游戏引擎架构》#4 低阶渲染器（3）",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》后对引擎架构的理解又深入了些。近段时间有对引擎剖析的想法，正好借这书本对游戏引擎架构做一个完整分析。此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块，最后通过实践简单引擎开发来完成对引擎知识的掌握。游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。同时《游戏引擎架构》中部分知识太过陈旧的部分，会重新深挖后总结出自己的观点。概述：本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：  时间库  自定义容器库  字符串散列库  内存管理框架  RTTI与反射模块  图形计算库  资产管理模块  低阶渲染器  剔除与合批模块  动画模块  物理模块  UI底层框架  性能剖析器的核心部分  脚本系统  视觉效果模块本篇内容为列表中的第8个部分的第1节。正文：简单回顾下前文前文我们聊了下显卡在计算机硬件主板中的位置与结构，知道了CPU、GPU的通信介质，并简单介绍了手机上的主板结构。本篇开头对上一篇做一些内容补充，PC和手机的不同硬件组织，以及CPU与其他芯片的通信过程。下面我们开始这篇内容本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。目录：  主板结构中的显卡  GPU功能发展史  GPU与CPU的差异  GPU硬件特点  图形驱动程序架构  引擎低阶渲染架构内容结构  CPU硬件结构  GPU硬件结构  GPU手机管线与PC管线的差异简单回顾下前文，前文我们主要讲了显卡的发展历史，知道了显卡功能和管线是如何一步步转变为现在这样子的。CPU结构与工作原理我们知道，CPU运行时有三类元器件构成，取指器、译码器、运算器（逻辑算术运算器、浮点数运算器、单指令多数据运算器等）。这三类元器件代表三个阶段取指阶段（Fetch）、指令译码阶段（Decode）、执行阶段（Execute），它们在CPU内执行的步骤如下图：（图-取指-译指-执行三步骤）取指阶段为从内存或缓存中取得指令并存放到寄存器中的过程。接着，译码器会将寄存器中的指令翻译成操作指令，指令译码器按照预定的指令格式，对取回的指令进行拆分和解释，识别区分出不同的指令类别以及各种获取操作数的方法。在组合逻辑控制的计算机中，指令译码器对不同的指令操作码产生不同的控制电位，以形成不同的微操作序列；在微程序控制的计算机中，指令译码器用指令操作码来找到执行该指令的微程序的入口，并从此入口开始执行。运算阶段，则根据指令执行不同的运算单元，完成指令所规定的各种操作，具体实现指令的功能。为此，CPU 的不同部分被连接起来，以执行所需的操作。（图-控制单元-运算单元-存储单元）因此，通常我们将取指器、译码器统称为控制单元，计算器称为算术逻辑单元（ALU），寄存器和高速缓存称为存储单元。除了这三个基本单元，当下这样复杂的CPU中还有包括分支预测器、乱序控制器、内存预加载器等等。这里简单介绍下CPU指令流水线、分支预测、乱序执行的原理。指令流水线起初CPU指令执行是线性的，只靠取指、译码、运算顺序执行三个模块，这导致元器件的工作顺序是线性的，当一个元器件执行时，其他元器件是空等待状态，CPU执行效率比较低。为了提高效率，提高空等待的元器件的利用率，对指令执行流水线进行了拆分，并同时增加多个流水线不断减少元器件的空等待装填。如下图：（拆分多级流水线）将原本线性的三个指令执行顺序，拆分成一个个小模块，让这些独立的小模块可以自顾自的循环工作，减少前后的等待时间，从而提高了指令执行效率。用这种方式把一个指令拆分成“取指令 - 指令译码 - 执行指令”这样三个部分，这就是一个三级的流水线。进一步把“执行指令”拆分成“ALU 计算（指令执行）- 内存访问 - 数据写回”，就会变成一个五级的流水线。继续拆分，将一个长时间的操作步骤，拆分成更多的步骤，让所有步骤需要执行的时间尽量都差不多长。这样，也就可以解决我们在单指令周期处理器中遇到的复杂指令性能问题。（同时多级流水线会出现许多问题，例如模块间寄存器的写入次数太多，多模块读写同一个资源相互冲突等，这里不细说，CPU最终都有解决方案去解决）现代的 ARM 或 Intel 的 CPU，流水线级数都已经到了 14 级。乱序执行我们在写程序时，常常会发现函数内几个执行操作顺序并不互相依赖，哪个在前哪个在后都没有太大的关系。此时不仅编译器会对这些不相互依赖的计算操作进行重新顺序排序用于优化CPU执行效率（这也是导致线程不同步的其中一个原因），CPU也会将不相互依赖的指令放在不相同的指令流水线上以加快执行速度。（指令在不同CPU流水线上乱序执行：图来源网络）我们从图中可以看到，在流水线里，当后面的指令不依赖前面的指令时，就不用等待前面的指令执行完毕后再执行，可以另起一个流水线执行，否则就需要用NOP隔周期等待的方式将执行单元延后计算。因此我们所写的代码的执行顺序其实并不是我们所想象的那样，在CPU中大部分时候其实是乱序执行的，这样元器件的利用率更高，执行效率也更高，而依赖而停顿的次数也更少。（乱序执行的流程图）乱序执行实际的过程比我们想象的要复杂一些，总体上它会先拆分指令，再分发给执行单元，结束后将结果重新排序，最后提交缓冲。分支预测程序中有很多true或false的判断来跳转下文要执行的指令，这种跳转会使得执行流水线发生停顿，因为要依赖前面代码计算的结果再决定要执行哪段程序，因此流水线不中断并等待结果，这会使CPU执行效率降低。在CPU中有分支预测器，它是一种数字电路，在分支指令执行前，猜测哪一个分支会被执行，这样能显著提高pipeline的性能。可以理解为，分支预测器会主动猜测分支是true还是false。如果猜错了，处理器要flush掉pipeline, 回滚到之前的分支，然后重新热启动，选择另一条路径。 如果猜对了，处理器不需要暂停，继续往下执行。也就是说，如果CPU每次都猜错，处理器将耗费大量时间在停止-回滚-热启动这一周期性过程里。反之，如果侥幸每次都猜对了，那么处理器将从不停止、无需等待的执行后面的指令。（分支预测图）CPU执行指令遇到条件时不知道该读取哪些指令，需要等待判断条件中的计算结果，这样就中断了后面指令执行流水线使得执行效率下降。于是CPU增加了分支预测器，猜if条件中是True还是False，如果猜对了效率就会提高，如果猜错了，则重新计算。分支预测的关键是，预测算法能猜对多少。分支预测分为动态分支预测和静态分支预测。动态预测在执行过程中统计了通过率，根据通过率去调整预测方向，静态则始终以一个值作为判断标准。动态预测有好几种，最常见的是双模预测，通过四个状态位来动态调整预测结果。其它常见分支预测器如两级自适应预测器，局部/全局分支预测器，融合分支预测器，Agree预测期，神经分支预测器等。CPU原理小结（CPU抽象元件图）现在我们知道了CPU指令周期的工作方式，分为三个步骤，取指、译码、运算。运算后需要寄存器和高速缓存来作为存储器，CPU会从内存中获取指令并最终将数据写入内存。我们把CPU中的元件抽象成，取指和译码元件、逻辑运算元件、数据缓存，就有了上面这幅简单抽象的CPU结构图。下面我们来看看硬件上的元器件是如何分布的：（CPU硬件结构图：来源网络）我们看到CPU除了基本的控制器、运算器、寄存器、高速缓存外，还额外放置了乱序执行器、分支预测器、内存预装载器等用于提高CPU效率。这些元器件全部加起来，整个就是一个CPU Core。（多核架构图：来源网络）实际的设备中通常由多个CPU Core组成多核的架构，每个CPU Core都有自己的高速缓存L1，不同CPU Core之间也有共享的高速缓存L2，通常每级缓存的存取速度有10倍的差距，而内存的存取速度比高速缓存差的更多，对于CPU Core来说可以认为它是一个外部存储设备，通过桥接芯片连接。GPU硬件结构与原理前面介绍了CPU的内部结构，现代无论是手机还是PC机基本都是多核的，每个核就是1个CPU Core，每个CPU Core里都有取指器和译码器，还有逻辑运算器，以及寄存器和高速缓存。除了上述基本元件外还有其他元器件用于优化CPU执行效率，包括乱序执行器、分支预测器、内存预装载器等。GPU图形管线的变迁我们从GPU历史里知道，原本显卡只是一个数据传输和画面转换接口，在不断的变革下成了主板上一个独立的芯片，之后就有了GPU的概念。CPU将数据传输到显存再通知GPU处理这些数据，GPU则拥有图形图像的处理流水线，专门处理图像。起初图形的顶点、片元都在CPU上计算，到了Voodoo FX显卡时已经将图元生成后的步骤拆分到了GPU上，最后再将顶点处理部分的计算合入到GPU上，此时GPU才真正形成了自己的图形管线。如下图：（图形计算管线变迁1-1982年前的纯2D时代）1982年前，CPU承担大部分的工作，当时还没有GPU的概念，还只能以显示适配器的名称称呼。（图形计算管线变迁2-1996年3dfx Voodoo）到1996年，GPU已经可以分担CPU的部分功能，只留下顶点处理部分部分给CPU。（图形计算管线变迁3-1998年GeForce）到1998年，所有顶点处理和片元处理都由GPU来完成了，但没有可编程部分，管线是固定的，传入顶点后无法控制顶点和片元的变化。（图形计算管线变迁4-2002年GeForce FX）到2002年，正式加入了可编程着色器，让顶点和片元的计算和展示有了更多变化。（图形计算管线变迁5-2006年GeForce 8800）到2006年，GPU管线中又增加了细分着色器，pre-Z等节点。这部分历史我们也可以通过OpenGL的功能变化来看这段历史的发展过程。（来源 wiki）1.1 1997 年 3 月，纹理对象，顶点数组1.2 1998 年 3 月，3D 纹理、BGRA 和打包像素格式1.2.1 1998年10月，ARB 扩展概念1.3 2001 年 8 月，多重纹理、多重采样、纹理压缩1.4 2002 年 7 月，深度图，GLSlang1.5 2003 年 7 月，顶点缓冲对象 (VBO)，遮挡查询2.0 2004 年 9 月， GLSL 1.1，MRT，两个纹理的非幂，点精灵，双面模板2.1 2006 年 7 月 ，GLSL 1.2，像素缓冲对象 (PBO)，sRGB 纹理3.0 2008 年 8 月 ，GLSL 1.3，纹理数组，条件渲染，帧缓冲对象 (FBO)3.1 2009 年 3 月， GLSL 1.4，Instancing，纹理缓存对象，统一缓存对象，图元重启3.2 2009 年 8 月， GLSL 1.5，几何着色器，多重采样纹理3.3 2010 年 3 月， GLSL 3.30，从 OpenGL 4.0 规范向后移植尽可能多的功能4.0 2010 年 3 月， GLSL 4.00，GPU 上的曲面细分，具有 64 位精度的着色器4.1 2010 年 7 月， GLSL 4.10，开发人员友好的调试输出，与 OpenGL ES 2.0 的兼容性4.2 2011 年 8 月， GLSL 4.20，带原子计数器的着色器，绘制传输给Feed back实例，着色器打包，性能改进4.3 2012 年 8 月， GLSL 4.30，利用 GPU 并行性的计算着色器、着色器存储缓冲区对象、高质量 ETC2/EAC 纹理压缩、增强的内存安全性、多应用程序稳健性扩展、与 OpenGL ES 3.0 的兼容性4.4 2013 年 7 月， GLSL 4.40，缓冲区放置控制，高效异步查询，着色器变量布局，高效多对象绑定，Direct3D 应用程序的流线型移植，无绑定纹理扩展，稀疏纹理扩展4.5 2014 年 8 月， GLSL 4.50，直接状态访问 (DSA)，刷新控制，鲁棒性，OpenGL ES 3.1 API 和着色器兼容性，DX11 仿真功能4.6 2017 年 7 月， GLSL 4.60，更高效的几何处理和着色器执行，更多信息，无错误上下文，多边形偏移钳位，SPIR-V，各向异性过滤经过显卡历史、GPU管线的变化历史、OpenGL的功能变迁史，让我们把GPU看的更清楚。GPU Core结构我们知道现代的 CPU 里除了基本的元器件外，还有许多围绕提高执行效率的元器件，以及增加诸多功能的其他元器件。这些元器件在 GPU 里有点多余了，GPU 的整个处理过程是一个流式处理过程，没有那么多分支条件，以及复杂的依赖关系。因此我们可以把 GPU 里这些对应的元器件去掉，只留下取指令、指令译码、ALU 以及执行这些计算需要的寄存器和缓存。如图：（GPU元器件瘦身图）这样看来GPU core比CPU Core的构造简单的多了，由于传输GPU的数据并不相互依赖的，因此我们可以用很多个GPU Core来并行计算这些数据。于是就有了，多GPU Core的结构，如下图：（多个Core并行工作图）多个Core并行工作时它们使用了相同的取指器并且有相同的代码，为什么不把它们并起来呢。前面我们说过SIMD，它把4个数据一起提交并用一个指令执行它完成计算。在GPU中借鉴了SIMD，用了一种跟它很像的处理技术叫做SIMT（Single Instruction Multiple Threads），如下图：（ 单指令多数据流管线）在SIMT中，向GPU Core输入的是8个图元或片元，同时输出8个结果，每次输入多个数据到GPU Core中，并获得多个结果。SIMT 比 SIMD 更加灵活。SIMT可以把多条数据，交给不同的线程去处理。各个线程里面执行的指令流程是一样的，但是可能根据数据的不同，走到不同的条件分支。这样，相同的代码和相同的流程，可能执行不同的具体的指令。这个线程走到的是 if 的条件分支，另外一个线程走到的就是 else 的条件分支了。GPU的分支处理我们CPU有对分支做预测，让流水线停顿更少，GPU Core也会对分支做优化处理。（GPU的分支处理）常用的GPU分支处理SIMD里，为每个指令都分配一个ALU做并行处理，用多个周期分别计算分支的两种结果。这样做就不会让流水线停滞，但是这样做有效率问题，在一个指令周期里，很多ALU是闲置的。因此在SIMD之后，SIMT（Single Instruction，Multiple Threads）技术可以变相的做分支的顺序执行，如下图：（SIMT 分支预测并行计算）在SIMT中，各个线程里面执行的指令流程是一样的，只是走的不同的分支。相同的代码和相同的流程，执行不同的分支。可能一些线程走到的是 if 的条件分支，而另外一些线程走到的就是 else 的条件分支，这种并行计算使得计算本身无需依赖上文，也让ALU不再空闲停滞。这里简单说下解决SIMIT流水线中的卡顿问题拆分存储缓存，让上下文依赖的计算在不同时段同时计算，以提高ALU的利用率。（卡顿时启动另一条管线）（拆分整个缓存为独立缓存）GPU为了不等待分支条件而导致的停顿流水线，就要对每个分支做都做计算。分支内的数据仍然会有依赖关系，依赖关系就会造成卡顿，需要等待计算或等待获取资源。因此将原来的一整个缓存，拆分为多个缓存，使得流水线在阻塞时能更好的使用闲置ALU计算下一条数据。这样就能更好的利用ALU计算做优化了。现实GPU硬件中的物理架构前面我们说的都是抽象的GPU Core结构，下面我们来看下实际中的GPU物理架构。看到这些GPU架构可以发现它们虽然彼此有差异，但很多概念相同，下面我们俩理清一下这些架构中组建的概念：GPC（Graphics Processing Cluster） ： 图形处理集群，GPU划分多个GPC，每个GPC里有多个TPC，每个TPC里包含了多个SM和1个Rester EngineTPC（Texture Processing Cluster） ： 图像处理集群，是由若干个SM、1个纹理单元（Texture Unit）和一些逻辑控制和ALU组成。RT Core（Ray Trace Core） ： RT Core是SM里面加了一条专用的流水线(ASIC)来计算射线和三角形求交（可以访问BVH，用于光线追踪）。由于是ASIC专用电路逻辑，与shader code做求交计算相比，性能有数量级的提升。Rester Engine ： 光栅引擎，处理它接收到的三角形，并为它负责的那些部分生成像素信息（也处理背面剔除和 Z 剔除）。PolyMorp Engine：曲面引擎，是一个带有顶点提取器、视口变换的累积集群，它处理属性设置和流输出，这些都合并到了这个处理器中，极大地扩展了曲面细分和（当发送到光栅引擎时）光栅化性能。Thread Engine：线程引擎，调度线程到核的引擎SM（Stream Multiprocessor）、SMX、SMM ：SM包含GPU Core内核，指令单位，调度程序。Warp Scheduler、Dispatch Unit：负责线程束调度，将软件线程按一捆一捆（不是一个一个）的方式分配到计算核上。一个Warp由32个线程组成，Warp Scheduler的指令通过Dispatch Units派送到Core核上执行。SP（Streaming Processors）、Core ：SP有时也叫CUDA core，一个 SP 包括多个 ALU 和 FPU。SP是作用于顶点或像素数据的真正处理单元。ALU（Arithmetic Logic Unit）、FPU（Float Point Unit）：ALU 是算术和逻辑单元，FPU 是浮点单元。INT32，FP32 ：在GPU里支持单精度运算的Single Precision ALU称之为FP32 core或简称core，而把双精度运算的Double Precision ALU称之为DP unit或者FP64 core。第三代的Kepler架构里，FP64单元和FP32单元的比例是高端机1:3或者低端机1:24，到了第五代比例为1:2，低端型号里仍然保持为1:32。SFU（Special Function Unit）：执行特殊数学运算（sin、cos、log等）TENSO CORE ： 精度混合计算单元，转换不同精度之间的运算结果，用于执行矩阵乘法的计算单元，精度混合分为整数精度和浮点数精度。ROP（Render Output Unit） ：渲染输出单元 ，一个ROP内部有很多ROP单元，在ROP单元中有深度测试和Framebuffer混合，深度和颜色的设置必须是原子操作，否则两个不同的三角形在同一个像素点就会有冲突和错误。LD/ST（Load/Store Unit）：加载和存储数据Share Memory、L1 Data Cache、L1 Cache、L2 Cache ：共享内存，以及多级的高速缓存RF（Register File）：寄存器堆，多个寄存器组成的阵列Instruction Cache ：指令缓存未完待续…参考资料：《How Shader Cores Work》https://engineering.purdue.edu/~smidkiff/KKU/files/GPUIntro.pdf《CPU体系结构》https://my.oschina.net/fileoptions/blog/1633021《深入理解CPU的分支预测(Branch Prediction)模型》https://zhuanlan.zhihu.com/p/22469702《分析Unity在移动设备的GPU内存机制（iOS篇）》https://www.jianshu.com/p/68b41a8d0b37《针对移动端TBDR架构GPU特性的渲染优化》https://gameinstitute.qq.com/community/detail/123220《A look at the PowerVR graphics architecture: Tile-based rendering》https://www.imaginationtech.com/blog/a-look-at-the-powervr-graphics-architecture-tile-based-rendering/《A look at the PowerVR graphics architecture: Deferred rendering》https://www.imaginationtech.com/blog/the-dr-in-tbdr-deferred-rendering-in-rogue/《深入GPU硬件架构及运行机制》https://www.cnblogs.com/timlly/p/11471507.html《深入浅出计算机组成原理》https://time.geekbang.org/column/article/105401?code=7VZ-Md9oM7vSBSE6JyOgcoQhDWTOd-bz5CY8xqGx234%3D《Nvidia Geforce RTX-series is born》https://www.fudzilla.com/reviews/47224-nvidia-geforce-rtx-series-is-born?start=2《渲染管线与GPU（Shading前置知识）》https://zhuanlan.zhihu.com/p/336999443《剖析虚幻渲染体系（12）- 移动端专题Part 1（UE移动端渲染分析）》https://www.cnblogs.com/timlly/p/15511402.html《tpc-texture-processing-cluster》https://gputoaster.wordpress.com/2010/12/11/tpc-texture-processing-cluster/《Life of a triangle - NVIDIA’s logical pipeline》https://developer.nvidia.com/content/life-triangle-nvidias-logical-pipeline《Rasterisation wiki》https://en.wikipedia.org/wiki/Rasterisation《PolyMorph engine and Data Caches by Hilbert Hagedoorn》https://www.guru3d.com/articles-pages/nvidia-gf100-(fermi)-technology-preview,3.html《NVIDIA GPU的一些解析》https://zhuanlan.zhihu.com/p/258196004《tensor-core-performance-the-ultimate-guide》https://developer.download.nvidia.cn/video/gputechconf/gtc/2019/presentation/s9926-tensor-core-performance-the-ultimate-guide.pdf《Understanding the Understanding the graphics pipeline》https://www.seas.upenn.edu/~cis565/LECTURES/Lecture2%20New.pdf已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485051&amp;idx=1&amp;sn=e98f1e1971d56ce6543926b4f9bad204&amp;chksm=fc22637ccb55ea6a4c16c5c0d8fd43cff936350490d79f1e377b61e4914300c39c4fc2911da1&amp;token=53415989&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》后对引擎架构的理解又深入了些。</p><p>近段时间有对引擎剖析的想法，正好借这书本对游戏引擎架构做一个完整分析。</p><p>此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。</p><p>借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块，最后通过实践简单引擎开发来完成对引擎知识的掌握。</p><p>游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。</p><p>同时《游戏引擎架构》中部分知识太过陈旧的部分，会重新深挖后总结出自己的观点。</p><p>概述：</p><p>本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：</p><ol>  <li>时间库</li>  <li>自定义容器库</li>  <li>字符串散列库</li>  <li>内存管理框架</li>  <li>RTTI与反射模块</li>  <li>图形计算库</li>  <li>资产管理模块</li>  <li>低阶渲染器</li>  <li>剔除与合批模块</li>  <li>动画模块</li>  <li>物理模块</li>  <li>UI底层框架</li>  <li>性能剖析器的核心部分</li>  <li>脚本系统</li>  <li>视觉效果模块</li></ol><p>本篇内容为列表中的第8个部分的第1节。</p><h1 id=\"正文\">正文：</h1><p>简单回顾下前文</p><p>前文我们聊了下显卡在计算机硬件主板中的位置与结构，知道了CPU、GPU的通信介质，并简单介绍了手机上的主板结构。本篇开头对上一篇做一些内容补充，PC和手机的不同硬件组织，以及CPU与其他芯片的通信过程。</p><p>下面我们开始这篇内容</p><p>本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。</p><p>目录：</p><ol>  <li>主板结构中的显卡</li>  <li>GPU功能发展史</li>  <li>GPU与CPU的差异</li>  <li>GPU硬件特点</li>  <li>图形驱动程序架构</li>  <li>引擎低阶渲染架构</li></ol><p>内容结构</p><ol>  <li>CPU硬件结构</li>  <li>GPU硬件结构</li>  <li>GPU手机管线与PC管线的差异</li></ol><p>简单回顾下前文，前文我们主要讲了显卡的发展历史，知道了显卡功能和管线是如何一步步转变为现在这样子的。</p><h2 id=\"cpu结构与工作原理\">CPU结构与工作原理</h2><p>我们知道，CPU运行时有三类元器件构成，取指器、译码器、运算器（逻辑算术运算器、浮点数运算器、单指令多数据运算器等）。</p><p>这三类元器件代表三个阶段取指阶段（Fetch）、指令译码阶段（Decode）、执行阶段（Execute），它们在CPU内执行的步骤如下图：</p><p>（图-取指-译指-执行三步骤）</p><p>取指阶段为从内存或缓存中取得指令并存放到寄存器中的过程。</p><p>接着，译码器会将寄存器中的指令翻译成操作指令，指令译码器按照预定的指令格式，对取回的指令进行拆分和解释，识别区分出不同的指令类别以及各种获取操作数的方法。在组合逻辑控制的计算机中，指令译码器对不同的指令操作码产生不同的控制电位，以形成不同的微操作序列；在微程序控制的计算机中，指令译码器用指令操作码来找到执行该指令的微程序的入口，并从此入口开始执行。</p><p>运算阶段，则根据指令执行不同的运算单元，完成指令所规定的各种操作，具体实现指令的功能。为此，CPU 的不同部分被连接起来，以执行所需的操作。</p><p>（图-控制单元-运算单元-存储单元）</p><p>因此，通常我们将取指器、译码器统称为控制单元，计算器称为算术逻辑单元（ALU），寄存器和高速缓存称为存储单元。</p><p>除了这三个基本单元，当下这样复杂的CPU中还有包括分支预测器、乱序控制器、内存预加载器等等。</p><p>这里简单介绍下CPU指令流水线、分支预测、乱序执行的原理。</p><h2 id=\"指令流水线\">指令流水线</h2><p>起初CPU指令执行是线性的，只靠取指、译码、运算顺序执行三个模块，这导致元器件的工作顺序是线性的，当一个元器件执行时，其他元器件是空等待状态，CPU执行效率比较低。</p><p>为了提高效率，提高空等待的元器件的利用率，对指令执行流水线进行了拆分，并同时增加多个流水线不断减少元器件的空等待装填。如下图：</p><p>（拆分多级流水线）</p><p>将原本线性的三个指令执行顺序，拆分成一个个小模块，让这些独立的小模块可以自顾自的循环工作，减少前后的等待时间，从而提高了指令执行效率。</p><p>用这种方式把一个指令拆分成“取指令 - 指令译码 - 执行指令”这样三个部分，这就是一个三级的流水线。进一步把“执行指令”拆分成“ALU 计算（指令执行）- 内存访问 - 数据写回”，就会变成一个五级的流水线。</p><p>继续拆分，将一个长时间的操作步骤，拆分成更多的步骤，让所有步骤需要执行的时间尽量都差不多长。这样，也就可以解决我们在单指令周期处理器中遇到的复杂指令性能问题。（同时多级流水线会出现许多问题，例如模块间寄存器的写入次数太多，多模块读写同一个资源相互冲突等，这里不细说，CPU最终都有解决方案去解决）现代的 ARM 或 Intel 的 CPU，流水线级数都已经到了 14 级。</p><h2 id=\"乱序执行\">乱序执行</h2><p>我们在写程序时，常常会发现函数内几个执行操作顺序并不互相依赖，哪个在前哪个在后都没有太大的关系。此时不仅编译器会对这些不相互依赖的计算操作进行重新顺序排序用于优化CPU执行效率（这也是导致线程不同步的其中一个原因），CPU也会将不相互依赖的指令放在不相同的指令流水线上以加快执行速度。</p><p>（指令在不同CPU流水线上乱序执行：图来源网络）</p><p>我们从图中可以看到，在流水线里，当后面的指令不依赖前面的指令时，就不用等待前面的指令执行完毕后再执行，可以另起一个流水线执行，否则就需要用NOP隔周期等待的方式将执行单元延后计算。因此我们所写的代码的执行顺序其实并不是我们所想象的那样，在CPU中大部分时候其实是乱序执行的，这样元器件的利用率更高，执行效率也更高，而依赖而停顿的次数也更少。</p><p>（乱序执行的流程图）</p><p>乱序执行实际的过程比我们想象的要复杂一些，总体上它会先拆分指令，再分发给执行单元，结束后将结果重新排序，最后提交缓冲。</p><h2 id=\"分支预测\">分支预测</h2><p>程序中有很多true或false的判断来跳转下文要执行的指令，这种跳转会使得执行流水线发生停顿，因为要依赖前面代码计算的结果再决定要执行哪段程序，因此流水线不中断并等待结果，这会使CPU执行效率降低。</p><p>在CPU中有分支预测器，它是一种数字电路，在分支指令执行前，猜测哪一个分支会被执行，这样能显著提高pipeline的性能。</p><p>可以理解为，分支预测器会主动猜测分支是true还是false。</p><p>如果猜错了，处理器要flush掉pipeline, 回滚到之前的分支，然后重新热启动，选择另一条路径。 如果猜对了，处理器不需要暂停，继续往下执行。</p><p>也就是说，如果CPU每次都猜错，处理器将耗费大量时间在停止-回滚-热启动这一周期性过程里。反之，如果侥幸每次都猜对了，那么处理器将从不停止、无需等待的执行后面的指令。</p><p>（分支预测图）</p><p>CPU执行指令遇到条件时不知道该读取哪些指令，需要等待判断条件中的计算结果，这样就中断了后面指令执行流水线使得执行效率下降。于是CPU增加了分支预测器，猜if条件中是True还是False，如果猜对了效率就会提高，如果猜错了，则重新计算。</p><p>分支预测的关键是，预测算法能猜对多少。</p><p>分支预测分为动态分支预测和静态分支预测。动态预测在执行过程中统计了通过率，根据通过率去调整预测方向，静态则始终以一个值作为判断标准。动态预测有好几种，最常见的是双模预测，通过四个状态位来动态调整预测结果。其它常见分支预测器如两级自适应预测器，局部/全局分支预测器，融合分支预测器，Agree预测期，神经分支预测器等。</p><h2 id=\"cpu原理小结\">CPU原理小结</h2><p>（CPU抽象元件图）</p><p>现在我们知道了CPU指令周期的工作方式，分为三个步骤，取指、译码、运算。运算后需要寄存器和高速缓存来作为存储器，CPU会从内存中获取指令并最终将数据写入内存。</p><p>我们把CPU中的元件抽象成，取指和译码元件、逻辑运算元件、数据缓存，就有了上面这幅简单抽象的CPU结构图。</p><p>下面我们来看看硬件上的元器件是如何分布的：</p><p>（CPU硬件结构图：来源网络）</p><p>我们看到CPU除了基本的控制器、运算器、寄存器、高速缓存外，还额外放置了乱序执行器、分支预测器、内存预装载器等用于提高CPU效率。这些元器件全部加起来，整个就是一个CPU Core。</p><p>（多核架构图：来源网络）</p><p>实际的设备中通常由多个CPU Core组成多核的架构，每个CPU Core都有自己的高速缓存L1，不同CPU Core之间也有共享的高速缓存L2，通常每级缓存的存取速度有10倍的差距，而内存的存取速度比高速缓存差的更多，对于CPU Core来说可以认为它是一个外部存储设备，通过桥接芯片连接。</p><p>GPU硬件结构与原理</p><p>前面介绍了CPU的内部结构，现代无论是手机还是PC机基本都是多核的，每个核就是1个CPU Core，每个CPU Core里都有取指器和译码器，还有逻辑运算器，以及寄存器和高速缓存。除了上述基本元件外还有其他元器件用于优化CPU执行效率，包括乱序执行器、分支预测器、内存预装载器等。</p><p>GPU图形管线的变迁</p><p>我们从GPU历史里知道，原本显卡只是一个数据传输和画面转换接口，在不断的变革下成了主板上一个独立的芯片，之后就有了GPU的概念。CPU将数据传输到显存再通知GPU处理这些数据，GPU则拥有图形图像的处理流水线，专门处理图像。</p><p>起初图形的顶点、片元都在CPU上计算，到了Voodoo FX显卡时已经将图元生成后的步骤拆分到了GPU上，最后再将顶点处理部分的计算合入到GPU上，此时GPU才真正形成了自己的图形管线。如下图：</p><p>（图形计算管线变迁1-1982年前的纯2D时代）</p><p>1982年前，CPU承担大部分的工作，当时还没有GPU的概念，还只能以显示适配器的名称称呼。</p><p>（图形计算管线变迁2-1996年3dfx Voodoo）</p><p>到1996年，GPU已经可以分担CPU的部分功能，只留下顶点处理部分部分给CPU。</p><p>（图形计算管线变迁3-1998年GeForce）</p><p>到1998年，所有顶点处理和片元处理都由GPU来完成了，但没有可编程部分，管线是固定的，传入顶点后无法控制顶点和片元的变化。</p><p>（图形计算管线变迁4-2002年GeForce FX）</p><p>到2002年，正式加入了可编程着色器，让顶点和片元的计算和展示有了更多变化。</p><p>（图形计算管线变迁5-2006年GeForce 8800）</p><p>到2006年，GPU管线中又增加了细分着色器，pre-Z等节点。</p><p>这部分历史我们也可以通过OpenGL的功能变化来看这段历史的发展过程。</p><p>（来源 wiki）</p><p>1.1 1997 年 3 月，纹理对象，顶点数组</p><p>1.2 1998 年 3 月，3D 纹理、BGRA 和打包像素格式</p><p>1.2.1 1998年10月，ARB 扩展概念</p><p>1.3 2001 年 8 月，多重纹理、多重采样、纹理压缩</p><p>1.4 2002 年 7 月，深度图，GLSlang</p><p>1.5 2003 年 7 月，顶点缓冲对象 (VBO)，遮挡查询</p><p>2.0 2004 年 9 月， GLSL 1.1，MRT，两个纹理的非幂，点精灵，双面模板</p><p>2.1 2006 年 7 月 ，GLSL 1.2，像素缓冲对象 (PBO)，sRGB 纹理</p><p>3.0 2008 年 8 月 ，GLSL 1.3，纹理数组，条件渲染，帧缓冲对象 (FBO)</p><p>3.1 2009 年 3 月， GLSL 1.4，Instancing，纹理缓存对象，统一缓存对象，图元重启</p><p>3.2 2009 年 8 月， GLSL 1.5，几何着色器，多重采样纹理</p><p>3.3 2010 年 3 月， GLSL 3.30，从 OpenGL 4.0 规范向后移植尽可能多的功能</p><p>4.0 2010 年 3 月， GLSL 4.00，GPU 上的曲面细分，具有 64 位精度的着色器</p><p>4.1 2010 年 7 月， GLSL 4.10，开发人员友好的调试输出，与 OpenGL ES 2.0 的兼容性</p><p>4.2 2011 年 8 月， GLSL 4.20，带原子计数器的着色器，绘制传输给Feed back实例，着色器打包，性能改进</p><p>4.3 2012 年 8 月， GLSL 4.30，利用 GPU 并行性的计算着色器、着色器存储缓冲区对象、高质量 ETC2/EAC 纹理压缩、增强的内存安全性、多应用程序稳健性扩展、与 OpenGL ES 3.0 的兼容性</p><p>4.4 2013 年 7 月， GLSL 4.40，缓冲区放置控制，高效异步查询，着色器变量布局，高效多对象绑定，Direct3D 应用程序的流线型移植，无绑定纹理扩展，稀疏纹理扩展</p><p>4.5 2014 年 8 月， GLSL 4.50，直接状态访问 (DSA)，刷新控制，鲁棒性，OpenGL ES 3.1 API 和着色器兼容性，DX11 仿真功能</p><p>4.6 2017 年 7 月， GLSL 4.60，更高效的几何处理和着色器执行，更多信息，无错误上下文，多边形偏移钳位，SPIR-V，各向异性过滤</p><p>经过显卡历史、GPU管线的变化历史、OpenGL的功能变迁史，让我们把GPU看的更清楚。</p><h2 id=\"gpu-core结构\">GPU Core结构</h2><p>我们知道现代的 CPU 里除了基本的元器件外，还有许多围绕提高执行效率的元器件，以及增加诸多功能的其他元器件。这些元器件在 GPU 里有点多余了，GPU 的整个处理过程是一个流式处理过程，没有那么多分支条件，以及复杂的依赖关系。</p><p>因此我们可以把 GPU 里这些对应的元器件去掉，只留下取指令、指令译码、ALU 以及执行这些计算需要的寄存器和缓存。如图：</p><p>（GPU元器件瘦身图）</p><p>这样看来GPU core比CPU Core的构造简单的多了，由于传输GPU的数据并不相互依赖的，因此我们可以用很多个GPU Core来并行计算这些数据。</p><p>于是就有了，多GPU Core的结构，如下图：</p><p>（多个Core并行工作图）</p><p>多个Core并行工作时它们使用了相同的取指器并且有相同的代码，为什么不把它们并起来呢。</p><p>前面我们说过SIMD，它把4个数据一起提交并用一个指令执行它完成计算。在GPU中借鉴了SIMD，用了一种跟它很像的处理技术叫做SIMT（Single Instruction Multiple Threads），如下图：</p><p>（ 单指令多数据流管线）</p><p>在SIMT中，向GPU Core输入的是8个图元或片元，同时输出8个结果，每次输入多个数据到GPU Core中，并获得多个结果。SIMT 比 SIMD 更加灵活。</p><p>SIMT可以把多条数据，交给不同的线程去处理。各个线程里面执行的指令流程是一样的，但是可能根据数据的不同，走到不同的条件分支。这样，相同的代码和相同的流程，可能执行不同的具体的指令。这个线程走到的是 if 的条件分支，另外一个线程走到的就是 else 的条件分支了。</p><h2 id=\"gpu的分支处理\">GPU的分支处理</h2><p>我们CPU有对分支做预测，让流水线停顿更少，GPU Core也会对分支做优化处理。</p><p>（GPU的分支处理）</p><p>常用的GPU分支处理SIMD里，为每个指令都分配一个ALU做并行处理，用多个周期分别计算分支的两种结果。</p><p>这样做就不会让流水线停滞，但是这样做有效率问题，在一个指令周期里，很多ALU是闲置的。</p><p>因此在SIMD之后，SIMT（Single Instruction，Multiple Threads）技术可以变相的做分支的顺序执行，如下图：</p><p>（SIMT 分支预测并行计算）</p><p>在SIMT中，各个线程里面执行的指令流程是一样的，只是走的不同的分支。相同的代码和相同的流程，执行不同的分支。可能一些线程走到的是 if 的条件分支，而另外一些线程走到的就是 else 的条件分支，这种并行计算使得计算本身无需依赖上文，也让ALU不再空闲停滞。</p><p>这里简单说下解决SIMIT流水线中的卡顿问题</p><p>拆分存储缓存，让上下文依赖的计算在不同时段同时计算，以提高ALU的利用率。</p><p>（卡顿时启动另一条管线）</p><p>（拆分整个缓存为独立缓存）</p><p>GPU为了不等待分支条件而导致的停顿流水线，就要对每个分支做都做计算。分支内的数据仍然会有依赖关系，依赖关系就会造成卡顿，需要等待计算或等待获取资源。</p><p>因此将原来的一整个缓存，拆分为多个缓存，使得流水线在阻塞时能更好的使用闲置ALU计算下一条数据。这样就能更好的利用ALU计算做优化了。</p><p>现实GPU硬件中的物理架构</p><p>前面我们说的都是抽象的GPU Core结构，下面我们来看下实际中的GPU物理架构。</p><p>看到这些GPU架构可以发现它们虽然彼此有差异，但很多概念相同，下面我们俩理清一下这些架构中组建的概念：</p><p>GPC（Graphics Processing Cluster） ： 图形处理集群，GPU划分多个GPC，每个GPC里有多个TPC，每个TPC里包含了多个SM和1个Rester Engine</p><p>TPC（Texture Processing Cluster） ： 图像处理集群，是由若干个SM、1个纹理单元（Texture Unit）和一些逻辑控制和ALU组成。</p><p>RT Core（Ray Trace Core） ： RT Core是SM里面加了一条专用的流水线(ASIC)来计算射线和三角形求交（可以访问BVH，用于光线追踪）。由于是ASIC专用电路逻辑，与shader code做求交计算相比，性能有数量级的提升。</p><p>Rester Engine ： 光栅引擎，处理它接收到的三角形，并为它负责的那些部分生成像素信息（也处理背面剔除和 Z 剔除）。</p><p>PolyMorp Engine：曲面引擎，是一个带有顶点提取器、视口变换的累积集群，它处理属性设置和流输出，这些都合并到了这个处理器中，极大地扩展了曲面细分和（当发送到光栅引擎时）光栅化性能。</p><p>Thread Engine：线程引擎，调度线程到核的引擎</p><p>SM（Stream Multiprocessor）、SMX、SMM ：SM包含GPU Core内核，指令单位，调度程序。</p><p>Warp Scheduler、Dispatch Unit：负责线程束调度，将软件线程按一捆一捆（不是一个一个）的方式分配到计算核上。一个Warp由32个线程组成，Warp Scheduler的指令通过Dispatch Units派送到Core核上执行。</p><p>SP（Streaming Processors）、Core ：SP有时也叫CUDA core，一个 SP 包括多个 ALU 和 FPU。SP是作用于顶点或像素数据的真正处理单元。</p><p>ALU（Arithmetic Logic Unit）、FPU（Float Point Unit）：ALU 是算术和逻辑单元，FPU 是浮点单元。</p><p>INT32，FP32 ：在GPU里支持单精度运算的Single Precision ALU称之为FP32 core或简称core，而把双精度运算的Double Precision ALU称之为DP unit或者FP64 core。第三代的Kepler架构里，FP64单元和FP32单元的比例是高端机1:3或者低端机1:24，到了第五代比例为1:2，低端型号里仍然保持为1:32。</p><p>SFU（Special Function Unit）：执行特殊数学运算（sin、cos、log等）</p><p>TENSO CORE ： 精度混合计算单元，转换不同精度之间的运算结果，用于执行矩阵乘法的计算单元，精度混合分为整数精度和浮点数精度。</p><p>ROP（Render Output Unit） ：渲染输出单元 ，一个ROP内部有很多ROP单元，在ROP单元中有深度测试和Framebuffer混合，深度和颜色的设置必须是原子操作，否则两个不同的三角形在同一个像素点就会有冲突和错误。</p><p>LD/ST（Load/Store Unit）：加载和存储数据</p><p>Share Memory、L1 Data Cache、L1 Cache、L2 Cache ：共享内存，以及多级的高速缓存</p><p>RF（Register File）：寄存器堆，多个寄存器组成的阵列</p><p>Instruction Cache ：指令缓存</p><p>未完待续…</p><p>参考资料：</p><p>《How Shader Cores Work》</p><p>https://engineering.purdue.edu/~smidkiff/KKU/files/GPUIntro.pdf</p><p>《CPU体系结构》</p><p>https://my.oschina.net/fileoptions/blog/1633021</p><p>《深入理解CPU的分支预测(Branch Prediction)模型》</p><p>https://zhuanlan.zhihu.com/p/22469702</p><p>《分析Unity在移动设备的GPU内存机制（iOS篇）》</p><p>https://www.jianshu.com/p/68b41a8d0b37</p><p>《针对移动端TBDR架构GPU特性的渲染优化》</p><p>https://gameinstitute.qq.com/community/detail/123220</p><p>《A look at the PowerVR graphics architecture: Tile-based rendering》</p><p>https://www.imaginationtech.com/blog/a-look-at-the-powervr-graphics-architecture-tile-based-rendering/</p><p>《A look at the PowerVR graphics architecture: Deferred rendering》</p><p>https://www.imaginationtech.com/blog/the-dr-in-tbdr-deferred-rendering-in-rogue/</p><p>《深入GPU硬件架构及运行机制》</p><p>https://www.cnblogs.com/timlly/p/11471507.html</p><p>《深入浅出计算机组成原理》</p><p>https://time.geekbang.org/column/article/105401?code=7VZ-Md9oM7vSBSE6JyOgcoQhDWTOd-bz5CY8xqGx234%3D</p><p>《Nvidia Geforce RTX-series is born》</p><p>https://www.fudzilla.com/reviews/47224-nvidia-geforce-rtx-series-is-born?start=2</p><p>《渲染管线与GPU（Shading前置知识）》</p><p>https://zhuanlan.zhihu.com/p/336999443</p><p>《剖析虚幻渲染体系（12）- 移动端专题Part 1（UE移动端渲染分析）》</p><p>https://www.cnblogs.com/timlly/p/15511402.html</p><p>《tpc-texture-processing-cluster》</p><p>https://gputoaster.wordpress.com/2010/12/11/tpc-texture-processing-cluster/</p><p>《Life of a triangle - NVIDIA’s logical pipeline》</p><p>https://developer.nvidia.com/content/life-triangle-nvidias-logical-pipeline</p><p>《Rasterisation wiki》</p><p>https://en.wikipedia.org/wiki/Rasterisation</p><p>《PolyMorph engine and Data Caches by Hilbert Hagedoorn》</p><p>https://www.guru3d.com/articles-pages/nvidia-gf100-(fermi)-technology-preview,3.html</p><p>《NVIDIA GPU的一些解析》</p><p>https://zhuanlan.zhihu.com/p/258196004</p><p>《tensor-core-performance-the-ultimate-guide》</p><p>https://developer.download.nvidia.cn/video/gputechconf/gtc/2019/presentation/s9926-tensor-core-performance-the-ultimate-guide.pdf</p><p>《Understanding the Understanding the graphics pipeline》</p><p>https://www.seas.upenn.edu/~cis565/LECTURES/Lecture2%20New.pdf</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247485051&amp;idx=1&amp;sn=e98f1e1971d56ce6543926b4f9bad204&amp;chksm=fc22637ccb55ea6a4c16c5c0d8fd43cff936350490d79f1e377b61e4914300c39c4fc2911da1&amp;token=53415989&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2021/11/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B050",
            
            
            
            "tags": ["读书笔记","前端技术"],
            
            "date_published": "2021-11-22T00:00:00+08:00",
            "date_modified": "2021-11-22T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/11/08/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B048",
            "title": "读书笔记(四十八) 《游戏引擎架构》#4 低阶渲染器（2）",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》后对引擎架构的理解又深入了些。近段时间有对引擎剖析的想法，正好借这书本对游戏引擎架构做一个完整分析。此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块，最后通过实践简单引擎开发来完成对引擎知识的掌握。游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。同时《游戏引擎架构》中部分知识太过陈旧的部分，会重新深挖后总结出自己的观点。概述：本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：  时间库  自定义容器库  字符串散列库  内存管理框架  RTTI与反射模块  图形计算库  资产管理模块  低阶渲染器  剔除与合批模块  动画模块  物理模块  UI底层框架  性能剖析器的核心部分  脚本系统  视觉效果模块本篇内容为列表中的第8个部分的第1节。正文：简单回顾下前文前文我们聊了下显卡在计算机硬件主板中的位置与结构，知道了CPU、GPU的通信介质，并简单介绍了手机上的主板结构。本篇开头对上一篇做一些内容补充，PC和手机的不同硬件组织，以及CPU与其他芯片的通信过程。下面我们开始这篇内容本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。目录：  主板结构中的显卡  GPU功能发展史  GPU与CPU的差异  GPU硬件特点  图形驱动程序架构  引擎低阶渲染架构继续上篇未结束的内容说硬件结构时，我们常常从台式 PC 开始说起，因为智能手机本质上是袖珍型计算机，具有一些额外的无线电，并且在功耗、热量输出等方面极其受限的条件下运行。PC 主要由主板芯片组组成（通常分为连接处理器和内存“北桥”（例如 Intel 的 P45）和连接各种外围总线（例如 PCI-Express、USB 等）的“南桥”（例如 Intel 的 ICH10R） )、中央处理器（例如 CPU – Intel 的 Core 2 Duo）、随机存储器内存 (RAM)、永久存储器（硬盘或固态硬盘）、图形处理单元（例如 GPU – ATI 的 Radeon HD5890） 、电源和多个连接到 PCI 或 PCI-Express 总线的外围设备（例如，内置声音芯片组或附加 Wi-Fi 卡）。（三星手机拓扑图：图片来源网络）（iPhone6p A8 正面图：图片来源网络）（iPhone6p A8 背面图：图片来源网络）（苹果A8芯片内部结构：图片来源网络）智能手机也具有所有这些组件，只是集成度更高而已。一些主要芯片通常可以包含 CPU、GPU、其他专用协处理器、主板总线、内存控制器、LCD 控制器、声音芯片组、CMOS 摄像头接口、板载内存 ，以及一些外围设备（例如 Cell、Wifi 和蓝牙无线电）。 “应用处理器”是负责一般处理的芯片（类似于 CPU + 主板芯片组），并且可能内置了一些其他功能。 “基带处理器”负责蜂窝无线通信。智能手机与 PC 如此相似，那么为什么我们今天在智能手机中看不到像 Core 2 Duo 这样的 x86 CPU？答案是，Core 2 Duo 消耗的功率和产生的热量远远超出手机的可接受范围。典型的台式机 Core 2 Duo CPU 的功耗最高可达 65W，并且需要一个主动冷却系统来防止过热。即使是英特尔的 Atom 芯片也消耗 4W（峰值 TDP），而整个手机通常必须满足低于 1W 的功率。今天我们很多智能手机都使用 ARM 芯片， ARM 的运作方式与Intel截然不同。 Intel 自己设计和构建所有处理器，而 ARM 则创建指令集，任何跟随它们的 CPU 都将能够运行与 ARM 兼容的代码。 它还为适合其指令集的处理器创建参考设计，这使公司能够围绕 ARM 的核心设计轻松生产自己的芯片组。 一些公司，如英伟达、三星和德州仪器，只是简单地许可并采用 ARM CPU 参考设计，而其他公司，如高通和 Marvell，只许可指令集并创建自己的处理器以适应它们。 第一个 ARMv7 参考设计是 Cortex A8，其架构可在今天的智能手机中找到。很久以前低端智能手机倾向于使用实现 ARMv6 指令集的 ARM11 芯片，现在已经不复存在。这里再补充一下前文的硬件通信过程，每个带有处理程序的硬件都有自己的芯片，CPU是整个电脑的主要计算芯片，GPU则被单独拆分出来作为图像的处理芯片，除了这两个大家熟知的芯片，还有内存芯片，硬盘芯片，声卡芯片，网卡芯片等，这些芯片都通过总线进行数据交互。其中前面我们提到南桥和北桥芯片桥接了快慢不同的芯片之间的通信，让不同种类的设备通信效率更高更有序。（PC端CPU与GPU通信结构图）（手机端CPU与GPU通信结构图）CPU与其他芯片之间的通信步骤，可以简单理解为，CPU通过总线发送指令数据到其他芯片，芯片收到指令并处理后，再通过总线将反馈数据给CPU，中间处理过程也会与内存芯片或其他芯片通信后再反馈给CPU。（CPU用虚拟地址访问内存拓扑图）CPU 在访问内存时需要通过 MMU 把虚拟地址转化为物理地址，再通过总线访问内存。MMU 开启后 CPU 看到的所有地址都是虚拟地址，CPU 把这个虚拟地址发给 MMU 后，MMU 会在页表里查出这个虚拟地址对应的物理地址，再通过总线去访问DDR内存芯片。从这个芯片通信角度看，我们可以明白，总线传输数据的速度，限制了计算机的运行速度。因此我们在优化计算机程序时会常常去减少CPU与GPU之间通信量，原因就是在无法增加带宽上限这个大前提下，尽量减少它们之间通信数据量，从而减少访问消耗时间。GPU功能发展史第一篇中我们介绍过一些图形接口的发展历史，现在我们来介绍一下GPU硬件的发展历史。硬件的发展史其实是一个商业的竞争过程，中间夹杂着很多商业战略与决策。尤其是当大家都看到GPU这块高新的技术’蛋糕’，有一系列公司参与进来相互竞争。因此这里不过多的介绍商业上的活动与竞争，而是专注于介绍GPU功能的发展过程。第一个真正的3D图形卡始于早期的显示控制器，即视频移位器和视频地址生成器（video shifters and video address generators）。它们充当主处理器和显示器之间的直通通道（pass-through）。传入的数据流被转换为串行位图视频输出，例如亮度，颜色以及垂直和水平复合同步，这将像素行保持在显示生成中，并同步每条连续行以及消隐间隔（时间间隔为 结束一条扫描线并开始下一条扫描线）。（图片来源网络）1970年代开始这些视频适配器出现了一系列的改进，主要兼容了不同分辨率以及不同的视频信号。1976年，ANTIC使用直接存储器访问（DMA）处理2D显示指令。1978年，英特尔82720图形卡芯片，它能够以256x256的分辨率（或以512x512的单色）显示八种颜色数据。其32KB的显示内存足以绘制线，弧，圆，矩形和字符位图。该芯片还提供了缩放，屏幕分区和滚动的功能。1979年，SGI推出了用于工作站的IRIS图形卡-GR1.x图形卡板，其中提供了用于颜色选项，几何图形卡，Z缓冲区和覆盖/底层的单独的外接（子）板。从第一块图形卡发明到现在，整个过程可以分为，视频适配器时代，2D时代、3D时代启程、3D时代崛起、3D时代巅峰，这4个部分。为此我画了一副时序图并标出了重要节点，便于大家理解显卡的发展史，同时以文字形式告知大家图形显卡的发展历史。（显卡发展史）2D时代1981年, IBM推出了个人电脑时，它提供了两种显卡，一种是“单色显卡”(简称 MDA), 一种是 “彩色绘图卡” (简称 CGA), 从名字上就可以看出，MDA是与单色显示器配合运用的, 它可以显示80行x25列的文数字, CGA则可以用在RGB的显示屏上, 它可以绘制的图形和文数字资料。1982年，IBM又推出了MGA（Monochrome Graphic Adapter）, 又称Hercules Card (大力士卡),  除了能显示图形外，还保留了原来 MDA 的功能。这些显卡均为采纳使用数字方式的，直到MCGA（Multi-Color Graphics Array）的出现，才揭开了采纳使用模拟方式的显卡的序幕。MCGA是整合在 PS/2 Model 25和30上的影像系统。它采纳使用了Analog RGA影像信号, 解析度可高达640x480, 数位RGB和类比RGB不同的的方就像是ON-OFF式切换和微调式切换之间的差别。1986年ATI推出了第一款产品，即OEM颜色仿真卡。它用于通过9针DE-9连接器将黑色背景的单色绿色，琥珀色或白色磷光体文本输出到TTL监视器，该卡至少配备了16KB的内存。1987年，ATI在其OEM产品线中增加了Graphics Solution Plus系列，该产品线将IBM PC / XT ISA 8位总线用于基于Intel 8086/8088的IBM PC。该芯片通过DIP开关支持MDA，CGA和EGA图形卡模式。ATI EGA 800：16色VGA仿真，支持800x600。VGA（Video Graphic Array）即显示绘图阵列，它IBM是在其 PS/2 的Model 50, 60和80内建的影像系统。它的数字模式可以达到720x400色, 绘图模式则可以达到640x480x16色, 以及320x200x256色，这是显卡首次可以相应情况下最大限度显示256种色彩，而这些模式更成为其后所有显卡的共同标准。1988年，带有游戏控制器端口和复合输出选项的Small Wonder Graphics解决方案问世（用于CGA和MDA仿真），以及具有扩展EGA和16位VGA支持的EGA Wonder 480和800+，以及VGA 新增了VGA和SVGA支持的Wonder和Wonder 16。1988年，Trident 8900/9000显卡，它第一次使显卡成为一个独立的配件出现在电脑里，而不再是集成的一块芯片。而后其推出的Trident 9685更是第一代3D显卡的代表。不过真正称得上开启3D显卡大门的却应该是1996年的GLINT 300SX，虽然当时其3D功能非常简单，却具有里程碑的意义。1989年推出了更新的VGA Wonder / Wonder 16系列，其中包括降低成本的VGA Edge 16（Wonder 1024系列）。新功能包括一个总线鼠标端口，并支持VESA功能连接器。这是一个金手指连接器，类似于缩短的数据总线插槽连接器，它通过带状电缆链接到另一个视频控制器，以绕过拥挤的数据总线。1991年，Wonder系列的更新继续向前发展。WonderXL卡增加了VESA 32K颜色兼容性和Sierra RAMDAC，从而将最大显示分辨率提高到640x480 @ 72Hz 或 800x600 @ 60Hz。1991年5月，ATI的Mach系列与Mach8一同推出。它以芯片或电路板的形式出售，可以通过编程接口（AI）卸载有限的2D绘图操作，例如线条画，颜色填充和位图组合（Bit BLIT）.ATI添加了Wonder的一种变体 XL在扩展PCB上集成了Creative Sound Blaster 1.5芯片。它被称为VGA Stereo-F / X，它能够模拟Sound Blaster单声道文件中的立体声，并且其质量接近FM广播质量。ATI图形卡Ultra ISA（Mach8 + VGA）,将Mach8与VGA Wonder +的图形卡核心（28800-2）结合在一起以实现其3D功能。1992年1月，Silicon Graphics Inc（SGI）发布了OpenGL 1.0，这是一个针对2D和3D图形卡的多平台供应商不可知的应用程序编程接口（API）。OpenGL是从SGI专有的API（称为IRIS GL（集成的栅格成像系统图形卡库））演变而来的。最初，OpenGL瞄准的是基于UNIX的专业市场，但是由于开发人员对扩展实施的友好支持，很快将其用于3D游戏。同时微软正在开发自己的竞争对手Direct3D API，并没有确保OpenGL在Windows下也能正常运行。1993年11月，ATI宣布68890 PC电视解码器芯片的发布，该芯片首次在Video-It卡里面亮相。借助板载Intel i750PD VCP（视频压缩处理器），该芯片能够以320x240 @ 15 fps或160x120 @ 30 fps捕获视频，并能够实时压缩/解压缩。它还能够通过数据总线与图形卡板通信，从而无需使用加密狗或端口和带状电缆。1995年，ATI的Mach8发布，创造了许多著名的首创。它成为第一个以Xclaim形式在PC和Mac计算机上使用的图形卡适配器，并且与S3的Trio一起提供了全动态视频播放加速功能。3D时代开启1995年5月，nVidia推出了他们的第一款图形卡芯片NV1，并成为首款能够进行3D渲染，视频加速和集成GUI加速的商业图形卡处理器。供应商发布显卡支持规格的主板（Diamond Edge 3D），D3D（Diamond Edge 3D）图形卡API确认依赖于渲染三角形多边形，而NV1则使用四边形纹理映射。nVidia通过驱动程序添加了有限的D3D兼容性，以将三角形包装为二次曲面，但是市面上仍然很少针对NV1量身定制的游戏。1995年11月，ATI宣布了他们的首个3D加速器芯片3D Rage（也称为Mach 64 GT）。1995年，3Dfx推出了业界的口碑极佳的3D图形加速卡：Voodoo。3Dfx的专利技术Glide引擎接口一度称霸了整个3D世界，直至D3D和OpenGL的出现才改变了这种局面。Voodoo标配为4Mb EDO显存，可以提供在640×480分辨率下3D显示速度和最华丽的画面。Voodoo也有硬伤，它只是一块具有3D加速功能的子卡，运用时需搭配一块具有2D功能的显卡，因此当时S3 765+Voodoo是为人津津乐道的黄金组合。S3 765显卡是当时兼容机的标准配置，最大限度支持2MB EDO显存，可以实现高分辨率显示，可以支持1024×768的分辨率，并且在低分辨率下支持最大限度32Bit真彩色，而且性能和价格比也较强。1995年，VideoLogic开发了一种基于图块的延迟渲染技术（TBDR），该技术在纹理、阴影和光照应用于剩下的渲染之前，抛弃了所有可见的几何形状，从而消除了对大规模z缓冲(在最终渲染中去除遮挡/隐藏的像素)的需求。这个过程产生的框架被分割成矩形块，每个图块都可以自行进行多边形渲染并发送到输出。一旦计算了帧所需的像素并剔除了多余的多边形(z缓冲只在平铺层发生)，对多边形渲染就开始了，这样就只需要进行最基本的计算。1995年，Rendition的VéritéV1000成为第一张具有可编程核心的显卡，它使用了基于MIPS的RISC处理器和Pixel Pipelines(像素管线)。处理器负责设置和组织管线的工作负载。 Vérité1000最初于1995年底开发，后来成为Microsoft用于开发Direct3D的主板之一。1996年 3DLabs 研制出Glint，该公司诞生于杜邦的Pixel图形卡部门。GLINT 300SX处理器能够进行OpenGL渲染，片段处理和光栅化。GLINT 300SX增加了2MB的内存。它为纹理和Z缓冲区使用了1MB，为帧缓冲区使用了1MB，但是还提供了一个选项，以增加VRAM的Direct3D兼容性。1997年3月ATI推出 3D Rage Pro，它在4MB格式下几乎可以媲美Voodoo Graphics的性能。在使用8MB和AGP接口时，其性能则优于3Dfx卡。它扩展了4kB高速缓存并增加了边缘抗锯齿功能，该显卡改进了Rage II的透视校正，纹理处理能力以及三线性滤波性能。还集成了一个浮点单元，以减少对CPU的依赖以及对DVD的硬件加速和显示支持。1997年4月，nVidia推出了RIVA 128（实时交互式视频和动画加速器），并通过渲染三角形多边形增加了Direct3D兼容性，使用新的350nm工艺，并开发了RAMDAC和视频转换器，这是nVidia具有里程碑意义的显卡。1998年1月，英特尔发布i740，它结合了R3D/100上两种不同的图形和纹理芯片的资源，实现了AGP纹理，纹理被上传到系统内存中(渲染缓冲区也可以存储在RAM中)。此前一些设计会选择使用显卡的帧缓冲区用来保存纹理，如果帧缓冲区饱和或纹理太大而无法存储在本地图形内存中，则纹理交换到系统RAM中。为了最大程度地减少延迟，英特尔的设计使用了AGP Direct Memory Execute（DiME）功能，该功能仅调用光栅化所需的那些纹理，其余的存储在系统RAM中。性能和图像质量可以接受的，性能大致与上一年的高端产品相匹配，因此该产品大放异彩。1998年3月，3Dfx推出Voodoo2。Voodoo2本身带有8Mb/12Mb EDO显存，PCI接口，卡上有双芯片，可以做到单周期多纹理运算。缺点是它的卡身很长，并且芯片发热量相当大，依然只作为一块3D加速子卡，需要一块2D显卡的支持。Voodoo2的推出使得3D加速又到达了一个新的里程碑，依仗Voodoo2的效果、画面和速度，征服了不少当时盛行一时的3D游戏，比如Fifa98，NBA98，Quake2等等。1998年7月，Matrox公司发布MGA G200继承了自己超一流的2D水准，3D方面有了革命性的提高，不但可以提供和Voodoo2差不多的处理速度和特技效果，另外还支持DVD硬解码和视频输出，并且独一无二的首创了128位独立双重总线技术，大大提高了性能，配合当时相当走红的AGP总线技术，G200也赢得了不少用户的喜爱。1998年的S3的野人系列Savage系列显卡，Savage3D采纳使用128位总线结构及单周期三线性多重贴图技术，最大像素填充率达到了125M Pixels/s，三角形生成速率也达到了每秒500万个。通过S3新设计的AGP引擎和S3TC纹理压缩技术，支持Direct3D与OpenGL，最大显存容量可达8MB SGRAM或SDRAM，支持AGP 4×规范。相应情况下也支持当时流行的如反射和散射、Alpha混合、多重纹理、衬底纹理、边缘抗锯齿、16/24位Z-buffering、Tri-linear Filtering（三线性过滤技术）、S3TC纹理压缩技术等技术。可惜就是受到驱动程序不兼容的严重影响，最终在99年时惨淡收场。3D时代崛起1999年2月，S3发布Savage4，成为的第一张支持多重纹理的显卡，也是第一张支持AGP 4x接口的显卡。1999年，NVidia推出TNT2 Ultra、TNT2和TNT2 M64三个版本的芯片，后来又有PRO和VANTA两个版本。这种分类方式也促使后来各个生产厂家对同一芯片进行高中低端的划分，以满足不同层次的消费需要。TNT系列配置了8Mb到32Mb的显存，支持AGP2X/4X，支持32位渲染等等众多技术。nVidia能战胜Voodoo3，与3Dfx公司推行的策略迫使众多生产厂家投奔nVidia也不无关系，促进了TNT系列的推广。1999年，Matrox推出 MGA G400，它拥有16Mb/32Mb的显存容量，支持AGP 2X/4X，还有支持大纹理以及32位渲染等等，独特漂亮的EMBM硬件凹凸贴图技术，营造出的完美凹凸感并能实现动态光影效果的技术，并且G400拥有优秀的DVD回放能力，只是价格有些昂贵。通过双显示控制器（被Matrox称为DualHead）驱动两台显示器的能力开始了公司的多显示器支持趋势。1999年，nVidia终于爆发了，它在99年末推出了当前革命性的显卡—Geforce 256，彻底打败了3Dfx。代号NV10的GeForce 256支持Cube-Environment Mapping，完全的硬件T&amp;L（Transform &amp; Lighting），把原来有CPU计算的数据直接交给显示芯片处理，大大解放了CPU，也提高了芯片的运用效率。GeForce256拥有4条图形纹理通道，单周期每条通道处理两个象素纹理，工作频率120MHz，全速可以达到480Mpixels/Sec，支持SDRAM和DDR RAM，运用DDR的产品能更好的发挥GeForce256的性能。其不足之处就在于采纳使用了0.22纳米的工艺技术，发热量相对其它的来说很高的。2000年7月，3Dfx发布的Voodoo 5引入了T-buffer技术，作为变换和照明的一种替代方法，它基本上采用了一些渲染帧并将它们聚合为一个图像的方法。这产生了稍微模糊的图片，当按帧顺序运行时，可以平滑动画的运动。2000年末，3Dfx最终被nVidia收购。3D时代巅峰2000年，ATI依仗T&amp;L技术打开市场，在经历“曙光女神”的失败后，ATI推出了自己的T&amp;L芯片RADEON 256。RADEON和NVIDIA一样具有高低端的版本，完全硬件T&amp;L，Dot3和环境映射凹凸贴图，还有两条纹理流水线，可以相应情况下处理三种纹理。最出彩的是HYPER-Z技术，大大提高了RADEON显卡的3D速度，拉近了与GEFORCE 2系列的距离，ATI的显卡开始在市场占据主导地位。2000年4月，nVidia发布了GeForce 2 GTS（GigaTexel Shader），称为Nvidia Shading Rasterizer，它允许将高光阴影，体积爆炸，折射，波浪，顶点混合，阴影体积，凹凸贴图和高程贴图等效果应用于每个像素通过硬件的基础。2000年8月，ATI Radeon DDR上市。在卓越的T&amp;L实现和对即将推出的DirectX 8特性的支持下，Radeon DDR与GeForce 2 GTS一起，通过将对接口的支持集成到芯片本身，引入了DVI输出的使用。2001年，nVidia推出的Geforce 3系列，这张卡成为了该领域的新王者，GeForce 3显卡增加了可编程T&amp;L功能，可以对几乎所有的画面效果提供硬件支持。GeForce 3总共具有4条像素管道，填充速率最大限度可以达到每秒钟800 Mpixels。支持DirectX 8，多重采样AA，梅花AA（基本上是2xMSAA +后期处理模糊），8x各向异性滤光以及无与伦比的处理8xAF +三线性滤光的能力以及可编程的顶点着色器，用于更紧密地控制多边形网格运动和更流畅的动画序列。还有LMA(光速内存架构)支持——基本上是Nvidia的HyperZ版本——用于剔除隐藏在屏幕上其他像素后面的像素(Z遮挡剔除)，以及压缩和解压数据以优化带宽使用(Z压缩)。最后，Nvidia实现了负载平衡算法，将其称为Crossbar内存控制器，该控制器由四个独立的内存子控制器（与行业标准的单个控制器相对）组成，从而可以更有效地路由传入的内存请求。2001年，ATI则推出Radeon 8500/7500系列，采纳使用0.15微米工艺制造，包括6000万个晶体管，采纳使用了不少新技术(如Truform、Smartshader等)。并根据显卡的核心/显存工作频率分成不同的档次——核心/显存分别为275/550MHz的标准版，核心/显存为250/500MHz的RADEON 8500LE，生产核心/显存频率分别为300/600MHz的Ultra版，以及中端的Radeon 7500，低端的Radeon 7200，7000等产品。值得一提的是Radeon 8500还支持双头显示技术。2002年，ATI R300 GPU发布，由最初构成ArtX核心的团队开发，交付出色。它是第一个提供DirectX 9.0支持的应用程序，并且扩展了第一个支持着色器模型2.0，顶点着色器2.0和像素着色器2.0的体系结构。2002年，nVidia与ATI的竞争更加白热化。为巩固其图形芯片市场霸主的位，nVidia推出了Geforce 4系列，GeForce4 Ti系列择定确定是最具性能和价格比的，其代号是NV25，主要针对当时的高端图形市场，是DirectX 8时代下最劲爆强大的GPU图形处理器。芯片内部包含的晶体管数量高达6千3百万，运用0.15微米工艺生产，采纳使用了新的PBGA封装，运行频率达到了300MHz，配合频率为650MHz DDR显存，可以实现每秒49亿次的采样。GeForce4 Ti核心内建4条渲染流水线，每条流水线包含2个TMU（材质贴图单元）。Geforce 4系列从高到低，横扫了整个显卡市场。2002年，ATI推出R9700/9000/9500系列，首次支持DirectX 9，使其在与NVidia的竞争中抢得先机。同时R9700支持AGP 8X、DirectX 9，核心频率是300MHz，显存时钟是550MHz。RADEON 9700实现了可程序化的革命性硬件架构。符合AGP 8X最新标准，配有8个平等处理的渲染管线，每秒可处理25亿个像素，4个并列的几何处理引擎能处理每秒3亿个形迹及光效多边形。R9000则面向低端的产品，R9500则对标Ti4200。2003年的显卡市场依旧为N系与A系所统治。nVidia的Gf FX 5800（NV30）系列拥有32位着色，颜色画面有质的提高，在基础上推出的GeForce FX 5900，提高了晶体管数，降低了核心频率与显存频率，改用了256BIT DDR以提高显存带宽。2003年7月，nVidia推出了GF FX 5950/5700系列，以取代GF FX 5900/5600。新的Detonator FX驱动程序大大改善了AA和AF。2003年9月，ATI推出了RADEON 9800/pro/SE/XT，依仗其超强的性能以及较低的售价，再次打败GF GX 5800。2004年是ATI大放异彩的一年，其最大的功臣却是来自于面向中低端的Radeon 9550。2004年最具性能和价格比的显卡，让ATI在低端市场呼风唤雨。R9550基于RV350核心，采纳使用0.13微米制程，核心频率为250MHz，显存频率为400MHz，4条渲染管道，1个纹理单元，相应情况下兼容64bit和128bit。2005年，Nvidia推出6000系列显卡，特性包括DirectX 9.0c支持、shader model 3.0(尽管显卡从未完全利用这一点)、Nvidia的PureVideo解码和播放引擎，以及SLI支持。2006年10月25日，ATI被AMD收购，总价为54亿美元。–NVIDIA发展表：1995年，NV150K triangles/sec1M pixel ops/sec1M transistors16-bit colorNearest filtering1997年，Riva 128 (NV3), DX31998 – Riva TNT (NV4), DX532位颜色,24位Z缓存,8位模板缓存双纹理,双线性过滤每时钟2像素 (2 ppc)1999 - GeForce 256（NV10）固定管线，支持DirectX 7.0硬件T&amp;L（Transform &amp; lighting，坐标变换和光照）立方体环境图（Cubemaps）DOT3 – bump mapping2倍各向异性过滤三线性过滤DXT纹理压缩4ppc引入“GPU”术语2001 - GeForce 3DirectX 8.0Shader Model 1.0可编程渲染管线顶点着色器像素着色器3D纹理硬件阴影图8倍各向异性过滤多采样抗锯齿（MSAA）2003 - GeForce FX系列（NV3x）DirectX 9.0Shader Model 2.0256顶点操作指令32纹理 + 64算术像素操作指令512像素操作指令着色语言：HLSL、CGSL、GLSL2004 - GeForce 6系列 (NV4x)DirectX 9.0cShader Model 3.0动态流控制分支、循环、声明等顶点纹理读取高动态范围（HDR）64位渲染纹理（Render Target）FP16*4 纹理过滤和混合2006 - GeForce 8系列 (G8x)DirectX 10.0Shader Model 4.0几何着色器（Geometry Shaders）没有上限位（No caps bits）统一的着色器（Unified Shaders）Vista系统全新驱动基于GPU计算的CUDA问世GPU计算能力以GFLOPS计量。2010 - GeForce 405（GF119）DirectX 11.0曲面细分（Tessellation）外壳着色器（Hull Shader）镶嵌单元（tessellator）域着色器（Domain Shader）计算着色器（Compute Shader）支持Stream OutputShader Model 5.0DirectX 11的渲染管线。多线程支持改进的纹理压缩Shader Model 5.0更多指令、存储单元、寄存器面向对象着色语言曲面细分计算着色器2014 - GeForceGT 710（GK208）DirectX 12.0轻量化驱动层硬件级多线程渲染支持更完善的硬件资源管理2016 - GeForceGTX 1060 6GB首次支持RTX和DXR技术，即光线追踪引入RT Core（光线追踪核心）支持RTX光线追踪的显卡列表2018 - TITAN RTX（TU102）DirectX 12.1，OpenGL 4.56GPC，36TPC，72SM，72RT Core，...8K分辨率，1770MHz主频，24G显存，384位带宽参考资料：《GPU历史系列》https://new.qq.com/omn/20200506/20200506A0GP6H00.html?pc《GPU发展史》http://www.360doc.com/content/16/0607/16/30123241_565810074.shtml《显卡发展史1》http://www.360doc.com/content/20/0504/17/32196507_910185372.shtml《显卡发展史2》http://www.360doc.com/content/20/0504/17/32196507_910185435.shtml《显卡发展史3》http://www.360doc.com/content/20/0504/17/32196507_910187350.shtml《Making Sense of Smartphone Processors: The Mobile CPU/GPU Guide》https://www.techautos.com/2010/03/14/smartphone-processor-guide/《移动设备GPU架构知识汇总》https://zhuanlan.zhihu.com/p/112120206《针对移动端TBDR架构GPU特性的渲染优化》https://gameinstitute.qq.com/community/detail/123220《A look at the PowerVR graphics architecture: Tile-based rendering》https://www.imaginationtech.com/blog/a-look-at-the-powervr-graphics-architecture-tile-based-rendering/《A look at the PowerVR graphics architecture: Deferred rendering》https://www.imaginationtech.com/blog/the-dr-in-tbdr-deferred-rendering-in-rogue/《深入GPU硬件架构及运行机制》https://www.cnblogs.com/timlly/p/11471507.html已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484981&amp;idx=1&amp;sn=b5199f84ed73d28916dbb9143eeeb992&amp;chksm=fc226332cb55ea2417b89e499284ab3a552ce591caba09d637912306503e4b457ed45c2e1d2d&amp;token=1023740201&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h2 id=\"背景\">背景：</h2><p>作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》后对引擎架构的理解又深入了些。</p><p>近段时间有对引擎剖析的想法，正好借这书本对游戏引擎架构做一个完整分析。</p><p>此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。</p><p>借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块，最后通过实践简单引擎开发来完成对引擎知识的掌握。</p><p>游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。</p><p>同时《游戏引擎架构》中部分知识太过陈旧的部分，会重新深挖后总结出自己的观点。</p><h2 id=\"概述\">概述：</h2><p>本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：</p><ol>  <li>时间库</li>  <li>自定义容器库</li>  <li>字符串散列库</li>  <li>内存管理框架</li>  <li>RTTI与反射模块</li>  <li>图形计算库</li>  <li>资产管理模块</li>  <li>低阶渲染器</li>  <li>剔除与合批模块</li>  <li>动画模块</li>  <li>物理模块</li>  <li>UI底层框架</li>  <li>性能剖析器的核心部分</li>  <li>脚本系统</li>  <li>视觉效果模块</li></ol><p>本篇内容为列表中的第8个部分的第1节。</p><h2 id=\"正文\">正文：</h2><p>简单回顾下前文</p><p>前文我们聊了下显卡在计算机硬件主板中的位置与结构，知道了CPU、GPU的通信介质，并简单介绍了手机上的主板结构。本篇开头对上一篇做一些内容补充，PC和手机的不同硬件组织，以及CPU与其他芯片的通信过程。</p><p>下面我们开始这篇内容</p><h3 id=\"本次内容会围绕gpu来写从硬件架构到软件驱动再到引擎架构目标是帮大家理解gpu硬件的运作原理理解图形接口的架构理解引擎低阶渲染器的架构\">本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。</h3><p>目录：</p><ol>  <li>主板结构中的显卡</li>  <li>GPU功能发展史</li>  <li>GPU与CPU的差异</li>  <li>GPU硬件特点</li>  <li>图形驱动程序架构</li>  <li>引擎低阶渲染架构</li></ol><p>继续上篇未结束的内容</p><p>说硬件结构时，我们常常从台式 PC 开始说起，因为智能手机本质上是袖珍型计算机，具有一些额外的无线电，并且在功耗、热量输出等方面极其受限的条件下运行。PC 主要由主板芯片组组成（通常分为连接处理器和内存“北桥”（例如 Intel 的 P45）和连接各种外围总线（例如 PCI-Express、USB 等）的“南桥”（例如 Intel 的 ICH10R） )、中央处理器（例如 CPU – Intel 的 Core 2 Duo）、随机存储器内存 (RAM)、永久存储器（硬盘或固态硬盘）、图形处理单元（例如 GPU – ATI 的 Radeon HD5890） 、电源和多个连接到 PCI 或 PCI-Express 总线的外围设备（例如，内置声音芯片组或附加 Wi-Fi 卡）。</p><p>（三星手机拓扑图：图片来源网络）</p><p>（iPhone6p A8 正面图：图片来源网络）</p><p>（iPhone6p A8 背面图：图片来源网络）</p><p>（苹果A8芯片内部结构：图片来源网络）</p><p>智能手机也具有所有这些组件，只是集成度更高而已。一些主要芯片通常可以包含 CPU、GPU、其他专用协处理器、主板总线、内存控制器、LCD 控制器、声音芯片组、CMOS 摄像头接口、板载内存 ，以及一些外围设备（例如 Cell、Wifi 和蓝牙无线电）。 “应用处理器”是负责一般处理的芯片（类似于 CPU + 主板芯片组），并且可能内置了一些其他功能。 “基带处理器”负责蜂窝无线通信。</p><p>智能手机与 PC 如此相似，那么为什么我们今天在智能手机中看不到像 Core 2 Duo 这样的 x86 CPU？答案是，Core 2 Duo 消耗的功率和产生的热量远远超出手机的可接受范围。典型的台式机 Core 2 Duo CPU 的功耗最高可达 65W，并且需要一个主动冷却系统来防止过热。即使是英特尔的 Atom 芯片也消耗 4W（峰值 TDP），而整个手机通常必须满足低于 1W 的功率。</p><p>今天我们很多智能手机都使用 ARM 芯片， ARM 的运作方式与Intel截然不同。 Intel 自己设计和构建所有处理器，而 ARM 则创建指令集，任何跟随它们的 CPU 都将能够运行与 ARM 兼容的代码。 它还为适合其指令集的处理器创建参考设计，这使公司能够围绕 ARM 的核心设计轻松生产自己的芯片组。 一些公司，如英伟达、三星和德州仪器，只是简单地许可并采用 ARM CPU 参考设计，而其他公司，如高通和 Marvell，只许可指令集并创建自己的处理器以适应它们。 第一个 ARMv7 参考设计是 Cortex A8，其架构可在今天的智能手机中找到。很久以前低端智能手机倾向于使用实现 ARMv6 指令集的 ARM11 芯片，现在已经不复存在。</p><p>这里再补充一下前文的硬件通信过程，每个带有处理程序的硬件都有自己的芯片，CPU是整个电脑的主要计算芯片，GPU则被单独拆分出来作为图像的处理芯片，除了这两个大家熟知的芯片，还有内存芯片，硬盘芯片，声卡芯片，网卡芯片等，这些芯片都通过总线进行数据交互。其中前面我们提到南桥和北桥芯片桥接了快慢不同的芯片之间的通信，让不同种类的设备通信效率更高更有序。</p><p>（PC端CPU与GPU通信结构图）</p><p>（手机端CPU与GPU通信结构图）</p><h3 id=\"cpu与其他芯片之间的通信步骤可以简单理解为cpu通过总线发送指令数据到其他芯片芯片收到指令并处理后再通过总线将反馈数据给cpu中间处理过程也会与内存芯片或其他芯片通信后再反馈给cpu\">CPU与其他芯片之间的通信步骤，可以简单理解为，CPU通过总线发送指令数据到其他芯片，芯片收到指令并处理后，再通过总线将反馈数据给CPU，中间处理过程也会与内存芯片或其他芯片通信后再反馈给CPU。</h3><p>（CPU用虚拟地址访问内存拓扑图）</p><h3 id=\"cpu-在访问内存时需要通过-mmu-把虚拟地址转化为物理地址再通过总线访问内存mmu-开启后-cpu-看到的所有地址都是虚拟地址cpu-把这个虚拟地址发给-mmu-后mmu-会在页表里查出这个虚拟地址对应的物理地址再通过总线去访问ddr内存芯片\">CPU 在访问内存时需要通过 MMU 把虚拟地址转化为物理地址，再通过总线访问内存。MMU 开启后 CPU 看到的所有地址都是虚拟地址，CPU 把这个虚拟地址发给 MMU 后，MMU 会在页表里查出这个虚拟地址对应的物理地址，再通过总线去访问DDR内存芯片。</h3><p>从这个芯片通信角度看，我们可以明白，总线传输数据的速度，限制了计算机的运行速度。因此我们在优化计算机程序时会常常去减少CPU与GPU之间通信量，原因就是在无法增加带宽上限这个大前提下，尽量减少它们之间通信数据量，从而减少访问消耗时间。</p><h2 id=\"gpu功能发展史\">GPU功能发展史</h2><p>第一篇中我们介绍过一些图形接口的发展历史，现在我们来介绍一下GPU硬件的发展历史。硬件的发展史其实是一个商业的竞争过程，中间夹杂着很多商业战略与决策。尤其是当大家都看到GPU这块高新的技术’蛋糕’，有一系列公司参与进来相互竞争。因此这里不过多的介绍商业上的活动与竞争，而是专注于介绍GPU功能的发展过程。</p><p>第一个真正的3D图形卡始于早期的显示控制器，即视频移位器和视频地址生成器（video shifters and video address generators）。它们充当主处理器和显示器之间的直通通道（pass-through）。传入的数据流被转换为串行位图视频输出，例如亮度，颜色以及垂直和水平复合同步，这将像素行保持在显示生成中，并同步每条连续行以及消隐间隔（时间间隔为 结束一条扫描线并开始下一条扫描线）。</p><p>（图片来源网络）</p><p>1970年代开始这些视频适配器出现了一系列的改进，主要兼容了不同分辨率以及不同的视频信号。</p><p>1976年，ANTIC使用直接存储器访问（DMA）处理2D显示指令。</p><p>1978年，英特尔82720图形卡芯片，它能够以256x256的分辨率（或以512x512的单色）显示八种颜色数据。其32KB的显示内存足以绘制线，弧，圆，矩形和字符位图。该芯片还提供了缩放，屏幕分区和滚动的功能。</p><p>1979年，SGI推出了用于工作站的IRIS图形卡-GR1.x图形卡板，其中提供了用于颜色选项，几何图形卡，Z缓冲区和覆盖/底层的单独的外接（子）板。</p><p>从第一块图形卡发明到现在，整个过程可以分为，视频适配器时代，2D时代、3D时代启程、3D时代崛起、3D时代巅峰，这4个部分。</p><p>为此我画了一副时序图并标出了重要节点，便于大家理解显卡的发展史，同时以文字形式告知大家图形显卡的发展历史。</p><p>（显卡发展史）</p><h2 id=\"2d时代\">2D时代</h2><p>1981年, IBM推出了个人电脑时，它提供了两种显卡，一种是“单色显卡”(简称 MDA), 一种是 “彩色绘图卡” (简称 CGA), 从名字上就可以看出，MDA是与单色显示器配合运用的, 它可以显示80行x25列的文数字, CGA则可以用在RGB的显示屏上, 它可以绘制的图形和文数字资料。</p><p>1982年，IBM又推出了MGA（Monochrome Graphic Adapter）, 又称Hercules Card (大力士卡),  除了能显示图形外，还保留了原来 MDA 的功能。</p><p>这些显卡均为采纳使用数字方式的，直到MCGA（Multi-Color Graphics Array）的出现，才揭开了采纳使用模拟方式的显卡的序幕。MCGA是整合在 PS/2 Model 25和30上的影像系统。它采纳使用了Analog RGA影像信号, 解析度可高达640x480, 数位RGB和类比RGB不同的的方就像是ON-OFF式切换和微调式切换之间的差别。</p><p>1986年ATI推出了第一款产品，即OEM颜色仿真卡。它用于通过9针DE-9连接器将黑色背景的单色绿色，琥珀色或白色磷光体文本输出到TTL监视器，该卡至少配备了16KB的内存。</p><p>1987年，ATI在其OEM产品线中增加了Graphics Solution Plus系列，该产品线将IBM PC / XT ISA 8位总线用于基于Intel 8086/8088的IBM PC。该芯片通过DIP开关支持MDA，CGA和EGA图形卡模式。ATI EGA 800：16色VGA仿真，支持800x600。</p><p>VGA（Video Graphic Array）即显示绘图阵列，它IBM是在其 PS/2 的Model 50, 60和80内建的影像系统。它的数字模式可以达到720x400色, 绘图模式则可以达到640x480x16色, 以及320x200x256色，这是显卡首次可以相应情况下最大限度显示256种色彩，而这些模式更成为其后所有显卡的共同标准。</p><p>1988年，带有游戏控制器端口和复合输出选项的Small Wonder Graphics解决方案问世（用于CGA和MDA仿真），以及具有扩展EGA和16位VGA支持的EGA Wonder 480和800+，以及VGA 新增了VGA和SVGA支持的Wonder和Wonder 16。</p><p>1988年，Trident 8900/9000显卡，它第一次使显卡成为一个独立的配件出现在电脑里，而不再是集成的一块芯片。而后其推出的Trident 9685更是第一代3D显卡的代表。不过真正称得上开启3D显卡大门的却应该是1996年的GLINT 300SX，虽然当时其3D功能非常简单，却具有里程碑的意义。</p><p>1989年推出了更新的VGA Wonder / Wonder 16系列，其中包括降低成本的VGA Edge 16（Wonder 1024系列）。新功能包括一个总线鼠标端口，并支持VESA功能连接器。这是一个金手指连接器，类似于缩短的数据总线插槽连接器，它通过带状电缆链接到另一个视频控制器，以绕过拥挤的数据总线。</p><p>1991年，Wonder系列的更新继续向前发展。WonderXL卡增加了VESA 32K颜色兼容性和Sierra RAMDAC，从而将最大显示分辨率提高到640x480 @ 72Hz 或 800x600 @ 60Hz。</p><p>1991年5月，ATI的Mach系列与Mach8一同推出。它以芯片或电路板的形式出售，可以通过编程接口（AI）卸载有限的2D绘图操作，例如线条画，颜色填充和位图组合（Bit BLIT）.ATI添加了Wonder的一种变体 XL在扩展PCB上集成了Creative Sound Blaster 1.5芯片。它被称为VGA Stereo-F / X，它能够模拟Sound Blaster单声道文件中的立体声，并且其质量接近FM广播质量。ATI图形卡Ultra ISA（Mach8 + VGA）,将Mach8与VGA Wonder +的图形卡核心（28800-2）结合在一起以实现其3D功能。</p><p>1992年1月，Silicon Graphics Inc（SGI）发布了OpenGL 1.0，这是一个针对2D和3D图形卡的多平台供应商不可知的应用程序编程接口（API）。OpenGL是从SGI专有的API（称为IRIS GL（集成的栅格成像系统图形卡库））演变而来的。最初，OpenGL瞄准的是基于UNIX的专业市场，但是由于开发人员对扩展实施的友好支持，很快将其用于3D游戏。同时微软正在开发自己的竞争对手Direct3D API，并没有确保OpenGL在Windows下也能正常运行。</p><p>1993年11月，ATI宣布68890 PC电视解码器芯片的发布，该芯片首次在Video-It卡里面亮相。借助板载Intel i750PD VCP（视频压缩处理器），该芯片能够以320x240 @ 15 fps或160x120 @ 30 fps捕获视频，并能够实时压缩/解压缩。它还能够通过数据总线与图形卡板通信，从而无需使用加密狗或端口和带状电缆。</p><p>1995年，ATI的Mach8发布，创造了许多著名的首创。它成为第一个以Xclaim形式在PC和Mac计算机上使用的图形卡适配器，并且与S3的Trio一起提供了全动态视频播放加速功能。</p><h2 id=\"3d时代开启\">3D时代开启</h2><p>1995年5月，nVidia推出了他们的第一款图形卡芯片NV1，并成为首款能够进行3D渲染，视频加速和集成GUI加速的商业图形卡处理器。供应商发布显卡支持规格的主板（Diamond Edge 3D），D3D（Diamond Edge 3D）图形卡API确认依赖于渲染三角形多边形，而NV1则使用四边形纹理映射。nVidia通过驱动程序添加了有限的D3D兼容性，以将三角形包装为二次曲面，但是市面上仍然很少针对NV1量身定制的游戏。</p><p>1995年11月，ATI宣布了他们的首个3D加速器芯片3D Rage（也称为Mach 64 GT）。</p><p>1995年，3Dfx推出了业界的口碑极佳的3D图形加速卡：Voodoo。3Dfx的专利技术Glide引擎接口一度称霸了整个3D世界，直至D3D和OpenGL的出现才改变了这种局面。</p><p>Voodoo标配为4Mb EDO显存，可以提供在640×480分辨率下3D显示速度和最华丽的画面。Voodoo也有硬伤，它只是一块具有3D加速功能的子卡，运用时需搭配一块具有2D功能的显卡，因此当时S3 765+Voodoo是为人津津乐道的黄金组合。</p><p>S3 765显卡是当时兼容机的标准配置，最大限度支持2MB EDO显存，可以实现高分辨率显示，可以支持1024×768的分辨率，并且在低分辨率下支持最大限度32Bit真彩色，而且性能和价格比也较强。</p><p>1995年，VideoLogic开发了一种基于图块的延迟渲染技术（TBDR），该技术在纹理、阴影和光照应用于剩下的渲染之前，抛弃了所有可见的几何形状，从而消除了对大规模z缓冲(在最终渲染中去除遮挡/隐藏的像素)的需求。这个过程产生的框架被分割成矩形块，每个图块都可以自行进行多边形渲染并发送到输出。一旦计算了帧所需的像素并剔除了多余的多边形(z缓冲只在平铺层发生)，对多边形渲染就开始了，这样就只需要进行最基本的计算。</p><p>1995年，Rendition的VéritéV1000成为第一张具有可编程核心的显卡，它使用了基于MIPS的RISC处理器和Pixel Pipelines(像素管线)。处理器负责设置和组织管线的工作负载。 Vérité1000最初于1995年底开发，后来成为Microsoft用于开发Direct3D的主板之一。</p><p>1996年 3DLabs 研制出Glint，该公司诞生于杜邦的Pixel图形卡部门。GLINT 300SX处理器能够进行OpenGL渲染，片段处理和光栅化。GLINT 300SX增加了2MB的内存。它为纹理和Z缓冲区使用了1MB，为帧缓冲区使用了1MB，但是还提供了一个选项，以增加VRAM的Direct3D兼容性。</p><p>1997年3月ATI推出 3D Rage Pro，它在4MB格式下几乎可以媲美Voodoo Graphics的性能。在使用8MB和AGP接口时，其性能则优于3Dfx卡。它扩展了4kB高速缓存并增加了边缘抗锯齿功能，该显卡改进了Rage II的透视校正，纹理处理能力以及三线性滤波性能。还集成了一个浮点单元，以减少对CPU的依赖以及对DVD的硬件加速和显示支持。</p><p>1997年4月，nVidia推出了RIVA 128（实时交互式视频和动画加速器），并通过渲染三角形多边形增加了Direct3D兼容性，使用新的350nm工艺，并开发了RAMDAC和视频转换器，这是nVidia具有里程碑意义的显卡。</p><p>1998年1月，英特尔发布i740，它结合了R3D/100上两种不同的图形和纹理芯片的资源，实现了AGP纹理，纹理被上传到系统内存中(渲染缓冲区也可以存储在RAM中)。此前一些设计会选择使用显卡的帧缓冲区用来保存纹理，如果帧缓冲区饱和或纹理太大而无法存储在本地图形内存中，则纹理交换到系统RAM中。为了最大程度地减少延迟，英特尔的设计使用了AGP Direct Memory Execute（DiME）功能，该功能仅调用光栅化所需的那些纹理，其余的存储在系统RAM中。性能和图像质量可以接受的，性能大致与上一年的高端产品相匹配，因此该产品大放异彩。</p><p>1998年3月，3Dfx推出Voodoo2。Voodoo2本身带有8Mb/12Mb EDO显存，PCI接口，卡上有双芯片，可以做到单周期多纹理运算。缺点是它的卡身很长，并且芯片发热量相当大，依然只作为一块3D加速子卡，需要一块2D显卡的支持。Voodoo2的推出使得3D加速又到达了一个新的里程碑，依仗Voodoo2的效果、画面和速度，征服了不少当时盛行一时的3D游戏，比如Fifa98，NBA98，Quake2等等。</p><p>1998年7月，Matrox公司发布MGA G200继承了自己超一流的2D水准，3D方面有了革命性的提高，不但可以提供和Voodoo2差不多的处理速度和特技效果，另外还支持DVD硬解码和视频输出，并且独一无二的首创了128位独立双重总线技术，大大提高了性能，配合当时相当走红的AGP总线技术，G200也赢得了不少用户的喜爱。</p><p>1998年的S3的野人系列Savage系列显卡，Savage3D采纳使用128位总线结构及单周期三线性多重贴图技术，最大像素填充率达到了125M Pixels/s，三角形生成速率也达到了每秒500万个。通过S3新设计的AGP引擎和S3TC纹理压缩技术，支持Direct3D与OpenGL，最大显存容量可达8MB SGRAM或SDRAM，支持AGP 4×规范。相应情况下也支持当时流行的如反射和散射、Alpha混合、多重纹理、衬底纹理、边缘抗锯齿、16/24位Z-buffering、Tri-linear Filtering（三线性过滤技术）、S3TC纹理压缩技术等技术。可惜就是受到驱动程序不兼容的严重影响，最终在99年时惨淡收场。</p><h2 id=\"3d时代崛起\">3D时代崛起</h2><p>1999年2月，S3发布Savage4，成为的第一张支持多重纹理的显卡，也是第一张支持AGP 4x接口的显卡。</p><p>1999年，NVidia推出TNT2 Ultra、TNT2和TNT2 M64三个版本的芯片，后来又有PRO和VANTA两个版本。这种分类方式也促使后来各个生产厂家对同一芯片进行高中低端的划分，以满足不同层次的消费需要。TNT系列配置了8Mb到32Mb的显存，支持AGP2X/4X，支持32位渲染等等众多技术。nVidia能战胜Voodoo3，与3Dfx公司推行的策略迫使众多生产厂家投奔nVidia也不无关系，促进了TNT系列的推广。</p><p>1999年，Matrox推出 MGA G400，它拥有16Mb/32Mb的显存容量，支持AGP 2X/4X，还有支持大纹理以及32位渲染等等，独特漂亮的EMBM硬件凹凸贴图技术，营造出的完美凹凸感并能实现动态光影效果的技术，并且G400拥有优秀的DVD回放能力，只是价格有些昂贵。通过双显示控制器（被Matrox称为DualHead）驱动两台显示器的能力开始了公司的多显示器支持趋势。</p><p>1999年，nVidia终于爆发了，它在99年末推出了当前革命性的显卡—Geforce 256，彻底打败了3Dfx。代号NV10的GeForce 256支持Cube-Environment Mapping，完全的硬件T&amp;L（Transform &amp; Lighting），把原来有CPU计算的数据直接交给显示芯片处理，大大解放了CPU，也提高了芯片的运用效率。GeForce256拥有4条图形纹理通道，单周期每条通道处理两个象素纹理，工作频率120MHz，全速可以达到480Mpixels/Sec，支持SDRAM和DDR RAM，运用DDR的产品能更好的发挥GeForce256的性能。其不足之处就在于采纳使用了0.22纳米的工艺技术，发热量相对其它的来说很高的。</p><p>2000年7月，3Dfx发布的Voodoo 5引入了T-buffer技术，作为变换和照明的一种替代方法，它基本上采用了一些渲染帧并将它们聚合为一个图像的方法。这产生了稍微模糊的图片，当按帧顺序运行时，可以平滑动画的运动。</p><p>2000年末，3Dfx最终被nVidia收购。</p><h2 id=\"3d时代巅峰\">3D时代巅峰</h2><p>2000年，ATI依仗T&amp;L技术打开市场，在经历“曙光女神”的失败后，ATI推出了自己的T&amp;L芯片RADEON 256。RADEON和NVIDIA一样具有高低端的版本，完全硬件T&amp;L，Dot3和环境映射凹凸贴图，还有两条纹理流水线，可以相应情况下处理三种纹理。最出彩的是HYPER-Z技术，大大提高了RADEON显卡的3D速度，拉近了与GEFORCE 2系列的距离，ATI的显卡开始在市场占据主导地位。</p><p>2000年4月，nVidia发布了GeForce 2 GTS（GigaTexel Shader），称为Nvidia Shading Rasterizer，它允许将高光阴影，体积爆炸，折射，波浪，顶点混合，阴影体积，凹凸贴图和高程贴图等效果应用于每个像素通过硬件的基础。</p><p>2000年8月，ATI Radeon DDR上市。在卓越的T&amp;L实现和对即将推出的DirectX 8特性的支持下，Radeon DDR与GeForce 2 GTS一起，通过将对接口的支持集成到芯片本身，引入了DVI输出的使用。</p><p>2001年，nVidia推出的Geforce 3系列，这张卡成为了该领域的新王者，GeForce 3显卡增加了可编程T&amp;L功能，可以对几乎所有的画面效果提供硬件支持。GeForce 3总共具有4条像素管道，填充速率最大限度可以达到每秒钟800 Mpixels。支持DirectX 8，多重采样AA，梅花AA（基本上是2xMSAA +后期处理模糊），8x各向异性滤光以及无与伦比的处理8xAF +三线性滤光的能力以及可编程的顶点着色器，用于更紧密地控制多边形网格运动和更流畅的动画序列。还有LMA(光速内存架构)支持——基本上是Nvidia的HyperZ版本——用于剔除隐藏在屏幕上其他像素后面的像素(Z遮挡剔除)，以及压缩和解压数据以优化带宽使用(Z压缩)。最后，Nvidia实现了负载平衡算法，将其称为Crossbar内存控制器，该控制器由四个独立的内存子控制器（与行业标准的单个控制器相对）组成，从而可以更有效地路由传入的内存请求。</p><p>2001年，ATI则推出Radeon 8500/7500系列，采纳使用0.15微米工艺制造，包括6000万个晶体管，采纳使用了不少新技术(如Truform、Smartshader等)。并根据显卡的核心/显存工作频率分成不同的档次——核心/显存分别为275/550MHz的标准版，核心/显存为250/500MHz的RADEON 8500LE，生产核心/显存频率分别为300/600MHz的Ultra版，以及中端的Radeon 7500，低端的Radeon 7200，7000等产品。值得一提的是Radeon 8500还支持双头显示技术。</p><p>2002年，ATI R300 GPU发布，由最初构成ArtX核心的团队开发，交付出色。它是第一个提供DirectX 9.0支持的应用程序，并且扩展了第一个支持着色器模型2.0，顶点着色器2.0和像素着色器2.0的体系结构。</p><p>2002年，nVidia与ATI的竞争更加白热化。为巩固其图形芯片市场霸主的位，nVidia推出了Geforce 4系列，GeForce4 Ti系列择定确定是最具性能和价格比的，其代号是NV25，主要针对当时的高端图形市场，是DirectX 8时代下最劲爆强大的GPU图形处理器。芯片内部包含的晶体管数量高达6千3百万，运用0.15微米工艺生产，采纳使用了新的PBGA封装，运行频率达到了300MHz，配合频率为650MHz DDR显存，可以实现每秒49亿次的采样。GeForce4 Ti核心内建4条渲染流水线，每条流水线包含2个TMU（材质贴图单元）。Geforce 4系列从高到低，横扫了整个显卡市场。</p><p>2002年，ATI推出R9700/9000/9500系列，首次支持DirectX 9，使其在与NVidia的竞争中抢得先机。同时R9700支持AGP 8X、DirectX 9，核心频率是300MHz，显存时钟是550MHz。RADEON 9700实现了可程序化的革命性硬件架构。符合AGP 8X最新标准，配有8个平等处理的渲染管线，每秒可处理25亿个像素，4个并列的几何处理引擎能处理每秒3亿个形迹及光效多边形。R9000则面向低端的产品，R9500则对标Ti4200。</p><p>2003年的显卡市场依旧为N系与A系所统治。nVidia的Gf FX 5800（NV30）系列拥有32位着色，颜色画面有质的提高，在基础上推出的GeForce FX 5900，提高了晶体管数，降低了核心频率与显存频率，改用了256BIT DDR以提高显存带宽。</p><p>2003年7月，nVidia推出了GF FX 5950/5700系列，以取代GF FX 5900/5600。新的Detonator FX驱动程序大大改善了AA和AF。2003年9月，ATI推出了RADEON 9800/pro/SE/XT，依仗其超强的性能以及较低的售价，再次打败GF GX 5800。</p><p>2004年是ATI大放异彩的一年，其最大的功臣却是来自于面向中低端的Radeon 9550。2004年最具性能和价格比的显卡，让ATI在低端市场呼风唤雨。R9550基于RV350核心，采纳使用0.13微米制程，核心频率为250MHz，显存频率为400MHz，4条渲染管道，1个纹理单元，相应情况下兼容64bit和128bit。</p><p>2005年，Nvidia推出6000系列显卡，特性包括DirectX 9.0c支持、shader model 3.0(尽管显卡从未完全利用这一点)、Nvidia的PureVideo解码和播放引擎，以及SLI支持。</p><p>2006年10月25日，ATI被AMD收购，总价为54亿美元。</p><p>–</p><p>NVIDIA发展表：</p><p>1995年，NV1</p><pre><code>50K triangles/sec1M pixel ops/sec1M transistors16-bit colorNearest filtering</code></pre><p>1997年，Riva 128 (NV3), DX3</p><p>1998 – Riva TNT (NV4), DX5</p><pre><code>32位颜色,24位Z缓存,8位模板缓存双纹理,双线性过滤每时钟2像素 (2 ppc)</code></pre><p>1999 - GeForce 256（NV10）</p><pre><code>固定管线，支持DirectX 7.0硬件T&amp;L（Transform &amp; lighting，坐标变换和光照）立方体环境图（Cubemaps）DOT3 – bump mapping2倍各向异性过滤三线性过滤DXT纹理压缩4ppc引入“GPU”术语</code></pre><p>2001 - GeForce 3</p><pre><code>DirectX 8.0Shader Model 1.0可编程渲染管线顶点着色器像素着色器3D纹理硬件阴影图8倍各向异性过滤多采样抗锯齿（MSAA）</code></pre><p>2003 - GeForce FX系列（NV3x）</p><pre><code>DirectX 9.0Shader Model 2.0256顶点操作指令32纹理 + 64算术像素操作指令512像素操作指令着色语言：HLSL、CGSL、GLSL</code></pre><p>2004 - GeForce 6系列 (NV4x)</p><pre><code>DirectX 9.0cShader Model 3.0动态流控制分支、循环、声明等顶点纹理读取高动态范围（HDR）64位渲染纹理（Render Target）FP16*4 纹理过滤和混合</code></pre><p>2006 - GeForce 8系列 (G8x)</p><pre><code>DirectX 10.0Shader Model 4.0几何着色器（Geometry Shaders）没有上限位（No caps bits）统一的着色器（Unified Shaders）Vista系统全新驱动基于GPU计算的CUDA问世GPU计算能力以GFLOPS计量。</code></pre><p>2010 - GeForce 405（GF119）</p><pre><code>DirectX 11.0曲面细分（Tessellation）外壳着色器（Hull Shader）镶嵌单元（tessellator）域着色器（Domain Shader）计算着色器（Compute Shader）支持Stream OutputShader Model 5.0</code></pre><p>DirectX 11的渲染管线。</p><pre><code>多线程支持改进的纹理压缩</code></pre><p>Shader Model 5.0</p><pre><code>更多指令、存储单元、寄存器面向对象着色语言曲面细分计算着色器</code></pre><p>2014 - GeForceGT 710（GK208）</p><pre><code>DirectX 12.0轻量化驱动层硬件级多线程渲染支持更完善的硬件资源管理</code></pre><p>2016 - GeForceGTX 1060 6GB</p><pre><code>首次支持RTX和DXR技术，即光线追踪引入RT Core（光线追踪核心）支持RTX光线追踪的显卡列表</code></pre><p>2018 - TITAN RTX（TU102）</p><pre><code>DirectX 12.1，OpenGL 4.56GPC，36TPC，72SM，72RT Core，...8K分辨率，1770MHz主频，24G显存，384位带宽</code></pre><p>参考资料：</p><p>《GPU历史系列》</p><p>https://new.qq.com/omn/20200506/20200506A0GP6H00.html?pc</p><p>《GPU发展史》</p><p>http://www.360doc.com/content/16/0607/16/30123241_565810074.shtml</p><p>《显卡发展史1》</p><p>http://www.360doc.com/content/20/0504/17/32196507_910185372.shtml</p><p>《显卡发展史2》</p><p>http://www.360doc.com/content/20/0504/17/32196507_910185435.shtml</p><p>《显卡发展史3》</p><p>http://www.360doc.com/content/20/0504/17/32196507_910187350.shtml</p><p>《Making Sense of Smartphone Processors: The Mobile CPU/GPU Guide》</p><p>https://www.techautos.com/2010/03/14/smartphone-processor-guide/</p><p>《移动设备GPU架构知识汇总》</p><p>https://zhuanlan.zhihu.com/p/112120206</p><p>《针对移动端TBDR架构GPU特性的渲染优化》</p><p>https://gameinstitute.qq.com/community/detail/123220</p><p>《A look at the PowerVR graphics architecture: Tile-based rendering》</p><p>https://www.imaginationtech.com/blog/a-look-at-the-powervr-graphics-architecture-tile-based-rendering/</p><p>《A look at the PowerVR graphics architecture: Deferred rendering》</p><p>https://www.imaginationtech.com/blog/the-dr-in-tbdr-deferred-rendering-in-rogue/</p><p>《深入GPU硬件架构及运行机制》</p><p>https://www.cnblogs.com/timlly/p/11471507.html</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484981&amp;idx=1&amp;sn=b5199f84ed73d28916dbb9143eeeb992&amp;chksm=fc226332cb55ea2417b89e499284ab3a552ce591caba09d637912306503e4b457ed45c2e1d2d&amp;token=1023740201&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2021/11/08/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B048",
            
            
            
            "tags": ["读书笔记","前端技术"],
            
            "date_published": "2021-11-08T00:00:00+08:00",
            "date_modified": "2021-11-08T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/11/01/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A118",
            "title": "给女儿的信(十八) 面对困难时该如何去做",
            "summary": "女儿 教育 亲情",
            "content_text": "要点：遇到困难时，如果我们积极的去突破，则会让情况更加明朗，反之则会陷入消沉。结构：  阐述与孩子们有一样的情景  举例遇到的困难，以及自己的行动  呼吁孩子们跟我一起勇敢的面对困难大纲：  在练习演讲和表达后，自己的表达和公众说话能力有了些进步  开始原地踏步，甚至感觉有点倒退，很疑惑，也很难受  面对困难和困境的几种做法。  激励自己勇敢面对困难，积极寻找解决问题的途径和方法，专注提高解决问题的技巧。  鼓励孩子们跟我一起勇敢面对困难。内容：Hello Sharon, hello Annie.爸爸好想你们啊。爸爸喜欢你们。又到了一个月一次的视频时间了。爸爸跟你们说说爸爸最近遇到的事情好不好？最近爸爸一直在练习演讲和表达，因为爸爸发现自己在表达跟上台演讲时。表达的不够清楚，有很多紧张感。于是爸爸就找了很多的资料去练习自己的表达，以及上台说话的能力，让自己不那么紧张，在表达时也表达得更清楚一些，让别人听得更容易一些。经过一段时间的练习以后，爸爸发现自己的表达能力提升了不少。爸爸很开心，经过练习了以后，爸爸自己的说话能力提高了。然后又过了一段时间，爸爸发现爸爸在原地停了，停留了好久。甚至感觉自己的表达能力以及演讲能力有点倒退。爸爸好难受，感到很困惑，心里也很难受，爸爸。前面学习到的技巧慢慢的又退化了，又没有进步了。于是爸爸在想，其实我们生活当中常常遇到这样跟那样的困难以及阻碍。每当爸爸遇到这种困难跟阻碍的时候，我该怎么去做才能解决这个困难，才能化解现在的困境呢？爸爸想到通常我们面对困难的时候总是会选择退缩和逃避。因为每个人都害怕未知的挑战和困难。但是退缩和逃避不仅仅没有解决问题，而且让问题变得更加糟糕。于是爸爸就在想，我可不可以积极的面对困难，当困难来临时，我要主动的去寻找解决问题的方法和途径，把自己的注意力专注于解决问题的技巧。比如说爸爸最近遇到的表达上无法进步的困难。爸爸先仔细观察了自己表达上的问题，发现爸爸在说话的时候老是用喉咙和脑袋去说话，这个让爸爸感觉到自己在喉咙震动的时候脑袋也在震动，说多了就感觉自己的脑袋嗡嗡的，自己的脑袋嗡嗡的就会让自己陷入一种晕眩的状态。于是爸爸就想让在想可不可以不用喉咙去发声，不用脑袋去发声，用腹部去发声，这样的话我在说话的时候用力的是腹部，而不是脑袋和喉咙，这个让我说话变得更加的简单，更加的轻松，不必费这么大的力气。爸爸也在慢慢的练习腹部说话，练习一段时间以后吧，就会有进步，那个时候爸爸就会又开心了。雪儿跟安妮要像爸爸一样跟爸爸一起勇敢的面对困难哦，当我们面对困难时，我们要专注于寻找解决困难的途径和方法，把注意力集中在解决问题的技巧上。改善我们的技巧。寻找解决问题的途径。这样困难就变得不困难了。",
            "content_html": "<h2 id=\"要点\">要点：</h2><p>遇到困难时，如果我们积极的去突破，则会让情况更加明朗，反之则会陷入消沉。</p><h2 id=\"结构\">结构：</h2><ol>  <li>阐述与孩子们有一样的情景</li>  <li>举例遇到的困难，以及自己的行动</li>  <li>呼吁孩子们跟我一起勇敢的面对困难</li></ol><h2 id=\"大纲\">大纲：</h2><ol>  <li>在练习演讲和表达后，自己的表达和公众说话能力有了些进步</li>  <li>开始原地踏步，甚至感觉有点倒退，很疑惑，也很难受</li>  <li>面对困难和困境的几种做法。</li>  <li>激励自己勇敢面对困难，积极寻找解决问题的途径和方法，专注提高解决问题的技巧。</li>  <li>鼓励孩子们跟我一起勇敢面对困难。</li></ol><p>内容：</p><p>Hello Sharon, hello Annie.爸爸好想你们啊。爸爸喜欢你们。</p><p>又到了一个月一次的视频时间了。爸爸跟你们说说爸爸最近遇到的事情好不好？</p><p>最近爸爸一直在练习演讲和表达，因为爸爸发现自己在表达跟上台演讲时。表达的不够清楚，有很多紧张感。</p><p>于是爸爸就找了很多的资料去练习自己的表达，以及上台说话的能力，让自己不那么紧张，在表达时也表达得更清楚一些，让别人听得更容易一些。</p><p>经过一段时间的练习以后，爸爸发现自己的表达能力提升了不少。爸爸很开心，经过练习了以后，爸爸自己的说话能力提高了。</p><p>然后又过了一段时间，爸爸发现爸爸在原地停了，停留了好久。甚至感觉自己的表达能力以及演讲能力有点倒退。爸爸好难受，感到很困惑，心里也很难受，爸爸。前面学习到的技巧慢慢的又退化了，又没有进步了。</p><p>于是爸爸在想，其实我们生活当中常常遇到这样跟那样的困难以及阻碍。每当爸爸遇到这种困难跟阻碍的时候，我该怎么去做才能解决这个困难，才能化解现在的困境呢？</p><p>爸爸想到通常我们面对困难的时候总是会选择退缩和逃避。因为每个人都害怕未知的挑战和困难。</p><p>但是退缩和逃避不仅仅没有解决问题，而且让问题变得更加糟糕。</p><p>于是爸爸就在想，我可不可以积极的面对困难，当困难来临时，我要主动的去寻找解决问题的方法和途径，把自己的注意力专注于解决问题的技巧。</p><p>比如说爸爸最近遇到的表达上无法进步的困难。爸爸先仔细观察了自己表达上的问题，发现爸爸在说话的时候老是用喉咙和脑袋去说话，这个让爸爸感觉到自己在喉咙震动的时候脑袋也在震动，说多了就感觉自己的脑袋嗡嗡的，自己的脑袋嗡嗡的就会让自己陷入一种晕眩的状态。</p><p>于是爸爸就想让在想可不可以不用喉咙去发声，不用脑袋去发声，用腹部去发声，这样的话我在说话的时候用力的是腹部，而不是脑袋和喉咙，这个让我说话变得更加的简单，更加的轻松，不必费这么大的力气。</p><p>爸爸也在慢慢的练习腹部说话，练习一段时间以后吧，就会有进步，那个时候爸爸就会又开心了。</p><p>雪儿跟安妮要像爸爸一样跟爸爸一起勇敢的面对困难哦，当我们面对困难时，我们要专注于寻找解决困难的途径和方法，把注意力集中在解决问题的技巧上。改善我们的技巧。寻找解决问题的途径。这样困难就变得不困难了。</p>",
            "url": "http://www.luzexi.com/2021/11/01/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A118",
            
            
            
            
            
            "date_published": "2021-11-01T00:00:00+08:00",
            "date_modified": "2021-11-01T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/10/29/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A117",
            "title": "给女儿的信(十七) 在挫折中前进",
            "summary": "女儿 教育 亲情",
            "content_text": "Hi, Sharon Annie, 爸爸好想你。爸爸跟你们说说，爸爸最近，的学习跟工作的状况好不好？要点：爸爸最近遇到些挫折，但爸爸没有气馁，一直在想办法如何改善自己的技巧，下次不让它失败。结构：  观察到自己的表达能力比较弱  很难受也很困惑，不知道该怎么办  寻找练习的方法并练习  单一的练习方法很快无效了，寻找另一种练习方法  学习速度又变快了内容：爸爸最近遇到一些挫折，爸爸没有气馁，一直在想办法，怎么去完善自己的技巧，来让这个事情进行的更顺利一些。爸爸观察到自己的表达能力比较弱。观察到自己的在表达的时候的逻辑不是非常清晰，再跟别人讲事情或者说我想表达我的意思的时候，别人经常听不懂我在讲什么，或者说要听好几遍才能听明白。甚至有时候，别人听了好几遍，也没有听明白，但是假装明白了，最后把事情搞得很糟糕。所以，爸爸想改进一下自己的表达能力，希望自己在跟别人说话的时候，能够更清楚的表达爸爸的想说的意思。爸爸有时候会讲故事给别人听。其实讲故事里有很多的技巧，爸爸对于这些技桥都不太了解，所以爸爸在跟别人讲故事的时候，我发现讲的不清楚也不精彩，原本一个很好的故事，被爸爸讲的非常烂。于是爸爸很困惑，很难受。我想清楚的表达自己的意思，也很想把故事讲好，把故事讲得更有趣。爸爸就从平常的练习开始寻找方法，我在每天的打卡中加入了一个练习，想在平时每天都练习一下，如何说好一个故事，如何去表达的更清楚。爸爸每天早上都给自己布置一个任务，练习绕口令，练习发音。绕口令和发音是嘴巴的肌肉最基础的运动部分，爸爸希望自己在嘴巴的肌肉上能够运用的更好一些。在这样不断的练习过程当中，爸爸进步速度不是非常快。这个让爸爸受到很大的挫折感，爸爸花了很多时间去练习，但是效果不好，爸爸很难受啊。于是爸爸想办法在改进练习的方式，因为爸爸知道只有改进了练习的方式才能让练习的效果更好，让爸爸的练习效率更高。于是爸爸换了几种方法，第1种方法是爸爸有目标的去练习，比如说，爸爸想先把自己的，嗯啊这个词这个发音给去掉，因为爸爸在说话的时候经常会说啊额嗯、这个、然后、这些、那些等等。爸爸想把这些填充词给去掉，称它为哼哈词。做的第1步目标就是把这些填充词，在说话的时候去掉，用别的方式去代替，爸爸用沉默的方式去代替这些词语，当爸爸想发，嗯跟R的时候，想说然后、这个、那个时，用沉默去代替。爸爸发现练习了一段时间以后有比较大的效果，很开心。接着，练习着练习着，爸爸又遇到了瓶瓶颈。第1种练习方式，变得没有效果了，又变得低效了。于是爸爸又换了一种方法。第2种方法，爸爸想让自己说话的语气放慢一些，这样爸爸说话的时候，别人接受到的信息就会更清楚一些，也能听得更懂一些。于是爸爸就每天跟自己说话，并且跟自己说话的时候给自己定一个主题。比如爸爸想说今天学习到了新的知识，我把学习到的新知识说给别人听，在说话的时候，我要故意放慢语气，慢慢说慢慢说，慢慢说的时候对方也接收的也很一些。就这样爸爸，每天想一个主题，围绕这个主题去说自己的故事，在说故事的时候让自己的语速放慢一些。过了一段时间，真的起了效果，爸爸的表达能力越来越好了，很开心噢。不断的更换方法去练习，去有目标的练习自己的技能。当我发现遇到瓶颈的时候去主动更换练习方式，这让爸爸的学习效率很高，提升的效果也非常好。爸爸很开心，在这样不断更换练习方式的过程当中，爸爸的学习能力越来越强了，学习速度也越来越快了，学习效率越来越高了，爸爸很开心哦，希望Sharon跟安妮，也跟爸爸一样，当发现自己的进步少的时候主动去更换自己的练习方式，当你发现自己的练习方式进步速度比较慢时，可能是因为你的练习方式有问题哦。爸爸爱你们哦，爸爸喜欢你们，爸爸爱你们，我们来一起加油。",
            "content_html": "<p>Hi, Sharon Annie, 爸爸好想你。</p><p>爸爸跟你们说说，爸爸最近，的学习跟工作的状况好不好？</p><h2 id=\"要点\">要点：</h2><p>爸爸最近遇到些挫折，但爸爸没有气馁，一直在想办法如何改善自己的技巧，下次不让它失败。</p><h2 id=\"结构\">结构：</h2><ol>  <li>观察到自己的表达能力比较弱</li>  <li>很难受也很困惑，不知道该怎么办</li>  <li>寻找练习的方法并练习</li>  <li>单一的练习方法很快无效了，寻找另一种练习方法</li>  <li>学习速度又变快了</li></ol><h2 id=\"内容\">内容：</h2><p>爸爸最近遇到一些挫折，爸爸没有气馁，一直在想办法，怎么去完善自己的技巧，来让这个事情进行的更顺利一些。</p><p>爸爸观察到自己的表达能力比较弱。观察到自己的在表达的时候的逻辑不是非常清晰，再跟别人讲事情或者说我想表达我的意思的时候，别人经常听不懂我在讲什么，或者说要听好几遍才能听明白。</p><p>甚至有时候，别人听了好几遍，也没有听明白，但是假装明白了，最后把事情搞得很糟糕。</p><p>所以，爸爸想改进一下自己的表达能力，希望自己在跟别人说话的时候，能够更清楚的表达爸爸的想说的意思。</p><p>爸爸有时候会讲故事给别人听。其实讲故事里有很多的技巧，爸爸对于这些技桥都不太了解，所以爸爸在跟别人讲故事的时候，我发现讲的不清楚也不精彩，原本一个很好的故事，被爸爸讲的非常烂。</p><p>于是爸爸很困惑，很难受。我想清楚的表达自己的意思，也很想把故事讲好，把故事讲得更有趣。</p><p>爸爸就从平常的练习开始寻找方法，我在每天的打卡中加入了一个练习，想在平时每天都练习一下，如何说好一个故事，如何去表达的更清楚。</p><p>爸爸每天早上都给自己布置一个任务，练习绕口令，练习发音。绕口令和发音是嘴巴的肌肉最基础的运动部分，爸爸希望自己在嘴巴的肌肉上能够运用的更好一些。</p><p>在这样不断的练习过程当中，爸爸进步速度不是非常快。这个让爸爸受到很大的挫折感，爸爸花了很多时间去练习，但是效果不好，爸爸很难受啊。</p><p>于是爸爸想办法在改进练习的方式，因为爸爸知道只有改进了练习的方式才能让练习的效果更好，让爸爸的练习效率更高。</p><p>于是爸爸换了几种方法，第1种方法是爸爸有目标的去练习，比如说，爸爸想先把自己的，嗯啊这个词这个发音给去掉，因为爸爸在说话的时候经常会说啊额嗯、这个、然后、这些、那些等等。爸爸想把这些填充词给去掉，称它为哼哈词。</p><p>做的第1步目标就是把这些填充词，在说话的时候去掉，用别的方式去代替，爸爸用沉默的方式去代替这些词语，当爸爸想发，嗯跟R的时候，想说然后、这个、那个时，用沉默去代替。</p><p>爸爸发现练习了一段时间以后有比较大的效果，很开心。</p><p>接着，练习着练习着，爸爸又遇到了瓶瓶颈。第1种练习方式，变得没有效果了，又变得低效了。</p><p>于是爸爸又换了一种方法。第2种方法，爸爸想让自己说话的语气放慢一些，这样爸爸说话的时候，别人接受到的信息就会更清楚一些，也能听得更懂一些。</p><p>于是爸爸就每天跟自己说话，并且跟自己说话的时候给自己定一个主题。比如爸爸想说今天学习到了新的知识，我把学习到的新知识说给别人听，在说话的时候，我要故意放慢语气，慢慢说慢慢说，慢慢说的时候对方也接收的也很一些。</p><p>就这样爸爸，每天想一个主题，围绕这个主题去说自己的故事，在说故事的时候让自己的语速放慢一些。</p><p>过了一段时间，真的起了效果，爸爸的表达能力越来越好了，很开心噢。</p><p>不断的更换方法去练习，去有目标的练习自己的技能。当我发现遇到瓶颈的时候去主动更换练习方式，这让爸爸的学习效率很高，提升的效果也非常好。</p><p>爸爸很开心，在这样不断更换练习方式的过程当中，爸爸的学习能力越来越强了，学习速度也越来越快了，学习效率越来越高了，爸爸很开心哦，希望Sharon跟安妮，也跟爸爸一样，当发现自己的进步少的时候主动去更换自己的练习方式，当你发现自己的练习方式进步速度比较慢时，可能是因为你的练习方式有问题哦。</p><p>爸爸爱你们哦，爸爸喜欢你们，爸爸爱你们，我们来一起加油。</p>",
            "url": "http://www.luzexi.com/2021/10/29/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A117",
            
            
            
            
            
            "date_published": "2021-10-29T00:00:00+08:00",
            "date_modified": "2021-10-29T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/10/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B047",
            "title": "读书笔记(四十七) 《游戏引擎架构》#4 低阶渲染器（1）",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》后对引擎架构的理解又深入了些。近段时间有对引擎剖析的想法，正好借这书本对游戏引擎架构做一个完整分析。此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。我将借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块，最后通过实践简单引擎开发来完成对引擎知识的掌握。游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。同时《游戏引擎架构》中部分知识太过陈旧的部分，会重新深挖后总结出自己的观点。概述：本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：  时间库  自定义容器库  字符串散列库  内存管理框架  RTTI与反射模块  图形计算库  资产管理模块  低阶渲染器  剔除与合批模块  动画模块  物理模块  UI底层框架  性能剖析器的核心部分  脚本系统  视觉效果模块本篇内容为列表中的第8个部分。正文：简单回顾下前文前文简单提了下C++编译过程、C++内存布局、文件内核读取原理、图形计算的常用库内容，以及大篇幅的引擎资产管理。引擎资产管理简单回顾下：首先，资产分为DCC资产、中间格式资产、引擎资产，这三者是从制作到导入到使用的顺序。其次，引擎资产分为元数据和引擎资产文件，引擎不仅需要资产也需要资产的配置数据。接着，引擎内存中的资产有资源映射关系，资产路径、资产GUID、资产实例、资产实例ID。最后，引擎通常都有资源包，资源包的格式通常都差不多，头信息（包括索引信息和数据概要信息）+数据文件，压缩可以是整体压缩也可以是每个独立数据单独压缩，通过解剖资源包的数据格式，我们可以知道如何去做差量更新。这里补充一点，引擎在读取资产时，与读取资产配置的原理是一样的，它可以有自己的数据格式也可以用标准格式，引擎通常使用自定义格式。通过区分读取不同类型的资产数据来实例化引擎内不同的资源对象，包括网格、材质、动画、粒子、节点、组件配置等。下面我们开始这篇内容本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。目录：  主板结构中的显卡  GPU功能发展史  GPU与CPU的差异  GPU硬件特点  图形驱动程序架构  引擎低阶渲染架构主板结构中的显卡我们讨论GPU和显卡时经常混为一谈，严格来说GPU是显卡（Video card、Display card、Graphics card）最核心的部件。显卡除了GPU，还有扇热器、通讯元件、与主板和显示器连接的各类插槽。图1（主板结构图）早期计算机设备中的CPU都是由系统总线来与所有其他设备通信，当图形芯片需要跟CPU和内存大量交换数据时就出现了巨大瓶颈，于是人们设计了高速的北桥芯片和低速的南桥芯片，一来协调CPU、内存、图形设备之间的高速通信，二来专门处理磁盘、USB、键盘鼠标等低速设备。从上图中我们看到，离CPU越近，存取数据越快，最近的就是CPU内的组件了，其次是高速缓存总线，再是本地总线，接着是内存总线，最后是高速总线。我们的GPU被安排在高速总线上，而且总线还有其他设备需要兼顾。因此从通信速度上来说，高速总线并不是那么快，这也是CPU与GPU的通信带宽通常成为瓶颈的其中一个原因。图1（现实中主板结构图：图片来自网络）这里重点介绍下北桥芯片，一个主板上最重要的部分可以说就是主板的芯片组了，主板的芯片组一般由北桥芯片和南桥芯片组成，两者共同组成主板的芯片组。北桥芯片主要负责实现与CPU、内存、AGP接口之间的数据传输，同时还通过特定的数据通道和南桥芯片相连接。南桥芯片主要负责和IDE设备、PCI设备、声音设备、网络设备以及其他的I/O设备的通信。主板和CPU发展都现在，北桥芯片慢慢开始消失被集成了CPU中。往后发展，主板芯片组可以看成是以往南桥芯片组的加强版，CPU与主板芯片采用DMI总线进行通信。虽然从Lynnfield Core i5/i7开始把北桥集成到CPU上，但是其内部仍是采用QPI总线来通讯，而外部与主板芯片组通讯，其实就是以往主板上南桥与北桥通讯，采用的是DMI总线。因此不能说Lynnfield Core i5/i7是精简了，只是集成度更高而已。手机主板结构与PC不同以下图片均来源网络图1图2图3图4手机的主板布局则不同，由于主板不能横向扩展，所以采用双或三层叠层的主板，GPU内嵌在处理器上与CPU同框，且它们周围布满了内存，这样通信更快。同时由于空间小，功率和高速缓存大小也受到限制。多层主板虽然看上去设计巧妙，同时也将几个发热大户都贴在了一起，发热量和速度加倍。现代CPU都有一种过热自动降频或者关闭核心的保护措施，因此当玩王者或吃鸡等大型游戏时，就会因为发热而导致它更快的达到阈值温度而降频，这也是很多游戏优化后仍然会卡顿的主要原因。因此很多手机引入了水冷（热导管技术）CPU散热技术，用超大一块热导管来散热降温，让CPU不会因为过热而降频或锁核，从而能更长时间甚至全时运行在最大工作频率上，从而发挥出手机宣传时100%的性能。已发布在微信公众号上，点击跳转参考资料：《主板北桥百科》https://baike.baidu.com/item/%E4%B8%BB%E6%9D%BF%E5%8C%97%E6%A1%A5/10252486?fr=aladdin《总线百科》https://baike.baidu.com/item/%E6%80%BB%E7%BA%BF/108823《iPhone 11/Pro Max内部结构示意图》http://www.itqianyan.com/m/view.php?aid=5479《拆解 iPhone 12 系列》https://www.igao7.com/news/202010/L2RP34HNtTEZ2yYC.html《iPhone 8和X拆解》https://m.iphonediule.com/hot/qiangxian.html",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484964&amp;idx=1&amp;sn=99fd35baa5ad829cbae99753f14aa64b&amp;chksm=fc226323cb55ea3598d74dd2508841f01e149176b2c857c54c077a2d8a3f493033ce8f57b56f&amp;token=1534435063&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h2 id=\"背景\">背景：</h2><p>作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了几遍《游戏引擎架构》后对引擎架构的理解又深入了些。</p><p>近段时间有对引擎剖析的想法，正好借这书本对游戏引擎架构做一个完整分析。</p><p>此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节。</p><p>我将借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块，最后通过实践简单引擎开发来完成对引擎知识的掌握。</p><p>游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。</p><p>同时《游戏引擎架构》中部分知识太过陈旧的部分，会重新深挖后总结出自己的观点。</p><h2 id=\"概述\">概述：</h2><p>本系列文章对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：</p><ol>  <li>时间库</li>  <li>自定义容器库</li>  <li>字符串散列库</li>  <li>内存管理框架</li>  <li>RTTI与反射模块</li>  <li>图形计算库</li>  <li>资产管理模块</li>  <li>低阶渲染器</li>  <li>剔除与合批模块</li>  <li>动画模块</li>  <li>物理模块</li>  <li>UI底层框架</li>  <li>性能剖析器的核心部分</li>  <li>脚本系统</li>  <li>视觉效果模块</li></ol><p>本篇内容为列表中的第8个部分。</p><h2 id=\"正文\">正文：</h2><p>简单回顾下前文</p><p>前文简单提了下C++编译过程、C++内存布局、文件内核读取原理、图形计算的常用库内容，以及大篇幅的引擎资产管理。</p><p>引擎资产管理简单回顾下：</p><p>首先，资产分为DCC资产、中间格式资产、引擎资产，这三者是从制作到导入到使用的顺序。</p><p>其次，引擎资产分为元数据和引擎资产文件，引擎不仅需要资产也需要资产的配置数据。</p><p>接着，引擎内存中的资产有资源映射关系，资产路径、资产GUID、资产实例、资产实例ID。</p><p>最后，引擎通常都有资源包，资源包的格式通常都差不多，头信息（包括索引信息和数据概要信息）+数据文件，压缩可以是整体压缩也可以是每个独立数据单独压缩，通过解剖资源包的数据格式，我们可以知道如何去做差量更新。</p><p>这里补充一点，引擎在读取资产时，与读取资产配置的原理是一样的，它可以有自己的数据格式也可以用标准格式，引擎通常使用自定义格式。通过区分读取不同类型的资产数据来实例化引擎内不同的资源对象，包括网格、材质、动画、粒子、节点、组件配置等。</p><h3 id=\"下面我们开始这篇内容\">下面我们开始这篇内容</h3><p>本次内容会围绕GPU来写，从硬件架构到软件驱动再到引擎架构，目标是帮大家理解GPU硬件的运作原理，理解图形接口的架构，理解引擎低阶渲染器的架构。</p><h2 id=\"目录\">目录：</h2><ol>  <li>主板结构中的显卡</li>  <li>GPU功能发展史</li>  <li>GPU与CPU的差异</li>  <li>GPU硬件特点</li>  <li>图形驱动程序架构</li>  <li>引擎低阶渲染架构</li></ol><h2 id=\"主板结构中的显卡\">主板结构中的显卡</h2><p>我们讨论GPU和显卡时经常混为一谈，严格来说GPU是显卡（Video card、Display card、Graphics card）最核心的部件。显卡除了GPU，还有扇热器、通讯元件、与主板和显示器连接的各类插槽。</p><p>图1</p><p>（主板结构图）</p><p>早期计算机设备中的CPU都是由系统总线来与所有其他设备通信，当图形芯片需要跟CPU和内存大量交换数据时就出现了巨大瓶颈，于是人们设计了高速的北桥芯片和低速的南桥芯片，一来协调CPU、内存、图形设备之间的高速通信，二来专门处理磁盘、USB、键盘鼠标等低速设备。</p><p>从上图中我们看到，离CPU越近，存取数据越快，最近的就是CPU内的组件了，其次是高速缓存总线，再是本地总线，接着是内存总线，最后是高速总线。我们的GPU被安排在高速总线上，而且总线还有其他设备需要兼顾。因此从通信速度上来说，高速总线并不是那么快，这也是CPU与GPU的通信带宽通常成为瓶颈的其中一个原因。</p><p>图1</p><p>（现实中主板结构图：图片来自网络）</p><p>这里重点介绍下北桥芯片，一个主板上最重要的部分可以说就是主板的芯片组了，主板的芯片组一般由北桥芯片和南桥芯片组成，两者共同组成主板的芯片组。北桥芯片主要负责实现与CPU、内存、AGP接口之间的数据传输，同时还通过特定的数据通道和南桥芯片相连接。南桥芯片主要负责和IDE设备、PCI设备、声音设备、网络设备以及其他的I/O设备的通信。</p><p>主板和CPU发展都现在，北桥芯片慢慢开始消失被集成了CPU中。往后发展，主板芯片组可以看成是以往南桥芯片组的加强版，CPU与主板芯片采用DMI总线进行通信。</p><p>虽然从Lynnfield Core i5/i7开始把北桥集成到CPU上，但是其内部仍是采用QPI总线来通讯，而外部与主板芯片组通讯，其实就是以往主板上南桥与北桥通讯，采用的是DMI总线。因此不能说Lynnfield Core i5/i7是精简了，只是集成度更高而已。</p><h3 id=\"手机主板结构与pc不同\">手机主板结构与PC不同</h3><p>以下图片均来源网络</p><p>图1</p><p>图2</p><p>图3</p><p>图4</p><p>手机的主板布局则不同，由于主板不能横向扩展，所以采用双或三层叠层的主板，GPU内嵌在处理器上与CPU同框，且它们周围布满了内存，这样通信更快。同时由于空间小，功率和高速缓存大小也受到限制。</p><p>多层主板虽然看上去设计巧妙，同时也将几个发热大户都贴在了一起，发热量和速度加倍。</p><p>现代CPU都有一种过热自动降频或者关闭核心的保护措施，因此当玩王者或吃鸡等大型游戏时，就会因为发热而导致它更快的达到阈值温度而降频，这也是很多游戏优化后仍然会卡顿的主要原因。</p><p>因此很多手机引入了水冷（热导管技术）CPU散热技术，用超大一块热导管来散热降温，让CPU不会因为过热而降频或锁核，从而能更长时间甚至全时运行在最大工作频率上，从而发挥出手机宣传时100%的性能。</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484964&amp;idx=1&amp;sn=99fd35baa5ad829cbae99753f14aa64b&amp;chksm=fc226323cb55ea3598d74dd2508841f01e149176b2c857c54c077a2d8a3f493033ce8f57b56f&amp;token=1534435063&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h2 id=\"参考资料\">参考资料：</h2><p>《主板北桥百科》</p><p>https://baike.baidu.com/item/%E4%B8%BB%E6%9D%BF%E5%8C%97%E6%A1%A5/10252486?fr=aladdin</p><p>《总线百科》</p><p>https://baike.baidu.com/item/%E6%80%BB%E7%BA%BF/108823</p><p>《iPhone 11/Pro Max内部结构示意图》</p><p>http://www.itqianyan.com/m/view.php?aid=5479</p><p>《拆解 iPhone 12 系列》</p><p>https://www.igao7.com/news/202010/L2RP34HNtTEZ2yYC.html</p><p>《iPhone 8和X拆解》</p><p>https://m.iphonediule.com/hot/qiangxian.html</p>",
            "url": "http://www.luzexi.com/2021/10/26/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B047",
            
            
            
            "tags": ["读书笔记","前端技术"],
            
            "date_published": "2021-10-26T00:00:00+08:00",
            "date_modified": "2021-10-26T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/10/17/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B046",
            "title": "读书笔记(四十六) 《如何精彩演讲》#1 演讲的结构",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景不知不觉看完了6本关于演讲的主题，按推荐顺序排列分别是《高效演讲》、《演讲与口才》、《即兴演讲》、《关键对话》、《TED演讲的力量》、《说话的艺术》。我希望自己能够对演讲有一个系统性的学习。于是自己在平常的生活和工作中实践了一段时间，前前后后加起来有两个月时间。目标是，改善平常的工作、生活中表达的流畅和清晰度，能让人感觉到舒服让人感觉有活力。同时在公众演讲上，希望自己能够很好的呈现自己的所思所想以及所知所学。因此开启这个演讲学习系列的总结文章，我将对这6本书的内容加上我的实践经验做一次全面的系统性的总结。内容这一篇主要讲演讲的结构。一场演讲分为三个部分：第1个部分是，开场。第2个部分是，核心内容。第3个部分是，收尾。这三个部分都有各自的技巧，而此篇主要来说说具体的演讲内容中的其中一点，即演讲结构。首先来说一下为什么我们需要结构？我们在平常的表达过程当中，一般是不会去刻意在意逻辑。因此，我们在表述过程当中通常是按照时间线来进行表述。表达过程当中，通常只是说出了自己脑中不断冒出的想法。在这样的表达下，对方是很难get到我们想要说的内容的。一旦我们说的内容稍微多一些时，对方很容易进入完全听不懂我们在说了什么情况。那么如何才能让对方听清楚，听明白，听得懂我们在说什么呢？我们就得用演讲结构去规范我们的演讲内容，让我们的演讲内容能够更清晰的呈现在听众的脑中，让脑袋更容易去记住我们的要点以及中心思想。那什么才是好的演讲结构呢？首先演讲的内容必须围绕着一个中心思想去讲。如果中心思想太多，很难让听众记得住，就不会是一个好的演讲。因此一个演讲最好只有一个中心思想。中心思想最好是能引起观众共鸣的。（在后面的内容中再讲如何让中心思想引起共鸣）其次你的演讲内容要有层次感。在我们表达时最好有意识的按简单顺序进行表达，这样听众们的大脑才能记得住。比如第一第二第三；过去现在未来；昨天，今天，明天；最重要其次最后等等。除了这种层次方式，还有另一种方式，即故事方式。（后面的文章中再解剖如何讲好一个故事）这里先简单介绍一下一个好故事设计要有4个部分，情景带入、遇到危机、冲突和转折、大好结局。除了设计故事内容还要注意好故事有4个要点，篇幅小、通俗易懂、简单容易记、有共鸣。接着你的演讲内容，最好以总分总的形式去部署。即提出观点、剖析观点、总结观点。在开头时阐述演讲要点，结尾时进行要点总结，中间内容分成三个论点，每个论点都由三个句子组成演讲结构。这样的演讲结构即“1-3-3-3-1”形式组成的结构，让人听了更舒服也更容易记得住。最后在你平时的讲话和沟通表达的过程中，有意识的将自己说话的内容以层次感的形式表现出来。一开始你可以在讲话前先先打好附稿或准备稿，按123规律来讲，注意不要把第3点和第1点说重复了。经过长时间的练习，你可以自如的应对各种各样的演讲模式以及各种各样的即兴发挥。那么怎样才能“练”好演讲结构呢？这里给出三个要点。第一，每次讲话前先打好腹稿再开口。为每次的公众演讲以及平时的沟通交流都打好腹稿，这是一种非常好的练习方式。这让你时时刻刻提醒自己，在讲话时要有层次感，将这种方法印刻在脑海里，形成肌肉记忆。时间长了，你自然而然就有了说话的层次感，形成了强有力的肌肉记忆。第二，多上台，多在台上运用演讲层次结构。台上的感觉和台下的感觉是完全不同的。在台上你会更加紧张，也更加容易出错，同时更加在意别人对你的看法，也更加害怕。多上台，多在台上运用演讲的层次结构，会让你在面对陌生场合，在面对激烈、紧张、恐惧时，也能够自如的运用层次感肌肉记忆，让演讲内容流畅清晰的表达出来。第三，发现生活中的主题进行层次训练。生活和工作中，周围每天都会发生很多的事情，我们可以通过仔细观察我们生活当中发生的事情，叙述或表达我们的观点。表达时运用层次结构去跟自己对话，这样的训练每天都可以进行，有助于我们更快更好的形成肌肉记忆。最后告诉大家，如何获得练习反馈。这里有三个方法告诉大家。1.录制后自我复盘。我们演讲的反馈可以通过自己录制视频，录制音频后进行复听来复盘自己的演讲。2.通过他人获得评价。可以通过同事、朋友、家人、以及专门演讲圈的人对自己的评价来复盘自己的演讲，从而获得自己改进的方向。但要注意，别人对你的负面评价要小心。通常那些不专业的人给你的评价，都是打击你自信心的一个常见途径。我们需要的是鼓励，而不是打击。鼓励让我们更有动力前进。而打击则适得其反。3.通过专业演讲训练师来反馈。最好是通过专业的演讲导师来纠正你的演讲问题，从而给予你正确的演讲练习方式和修正方向。已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484952&amp;idx=1&amp;sn=aa014404eb8b71222820f1f3bbff437e&amp;chksm=fc22631fcb55ea0981c20cab77f66da58a2697ab2e8a792f4b4c6ba15a3bc6b57dd2ba7309a1&amp;token=1211671052&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景</h1><p>不知不觉看完了6本关于演讲的主题，按推荐顺序排列分别是《高效演讲》、《演讲与口才》、《即兴演讲》、《关键对话》、《TED演讲的力量》、《说话的艺术》。</p><p>我希望自己能够对演讲有一个系统性的学习。于是自己在平常的生活和工作中实践了一段时间，前前后后加起来有两个月时间。</p><p>目标是，改善平常的工作、生活中表达的流畅和清晰度，能让人感觉到舒服让人感觉有活力。同时在公众演讲上，希望自己能够很好的呈现自己的所思所想以及所知所学。</p><p>因此开启这个演讲学习系列的总结文章，我将对这6本书的内容加上我的实践经验做一次全面的系统性的总结。</p><h1 id=\"内容\">内容</h1><p>这一篇主要讲演讲的结构。</p><p>一场演讲分为三个部分：</p><p>第1个部分是，开场。第2个部分是，核心内容。第3个部分是，收尾。</p><p>这三个部分都有各自的技巧，而此篇主要来说说具体的演讲内容中的其中一点，即演讲结构。</p><h2 id=\"首先来说一下为什么我们需要结构\">首先来说一下为什么我们需要结构？</h2><p>我们在平常的表达过程当中，一般是不会去刻意在意逻辑。因此，我们在表述过程当中通常是按照时间线来进行表述。表达过程当中，通常只是说出了自己脑中不断冒出的想法。在这样的表达下，对方是很难get到我们想要说的内容的。一旦我们说的内容稍微多一些时，对方很容易进入完全听不懂我们在说了什么情况。</p><p>那么如何才能让对方听清楚，听明白，听得懂我们在说什么呢？</p><p>我们就得用演讲结构去规范我们的演讲内容，让我们的演讲内容能够更清晰的呈现在听众的脑中，让脑袋更容易去记住我们的要点以及中心思想。</p><h2 id=\"那什么才是好的演讲结构呢\">那什么才是好的演讲结构呢？</h2><p>首先演讲的内容必须围绕着一个中心思想去讲。如果中心思想太多，很难让听众记得住，就不会是一个好的演讲。因此一个演讲最好只有一个中心思想。中心思想最好是能引起观众共鸣的。（在后面的内容中再讲如何让中心思想引起共鸣）</p><p>其次你的演讲内容要有层次感。</p><p>在我们表达时最好有意识的按简单顺序进行表达，这样听众们的大脑才能记得住。比如第一第二第三；过去现在未来；昨天，今天，明天；最重要其次最后等等。</p><p>除了这种层次方式，还有另一种方式，即故事方式。（后面的文章中再解剖如何讲好一个故事）</p><p>这里先简单介绍一下一个好故事设计要有4个部分，情景带入、遇到危机、冲突和转折、大好结局。</p><p>除了设计故事内容还要注意好故事有4个要点，篇幅小、通俗易懂、简单容易记、有共鸣。</p><p>接着你的演讲内容，最好以总分总的形式去部署。即提出观点、剖析观点、总结观点。在开头时阐述演讲要点，结尾时进行要点总结，中间内容分成三个论点，每个论点都由三个句子组成演讲结构。</p><p>这样的演讲结构即“1-3-3-3-1”形式组成的结构，让人听了更舒服也更容易记得住。</p><p>最后在你平时的讲话和沟通表达的过程中，有意识的将自己说话的内容以层次感的形式表现出来。一开始你可以在讲话前先先打好附稿或准备稿，按123规律来讲，注意不要把第3点和第1点说重复了。经过长时间的练习，你可以自如的应对各种各样的演讲模式以及各种各样的即兴发挥。</p><h2 id=\"那么怎样才能练好演讲结构呢\">那么怎样才能“练”好演讲结构呢？</h2><p>这里给出三个要点。</p><p>第一，每次讲话前先打好腹稿再开口。</p><p>为每次的公众演讲以及平时的沟通交流都打好腹稿，这是一种非常好的练习方式。这让你时时刻刻提醒自己，在讲话时要有层次感，将这种方法印刻在脑海里，形成肌肉记忆。时间长了，你自然而然就有了说话的层次感，形成了强有力的肌肉记忆。</p><p>第二，多上台，多在台上运用演讲层次结构。</p><p>台上的感觉和台下的感觉是完全不同的。在台上你会更加紧张，也更加容易出错，同时更加在意别人对你的看法，也更加害怕。多上台，多在台上运用演讲的层次结构，会让你在面对陌生场合，在面对激烈、紧张、恐惧时，也能够自如的运用层次感肌肉记忆，让演讲内容流畅清晰的表达出来。</p><p>第三，发现生活中的主题进行层次训练。</p><p>生活和工作中，周围每天都会发生很多的事情，我们可以通过仔细观察我们生活当中发生的事情，叙述或表达我们的观点。表达时运用层次结构去跟自己对话，这样的训练每天都可以进行，有助于我们更快更好的形成肌肉记忆。</p><h2 id=\"最后告诉大家如何获得练习反馈\">最后告诉大家，如何获得练习反馈。</h2><p>这里有三个方法告诉大家。</p><p>1.录制后自我复盘。</p><p>我们演讲的反馈可以通过自己录制视频，录制音频后进行复听来复盘自己的演讲。</p><p>2.通过他人获得评价。</p><p>可以通过同事、朋友、家人、以及专门演讲圈的人对自己的评价来复盘自己的演讲，从而获得自己改进的方向。</p><p>但要注意，别人对你的负面评价要小心。通常那些不专业的人给你的评价，都是打击你自信心的一个常见途径。我们需要的是鼓励，而不是打击。鼓励让我们更有动力前进。而打击则适得其反。</p><p>3.通过专业演讲训练师来反馈。</p><p>最好是通过专业的演讲导师来纠正你的演讲问题，从而给予你正确的演讲练习方式和修正方向。</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484952&amp;idx=1&amp;sn=aa014404eb8b71222820f1f3bbff437e&amp;chksm=fc22631fcb55ea0981c20cab77f66da58a2697ab2e8a792f4b4c6ba15a3bc6b57dd2ba7309a1&amp;token=1211671052&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2021/10/17/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B046",
            
            
            
            
            
            "date_published": "2021-10-17T00:00:00+08:00",
            "date_modified": "2021-10-17T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/10/12/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A866",
            "title": "思路探讨(六十六) 人和事",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "已发布在微信公众号上，点击跳转有两周时间没有发文章了，最近有些忙，自己也遇到了瓶颈，正在突破。前几个月发现我的表达能力有些弱，表达逻辑混乱，表达时没有自信。所以呢，我特别花了一些精力去加强这方面的训练。自己做了一些训练，去演讲俱乐部练习演讲，去读书聚会的地方做演讲，以及做主持人的表达工作。我希望通过这样的锻炼，提升表达能力。也看了几本书，暂时还没有去总结它们，希望后面能够挤出时间来写些关于这个主题书的读书总结。为什么要去做沟通跟表达演讲的训练呢？我内心声音是，我要解决人与人之间的关系，人与人之间的沟通。前面10几年都在做练习解决事情的技巧，比如我要写好程序，写书，写文章，都是去总结一些解决事情的经验。不管是程序还是项目还是工作分配工作拆解，都是需要我们去解决事情。这是我前面12年做的事情。我最近领悟到，其实解决事情只占了30%的部分，剩余的70%的部分并不是靠解决事情来解决的，而是靠做人，解决人与人之间关系来搞定的。一个典型的例子，在工作当中如果我们跟上级相处不好的话，跟家人的关系不好，你即使把成绩做出来了，也得不到家人的肯定，和领导的赏识，这对我们的感受有巨大影响，甚至会有强烈的挫败感。因此现阶段的我认为，解决人与人之间的关系比解决事情更重要。最重要的其实不是事情本身，而是与事情有关的人，这些人才是关键。例如事情提出的人是领导，或与事件有关的人是同事，在他们提出问题时，先确立这是不是个事实。我相信大部分时候是事实，也可能是被夸大的事实。当我们去做事时，其实应该首先跟他们聊一聊，跟老板聊一聊，跟这些部门的人来聊一聊，这样的才能体会到对方的感受，以及看到对方究竟想要的。跟人联系、寒暄后，才能知道对方的情绪、想法、需要，这时再想办法来解决问题已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484939&amp;idx=1&amp;sn=e3df251c9cb4733784e5df9ccd21e3ab&amp;chksm=fc22630ccb55ea1a27f035c062122bf9e40a504d0dac7143b0a383b4f7dc729dc8596cc10958&amp;token=254199611&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><p>有两周时间没有发文章了，最近有些忙，自己也遇到了瓶颈，正在突破。</p><p>前几个月发现我的表达能力有些弱，表达逻辑混乱，表达时没有自信。</p><p>所以呢，我特别花了一些精力去加强这方面的训练。</p><p>自己做了一些训练，去演讲俱乐部练习演讲，去读书聚会的地方做演讲，以及做主持人的表达工作。</p><p>我希望通过这样的锻炼，提升表达能力。也看了几本书，暂时还没有去总结它们，希望后面能够挤出时间来写些关于这个主题书的读书总结。</p><p>为什么要去做沟通跟表达演讲的训练呢？我内心声音是，我要解决人与人之间的关系，人与人之间的沟通。</p><p>前面10几年都在做练习解决事情的技巧，比如我要写好程序，写书，写文章，都是去总结一些解决事情的经验。</p><p>不管是程序还是项目还是工作分配工作拆解，都是需要我们去解决事情。这是我前面12年做的事情。</p><p>我最近领悟到，其实解决事情只占了30%的部分，剩余的70%的部分并不是靠解决事情来解决的，而是靠做人，解决人与人之间关系来搞定的。</p><p>一个典型的例子，在工作当中如果我们跟上级相处不好的话，跟家人的关系不好，你即使把成绩做出来了，也得不到家人的肯定，和领导的赏识，这对我们的感受有巨大影响，甚至会有强烈的挫败感。</p><p>因此现阶段的我认为，解决人与人之间的关系比解决事情更重要。</p><p>最重要的其实不是事情本身，而是与事情有关的人，这些人才是关键。例如事情提出的人是领导，或与事件有关的人是同事，在他们提出问题时，先确立这是不是个事实。</p><p>我相信大部分时候是事实，也可能是被夸大的事实。当我们去做事时，其实应该首先跟他们聊一聊，跟老板聊一聊，跟这些部门的人来聊一聊，这样的才能体会到对方的感受，以及看到对方究竟想要的。</p><p>跟人联系、寒暄后，才能知道对方的情绪、想法、需要，这时再想办法来解决问题</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484939&amp;idx=1&amp;sn=e3df251c9cb4733784e5df9ccd21e3ab&amp;chksm=fc22630ccb55ea1a27f035c062122bf9e40a504d0dac7143b0a383b4f7dc729dc8596cc10958&amp;token=254199611&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2021/10/12/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A866",
            
            
            
            
            
            "date_published": "2021-10-12T00:00:00+08:00",
            "date_modified": "2021-10-12T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/09/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B045",
            "title": "读书笔记(四十五) 《游戏引擎架构》#3 链接、图形计算库、资产管理模块",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了好几遍《游戏引擎架构》后对引擎的架构感触颇深。近段时间对引擎剖析的想法也较多，正好借着书本对游戏引擎架构做一个完整分析。此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节，使得初学者也能很容易地理解其中的各种概念。我的目标是掌握游戏引擎架构知识，我的方法是借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块。最后通过实践简单引擎开发来完成对引擎知识的掌握。游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。由于《游戏引擎架构》此书的部分知识太浅或太过陈旧，所以不得不将部分知识重新深挖后总结出自己的观点。概述：本章开始对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：  时间库  自定义容器库  字符串散列库  内存管理框架  RTTI与反射模块  图形计算库  资产管理模块  低阶渲染器  剔除与合批模块  动画模块  物理模块  UI核心框架  性能剖析器的核心部分  脚本系统  视觉效果模块本篇内容为列表中的6、7。正文：简单回顾下前文，前面我们聊了时间库、自定义容器、字符串、内存管理这四个模块的技术原理和特点，它们都是大型软件架构所必备的模块，同时简单讲述了它们在Unreal和Unity中存在的特点。编译链接过程与内存布局图1图2简单回顾一下C++编译过程：  源文件.cpp文件被编译成.o文件后由链接器链接成可执行文件或库文件。  库分为静态库和动态库。其中静态库为只是简单集合了.o文件，而动态库则是一个完整的编译、链接产物。  头文件.h文件不是编译的必需品，它只是包含在源文件中的声明文件。  Linux的so和Windows的DLL虽然都是ELF文件格式，但最终格式差了很多，因此不能互相使用。  编译器开启优化后（一般是Release时），会优化代码，包括内联、调换代码顺序、更改代码为最优等。具体可以看我前面写的《链接、装载与库》http://luzexi.com/2021/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B029也同时回顾下C++内存布局：    1.C++内存布局中有，类、变量、内存对齐、虚表、RTTI    2.类和结构在C++中差异较少    3.每个变量内存占用量不同，int（32bit）、short int（16bit）、long long int（64bit）、float（4bit）、double（8bit）、char（8bit）等    4.默认按4字节（32bit）对齐，不足4字节的编译器会补齐    5.虚函数或虚继承的类有虚表及虚表指针    6.没有RTTI的情况下，虚表只有当前的虚函数指针    7.有RTTI的情况下，虚表中有type_info指针    8.有RTTI的情况下，虚指针指向虚表中的第二个格子，即虚指针，第一个格子为type_info指针具体可以看我前面写的《深度探索C++对象模型-总结》http://luzexi.com/2020/11/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B014图形计算库图形库涉及内容有图形元素和运算两种，它们分别包含，点、矢量、矩阵、四元数、图形对象以及相关的运算（包括SIMD）。下面我们来介绍一下：矢量运算包括：矢量加减法、模、归一化、点积、投影、叉积、线性插值等。矩阵有，单位矩阵、转置矩阵、逆矩阵、齐次坐标。矩阵运算，包括矩阵乘法、加减法、除、与、或等。四元数运算包括，四元数乘法、加减法、逆运算、旋转矢量、等价的四元数矩阵、旋转线性插值、球面线性插值等。各图形转换操作，包括旋转、缩放、投影、平移、LookAt等。图形对象包括，直线、线段、球体、平面、包围盒、平截头体、圆形、矩形、三角形等。这部分内容可以在Unreal的Engine\\Source\\Runtime\\Core\\Public\\Math中找到。下面简单介绍下SIMD：硬件加速SIMD运算（Single instruction multiple data），单指令多数据，是指，现代微处理器用一个指令并行地对多个数据执行数学运算，它能帮助我们加速运算。游戏引擎中最常用的是SSE模式（Streaming SIMD extensions，SSE），它包裹了4个32位float值，它们都被打包进了一个128位寄存器。单个指令可对4对浮点数进行并行运算，如加法或乘法。在计算四元矢量和4x4矩阵相乘时特别有用。需要注意的是1.由于在浮点运算器和SSE寄存器之间传输数据很糟糕，所以不要混合使用普通浮点数和SIMD运算，这样会使得CPU整个指令执行流水线停顿，浪费CPU周期。2.在VS中用SIMD数据类型__m128声明的临时变量或参数，编译器通常会把它们直接置于SSE寄存器中而非内存栈。3.动态分配SIMD结构时要注意内存按16字节对齐资产管理模块先说文件系统文件系统游戏引擎中的文件系统相对比较简单：1.每个平台的路径、API不同，对平台需要做些封装。2.文件读取的阻塞方式分同步和异步。其中同步需要阻塞当前进程来等待IO，异步则通过分线程阻塞等待IO，其两者原理是一样，都是调用内核读取文件且都需要等待IO。以前写过一篇关于操作系统内核中文件操作的底层原理《链接、装载与库 - 内核运行库》大家可以参考下。这里顺便简单回顾一下文件内核原理：图1图2这两张图清晰的表达了内核文件的读写原理：1.操作系统内核中对每个打开的文件都有个内核对象2.所有文件内核对象都被集中索引到一个数组中，称为文件打开表3.文件表数组前三个元素填充的是stdin、stdout、stderr这三个内核对象4.为了增加读写效率，内核已经实现了文件读取缓冲，会读取一段一段的读取5.读取步骤，用户程序先开辟一段内存，内核程序则利用缓冲读取，不足时多次读取，结束时返回数据。资产管理器早前很多引擎都有独立的资产管理器，它被制作成了一个独立的软件，专门用于管理游戏资产，包括网格、材质、纹理、着色器程序、动画、音频、配置等。资产管理器本身是一个具有清晰设计、统一、中心化的子系统，负责管理游戏中用到的所有类型的资产，只是现代大多引擎已经将资产管理整合到引擎编辑器中。资产管理器解决了什么问题？答案是：1.资产预览，资产在引擎中快速预览，并对不同资产类型区分展示。2.资产查找，通过查找功能快速查找到资产。3.资产组合，通过组合信息管理资产各个依赖。    资产通常组合在一起使用，因此组合信息是资产管理的一部分。    加载时需要依赖多个资产，引擎通过资产元数据将这些信息保存下来。4.资产转换，将外部资产导入到引擎中使用。    外部资产需要经过一定的转换才能在引擎中使用。    引擎通常有自己的资产导入系统，将外部资产转换为自身使用的数据格式。5.运行时资产管理，引擎向应用层提供加载和释放资产接口，并管理已加载资产对象。    资产的加载和释放，引擎需要提供给应用层加载和释放资产的接口，引擎本身也需要对这些资产进行管理。下面我们从资产管道、资产类型、运行时资产管理、元文件、资产包，四个方面介绍下引擎中的资产管理器。资产管道：每个资产都需要通过资产管道才能最终被游戏引擎所使用。每个资产管道的始端都是DCC原生格式的源资产（Maya的.ma或.mb、3DMax的.max或.obj、Photoshop的.psd文件等）。资产经过资产管道的导出器、资产编译器、资产链接器，最终生成了游戏引擎可以使用的数据格式。第一步，通常DCC工具需要撰写自定义插件（大都已提供现成统一的插件），把DCC里的数据导出为某种中间格式（例如.fbx格式），一般DCC工具都会提供接口或脚本供程序员写导出插件。第二步，中间格式数据仍然需要经过一定的转换才能被引擎使用，因此引擎通过资产编译器转换中间格式。第三步，通常多个资产组合后才成为一个完整资产，例如网格文件、材质文件、动画文件、贴图文件等，它们经过资产链接器连接后组合成为完整的资产。资产类型：资产经过资产管道后会生成相应的资产相关文件，包括：1.资产源文件2.资产配置文件（元数据文件）3.资产目标文件资产也分为外部和内部资产，外部资产由DCC导出，内部资产则通过引擎生成，例如材质球、动画控制器、蓝图、粒子等。资产配置文件记录了资产在引擎中的配置信息和依赖关系。资产目标文件是引擎根据资产源文件和配置信息生成的符合引擎使用格式的资产文件。生成资产元数据文件和目标文件的目的是：1.在保留原资产文件格式的前提下，生成引擎能使用的格式文件。2.便于引擎获取每个资产文件的配置及依赖关系。3.便于引擎统一管理资产，管理资产的目的是，提供例如建立资产数据库、查找、同步、打包等功能。Unity引擎使用Mate文件存储资产的配置和依赖关系。当引擎导入资产时就会生成相应的Mate文件，并根据这个Mate文件在Library文件夹下生成目标文件，同时根据修改的Mate文件配置来调整或重新生成目标文件。Unreal引擎则稍稍有些不同，资产源文件仍然会转换成资产目标文件，只是它把资产配置文件和资产目标文件合并在一个uasset文件中，这样导入后源文件就不再需要。如果你想要获取元数据，UE4也提供了python接口和蓝图接口。运行时资产管理：运行时资产管理通常包括，资产对象管理、资产对象映射管理。资产从加载到实例化，在引擎内部必须有一个有效的管理机制，其职责为：1.同一份资源只会存在一个副本2.管理资产生命周期，确保不需要时卸载3.处理复合资产，复合资产依赖多个资产组合而成。4.维护引用，确保复合资产在内存中的引用关系正确。5.资产接口，提供资产载入与卸载接口，包含同步和异步的载入方式。基于这五个职责，资产在运行时的引擎中必须拥有信息为，资产地址，资产对象，资产对象ID（运行时ID）。部分引擎对每个资源都配备了资产唯一ID（GUID），让资产地址与资产唯一ID有绑定关系，这使得引擎在资产迁移时能发挥更好的作用。资产对象映射管理包括：  资产路径与资产唯一ID的映射关系  资产唯一ID与资产对象ID的映射关系  资产对象ID与资产对象的映射关系有了这些映射关系，引擎就能通过资产路径查找到资产对象，从而保证不重复加载，并维护好各资产之间的引用关系。在UE4和Unity上也同样做了这种类型的资产映射关系的管理。资产加载和卸载资产加载与卸载接口必不可少，通常引擎都会定制一些依赖数据，例如前面提到的资产配置文件（也可以说是资产元数据），多个资产组合达成资源包时，资源包之间的依赖关系也同样需要有数据来维护。引擎都会有资源加载的统一接口，包括加载和卸载，同步和异步，资源包和非资源包形式。图引擎的资产加载和卸载框架各引擎之间稍有不同，不过总体差不了太多，或直接IO调用，或用开启线程后做IO调用，然后通过存储资产对象与映射关系来搭建资产加载和释放的框架，由于各个引擎接口都不一样，不做详细介绍。资源包数据格式通常引擎都会提供类似AssetBundle的资源组合包，便于外部资源下载和更新。在UE4和Unity上都有相同的功能，只是命名不同，UE4为Pak，Unity为AssetBundle。Pak或AssetBundle中存放着多个复合资产，通过引擎接口加载指定资产。图为了方便理解，我把数据格式从头往下画。实际中的Pak和AssetBundle数据格式要倒一下，头信息在最底部，资产数据块在最前头。资源包数据格式：1.文件头信息与数据块拆分2.可整体压缩或部分压缩3.通过依赖配置加载外部资源包资源包可以通俗的认为是一个多文件的组合，它可以自己做压缩，也可以让资产压缩后再组合成文件。通常资源包的数据格式由文件头和数据块两部分组成。文件头信息中包含了资产信息和偏移量，通过加载文件头，就能知道资产在文件中的位置、类型、名称、大小等。这种资产组织方式使得我们通过差量方式更新资产成为可能。图根据资源包的数据格式特点，可以规划差量更新步骤：1.打差量包，包头保持完整，数据块则只加入差量部分2.下载差量包3.合并两个资源包文件4.合并时使用差量包头作为文件头5.合并时提取原资源包中的不更新部分和差量包中的更新部分放入新的资源包文件中6.更新完成生成新的资源文件这部分内容Unity和Unreal并无太大差异。资产规范资产规范目标：规范命名，防止程序报错，方便自动化检测，方便筛选找寻。优化内容，每个项目资源都应该有存在目的。减短路径，路径简短易寻。图网上有同学分享的很详细了，这里就不赘述，参考《UE4工程规范》：https://github.com/skylens-inc/ue4-style-guide/blob/master/README.md#12-%E8%B5%84%E6%BA%90%E7%B1%BB%E5%9E%8B%E8%A1%A8-参考资料：《游戏引擎架构》叶劲峰 译《游戏引擎原理与实践》 程东哲 著《vmath》https://github.com/BlackMATov/vmath.hpp#Matrix-Transform-3D《从虚函数表到RTTI》https://zhuanlan.zhihu.com/p/150579874《虚幻引擎4文档》https://docs.unrealengine.com/4.27/zh-CN/Basics/AssetsAndPackages/AssetMetadata/《UE4工程规范》https://github.com/skylens-inc/ue4-style-guide/blob/master/README.md#12-%E8%B5%84%E6%BA%90%E7%B1%BB%E5%9E%8B%E8%A1%A8-《链接、装载与库 - 内核运行库》https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484809&amp;idx=1&amp;sn=89091ecce47229ebf10e4855c0ccceca&amp;chksm=fc22608ecb55e998cdff3952057e6d1c6f099463797d57458ec1f4d37a432d46dc3c5bfcfbb5&amp;token=557108361&amp;lang=zh_CN#rd《链接、装载与库 - 静态链接》http://luzexi.com/2021/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B029《深度探索C++对象模型-总结》http://luzexi.com/2020/11/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B014已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484932&amp;idx=1&amp;sn=13c96ed5d6a24abe43d9a63a5e2aca23&amp;chksm=fc226303cb55ea1527fead1e2d90b435a6eb911cb54e58ffbde95b674f1982859fa6a66f3837&amp;token=1405609858&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了好几遍《游戏引擎架构》后对引擎的架构感触颇深。</p><p>近段时间对引擎剖析的想法也较多，正好借着书本对游戏引擎架构做一个完整分析。此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节，使得初学者也能很容易地理解其中的各种概念。</p><p>我的目标是掌握游戏引擎架构知识，我的方法是借助《游戏引擎架构》这本书、结合引擎源码和自己的经验，深入分析游戏引擎的历史、架构、模块。最后通过实践简单引擎开发来完成对引擎知识的掌握。</p><p>游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。</p><p>由于《游戏引擎架构》此书的部分知识太浅或太过陈旧，所以不得不将部分知识重新深挖后总结出自己的观点。</p><h1 id=\"概述\">概述：</h1><p>本章开始对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：</p><ol>  <li>时间库</li>  <li>自定义容器库</li>  <li>字符串散列库</li>  <li>内存管理框架</li>  <li>RTTI与反射模块</li>  <li>图形计算库</li>  <li>资产管理模块</li>  <li>低阶渲染器</li>  <li>剔除与合批模块</li>  <li>动画模块</li>  <li>物理模块</li>  <li>UI核心框架</li>  <li>性能剖析器的核心部分</li>  <li>脚本系统</li>  <li>视觉效果模块</li></ol><p>本篇内容为列表中的6、7。</p><h1 id=\"正文\">正文：</h1><p>简单回顾下前文，前面我们聊了时间库、自定义容器、字符串、内存管理这四个模块的技术原理和特点，它们都是大型软件架构所必备的模块，同时简单讲述了它们在Unreal和Unity中存在的特点。</p><h2 id=\"编译链接过程与内存布局\">编译链接过程与内存布局</h2><p>图1</p><p>图2</p><p>简单回顾一下C++编译过程：</p><ol>  <li>源文件.cpp文件被编译成.o文件后由链接器链接成可执行文件或库文件。</li>  <li>库分为静态库和动态库。其中静态库为只是简单集合了.o文件，而动态库则是一个完整的编译、链接产物。</li>  <li>头文件.h文件不是编译的必需品，它只是包含在源文件中的声明文件。</li>  <li>Linux的so和Windows的DLL虽然都是ELF文件格式，但最终格式差了很多，因此不能互相使用。</li>  <li>编译器开启优化后（一般是Release时），会优化代码，包括内联、调换代码顺序、更改代码为最优等。</li></ol><p>具体可以看我前面写的《链接、装载与库》</p><p>http://luzexi.com/2021/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B029</p><p>也同时回顾下C++内存布局：    1.C++内存布局中有，类、变量、内存对齐、虚表、RTTI    2.类和结构在C++中差异较少    3.每个变量内存占用量不同，int（32bit）、short int（16bit）、long long int（64bit）、float（4bit）、double（8bit）、char（8bit）等    4.默认按4字节（32bit）对齐，不足4字节的编译器会补齐    5.虚函数或虚继承的类有虚表及虚表指针    6.没有RTTI的情况下，虚表只有当前的虚函数指针    7.有RTTI的情况下，虚表中有type_info指针    8.有RTTI的情况下，虚指针指向虚表中的第二个格子，即虚指针，第一个格子为type_info指针</p><p>具体可以看我前面写的《深度探索C++对象模型-总结》</p><p>http://luzexi.com/2020/11/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B014</p><h2 id=\"图形计算库\">图形计算库</h2><p>图形库涉及内容有图形元素和运算两种，它们分别包含，点、矢量、矩阵、四元数、图形对象以及相关的运算（包括SIMD）。</p><p>下面我们来介绍一下：</p><p>矢量运算包括：矢量加减法、模、归一化、点积、投影、叉积、线性插值等。</p><p>矩阵有，单位矩阵、转置矩阵、逆矩阵、齐次坐标。矩阵运算，包括矩阵乘法、加减法、除、与、或等。</p><p>四元数运算包括，四元数乘法、加减法、逆运算、旋转矢量、等价的四元数矩阵、旋转线性插值、球面线性插值等。</p><p>各图形转换操作，包括旋转、缩放、投影、平移、LookAt等。</p><p>图形对象包括，直线、线段、球体、平面、包围盒、平截头体、圆形、矩形、三角形等。</p><p>这部分内容可以在Unreal的Engine\\Source\\Runtime\\Core\\Public\\Math中找到。</p><h3 id=\"下面简单介绍下simd\">下面简单介绍下SIMD：</h3><p>硬件加速SIMD运算（Single instruction multiple data），单指令多数据，是指，现代微处理器用一个指令并行地对多个数据执行数学运算，它能帮助我们加速运算。</p><p>游戏引擎中最常用的是SSE模式（Streaming SIMD extensions，SSE），它包裹了4个32位float值，它们都被打包进了一个128位寄存器。</p><p>单个指令可对4对浮点数进行并行运算，如加法或乘法。在计算四元矢量和4x4矩阵相乘时特别有用。</p><p>需要注意的是1.由于在浮点运算器和SSE寄存器之间传输数据很糟糕，所以不要混合使用普通浮点数和SIMD运算，这样会使得CPU整个指令执行流水线停顿，浪费CPU周期。2.在VS中用SIMD数据类型__m128声明的临时变量或参数，编译器通常会把它们直接置于SSE寄存器中而非内存栈。3.动态分配SIMD结构时要注意内存按16字节对齐</p><h2 id=\"资产管理模块\">资产管理模块</h2><p>先说文件系统</p><h3 id=\"文件系统\">文件系统</h3><p>游戏引擎中的文件系统相对比较简单：1.每个平台的路径、API不同，对平台需要做些封装。2.文件读取的阻塞方式分同步和异步。</p><p>其中同步需要阻塞当前进程来等待IO，异步则通过分线程阻塞等待IO，其两者原理是一样，都是调用内核读取文件且都需要等待IO。</p><p>以前写过一篇关于操作系统内核中文件操作的底层原理《链接、装载与库 - 内核运行库》大家可以参考下。</p><p>这里顺便简单回顾一下文件内核原理：</p><p>图1</p><p>图2</p><p>这两张图清晰的表达了内核文件的读写原理：1.操作系统内核中对每个打开的文件都有个内核对象2.所有文件内核对象都被集中索引到一个数组中，称为文件打开表3.文件表数组前三个元素填充的是stdin、stdout、stderr这三个内核对象4.为了增加读写效率，内核已经实现了文件读取缓冲，会读取一段一段的读取5.读取步骤，用户程序先开辟一段内存，内核程序则利用缓冲读取，不足时多次读取，结束时返回数据。</p><h2 id=\"资产管理器\">资产管理器</h2><p>早前很多引擎都有独立的资产管理器，它被制作成了一个独立的软件，专门用于管理游戏资产，包括网格、材质、纹理、着色器程序、动画、音频、配置等。</p><p>资产管理器本身是一个具有清晰设计、统一、中心化的子系统，负责管理游戏中用到的所有类型的资产，只是现代大多引擎已经将资产管理整合到引擎编辑器中。</p><h3 id=\"资产管理器解决了什么问题答案是\">资产管理器解决了什么问题？答案是：</h3><p>1.资产预览，资产在引擎中快速预览，并对不同资产类型区分展示。2.资产查找，通过查找功能快速查找到资产。3.资产组合，通过组合信息管理资产各个依赖。    资产通常组合在一起使用，因此组合信息是资产管理的一部分。    加载时需要依赖多个资产，引擎通过资产元数据将这些信息保存下来。4.资产转换，将外部资产导入到引擎中使用。    外部资产需要经过一定的转换才能在引擎中使用。    引擎通常有自己的资产导入系统，将外部资产转换为自身使用的数据格式。5.运行时资产管理，引擎向应用层提供加载和释放资产接口，并管理已加载资产对象。    资产的加载和释放，引擎需要提供给应用层加载和释放资产的接口，引擎本身也需要对这些资产进行管理。</p><p>下面我们从资产管道、资产类型、运行时资产管理、元文件、资产包，四个方面介绍下引擎中的资产管理器。</p><h3 id=\"资产管道\">资产管道：</h3><p>每个资产都需要通过资产管道才能最终被游戏引擎所使用。每个资产管道的始端都是DCC原生格式的源资产（Maya的.ma或.mb、3DMax的.max或.obj、Photoshop的.psd文件等）。资产经过资产管道的导出器、资产编译器、资产链接器，最终生成了游戏引擎可以使用的数据格式。</p><p>第一步，通常DCC工具需要撰写自定义插件（大都已提供现成统一的插件），把DCC里的数据导出为某种中间格式（例如.fbx格式），一般DCC工具都会提供接口或脚本供程序员写导出插件。第二步，中间格式数据仍然需要经过一定的转换才能被引擎使用，因此引擎通过资产编译器转换中间格式。第三步，通常多个资产组合后才成为一个完整资产，例如网格文件、材质文件、动画文件、贴图文件等，它们经过资产链接器连接后组合成为完整的资产。</p><h3 id=\"资产类型\">资产类型：</h3><p>资产经过资产管道后会生成相应的资产相关文件，包括：1.资产源文件2.资产配置文件（元数据文件）3.资产目标文件</p><p>资产也分为外部和内部资产，外部资产由DCC导出，内部资产则通过引擎生成，例如材质球、动画控制器、蓝图、粒子等。资产配置文件记录了资产在引擎中的配置信息和依赖关系。资产目标文件是引擎根据资产源文件和配置信息生成的符合引擎使用格式的资产文件。</p><p>生成资产元数据文件和目标文件的目的是：1.在保留原资产文件格式的前提下，生成引擎能使用的格式文件。2.便于引擎获取每个资产文件的配置及依赖关系。3.便于引擎统一管理资产，管理资产的目的是，提供例如建立资产数据库、查找、同步、打包等功能。</p><p>Unity引擎使用Mate文件存储资产的配置和依赖关系。当引擎导入资产时就会生成相应的Mate文件，并根据这个Mate文件在Library文件夹下生成目标文件，同时根据修改的Mate文件配置来调整或重新生成目标文件。</p><p>Unreal引擎则稍稍有些不同，资产源文件仍然会转换成资产目标文件，只是它把资产配置文件和资产目标文件合并在一个uasset文件中，这样导入后源文件就不再需要。如果你想要获取元数据，UE4也提供了python接口和蓝图接口。</p><h3 id=\"运行时资产管理\">运行时资产管理：</h3><p>运行时资产管理通常包括，资产对象管理、资产对象映射管理。</p><p>资产从加载到实例化，在引擎内部必须有一个有效的管理机制，其职责为：1.同一份资源只会存在一个副本2.管理资产生命周期，确保不需要时卸载3.处理复合资产，复合资产依赖多个资产组合而成。4.维护引用，确保复合资产在内存中的引用关系正确。5.资产接口，提供资产载入与卸载接口，包含同步和异步的载入方式。</p><p>基于这五个职责，资产在运行时的引擎中必须拥有信息为，资产地址，资产对象，资产对象ID（运行时ID）。</p><p>部分引擎对每个资源都配备了资产唯一ID（GUID），让资产地址与资产唯一ID有绑定关系，这使得引擎在资产迁移时能发挥更好的作用。</p><p>资产对象映射管理包括：</p><ol>  <li>资产路径与资产唯一ID的映射关系</li>  <li>资产唯一ID与资产对象ID的映射关系</li>  <li>资产对象ID与资产对象的映射关系</li></ol><p>有了这些映射关系，引擎就能通过资产路径查找到资产对象，从而保证不重复加载，并维护好各资产之间的引用关系。</p><p>在UE4和Unity上也同样做了这种类型的资产映射关系的管理。</p><h3 id=\"资产加载和卸载\">资产加载和卸载</h3><p>资产加载与卸载接口必不可少，通常引擎都会定制一些依赖数据，例如前面提到的资产配置文件（也可以说是资产元数据），多个资产组合达成资源包时，资源包之间的依赖关系也同样需要有数据来维护。</p><p>引擎都会有资源加载的统一接口，包括加载和卸载，同步和异步，资源包和非资源包形式。</p><p>图</p><p>引擎的资产加载和卸载框架各引擎之间稍有不同，不过总体差不了太多，或直接IO调用，或用开启线程后做IO调用，然后通过存储资产对象与映射关系来搭建资产加载和释放的框架，由于各个引擎接口都不一样，不做详细介绍。</p><h3 id=\"资源包数据格式\">资源包数据格式</h3><p>通常引擎都会提供类似AssetBundle的资源组合包，便于外部资源下载和更新。</p><p>在UE4和Unity上都有相同的功能，只是命名不同，UE4为Pak，Unity为AssetBundle。</p><p>Pak或AssetBundle中存放着多个复合资产，通过引擎接口加载指定资产。</p><p>图</p><p>为了方便理解，我把数据格式从头往下画。实际中的Pak和AssetBundle数据格式要倒一下，头信息在最底部，资产数据块在最前头。</p><p>资源包数据格式：1.文件头信息与数据块拆分2.可整体压缩或部分压缩3.通过依赖配置加载外部资源包</p><p>资源包可以通俗的认为是一个多文件的组合，它可以自己做压缩，也可以让资产压缩后再组合成文件。</p><p>通常资源包的数据格式由文件头和数据块两部分组成。文件头信息中包含了资产信息和偏移量，通过加载文件头，就能知道资产在文件中的位置、类型、名称、大小等。</p><p>这种资产组织方式使得我们通过差量方式更新资产成为可能。</p><p>图</p><p>根据资源包的数据格式特点，可以规划差量更新步骤：1.打差量包，包头保持完整，数据块则只加入差量部分2.下载差量包3.合并两个资源包文件4.合并时使用差量包头作为文件头5.合并时提取原资源包中的不更新部分和差量包中的更新部分放入新的资源包文件中6.更新完成生成新的资源文件</p><p>这部分内容Unity和Unreal并无太大差异。</p><h2 id=\"资产规范\">资产规范</h2><p>资产规范目标：规范命名，防止程序报错，方便自动化检测，方便筛选找寻。优化内容，每个项目资源都应该有存在目的。减短路径，路径简短易寻。</p><p>图</p><p>网上有同学分享的很详细了，这里就不赘述，参考《UE4工程规范》：</p><p>https://github.com/skylens-inc/ue4-style-guide/blob/master/README.md#12-%E8%B5%84%E6%BA%90%E7%B1%BB%E5%9E%8B%E8%A1%A8-</p><h3 id=\"参考资料\">参考资料：</h3><p>《游戏引擎架构》叶劲峰 译</p><p>《游戏引擎原理与实践》 程东哲 著</p><p>《vmath》</p><p>https://github.com/BlackMATov/vmath.hpp#Matrix-Transform-3D</p><p>《从虚函数表到RTTI》</p><p>https://zhuanlan.zhihu.com/p/150579874</p><p>《虚幻引擎4文档》</p><p>https://docs.unrealengine.com/4.27/zh-CN/Basics/AssetsAndPackages/AssetMetadata/</p><p>《UE4工程规范》</p><p>https://github.com/skylens-inc/ue4-style-guide/blob/master/README.md#12-%E8%B5%84%E6%BA%90%E7%B1%BB%E5%9E%8B%E8%A1%A8-</p><p>《链接、装载与库 - 内核运行库》</p><p>https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484809&amp;idx=1&amp;sn=89091ecce47229ebf10e4855c0ccceca&amp;chksm=fc22608ecb55e998cdff3952057e6d1c6f099463797d57458ec1f4d37a432d46dc3c5bfcfbb5&amp;token=557108361&amp;lang=zh_CN#rd</p><p>《链接、装载与库 - 静态链接》</p><p>http://luzexi.com/2021/06/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B029</p><p>《深度探索C++对象模型-总结》</p><p>http://luzexi.com/2020/11/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B014</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484932&amp;idx=1&amp;sn=13c96ed5d6a24abe43d9a63a5e2aca23&amp;chksm=fc226303cb55ea1527fead1e2d90b435a6eb911cb54e58ffbde95b674f1982859fa6a66f3837&amp;token=1405609858&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2021/09/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B045",
            
            
            
            "tags": ["读书笔记","前端技术"],
            
            "date_published": "2021-09-28T00:00:00+08:00",
            "date_modified": "2021-09-28T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/09/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B044",
            "title": "读书笔记(四十四) 《心流》#3 专注时人们的表现",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：在2020年初就买了《心流》，直到2021年1月才读完第一遍，读完的那一刻，我知道我又打开了一个新世界。不得不承认就是这本书让我的专注力提高了整整一个级别，这是最让我非常兴奋的地方。而我只是读了第一遍，吸收不到10%的结果，可想而知它的魔力有多么强大。于是决定好好回顾总结一下整本书，便开启了第二遍、第三遍的读书之旅。读此书的起源是由于我在平时工作、交流、学习时，常常难以集中注意力，因此带着好奇心阅读了这本书。我猜大家应该也和我一样，常常为自己难以击中注意力而烦恼，其实我们都希望自己在专注做一件事情的时候能够拥有更高的效率。本书的核心是心流的最优体验，简单来说就是“如何让你高兴地专注”。作者想表达的是，当你的心流会的体验最佳时，也是学习效率最高的时候，同时也是你最幸福的时刻。书本中讲到了关于学习、工作、运动、社交等各方面的心流原理和技巧，我作为知识的搬运工，做了一些精炼和总结的工作。正文：简单回顾下前文：前文我们说了专注力能带给我们幸福，生活让我们感到痛苦的一个重要原因是人们欲望无法填满，我们生活在这个社会被这个的规则所牵动，已经沦为社会的奴隶，在这种环境培养独立意识非常重要同时也非常艰难。控制意识能改善体验的品质想要控制意识，首先要了解它。那么意识究竟是如何运作的呢？“意识”简单来说就是，某些我们能感觉到的，且有能力引导其方向的东西，诸如情绪、感觉、思想、企图等。首先，一个人可以不管外界不管发生什么事，只靠改变意识的内涵，使自己快乐或悲伤。其次，意识的力量可以把无助的境况转变为有机会反败为胜的挑战。我们口中所说的奋斗不辍、克服万难的毅力，它不但是成功的要素，也是享受人生的不二法门。最后，控制意识需要毅力，而培养毅力应该从建立意识的秩序、控制感觉与思想着手，且最好不要企图走捷径。瑜伽行者就是控制意识的高手，但跟任何高手一样，他们下了多年功夫苦练，一刻都不懈怠。唯有这样投注所有时间与心力，提升操纵内在体验的技巧，方能成为专家。意识的极限生活中有太多的事情需要我们的注意，但我们顶多同时应付七组资讯，诸如分辨声音、影像、情绪或思想中可辨识的弦外之音等。大多数人在每天的三分之一的闲暇时间里，都尽可能避免用脑子，这段空档一半以上都在电视前、杂志、抖音、微信聊天、看app资讯上消磨掉。因此对于我们来说，准许哪些资讯进入意识就显得格外重要，这实际上，就决定了我们生活的内涵与品质。神经系统在特定时间内能处理的资讯极为有限，每次只能认知和回应一定数量的事件，而新涌进来的会把旧的挤掉。所以思绪必须井然有序，否则就会混乱。注意力是无价的资源注意力再强大也无法超越我们前面谈到的限制，它只能在一定时间内处理一定数量的资讯。从记忆库中取出资讯，理解、比较、评估，然后做决定，都需要心灵有限的资讯处理能力。控制意识最明显的指标就是能随心所欲地集中注意力，不因任何事情而分心。若能做到这一点，就能在日常生活中找乐趣。作者举例一位学员E女士：她无时无刻不在写作、解决问题、阅读报纸、翻阅当日行程，或只是提出问题，仔细观察周遭事物，并计划下一步的工作。她只花很少的时间在日常例行公事上。她每天都会抽出时间来位心灵充电，如在湖畔伫立15分钟，闭上眼睛让阳光洒在脸上，或牵着狗在镇外山坡上散步。她能充分控制注意力，可以随时把意识关闭，打个盹，然后恢复精神。另一位学员R先生：说话时目光深邃；听人说话时，往往从多方面分析对话的话语。一般人视为理所当然的事常令他感到困惑；在用原创但十分贴切的方式详加分析前，他绝不让任何事轻易溜走。R先生尽管不断地磨炼知性，外表却给人一种沉着、宁静的感觉。他似乎永远能察觉到周遭最微小的变动。他注意一件事，目的不在于改善或批判它，只要能够观察和了解事实，并表达自己的看法，他就心满意足了。R先生不像E女士那样对社会造成立刻的冲击，但他的意识同样复杂而有条理。他把注意力尽可能延伸，跟周遭的世界密切结合起来。跟E女士一样，他也能充分享受人生。像探照灯那样集中注意力大多数人都不能像E女士或R先生那样，把有限的注意力像探照灯一般集中成一道光束，而是任它毫无章法的散开。这说明生活中人们应用注意力的方式足以决定人生的外观与内涵，从而反应人们为人处世的现象。例如，在同一个宴会上，外向的人热衷于与人交际；成就不凡的人寻求有用的商界人脉；偏执狂则随时警惕，怕碰到危险等等。每种人都有自己的注意力探照灯，这也是不同人之间的差异。实际上工作生活中，我们每个职业都在训练自己的集中注意力的方式，例如，软件工程师会更多关注计算机软件运行过程，销售人员更关注人与人之间的交流与谈判，银行家更专注财务状况，运动员更关注动作协调与身体素质等等等等。这种探照灯一样的集中方式正是他们在专业领域中学会了如何抓住领域中易受忽略的讯号。内在失序与精神熵内在失序的意思是，外来资讯跟当下的意图发生冲突，使我们分心，使我们无法为现实意图而努力，造成对意识极为不利的影响。作者举了一个例子，胡里欧破轮胎的故事。他的汽车轮胎破了，于是他一大早小心翼翼地把车开到加油站，把轮胎的气打满，又尽快开到工厂。下班时轮胎气又漏光了，他再到工厂附近加油站打满气后再开回家。胡里欧如法炮制了三天，一整天他都在担心，今晚是否能回家以及明天是否能到岗。这使得他无法专心工作，情绪也变得烦躁不安。每当周围的环境对意识的目标构成威胁，就会发生内在的失序现象，这称为精神熵。它会导致自我解体，使效率大打折扣。这种状况若持续太久，对自身造成严重的损害，使自我再也不能集中注意力实现任何目标。井然有序的意识精神熵的反面就是最优体验。当我们专注于资讯与目标时，精神能量就会源源不断涌上来，这时我们就没有了忧虑情绪，也不再猜疑自己的能力。我们不再怀疑自己，也是因为我们得到了明确的鼓励，你做的很好。这种积极的反馈，强化了自我，使我们能投入更多的注意力，照顾内心与外在环境的平衡。作者举了一个例子。麦德林的工作是装配线上的工人，每天要重复600次的工作，像这样枯燥的工作，他做了五年，但还是觉得很快乐。因为他对工作的态度跟一名奥运选手差不多，常常思索如何打破纪录。他像外科医生一般一丝不苟的设计工具的安放顺序和每一步动作，经过五年的努力，他最好的成绩是28秒装配完一个单元。心流的最优体验出现时，一个人可以投入全部的注意力以求实现目标。没有失序现象需要整顿，自我也没有受到任何威胁，因此不需要分心防卫。一个人若能充分掌控意识，尽可能创造心流体验，生活品质势必会提高。在心流中，我们是精神能量的主宰，无论做什么事，都能使意识更有秩序。一位攀岩专家简要说明了自己的心流感觉：越来越完美的自我控制，产生一种痛快的感觉。你不断逼迫身体发挥所有极限，直到全身隐隐作痛。然后你会满怀敬畏地回顾自己，回顾你所做的一切。那种佩服的感觉，简直无法形容。它带给你一种狂喜，一种自我满足。只要在这种战役中战胜过自己，人生其他战场的挑战也就变得容易多了。其实战斗中对抗的不是自己，而是使意识失序的精神熵。体验过心流的人都知道，那份深沉的快乐，是严格的自律、集中注意力换来的。独特性与复杂性的完美结合复杂性是由两种广泛的心理过程造成的，一种是独特化，另一种是整合。1.独特化是把自己与他人区分开来，朝独一无二的方向发展。2.整合则恰好相反，是借着超越自我的观念和实体与他人连结。独特化和整合，两者都是使不可或缺的。如果独特化而不整合，体系就会出现一片混乱，反之也是一样。当我们只有独特化的自我时，虽然也能获得极高的成就，但会陷入以自我为中心的危险。同样的，如果一个人的自我若是完全建立在整合上，固然也能有良好的人际关系和安全感，却缺乏独立的个性。只有一个人把精神能量平均投注在这两方面，既不过分自私，也不盲从，才算达到自我所追求的复杂性。复杂的自我能够成功地融合这两种乍看矛盾的过程。心流体验会使自我变得比过去更复杂，这可以说是一种成长。我们在克服挑战时，必然会使我们变得更有能力和技巧，因此心流就是经由这种过程加深自我独特化的。当我们每经历一次心流后，我们就会变得更独特，更难预测，并拥有非凡的技能。选定一个目标，投入全部的注意力，不论做什么事情，都会觉得乐趣无穷。一旦尝到这种快乐，我们就会加倍努力，重温它的滋味，自我就这样开始成长。心流之所以重要，不仅是因为他能使现在更快乐，也是因为它会强化我们的自信心。虽然心流没有捷径可走，但只要我们了解它的运作方式，就有可能使生活改观。已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484913&amp;idx=1&amp;sn=9589d58b41c85d01d1aaa68872260539&amp;chksm=fc2260f6cb55e9e08222aa5096a65949a05c98edc73eb005e289e11010c68a4816ed35a50035&amp;token=134603822&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>在2020年初就买了《心流》，直到2021年1月才读完第一遍，读完的那一刻，我知道我又打开了一个新世界。</p><p>不得不承认就是这本书让我的专注力提高了整整一个级别，这是最让我非常兴奋的地方。而我只是读了第一遍，吸收不到10%的结果，可想而知它的魔力有多么强大。</p><p>于是决定好好回顾总结一下整本书，便开启了第二遍、第三遍的读书之旅。</p><p>读此书的起源是由于我在平时工作、交流、学习时，常常难以集中注意力，因此带着好奇心阅读了这本书。</p><p>我猜大家应该也和我一样，常常为自己难以击中注意力而烦恼，其实我们都希望自己在专注做一件事情的时候能够拥有更高的效率。</p><p>本书的核心是心流的最优体验，简单来说就是“如何让你高兴地专注”。</p><p>作者想表达的是，当你的心流会的体验最佳时，也是学习效率最高的时候，同时也是你最幸福的时刻。</p><p>书本中讲到了关于学习、工作、运动、社交等各方面的心流原理和技巧，我作为知识的搬运工，做了一些精炼和总结的工作。</p><h1 id=\"正文\">正文：</h1><p>简单回顾下前文：</p><p>前文我们说了专注力能带给我们幸福，生活让我们感到痛苦的一个重要原因是人们欲望无法填满，我们生活在这个社会被这个的规则所牵动，已经沦为社会的奴隶，在这种环境培养独立意识非常重要同时也非常艰难。</p><h2 id=\"控制意识能改善体验的品质\">控制意识能改善体验的品质</h2><p>想要控制意识，首先要了解它。那么意识究竟是如何运作的呢？</p><p>“意识”简单来说就是，某些我们能感觉到的，且有能力引导其方向的东西，诸如情绪、感觉、思想、企图等。</p><p>首先，一个人可以不管外界不管发生什么事，只靠改变意识的内涵，使自己快乐或悲伤。</p><h3 id=\"其次意识的力量可以把无助的境况转变为有机会反败为胜的挑战\">其次，意识的力量可以把无助的境况转变为有机会反败为胜的挑战。</h3><p>我们口中所说的奋斗不辍、克服万难的毅力，它不但是成功的要素，也是享受人生的不二法门。</p><h3 id=\"最后控制意识需要毅力而培养毅力应该从建立意识的秩序控制感觉与思想着手且最好不要企图走捷径\">最后，控制意识需要毅力，而培养毅力应该从建立意识的秩序、控制感觉与思想着手，且最好不要企图走捷径。</h3><p>瑜伽行者就是控制意识的高手，但跟任何高手一样，他们下了多年功夫苦练，一刻都不懈怠。</p><p>唯有这样投注所有时间与心力，提升操纵内在体验的技巧，方能成为专家。</p><h2 id=\"意识的极限\">意识的极限</h2><p>生活中有太多的事情需要我们的注意，但我们顶多同时应付七组资讯，诸如分辨声音、影像、情绪或思想中可辨识的弦外之音等。</p><p>大多数人在每天的三分之一的闲暇时间里，都尽可能避免用脑子，这段空档一半以上都在电视前、杂志、抖音、微信聊天、看app资讯上消磨掉。</p><p>因此对于我们来说，准许哪些资讯进入意识就显得格外重要，这实际上，就决定了我们生活的内涵与品质。</p><h3 id=\"神经系统在特定时间内能处理的资讯极为有限每次只能认知和回应一定数量的事件而新涌进来的会把旧的挤掉所以思绪必须井然有序否则就会混乱\">神经系统在特定时间内能处理的资讯极为有限，每次只能认知和回应一定数量的事件，而新涌进来的会把旧的挤掉。所以思绪必须井然有序，否则就会混乱。</h3><h2 id=\"注意力是无价的资源\">注意力是无价的资源</h2><p>注意力再强大也无法超越我们前面谈到的限制，它只能在一定时间内处理一定数量的资讯。</p><p>从记忆库中取出资讯，理解、比较、评估，然后做决定，都需要心灵有限的资讯处理能力。</p><h3 id=\"控制意识最明显的指标就是能随心所欲地集中注意力不因任何事情而分心若能做到这一点就能在日常生活中找乐趣\">控制意识最明显的指标就是能随心所欲地集中注意力，不因任何事情而分心。若能做到这一点，就能在日常生活中找乐趣。</h3><p>作者举例一位学员E女士：</p><p>她无时无刻不在写作、解决问题、阅读报纸、翻阅当日行程，或只是提出问题，仔细观察周遭事物，并计划下一步的工作。</p><p>她只花很少的时间在日常例行公事上。</p><p>她每天都会抽出时间来位心灵充电，如在湖畔伫立15分钟，闭上眼睛让阳光洒在脸上，或牵着狗在镇外山坡上散步。</p><p>她能充分控制注意力，可以随时把意识关闭，打个盹，然后恢复精神。</p><p>另一位学员R先生：</p><p>说话时目光深邃；听人说话时，往往从多方面分析对话的话语。</p><p>一般人视为理所当然的事常令他感到困惑；在用原创但十分贴切的方式详加分析前，他绝不让任何事轻易溜走。</p><p>R先生尽管不断地磨炼知性，外表却给人一种沉着、宁静的感觉。他似乎永远能察觉到周遭最微小的变动。</p><p>他注意一件事，目的不在于改善或批判它，只要能够观察和了解事实，并表达自己的看法，他就心满意足了。</p><p>R先生不像E女士那样对社会造成立刻的冲击，但他的意识同样复杂而有条理。</p><p>他把注意力尽可能延伸，跟周遭的世界密切结合起来。</p><p>跟E女士一样，他也能充分享受人生。</p><h2 id=\"像探照灯那样集中注意力\">像探照灯那样集中注意力</h2><p>大多数人都不能像E女士或R先生那样，把有限的注意力像探照灯一般集中成一道光束，而是任它毫无章法的散开。</p><h3 id=\"这说明生活中人们应用注意力的方式足以决定人生的外观与内涵从而反应人们为人处世的现象\">这说明生活中人们应用注意力的方式足以决定人生的外观与内涵，从而反应人们为人处世的现象。</h3><p>例如，在同一个宴会上，外向的人热衷于与人交际；成就不凡的人寻求有用的商界人脉；偏执狂则随时警惕，怕碰到危险等等。</p><p>每种人都有自己的注意力探照灯，这也是不同人之间的差异。</p><p>实际上工作生活中，我们每个职业都在训练自己的集中注意力的方式，例如，软件工程师会更多关注计算机软件运行过程，销售人员更关注人与人之间的交流与谈判，银行家更专注财务状况，运动员更关注动作协调与身体素质等等等等。</p><p>这种探照灯一样的集中方式正是他们在专业领域中学会了如何抓住领域中易受忽略的讯号。</p><h2 id=\"内在失序与精神熵\">内在失序与精神熵</h2><p>内在失序的意思是，外来资讯跟当下的意图发生冲突，使我们分心，使我们无法为现实意图而努力，造成对意识极为不利的影响。</p><p>作者举了一个例子，胡里欧破轮胎的故事。他的汽车轮胎破了，于是他一大早小心翼翼地把车开到加油站，把轮胎的气打满，又尽快开到工厂。下班时轮胎气又漏光了，他再到工厂附近加油站打满气后再开回家。胡里欧如法炮制了三天，一整天他都在担心，今晚是否能回家以及明天是否能到岗。这使得他无法专心工作，情绪也变得烦躁不安。</p><h3 id=\"每当周围的环境对意识的目标构成威胁就会发生内在的失序现象这称为精神熵\">每当周围的环境对意识的目标构成威胁，就会发生内在的失序现象，这称为精神熵。</h3><h3 id=\"它会导致自我解体使效率大打折扣\">它会导致自我解体，使效率大打折扣。</h3><h3 id=\"这种状况若持续太久对自身造成严重的损害使自我再也不能集中注意力实现任何目标\">这种状况若持续太久，对自身造成严重的损害，使自我再也不能集中注意力实现任何目标。</h3><h2 id=\"井然有序的意识\">井然有序的意识</h2><p>精神熵的反面就是最优体验。</p><h3 id=\"当我们专注于资讯与目标时精神能量就会源源不断涌上来这时我们就没有了忧虑情绪也不再猜疑自己的能力\">当我们专注于资讯与目标时，精神能量就会源源不断涌上来，这时我们就没有了忧虑情绪，也不再猜疑自己的能力。</h3><p>我们不再怀疑自己，也是因为我们得到了明确的鼓励，你做的很好。这种积极的反馈，强化了自我，使我们能投入更多的注意力，照顾内心与外在环境的平衡。</p><p>作者举了一个例子。麦德林的工作是装配线上的工人，每天要重复600次的工作，像这样枯燥的工作，他做了五年，但还是觉得很快乐。因为他对工作的态度跟一名奥运选手差不多，常常思索如何打破纪录。他像外科医生一般一丝不苟的设计工具的安放顺序和每一步动作，经过五年的努力，他最好的成绩是28秒装配完一个单元。</p><p>心流的最优体验出现时，一个人可以投入全部的注意力以求实现目标。没有失序现象需要整顿，自我也没有受到任何威胁，因此不需要分心防卫。</p><h3 id=\"一个人若能充分掌控意识尽可能创造心流体验生活品质势必会提高\">一个人若能充分掌控意识，尽可能创造心流体验，生活品质势必会提高。</h3><p>在心流中，我们是精神能量的主宰，无论做什么事，都能使意识更有秩序。</p><p>一位攀岩专家简要说明了自己的心流感觉：</p><h3 id=\"越来越完美的自我控制产生一种痛快的感觉\">越来越完美的自我控制，产生一种痛快的感觉。</h3><h3 id=\"你不断逼迫身体发挥所有极限直到全身隐隐作痛\">你不断逼迫身体发挥所有极限，直到全身隐隐作痛。</h3><h3 id=\"然后你会满怀敬畏地回顾自己回顾你所做的一切\">然后你会满怀敬畏地回顾自己，回顾你所做的一切。</h3><h3 id=\"那种佩服的感觉简直无法形容\">那种佩服的感觉，简直无法形容。</h3><h3 id=\"它带给你一种狂喜一种自我满足\">它带给你一种狂喜，一种自我满足。</h3><h3 id=\"只要在这种战役中战胜过自己人生其他战场的挑战也就变得容易多了\">只要在这种战役中战胜过自己，人生其他战场的挑战也就变得容易多了。</h3><p>其实战斗中对抗的不是自己，而是使意识失序的精神熵。</p><h3 id=\"体验过心流的人都知道那份深沉的快乐是严格的自律集中注意力换来的\">体验过心流的人都知道，那份深沉的快乐，是严格的自律、集中注意力换来的。</h3><h2 id=\"独特性与复杂性的完美结合\">独特性与复杂性的完美结合</h2><p>复杂性是由两种广泛的心理过程造成的，一种是独特化，另一种是整合。</p><p>1.独特化是把自己与他人区分开来，朝独一无二的方向发展。</p><p>2.整合则恰好相反，是借着超越自我的观念和实体与他人连结。</p><p>独特化和整合，两者都是使不可或缺的。如果独特化而不整合，体系就会出现一片混乱，反之也是一样。</p><h3 id=\"当我们只有独特化的自我时虽然也能获得极高的成就但会陷入以自我为中心的危险\">当我们只有独特化的自我时，虽然也能获得极高的成就，但会陷入以自我为中心的危险。</h3><h3 id=\"同样的如果一个人的自我若是完全建立在整合上固然也能有良好的人际关系和安全感却缺乏独立的个性\">同样的，如果一个人的自我若是完全建立在整合上，固然也能有良好的人际关系和安全感，却缺乏独立的个性。</h3><h3 id=\"只有一个人把精神能量平均投注在这两方面既不过分自私也不盲从才算达到自我所追求的复杂性\">只有一个人把精神能量平均投注在这两方面，既不过分自私，也不盲从，才算达到自我所追求的复杂性。</h3><p>复杂的自我能够成功地融合这两种乍看矛盾的过程。心流体验会使自我变得比过去更复杂，这可以说是一种成长。</p><h3 id=\"我们在克服挑战时必然会使我们变得更有能力和技巧因此心流就是经由这种过程加深自我独特化的当我们每经历一次心流后我们就会变得更独特更难预测并拥有非凡的技能\">我们在克服挑战时，必然会使我们变得更有能力和技巧，因此心流就是经由这种过程加深自我独特化的。当我们每经历一次心流后，我们就会变得更独特，更难预测，并拥有非凡的技能。</h3><p>选定一个目标，投入全部的注意力，不论做什么事情，都会觉得乐趣无穷。</p><h3 id=\"一旦尝到这种快乐我们就会加倍努力重温它的滋味自我就这样开始成长\">一旦尝到这种快乐，我们就会加倍努力，重温它的滋味，自我就这样开始成长。</h3><p>心流之所以重要，不仅是因为他能使现在更快乐，也是因为它会强化我们的自信心。</p><p>虽然心流没有捷径可走，但只要我们了解它的运作方式，就有可能使生活改观。</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484913&amp;idx=1&amp;sn=9589d58b41c85d01d1aaa68872260539&amp;chksm=fc2260f6cb55e9e08222aa5096a65949a05c98edc73eb005e289e11010c68a4816ed35a50035&amp;token=134603822&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2021/09/22/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B044",
            
            
            
            
            
            "date_published": "2021-09-22T00:00:00+08:00",
            "date_modified": "2021-09-22T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/09/17/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B043",
            "title": "读书笔记(四十三) 《游戏引擎架构》#2 容器、内存、RTTI与反射",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了好几遍《游戏引擎架构》后对引擎的架构感触颇深。近段时间对引擎剖析的想法也较多，正好借着书本对游戏引擎架构做一个完整分析。此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节，使得初学者也能很容易地理解其中的各种概念。目标是掌握游戏引擎架构知识，方法是跟随《游戏引擎架构》这本书、结合引擎源码、自己的经验，分析游戏引擎的历史、架构、模块。最后通过实践自主引擎的开发来完成对引擎知识的掌握。游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。虽然参考了《游戏引擎架构》这本书，但由于它的部分知识太陈旧，所以我不得不将这些知识重新深挖后总结自己的观点。概述：本章开始对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：  时间库  自定义容器库  字符串散列库  内存管理框架  RTTI与反射模块  图形计算库  资产管理模块  低阶渲染器  剔除与合批模块  动画模块  物理模块  UI核心框架  性能剖析器的核心部分  脚本系统  视觉效果模块本篇内容为列表中的前五个。正文：由易到难，我们从最简单的说起。时间库时间库最简单使用的也最多，在引擎中的每个模块都会使用到。其时间信息包括：真实时间、游戏时间、全局时间、相对时间，时间缩放因子。其常见问题为各平台的时间获取方式不同，因此基本都会针对每个平台分别实现一个时间获取函数。测量时间在时间库中占重要位置，游戏中循环调用间隔、帧率、以及移动速度都会使用时间测量的单位来进行。通常引擎都会用帧率调控的方法来稳定帧率，例如我们在引擎上设置了30帧/s，那么当本帧耗时小于33ms时，则在主循环结束时让线程在剩下的时间里休眠。反之，如果主循环耗时大于33ms，则等待到下一帧再执行。通过这样调控的方式来稳定帧率。垂直同步是另一种帧率调控方法，由于前置缓冲区和后置缓冲区在交换时会有部分消隐问题导致画面撕裂，因此垂直同步会等待消隐时间，错过了则等待下一次消隐区间，这会让画面更加稳定，但并不保证以某个特定帧率运行而且时常会降低帧率，因此很少有游戏使用这种技术。当使用测量时间时，通常都会以帧的形式更新时间跨度，例如计算每帧之间的时间、计算动画当前帧、移动速度下当前帧的移动距离等。除此之外，最常用的如最大帧率、固定帧率、全局时间缩放等，这些因子在很多引擎模块中也常会用到，例如动画时间、音频时间，粒子生命时间等。自定义容器库我们在使用的各式各样集合型数据结构也被称为容器，它们的任务都是一样的，存储及管理多个数据元素。然而细节上各种容器运行方式会有一些差异，它们各自也有各自的优缺点。它们包括但不仅限于：  数组（Array）  动态数组（Dynamic Array）  链表（Linked List）  堆栈（Stack）  队列（Queue）  双端队列（Double-ended Queue）  优先队列（Priority Queue）  树（Tree）  二叉查找树（Binary Search Tree，BST）  二叉堆（Binary Heap）  字典（Dictionary）  集合（Set）  图（Graph）  有向无环图（Directed Acyclic Graph，DAG）我们在操作容器时，常用的操作有：插入、移除、顺序访问（迭代）、随机访问、查找、排序。这里介绍下第三方标准库的优缺点：  STL，功能丰富、可移植能力强，但内存分配效率差一些，部分容器算法性能较差。  Boost，在STL上更多功能、效率高，发布许可证有些问题。  Loki，功能丰富，复杂度较高，性能未知。许多引擎都会提供常见的自定义容器实现，建立自定义容器类一般都处于如下原因：  完全掌控：控制数据结构的内存需求、使用的算法、内存分配规则。  优化性能：针对某个业务做出适合性的调整，或借助某些硬件功能可以优化数据结构和算法。  可定制性：根据业务需要增加第三方库没有的功能、例如容器性能调试、内存统计、内存快照等。  消除外部依赖：当第三方库出现问题时，需要依赖外部的团队，这可能无法提供及时的服务。自定义容器，能在库出现问题时做到可自行修复。  并发同步：常用第三方容器在线程间并发同步上的操作可能没有你想的那么完美，用自定义容器就能为自己定制更合适的同步机制。Unreal容器一看名字就知道是什么，它们包括：TArray、TArrayView、TBasicArray、FBinaryHeap、TBitArray、TChunkedArray、TCircularBuffer、TCircularQueue、TDiscardableKeyValueCache、TResourceArray、FHashTable、TIndirectArray、TLinkedList、TIntrusiveLinkedList、TDoubleLinkedList、TList、TMapBase、TSortableMapBase、TQueue、FScriptArray、TSet、TSortedMap、TSparseArray、TStaticArray、TStaticBitArray、TTripleBuffer、TUnion等等Unity容器方面基本上与Unreal差不多，Unreal有的Unity也基本有，各自也都有一些特殊用途的容器，只是这些容器代码分散较开，说明容器部分的架构Unity编排的相对混乱一些。字符串散列库字符串在程序中占据了很大的内存，通常有这三个问题，  拷贝多  拼接多  判断相同字符串拷贝多，原因：在函数的形参和返回值上，常常会使用实例的方式去做，这导致字符串拷贝变的频繁。每次字符串拷贝都需要经历，内存分配，内存拷贝，内存销毁这三步骤，可想而知字符串在拷贝上的消耗非常大。拷贝多，解决方案：通常是由于业务代码引起的，因此也只有调整业务代码才能缓解。包括修改函数形参类型和返回值类型。拼接多，原因：每个字符串在拼接完毕后通常都会生成一个临时的新的字符串，这导致拼接的那几个字符串内存被丢弃而浪费。拼接多，解决方案：1.编码规范问题，具体业务具体分析2.用对象池方式重复利用内存判断相同字符串，原因：相同字符串的判断逻辑在代码中占比通常比较大，特别是在业务逻辑中。如果只是单纯的比较两个字符串的每个字符，效率会变得非常低下判断相同字符串，解决方案：使用HashID就能解决这个问题，即把字符串计算成Hash值，用数字比较来代替字符串比较。注意，并不是一定要让字符串做Hash才能增加效率，如果相同字符的判断操作比较少，而Hash计算和加入容器的操作比较多，那么就会得不偿失。Unreal引擎的字符串FString构建：1.用TArray动态数组作为容器2.通过TArray扩容构建和拼接字符串3.TArray使用专门的内存块作为管理，能做到提前分配和释放回池Unreal引擎字符串的FName：1.FName和FString有些不同，FName有HashID，是含有一个uint32整数的结构体，而FString则没有2.FName的字符串存储在FNameEntry实例中3.每个FName都有自己的HashID，用于比较相同的字符串4.FNameEntry是一个Char数组+HashID+Header的实例5.通过FNamePool存储FNameEntry，FNamePool就是一个字典容器，存储着所有的FNameEntry实例6.FName通过HashID从对象池中获得字符串实体FNameEntry7.也可以直接通过HashID比较两个字符串是否相同，从而提高效率Unity与Unreal不同，使用对象池方式重复利用字符串内存，并且没有字符串散列机制（因为引擎内部不需要）。内存管理框架先介绍下操作系统自身的内存管理方式：1.操作系统以进程为单位来运行每个程序。2.同时为每个进程分配了一个独立的虚拟空间。3.每个虚拟空间里有内核空间和用户空间之分。4.内核空间为共享库和内核程序使用的堆栈空间。5.每个虚拟空间都会拆分成多个段来存储各类数据和程序指令6.虚拟内存和物理内存之间使用页表进行映射，因此在虚拟空间中连续的内存在物理空间中不一定连续。7.操作系统会将不使用的内存块交换（Swap）出去成为硬盘空间的一部分，当需要访问时再交换（Swap）回来。下面我画了3个图，用图来解释会更容易理解些：图1图2图3以上三张图完整的体现了操作系统内存的运作方式。1.图1描述了，每个进程都有各自的独立虚拟空间，分为用户空间和内核空间，并且32位和64的空间大小不同。2.图2描述了，一个虚拟空间中有很多个段，其中包括栈段、堆段、代码段、数据段等。3.图3描述了，虚拟内存和物理内存通过页表映射，物理内容与硬盘会有一个Swap机制。写程序时我们比较关心堆内存，那么操作系统是如何管理堆内存的呢？我们来了解下堆内存的分配和释放机制图1：图2：图3：为了快速学习，画了三张图方便大家理解堆内存分配机制：1.图1描述了，堆内存会切割成不同的块2.图2描述了，堆内存分配设计为大堆、小堆和缓冲堆3.图3描述了，堆内存分配流程，先找索引再从缓冲区中找最后切割大块内存一句话概括为，堆内存以分块方式切割设计，并分为大堆、小堆、和缓冲堆，通过索引和缓冲区来加速内存的分配和释放。游戏引擎中通常不依赖操作系统内存分配机制，原因是对于引擎来说操作系统的内存分配效率太差，因此每个引擎都有自建的内存管理框架。自建的内存管理框架通常由一些分配规则构成，这些分配规则通常会写成内存分配器（Allocator）被用于引擎的各个模块中。虽然内存管理框架有很多种，但内存分配的规则都是相似的，每一种内存分配规则我们称为内存分配器（Allocator），下面我们简单列举一下内存分配器的种类及其规则。这里列举了11种（还有更多）内存分配器并分别用一句话概括它们：  线性内存分配器，分配一块大内存，并不断向前分配。  环形内存分配器，支持循环利用的内存分配器。  双端内存分配器，两个模块共享一个线性内存分配，并从两端分别进行分配。  固定大小内存分配器，把一大块内存拆分成固定大小的N个内存块，每次分配一块。  泛化的固定大小内存分配器，拆分成M个大块内存，每个大块内存都有自己固定大小的N个内存块， 且不同块间的小内存块的大小不同。  散列式页内存分配器，按某个固定大小的页拆分内存块，用多叉树索引方式连接内存块，一次分配多页并调整树形索引。  栈型内存分配器，不断向前分配，并按先进后出的原则回收内存。  动态合并内存分配器，从一大块内存块开始分配，分配时不断切割，并在回收时合并相邻的内存块。  大小池内存分配器，有大内存池和小内存池之分，大小内存池的分配策略不同，小内存池通常使用泛型固定大小内存分配规则，大内存池由于分配频率低因此分配方式更自由些，可切割可固定可合并。  批量内存分配器，多次连续分配多个小内存，先临时分配并立即使用，最后提交锁定内存区间。  线程安全的内存分配器，在分配时加入了更多的原子操作或同步锁，让多个同线程可以共享一个内存块。引擎内存管理框架不同种类的引擎中的内存框架其实都是大同小异：1.大都使用内存分配器来搭建内存框架2.多种类型的内存分配器混合使用很常见3.每个模块都有自己的内存分配器4.经常多个模块共享一个内存分配器Unreal引擎的内存分配框架Unreal有个HAL（Hardware Abstraction Layer）存放了大部分内存管理内容。用图来表示为：Unreal的内存管理框架总结：1.Unreal有统一的内存分配和释放接口FMemory2.内存统计，使用的是获取堆栈、回溯堆栈信息的方式3.虽然内存分配器有很多种，但主内存分配器只能选择一种4.容器有自己专属的分配器，它封装了FMemory接口5.UObject等业务逻辑有专属的分配器，它封装了FMemory接口，并在此基础上做了垃圾回收设计。6.引擎各模块大部分使用了FMemory接口来分配和释放内存，少数封装了自己的分配器。7.主内存分配器中FMallocBinned为主内存分配器（1、2、3代），其分配原则为大小内存池。Unity与Unreal稍有不同，它将GC和引擎内存分开管理，并且引擎独立模块有独立内存分配器自己管理。理论上来说这种做法会更好一些，每个模块需要有合适的内存分配算法。RTTI与反射模块RTTI(Run-Time Type Information)运行时类型检查，它提供了运行时确定对象类型的方法。C++内建的RTTI通常很难满足我们的业务需求，特别是在需要做反射的业务上尤其明显，因此引擎通常都需要自建RTTI并增加反射系统。先说C++内建的RTTI。与内建RTTI相关的运算符为：typeid 和 dynamic_cast快速回顾下typeid 和 dynamic_cast两个运算符的原理我在前面的文章中详细介绍过C++内存模型，可以参考下《深度探索C++对象模型》每个有虚继承或虚函数的C++类都会在运行时有一个type_info数据，通过虚表中的指针指向type_info数据。type_info数据结构包含了类名字和父类指针，因此我们可以通过typeid来获得多态类的type_info数据。dynamic_cast就是借助type_info来做的功能，它通过多态的type_info来识别是否可以转换类型。例如：Point2D pt2d = dynamic_cast&lt;Point2D&gt;(pt);可以拆解为：Point2D pt2d = NULL;type_info type_pt2d = typeid(Point2D);type_info type_pt = typeid(Point);if(type_pt2d == type_pt || type_pt.before(&amp;type_pt2d)){        pt2d = (Point2D)pt;}return pt2d;自建RTTI由于内置C++的RTTI时常无法满足业务需求，所以通常人们都会自己去建立自己的RTTI。人们自建RTTI通常是因为：1.有反射需求，例如查找类、调用函数、获取变量、遍历属性等。2.优化性能，包括减少RTTI内存，提高查找type_info效率等。Unreal引擎内部RTTI是默认被禁用的，它通过枚举或整数的方式来定制需要识别的类型。Unity也是一样，在引擎内核中，无法使用内置的RTTI。禁用仅限于引擎实时运行库上，在工具套件和编辑器上仍然被使用。反射模块反射模块是建立在自建RTTI之上的，因为反射需要通过RTTI来获取足够多的类、变量、函数的信息。通常当我们通过RTTI来建立反射框架时，通常需要对type信息结构做些规划。例如在type结构中增加动态数组或字典容器将变量和函数的名字和类型存储起来。示例代码例如：struct RTTR_LOCAL class_data{    class_data(get_derived_info_func func, std::vector&lt;type&gt; nested_types)    :   m_derived_info_func(func),        m_nested_types(nested_types),        m_dtor(create_invalid_item&lt;destructor&gt;())    {}    get_derived_info_func       m_derived_info_func;    std::vector&lt;type&gt;           m_base_types;    std::vector&lt;type&gt;           m_derived_types;    std::vector&lt;rttr_cast_func&gt; m_conversion_list;    std::vector&lt;property&gt;       m_properties;    std::vector&lt;method&gt;         m_methods;    std::vector&lt;constructor&gt;    m_ctors;    std::vector&lt;type&gt;           m_nested_types;    destructor                  m_dtor;};如上代码中我们看到，type实例结构中通常有属性结构实例容器、类型结构实例容器、函数结构实例容器等，目的就是为了存储变量和函数的信息。在实时运行过程中，当我们需要用字符串查找某个函数，或者查找某个变量时，则会从这些容器中去查找。自建RTTI是通过对象信息来构建RTTI信息集合代码的，因此每个需要RTTI类的实例都需要写相应的编码，通常都会用宏和自动化来代替繁琐的实例化RTTI编码。其基本思想是采用宏来代替常规的变量定义，这样我们就可以在宏函数中将定义的变量添加至自建的反射系统。例如：#include &lt;rttr/registration&gt;using namespace rttr;struct MyStruct { MyStruct() {}; void func(double) {}; int data; };RTTR_REGISTRATION{    registration::class_&lt;MyStruct&gt;(\"MyStruct\")         .constructor&lt;&gt;()         .property(\"data\", &amp;MyStruct::data)         .method(\"func\", &amp;MyStruct::func);}Unreal的RTTI和反射用途较多，主要包括蓝图和垃圾回收。与其他所有引擎一样，Unreal生成反射代码的步骤是：1.利用特殊的宏来对变量做标记2.对C++代码文件进行语法分析3.用指定的宏提取出对应的数据4.扫描工具生成RTTI代码5.最后在初始化时运行生成的代码6.启动时将收集到的数据保存UE4定义了一系列的宏，来帮助开发者将自定义的字段和函数添加至反射系统：UCLASS，告诉UE这个类是一个反射类。类必须派生自UObjectUSTRUCT，可以不用派生自UObject。不支持GC，也不能包含函数UPROPERTY，定义一个反射的变量UFUNCTION，定义一个反射的函数UENUM，告诉UE这是一个反射的枚举类。支持enum, enum class, enum namespaceUINTERFACE，定义一个反射接口类，只能包含函数UMETA，反射的一些元数据定义，可以通过标签定义一些该变量的属性UPARAM，定义函数的参数属性。主要就是显示名字和Ref属性UDELEGATE，告诉UE这是一个可反射的delegate例如：// 一定要声明UCLASSUCLASS()class MYGAME_API UMyClass : public UObject{    GENERATED_BODY()    public:        // 定义一个可反射的函数        UFUNCTION(BluprintCallable)        void MyFunc();private:        // 定义一个可反射的变量        UPROPERTY(EditAnywhere, BlueprintReadWrite, meta=(AllowPrivateAccess = \"true\"))        int MyIntValue;}通过声明反射将数据结构、变量和函数添加到反射中。UE4的UHT（Unreal Header Tool）模块扫描之后生成的代码反射两个代码文件：.generated.h文件：重载各种操作符函数，声明各种构造函数。.gen.cpp文件：单例实现，构造UClass（提取信息并注册）Unity与Unreal的稍有不同，一部分为C++调用Mono，另一部分为C#利用反射调用具体的函数。1.C++通过Mono获取C#接口2.反过来C#调用C++则不需要反射。可以通过数组将C++句柄存储起来，用索引获取句柄的方式调用。3.C#使用反射调用C#代码则比较常见，在编辑器与业务逻辑交互之间会比较多。参考资料：《动态链接与装载》https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484788&amp;idx=1&amp;sn=8e4f7f36e4ddf6dd2f7c086463c089de&amp;chksm=fc226073cb55e965e5ab259f04293c48f718a2fd72858b11397852d8ba8c7fab656b0f46e248&amp;token=283688006&amp;lang=zh_CN#rd《深度探索C++对象模型》http://luzexi.com/2020/11/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B014《malloc和free的实现原理解析》https://jacktang816.github.io/post/mallocandfree/《UE4 反射系统详细剖析》https://cloud.tencent.com/developer/article/1606872《UE4内存分配器概述》https://www.cnblogs.com/kekec/p/12012537.html《RTTR C++ Reflection Library》https://github.com/rttrorg/rttr《UE4 MallocBinned2分配器》https://zhuanlan.zhihu.com/p/79715624《FMallocBinned2内存分配器》https://www.cnblogs.com/kekec/p/14675228.html《UE4垃圾回收》https://zhuanlan.zhihu.com/p/67055774《UE4蓝图》https://zhuanlan.zhihu.com/p/67683606已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484906&amp;idx=1&amp;sn=70443040745649b082a93650d180959e&amp;chksm=fc2260edcb55e9fb318468bd6f0ce4b2df2277338c3aeb1d0f31b00e4dcd01c18fba4b75581b&amp;token=2034706848&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>作为游戏开发从业者，从业务到语言到框架到引擎，积累了一些知识和经验，特别是在看了好几遍《游戏引擎架构》后对引擎的架构感触颇深。</p><p>近段时间对引擎剖析的想法也较多，正好借着书本对游戏引擎架构做一个完整分析。此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节，使得初学者也能很容易地理解其中的各种概念。</p><p>目标是掌握游戏引擎架构知识，方法是跟随《游戏引擎架构》这本书、结合引擎源码、自己的经验，分析游戏引擎的历史、架构、模块。最后通过实践自主引擎的开发来完成对引擎知识的掌握。</p><p>游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。</p><p>虽然参考了《游戏引擎架构》这本书，但由于它的部分知识太陈旧，所以我不得不将这些知识重新深挖后总结自己的观点。</p><h1 id=\"概述\">概述：</h1><p>本章开始对引擎中的重要的模块和库进行详细的分析，我挑选了十五个库和模块来分析：</p><ol>  <li>时间库</li>  <li>自定义容器库</li>  <li>字符串散列库</li>  <li>内存管理框架</li>  <li>RTTI与反射模块</li>  <li>图形计算库</li>  <li>资产管理模块</li>  <li>低阶渲染器</li>  <li>剔除与合批模块</li>  <li>动画模块</li>  <li>物理模块</li>  <li>UI核心框架</li>  <li>性能剖析器的核心部分</li>  <li>脚本系统</li>  <li>视觉效果模块</li></ol><p>本篇内容为列表中的前五个。</p><h1 id=\"正文\">正文：</h1><p>由易到难，我们从最简单的说起。</p><h2 id=\"时间库\">时间库</h2><p>时间库最简单使用的也最多，在引擎中的每个模块都会使用到。其时间信息包括：真实时间、游戏时间、全局时间、相对时间，时间缩放因子。其常见问题为各平台的时间获取方式不同，因此基本都会针对每个平台分别实现一个时间获取函数。</p><p>测量时间在时间库中占重要位置，游戏中循环调用间隔、帧率、以及移动速度都会使用时间测量的单位来进行。</p><p>通常引擎都会用帧率调控的方法来稳定帧率，例如我们在引擎上设置了30帧/s，那么当本帧耗时小于33ms时，则在主循环结束时让线程在剩下的时间里休眠。反之，如果主循环耗时大于33ms，则等待到下一帧再执行。通过这样调控的方式来稳定帧率。</p><p>垂直同步是另一种帧率调控方法，由于前置缓冲区和后置缓冲区在交换时会有部分消隐问题导致画面撕裂，因此垂直同步会等待消隐时间，错过了则等待下一次消隐区间，这会让画面更加稳定，但并不保证以某个特定帧率运行而且时常会降低帧率，因此很少有游戏使用这种技术。</p><p>当使用测量时间时，通常都会以帧的形式更新时间跨度，例如计算每帧之间的时间、计算动画当前帧、移动速度下当前帧的移动距离等。除此之外，最常用的如最大帧率、固定帧率、全局时间缩放等，这些因子在很多引擎模块中也常会用到，例如动画时间、音频时间，粒子生命时间等。</p><h2 id=\"自定义容器库\">自定义容器库</h2><p>我们在使用的各式各样集合型数据结构也被称为容器，它们的任务都是一样的，存储及管理多个数据元素。然而细节上各种容器运行方式会有一些差异，它们各自也有各自的优缺点。它们包括但不仅限于：</p><ol>  <li>数组（Array）</li>  <li>动态数组（Dynamic Array）</li>  <li>链表（Linked List）</li>  <li>堆栈（Stack）</li>  <li>队列（Queue）</li>  <li>双端队列（Double-ended Queue）</li>  <li>优先队列（Priority Queue）</li>  <li>树（Tree）</li>  <li>二叉查找树（Binary Search Tree，BST）</li>  <li>二叉堆（Binary Heap）</li>  <li>字典（Dictionary）</li>  <li>集合（Set）</li>  <li>图（Graph）</li>  <li>有向无环图（Directed Acyclic Graph，DAG）</li></ol><p>我们在操作容器时，常用的操作有：插入、移除、顺序访问（迭代）、随机访问、查找、排序。</p><p>这里介绍下第三方标准库的优缺点：</p><ul>  <li>STL，功能丰富、可移植能力强，但内存分配效率差一些，部分容器算法性能较差。</li>  <li>Boost，在STL上更多功能、效率高，发布许可证有些问题。</li>  <li>Loki，功能丰富，复杂度较高，性能未知。</li></ul><p>许多引擎都会提供常见的自定义容器实现，建立自定义容器类一般都处于如下原因：</p><ol>  <li>完全掌控：控制数据结构的内存需求、使用的算法、内存分配规则。</li>  <li>优化性能：针对某个业务做出适合性的调整，或借助某些硬件功能可以优化数据结构和算法。</li>  <li>可定制性：根据业务需要增加第三方库没有的功能、例如容器性能调试、内存统计、内存快照等。</li>  <li>消除外部依赖：当第三方库出现问题时，需要依赖外部的团队，这可能无法提供及时的服务。自定义容器，能在库出现问题时做到可自行修复。</li>  <li>并发同步：常用第三方容器在线程间并发同步上的操作可能没有你想的那么完美，用自定义容器就能为自己定制更合适的同步机制。</li></ol><p>Unreal容器一看名字就知道是什么，它们包括：TArray、TArrayView、TBasicArray、FBinaryHeap、TBitArray、TChunkedArray、TCircularBuffer、TCircularQueue、TDiscardableKeyValueCache、TResourceArray、FHashTable、TIndirectArray、TLinkedList、TIntrusiveLinkedList、TDoubleLinkedList、TList、TMapBase、TSortableMapBase、TQueue、FScriptArray、TSet、TSortedMap、TSparseArray、TStaticArray、TStaticBitArray、TTripleBuffer、TUnion等等</p><p>Unity容器方面基本上与Unreal差不多，Unreal有的Unity也基本有，各自也都有一些特殊用途的容器，只是这些容器代码分散较开，说明容器部分的架构Unity编排的相对混乱一些。</p><h2 id=\"字符串散列库\">字符串散列库</h2><p>字符串在程序中占据了很大的内存，通常有这三个问题，</p><ol>  <li>拷贝多</li>  <li>拼接多</li>  <li>判断相同字符串</li></ol><h3 id=\"拷贝多原因\">拷贝多，原因：</h3><p>在函数的形参和返回值上，常常会使用实例的方式去做，这导致字符串拷贝变的频繁。每次字符串拷贝都需要经历，内存分配，内存拷贝，内存销毁这三步骤，可想而知字符串在拷贝上的消耗非常大。</p><h3 id=\"拷贝多解决方案\">拷贝多，解决方案：</h3><p>通常是由于业务代码引起的，因此也只有调整业务代码才能缓解。包括修改函数形参类型和返回值类型。</p><h3 id=\"拼接多原因\">拼接多，原因：</h3><p>每个字符串在拼接完毕后通常都会生成一个临时的新的字符串，这导致拼接的那几个字符串内存被丢弃而浪费。</p><h3 id=\"拼接多解决方案\">拼接多，解决方案：</h3><p>1.编码规范问题，具体业务具体分析2.用对象池方式重复利用内存</p><h3 id=\"判断相同字符串原因\">判断相同字符串，原因：</h3><p>相同字符串的判断逻辑在代码中占比通常比较大，特别是在业务逻辑中。如果只是单纯的比较两个字符串的每个字符，效率会变得非常低下</p><h3 id=\"判断相同字符串解决方案\">判断相同字符串，解决方案：</h3><p>使用HashID就能解决这个问题，即把字符串计算成Hash值，用数字比较来代替字符串比较。</p><p>注意，并不是一定要让字符串做Hash才能增加效率，如果相同字符的判断操作比较少，而Hash计算和加入容器的操作比较多，那么就会得不偿失。</p><h4 id=\"unreal引擎的字符串fstring构建\">Unreal引擎的字符串FString构建：</h4><p>1.用TArray<TCHAR>动态数组作为容器2.通过TArray<TCHAR>扩容构建和拼接字符串3.TArray<TCHAR>使用专门的内存块作为管理，能做到提前分配和释放回池</TCHAR></TCHAR></TCHAR></p><h3 id=\"unreal引擎字符串的fname\">Unreal引擎字符串的FName：</h3><p>1.FName和FString有些不同，FName有HashID，是含有一个uint32整数的结构体，而FString则没有2.FName的字符串存储在FNameEntry实例中3.每个FName都有自己的HashID，用于比较相同的字符串4.FNameEntry是一个Char数组+HashID+Header的实例5.通过FNamePool存储FNameEntry，FNamePool就是一个字典容器，存储着所有的FNameEntry实例6.FName通过HashID从对象池中获得字符串实体FNameEntry7.也可以直接通过HashID比较两个字符串是否相同，从而提高效率</p><h3 id=\"unity与unreal不同使用对象池方式重复利用字符串内存并且没有字符串散列机制因为引擎内部不需要\">Unity与Unreal不同，使用对象池方式重复利用字符串内存，并且没有字符串散列机制（因为引擎内部不需要）。</h3><h2 id=\"内存管理框架\">内存管理框架</h2><p>先介绍下操作系统自身的内存管理方式：</p><p>1.操作系统以进程为单位来运行每个程序。2.同时为每个进程分配了一个独立的虚拟空间。3.每个虚拟空间里有内核空间和用户空间之分。4.内核空间为共享库和内核程序使用的堆栈空间。5.每个虚拟空间都会拆分成多个段来存储各类数据和程序指令6.虚拟内存和物理内存之间使用页表进行映射，因此在虚拟空间中连续的内存在物理空间中不一定连续。7.操作系统会将不使用的内存块交换（Swap）出去成为硬盘空间的一部分，当需要访问时再交换（Swap）回来。</p><p>下面我画了3个图，用图来解释会更容易理解些：</p><p>图1</p><p>图2</p><p>图3</p><p>以上三张图完整的体现了操作系统内存的运作方式。</p><p>1.图1描述了，每个进程都有各自的独立虚拟空间，分为用户空间和内核空间，并且32位和64的空间大小不同。2.图2描述了，一个虚拟空间中有很多个段，其中包括栈段、堆段、代码段、数据段等。3.图3描述了，虚拟内存和物理内存通过页表映射，物理内容与硬盘会有一个Swap机制。</p><p>写程序时我们比较关心堆内存，那么操作系统是如何管理堆内存的呢？</p><p>我们来了解下堆内存的分配和释放机制</p><p>图1：</p><p>图2：</p><p>图3：</p><p>为了快速学习，画了三张图方便大家理解堆内存分配机制：1.图1描述了，堆内存会切割成不同的块2.图2描述了，堆内存分配设计为大堆、小堆和缓冲堆3.图3描述了，堆内存分配流程，先找索引再从缓冲区中找最后切割大块内存</p><p>一句话概括为，堆内存以分块方式切割设计，并分为大堆、小堆、和缓冲堆，通过索引和缓冲区来加速内存的分配和释放。</p><h3 id=\"游戏引擎中通常不依赖操作系统内存分配机制原因是对于引擎来说操作系统的内存分配效率太差因此每个引擎都有自建的内存管理框架\">游戏引擎中通常不依赖操作系统内存分配机制，原因是对于引擎来说操作系统的内存分配效率太差，因此每个引擎都有自建的内存管理框架。</h3><p>自建的内存管理框架通常由一些分配规则构成，这些分配规则通常会写成内存分配器（Allocator）被用于引擎的各个模块中。</p><p>虽然内存管理框架有很多种，但内存分配的规则都是相似的，每一种内存分配规则我们称为内存分配器（Allocator），下面我们简单列举一下内存分配器的种类及其规则。</p><p>这里列举了11种（还有更多）内存分配器并分别用一句话概括它们：</p><ol>  <li>线性内存分配器，分配一块大内存，并不断向前分配。</li>  <li>环形内存分配器，支持循环利用的内存分配器。</li>  <li>双端内存分配器，两个模块共享一个线性内存分配，并从两端分别进行分配。</li>  <li>固定大小内存分配器，把一大块内存拆分成固定大小的N个内存块，每次分配一块。</li>  <li>泛化的固定大小内存分配器，拆分成M个大块内存，每个大块内存都有自己固定大小的N个内存块， 且不同块间的小内存块的大小不同。</li>  <li>散列式页内存分配器，按某个固定大小的页拆分内存块，用多叉树索引方式连接内存块，一次分配多页并调整树形索引。</li>  <li>栈型内存分配器，不断向前分配，并按先进后出的原则回收内存。</li>  <li>动态合并内存分配器，从一大块内存块开始分配，分配时不断切割，并在回收时合并相邻的内存块。</li>  <li>大小池内存分配器，有大内存池和小内存池之分，大小内存池的分配策略不同，小内存池通常使用泛型固定大小内存分配规则，大内存池由于分配频率低因此分配方式更自由些，可切割可固定可合并。</li>  <li>批量内存分配器，多次连续分配多个小内存，先临时分配并立即使用，最后提交锁定内存区间。</li>  <li>线程安全的内存分配器，在分配时加入了更多的原子操作或同步锁，让多个同线程可以共享一个内存块。</li></ol><h2 id=\"引擎内存管理框架\">引擎内存管理框架</h2><p>不同种类的引擎中的内存框架其实都是大同小异：</p><p>1.大都使用内存分配器来搭建内存框架2.多种类型的内存分配器混合使用很常见3.每个模块都有自己的内存分配器4.经常多个模块共享一个内存分配器</p><h2 id=\"unreal引擎的内存分配框架\">Unreal引擎的内存分配框架</h2><p>Unreal有个HAL（Hardware Abstraction Layer）存放了大部分内存管理内容。</p><p>用图来表示为：</p><p>Unreal的内存管理框架总结：</p><p>1.Unreal有统一的内存分配和释放接口FMemory2.内存统计，使用的是获取堆栈、回溯堆栈信息的方式3.虽然内存分配器有很多种，但主内存分配器只能选择一种4.容器有自己专属的分配器，它封装了FMemory接口5.UObject等业务逻辑有专属的分配器，它封装了FMemory接口，并在此基础上做了垃圾回收设计。6.引擎各模块大部分使用了FMemory接口来分配和释放内存，少数封装了自己的分配器。7.主内存分配器中FMallocBinned为主内存分配器（1、2、3代），其分配原则为大小内存池。</p><p>Unity与Unreal稍有不同，它将GC和引擎内存分开管理，并且引擎独立模块有独立内存分配器自己管理。理论上来说这种做法会更好一些，每个模块需要有合适的内存分配算法。</p><h2 id=\"rtti与反射模块\">RTTI与反射模块</h2><p>RTTI(Run-Time Type Information)运行时类型检查，它提供了运行时确定对象类型的方法。</p><p>C++内建的RTTI通常很难满足我们的业务需求，特别是在需要做反射的业务上尤其明显，因此引擎通常都需要自建RTTI并增加反射系统。</p><p>先说C++内建的RTTI。与内建RTTI相关的运算符为：typeid 和 dynamic_cast</p><p>快速回顾下typeid 和 dynamic_cast两个运算符的原理</p><p>我在前面的文章中详细介绍过C++内存模型，可以参考下</p><p><a href=\"http://luzexi.com/2020/11/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B014\">《深度探索C++对象模型》</a></p><p>每个有虚继承或虚函数的C++类都会在运行时有一个type_info数据，通过虚表中的指针指向type_info数据。</p><p>type_info数据结构包含了类名字和父类指针，因此我们可以通过typeid来获得多态类的type_info数据。</p><p>dynamic_cast就是借助type_info来做的功能，它通过多态的type_info来识别是否可以转换类型。</p><p>例如：</p><pre><code>Point2D pt2d = dynamic_cast&lt;Point2D&gt;(pt);可以拆解为：Point2D pt2d = NULL;type_info type_pt2d = typeid(Point2D);type_info type_pt = typeid(Point);if(type_pt2d == type_pt || type_pt.before(&amp;type_pt2d)){        pt2d = (Point2D)pt;}return pt2d;</code></pre><h2 id=\"自建rtti\">自建RTTI</h2><p>由于内置C++的RTTI时常无法满足业务需求，所以通常人们都会自己去建立自己的RTTI。</p><p>人们自建RTTI通常是因为：</p><p>1.有反射需求，例如查找类、调用函数、获取变量、遍历属性等。2.优化性能，包括减少RTTI内存，提高查找type_info效率等。</p><p>Unreal引擎内部RTTI是默认被禁用的，它通过枚举或整数的方式来定制需要识别的类型。Unity也是一样，在引擎内核中，无法使用内置的RTTI。</p><p>禁用仅限于引擎实时运行库上，在工具套件和编辑器上仍然被使用。</p><h2 id=\"反射模块\">反射模块</h2><p>反射模块是建立在自建RTTI之上的，因为反射需要通过RTTI来获取足够多的类、变量、函数的信息。</p><p>通常当我们通过RTTI来建立反射框架时，通常需要对type信息结构做些规划。例如在type结构中增加动态数组或字典容器将变量和函数的名字和类型存储起来。</p><p>示例代码例如：</p><pre><code>struct RTTR_LOCAL class_data{    class_data(get_derived_info_func func, std::vector&lt;type&gt; nested_types)    :   m_derived_info_func(func),        m_nested_types(nested_types),        m_dtor(create_invalid_item&lt;destructor&gt;())    {}    get_derived_info_func       m_derived_info_func;    std::vector&lt;type&gt;           m_base_types;    std::vector&lt;type&gt;           m_derived_types;    std::vector&lt;rttr_cast_func&gt; m_conversion_list;    std::vector&lt;property&gt;       m_properties;    std::vector&lt;method&gt;         m_methods;    std::vector&lt;constructor&gt;    m_ctors;    std::vector&lt;type&gt;           m_nested_types;    destructor                  m_dtor;};</code></pre><p>如上代码中我们看到，type实例结构中通常有属性结构实例容器、类型结构实例容器、函数结构实例容器等，目的就是为了存储变量和函数的信息。在实时运行过程中，当我们需要用字符串查找某个函数，或者查找某个变量时，则会从这些容器中去查找。</p><p>自建RTTI是通过对象信息来构建RTTI信息集合代码的，因此每个需要RTTI类的实例都需要写相应的编码，通常都会用宏和自动化来代替繁琐的实例化RTTI编码。</p><p>其基本思想是采用宏来代替常规的变量定义，这样我们就可以在宏函数中将定义的变量添加至自建的反射系统。</p><p>例如：</p><pre><code>#include &lt;rttr/registration&gt;using namespace rttr;struct MyStruct { MyStruct() {}; void func(double) {}; int data; };RTTR_REGISTRATION{    registration::class_&lt;MyStruct&gt;(\"MyStruct\")         .constructor&lt;&gt;()         .property(\"data\", &amp;MyStruct::data)         .method(\"func\", &amp;MyStruct::func);}</code></pre><h3 id=\"unreal的rtti和反射用途较多主要包括蓝图和垃圾回收\">Unreal的RTTI和反射用途较多，主要包括蓝图和垃圾回收。</h3><p>与其他所有引擎一样，Unreal生成反射代码的步骤是：</p><p>1.利用特殊的宏来对变量做标记2.对C++代码文件进行语法分析3.用指定的宏提取出对应的数据4.扫描工具生成RTTI代码5.最后在初始化时运行生成的代码6.启动时将收集到的数据保存</p><p>UE4定义了一系列的宏，来帮助开发者将自定义的字段和函数添加至反射系统：</p><pre><code>UCLASS，告诉UE这个类是一个反射类。类必须派生自UObjectUSTRUCT，可以不用派生自UObject。不支持GC，也不能包含函数UPROPERTY，定义一个反射的变量UFUNCTION，定义一个反射的函数UENUM，告诉UE这是一个反射的枚举类。支持enum, enum class, enum namespaceUINTERFACE，定义一个反射接口类，只能包含函数UMETA，反射的一些元数据定义，可以通过标签定义一些该变量的属性UPARAM，定义函数的参数属性。主要就是显示名字和Ref属性UDELEGATE，告诉UE这是一个可反射的delegate</code></pre><p>例如：</p><pre><code>// 一定要声明UCLASSUCLASS()class MYGAME_API UMyClass : public UObject{    GENERATED_BODY()    public:        // 定义一个可反射的函数        UFUNCTION(BluprintCallable)        void MyFunc();private:        // 定义一个可反射的变量        UPROPERTY(EditAnywhere, BlueprintReadWrite, meta=(AllowPrivateAccess = \"true\"))        int MyIntValue;}</code></pre><p>通过声明反射将数据结构、变量和函数添加到反射中。</p><p>UE4的UHT（Unreal Header Tool）模块扫描之后生成的代码反射两个代码文件：</p><p>.generated.h文件：重载各种操作符函数，声明各种构造函数。.gen.cpp文件：单例实现，构造UClass（提取信息并注册）</p><p>Unity与Unreal的稍有不同，一部分为C++调用Mono，另一部分为C#利用反射调用具体的函数。</p><p>1.C++通过Mono获取C#接口2.反过来C#调用C++则不需要反射。可以通过数组将C++句柄存储起来，用索引获取句柄的方式调用。3.C#使用反射调用C#代码则比较常见，在编辑器与业务逻辑交互之间会比较多。</p><h3 id=\"参考资料\">参考资料：</h3><p>《动态链接与装载》</p><p>https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484788&amp;idx=1&amp;sn=8e4f7f36e4ddf6dd2f7c086463c089de&amp;chksm=fc226073cb55e965e5ab259f04293c48f718a2fd72858b11397852d8ba8c7fab656b0f46e248&amp;token=283688006&amp;lang=zh_CN#rd</p><p>《深度探索C++对象模型》</p><p>http://luzexi.com/2020/11/20/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B014</p><p>《malloc和free的实现原理解析》</p><p>https://jacktang816.github.io/post/mallocandfree/</p><p>《UE4 反射系统详细剖析》</p><p>https://cloud.tencent.com/developer/article/1606872</p><p>《UE4内存分配器概述》</p><p>https://www.cnblogs.com/kekec/p/12012537.html</p><p>《RTTR C++ Reflection Library》</p><p>https://github.com/rttrorg/rttr</p><p>《UE4 MallocBinned2分配器》</p><p>https://zhuanlan.zhihu.com/p/79715624</p><p>《FMallocBinned2内存分配器》</p><p>https://www.cnblogs.com/kekec/p/14675228.html</p><p>《UE4垃圾回收》</p><p>https://zhuanlan.zhihu.com/p/67055774</p><p>《UE4蓝图》</p><p>https://zhuanlan.zhihu.com/p/67683606</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484906&amp;idx=1&amp;sn=70443040745649b082a93650d180959e&amp;chksm=fc2260edcb55e9fb318468bd6f0ce4b2df2277338c3aeb1d0f31b00e4dcd01c18fba4b75581b&amp;token=2034706848&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2021/09/17/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B043",
            
            
            
            "tags": ["读书笔记","前端技术"],
            
            "date_published": "2021-09-17T00:00:00+08:00",
            "date_modified": "2021-09-17T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/09/13/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A116",
            "title": "给女儿的信(十六) 如何练习表达",
            "summary": "女儿 教育 亲情",
            "content_text": "Hi Sharon Hi Anne，爸爸好想你们哟。爸爸给你们讲讲爸爸最近的状况好不好。爸爸最近在练习表达，爸爸最近觉得表达能力很重要，过去几年爸爸对这方面没有重视。现在才明白过来，表达是生活的第一要素，所以爸爸想更多的学习表达，并且在平时的时候运用表达。爸爸给自己设定了一个习惯，每天早上起来，做一次表达训练。怎么做表达训练呢，爸爸跟你说说。爸爸先做一个自我介绍，爸爸对着镜子介绍自己，大家好，我是陆泽西，大家可以叫我西西，很高兴见到大家。然后介绍我的爱好，我来自哪里，我喜欢看什么书。介绍完自己后，爸爸会自己跟自己说说自己昨天做了什么，今天打算做什么，最后要感恩谁。就这样，每天早起早起跟自己练习一遍，最近爸爸的表达能力提高不少呢。爸爸希望Sharon和Anne在平时的生活中能够流畅、清晰、舒服的表达出自己想要说的内容。跟爸爸一起加油好吗。加油Sharon、加油Anne，爸爸爱你们。",
            "content_html": "<p>Hi Sharon Hi Anne，爸爸好想你们哟。</p><p>爸爸给你们讲讲爸爸最近的状况好不好。</p><p>爸爸最近在练习表达，爸爸最近觉得表达能力很重要，过去几年爸爸对这方面没有重视。</p><p>现在才明白过来，表达是生活的第一要素，所以爸爸想更多的学习表达，并且在平时的时候运用表达。</p><p>爸爸给自己设定了一个习惯，每天早上起来，做一次表达训练。</p><p>怎么做表达训练呢，爸爸跟你说说。</p><p>爸爸先做一个自我介绍，爸爸对着镜子介绍自己，</p><p>大家好，我是陆泽西，大家可以叫我西西，很高兴见到大家。</p><p>然后介绍我的爱好，我来自哪里，我喜欢看什么书。</p><p>介绍完自己后，爸爸会自己跟自己说说自己昨天做了什么，今天打算做什么，最后要感恩谁。</p><p>就这样，每天早起早起跟自己练习一遍，最近爸爸的表达能力提高不少呢。</p><p>爸爸希望Sharon和Anne在平时的生活中能够流畅、清晰、舒服的表达出自己想要说的内容。</p><p>跟爸爸一起加油好吗。加油Sharon、加油Anne，爸爸爱你们。</p>",
            "url": "http://www.luzexi.com/2021/09/13/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A116",
            
            
            
            
            
            "date_published": "2021-09-13T00:00:00+08:00",
            "date_modified": "2021-09-13T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/08/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B042",
            "title": "读书笔记(四十二) 《游戏引擎架构》#1 历史、现状、架构、团队",
            "summary": "读书 书 看书 读后感",
            "content_text": "已发布在微信公众号上，点击跳转背景：作为游戏开发从业者，从业务到算法到语言到框架到引擎，积累了一些知识和经验，特别是在看了好几遍《游戏引擎架构》后对引擎的架构感触颇深。近段时间对引擎剖析的想法也较多，正好借着书本对游戏引擎架构做一个完整分析。此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节，使得初学者也能很容易地理解其中的各种概念。目标是掌握游戏引擎架构知识，方法是跟随《游戏引擎架构》这本书、结合引擎源码、自己的经验，分析游戏引擎的历史、架构、模块。最后通过实践自主引擎的开发来完成对引擎知识的掌握。游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。概述：文章分为五个部分：  游戏引擎历史  现代引擎概览  计算机图形技术发展史  游戏制作团队  运行时引擎架构概述正文：此篇分四个主题来概述一下游戏引擎的基础知识，我会分别从历史、现状、架构、团队，这四个方面来阐述。游戏引擎历史有些同学会问，为什么要讲历史？为什么要讲现状？那是因为了解历史和现状能帮助我们更好的理解引擎的每个部分。实际上，每每当你回顾历史，就会发现它是由很多巧合构成的，当知道它的来龙去脉时，我们也就能更好的理解“今天为什么它成为这个样子”。我认为游戏引擎这个词语用的非常好，它很好的概括它在游戏开发中的地位。我们说所有的程序都可以用工具两个字来描述，那么游戏引擎到底带给了我们什么，才让它成为今天人们普遍关注的焦点呢。十几年前的游戏都很简单，容量大小都是以兆计的，通常一款游戏的开发周期在8到10个月左右，最主要的是每款游戏开发都需要重头编写代码，期间存在着大量的重复劳动，耗时耗力。慢慢地开发人员总结出些规律，某些游戏逻辑总是有些相似的代码，可以做成模块重复使用，这样就可以大大减少游戏开发周期和开发费用。一开始，只是做些低耦合的通用方法，然后逐渐形成了模块，接着演变成了复合型框架，最后形成了大型软件工程，即现在的游戏引擎。Id Tech 引擎发展史说到引擎发展史不得不说ID software这家游戏公司，很早就开始开发起游戏，从一个小游戏到游戏移植再到《Wolfenstein 3D》，游戏技术让这家公司从无到有，不断创造出一个又一个技术巅峰。最后《Wolfenstein 3D》成了游戏引擎的始祖，它不但开创了3D 射击游戏世界，而且程序也被其他游戏所使用。对ID公司来说《Wolfenstein 3D》只是小试身手，DOOM（毁灭战士）游戏引擎才是引擎技术的代表，DOOM使用的引擎正是Id Tech 1。在DOOM发布后，获得了350万的销量，为ID公司带来了滚滚财源。更重要的是DOOM成了ID公司第一款用于商业授权的引擎，这为ID公司增加了一条创收之路，即商业引擎之路从此开始。引擎从Id Tech 1到Id Tech 5，每一代升级都是质的飞越。游戏Id Tech引擎也制作出了很多优秀的游戏，包括《Quake》、《半条命》、《反恐精英》等。Unreal 引擎发展史EPIC公司在1998年发布了Unreal引擎，同时《虚幻》这款FPS游戏也发布出来，画面精致绚丽得到大众的认可。不仅如此，重要的是Unreal引擎得益于画面精美和DX规范的通用性，很快就得到了许多游戏公司的支持。而且，由于Unreal引擎的通用性，除了游戏，它还广泛使用在3D建模、建筑设计、动作捕捉、电影特效等等领域。Unreal引擎一战成名后，便开启了升级之路，引擎从Unreal 1到 Unreal 5，凭借着优秀的画质表现、适中的显卡要求、强大的自定义工具和一站式配套开发使得Unreal具备了各个平台各种游戏的适应性，因此越来越多的游戏采用Unreal引擎。目前已成为全球最流行的游戏引擎之一。Unity 引擎发展史Unity在2005年6月时发布了1.0版本的引擎。最初，是在2005年苹果公司的全球开发者大会上对外公布并开放使用，当时只是一款面向Mac OS X平台的游戏引擎。由于其引擎的易用性，受到广大开发者的喜爱，之后Unity公司便开启了快速升级之路，用了10年时间从1.0一路升级到5.0。鉴于引擎的更新速度逐渐加快，Unity官方决定不再在其版本号中标注纯数字，而改用年份与版本号的复合形式，如Unity 2018.2，发布时间为2018年7月10日。截止目前使用Unity引擎开发出了的手机游戏，无论是在数量上还是在流行度上，都是所有引擎中最多也是最受欢迎的。随着显卡性能越来越强，游戏的画质越来越高，游戏开发周期也越来越长，通常都会达到3到5年，自行开发游戏引擎的话时间还会更长，所以大多数游戏公司还是选择购买现成的游戏引擎，简化游戏的开发过程。现代引擎概览雷神之锤引擎，与游戏业务密切融合，它的第一款游戏是《德军总部》，后相继开发了《毁灭战士》、《雷神之锤》等游戏。Source引擎中的技术也能追溯到雷神之锤的技术。原始雷神之锤引擎的架构相当优秀并且整洁。这些代码都是非常好的例子，能说明工业级游戏引擎是怎样炼成的。虚幻引擎，从《虚幻》游戏开始进化，进化到虚幻4代引擎时，号称是业界最好的工具和最丰富的引擎功能。它有方便且强大的着色器制作工具，还提供一个方便快捷的图形用户界面编辑器，虚幻引擎以其全面的功能及内聚易用的工具著称。但虚幻引擎并非完美，大部分开发者都需要用不同方式优化它，才能在具体的目标硬件上运行。可贵的是虚幻引擎拥有极为强大的原型制作工具和商业游戏平台，可用来制作几乎任何3D游戏。Source引擎，《半条命2》起家的游戏引擎，其图形能力和工具套件可与虚幻引擎4娉美。寒霜引擎，是从《战地：叛逆连队》开发开始的，之后成为艺电应用最广泛的引擎。寒霜引擎拥有强大的统一资产创作工具FrostEd，以及强大的Backend Services工具管道。CryEngine，原本是为NVIDIA开发的技术演示程序。确立这个技术具有潜力后，就把演示程序改为了完整的游戏《孤岛惊魂》，最后演化成了游戏引擎。经过多年迭代，CryEngine3已经是一个强大的资产创作工具，具有丰富的功能并拥有高品质的图形渲染引擎。索尼的PhyreEngine，专为支持索尼的PS2，PS3，PS4等平台提供技术服务。PhyreEngine3.5让开发者能使用PS3 Cell架构的高度并行能力、PS4的高级演算能力，以及包括其他世界编辑器和开发工具。微软的XNA Game Studio，XNA基于微软的C#语言并使用Visual Studio管理游戏项目资产。Unity，支持广泛的平台，它的主要设计目标是容易开发及跨平台游戏开发。因此它提供了容易使用的整合编辑环境，我们可以在此环境中创建及处理游戏世界中的资产及实体，并能快速地在编辑器中浏览游戏运行的样子，同时也提供了直接在目标硬件上运行的功能。不仅如此它还提供了全面的资产调节管道，可以为每个平台独立调节性能与品质以达到两者的平衡。计算机图形技术发展史我把计算机图形技术发展史分为了四个部分，它们分别是，硬件发展史、图形API发展史、图形软件发展史、以及图形技术发展史。图形硬件发展史图形硬件，最初由SGI公司（Silicon Graphics Inc）开发的IRIS（综合光栅成像系统）受到市场热捧，它使用2MB内存的8 MHz M68000处理器，定制1024x1024帧缓冲器和几何引擎。其最初的市场定位为3D图形显示终端。随着市场策略的推进，SGI公司在电影、电视等领域的发展迅速并且它们的产品受到欢迎。接着是Sun微系统公司，它于1982年由安迪·贝托尔斯海姆与其他同门研究生在斯坦福大学成立。贝托尔斯海姆最初将SUN计算机设计为斯坦福大学网络（因此缩写为“SUN”）的个人CAD工作站。它是围绕Motorola 68000处理器设计的，具有Unix操作系统和虚拟内存，并且与SGI一样，具有嵌入式帧缓冲区。后来的发展包括计算机服务器和基于RISC处理器架构和一系列软件产品（如Solaris操作系统和Java平台）构建的工作站。GPU英文全称Graphic Processing Unit，20世纪70年代末GPU概念被提出，它的优点是具有高并行结构，所以GPU在处理图形数据和复杂算法方面由比CPU更高的效率。CPU大部分面积为控制器和寄存器，与之相比，GPU拥有更多的ALU（Arithmetic Logic Unit,逻辑运算单元）用于数据处理，这样的结构适合对密集型数据进行并行处理。GPU采用流式并行计算模式，可对每个数据进行独立的并行计算，所谓“对数据进行独立计算”即：流内任意元素的计算不依赖于其他同类型数据，例如，计算一个顶点的世界位置坐标，不依赖于其他顶点的位置，所谓“并行计算”是指“多个数据可以同时被使用，多个数据并行运算的时间和1个数据单独执行的时间是一样的”。所以，在顶点处理程序中，可以同时处理N个顶点数据。目前，线性代数，物理仿真和光线跟踪算法都已经成功的一直到GPU上。第一代GPU，NVIDIA于1998年宣布Modern GPU研发成功，这标志着第一代Mondern GPU的诞生，第一代GPU包括NVIDIA TNT2,ATI的Rage和3Dfx的Voodoo。这些GPU可以独立CPU进行像素缓存区的更新，并可以光栅化三角面片以及进行纹理操作，但是缺乏三维顶点的空间坐标变换能力，这意味着“必须依赖与CPU执行顶点坐标变换的计算”。这一时期的GPU功能非常有限，只能用于纹理组合的数学计算或者像素颜色值得计算。第二代GPU，NVIDIA于1999年推出一款显示核心代号NV10的geforce 256，率先将硬体T&amp;L整合到显示核中。T&amp;L原先由CPU负责，或者由另一个独立处理机处理。这次整合T&amp;L是一大进步，原因是显视核心从CPU接管了大量工作。硬件T&amp;L引擎带来的效果是3D 模型可以用更多的多边形来描绘，这样就拥有了更加细腻的效果。而对光照来说，CPU不必在计算大量的光照数据，直接通过显卡就能获得更好的效能。同时，这一阶段的GPU对于纹理的操作也扩展到了立方体纹理（Cube Map）。NVIDIA的GeForce MAX,ATI的Radeon 7500等都是在这一阶段研发的。第三代GPU，2001年是第三代Modern GPU的发展时期，这一时期研发的GPU提供Vertex Programmability (顶点编程能力)，如GeForce 3，GeForce 4Ti，ATI 的8500等。这些GPU允许应用程序指定一个序列的指令进行顶点操作控制，这是一个具有开创意义的时期，这一时期确立的GPU编程思想一直延续到今天，不但深入到工程领域帮助改善人类日常生活（医疗、地质勘探、游戏、电影），而且开创或延伸了计算机科学的诸多研究领域（人体绘制、光照模拟、人群动画、通用计算等）。同时Direct8和OpenGL都本着与时俱进的精神，提供了支持Vertex Programmability的发展。不过，这一时期的GPU还不支持像素级的编程能力，即Fragment Programmability(片段编程能力)。第四代GPU，发展时期从2002年末到2003年。NVIDIA的GeForceFX和ATI Radeon 9700同时在市场的舞台上闪亮登场，这两种GPU都支持顶点编程和片段编程。同时DriectX和OpenGL也扩展了自身的API，用以支持顶点编程和片段编程。自2003年起，可编程图形处理器正式诞生，并且由于DirectX和OpenGL契而不舍的追赶潮流，导致基于图形硬件的编程技术，简称GPU编程，也宣告诞生。图形API发展史在 1980 年代，开发可与各种图形硬件配合使用的软件是一项真正的挑战。软件开发人员为每个硬件编写自定义接口和驱动程序。这个代价是昂贵的，将导致工作量成倍增加。到 1990 年代初，Silicon Graphics (SGI) 是工作站 3D 图形领域的领导者。他们的 IRIS GL API成为行业标准，比基于开放标准的 PHIGS 使用更广泛。OpenGL、DirectX、Vulkan、Metal等都属于图形API，它的本质是封装好的显卡接口，用来将应用程序与显卡驱动联系起来。有了图形API我们可以仅仅调用它的函数来更改渲染状态、缓存顶点数据、开始绘制等等，而如果没有它，我们就需要直接调用显卡驱动的接口来进行渲染，这会涉及到非常多的硬件接口，例如对寄存器的操作，相当繁琐。一般来说我们都不会希望在渲染的同时还要去关注对硬件的控制。目前比较常用的图形API：  OpenGL  OpenGL ES  OpenCV  DirectX  Metal  VunkanOpenGL（Open Graphics Library），是一个跨平台、跨语言的编程图形框架，主要用于windows、mac等PC端。它将计算机资源抽象成一个个OpenGL对象，对这些资源的操作抽象为一个个OpenGL指令。OpenGL ES（OpenGL for Embedded Systems），OpenGL三维图像API的子集，主要是针对嵌入式设备的图形处理，比如安卓、iOS等。它在OpenGL之上去除了许多不必要的接口，以及性能较低的接口，并且兼容了GLSL着色器语法。OpenCV（Open Source Computer Vision Library），它与 OpenGL是图形API中两个大的分支，类似于iOS中的OC和swift，是两个不同的方向。OpenCV主要用于识别技术，例如人脸识别、身份识别、物体识别等，该API的使用需要与人工智能相结合。目前市面上用的最多的识别三方是 face++，且是收费的，支付宝等大厂的识别功能也是集成的face++。DirectX，仅支持Windows平台，由很多API组成，是一个多媒体处理框架，并不是单一的图形API。该框架可以大致分为4类，显示、声音、输入、网络。Metal，是苹果为了解决3D渲染问题而推出的框架，是为游戏开发者提供的新的平台技术，并且它将3D渲染图像的性能提高了原来的10倍。苹果系统中的CoreGraphics、CoreAnimation、CoreImage框架在2018年以前是基于OpenGL ES封装的，在2018年以后是基于Metal封装的。Vunkan，Vulkan API 最初被 Khronos 称为“下一代 OpenGL 计划”，与 OpenGL、Direct3D 11 和 Metal 相比，Vulkan 旨在提供更高的性能和更平衡的 CPU 和 GPU 使用，并为应用程序提供相当低级别的 API 和并行任务。OpenGL历史SGI 的竞争对手（包括 Sun Microsystems、Hewlett-Packard 和 IBM）也能够将 PHIGS 标准扩展支持的 3D 硬件推向市场，这迫使 SGI 将 IrisGL 版本作为公共标准开源，称为 OpenGL。然而，SGI的许多客户从 IrisGL 到 OpenGL 的转变需要大量投资。此外，IrisGL 具有与 3D 图形无关的 API 函数。例如，它包括一个窗口、键盘和鼠标 API等。其原因是，它是在 X Window System 和 Sun 的 NeWS 之前开发的。而且，由于许可和专利问题，IrisGL的库不适合开放。因此这个转变难度相当大，SGI公司付出了艰辛的努力，得到了市场的认可。IrisGL 的限制之一是它只提供对底层硬件支持的功能的访问。如果图形硬件本身不支持某个功能，则应用程序将无法使用它。OpenGL 通过提供硬件不支持的功能的软件实现来克服这个问题，允许应用程序在相对低功耗的系统上使用高级图形。OpenGL标准化了对硬件的访问，将硬件接口程序（设备驱动程序）的开发责任推给了硬件制造商，并将窗口功能委托给了底层操作系统。有了这么多不同种类的图形硬件，通过为软件开发人员提供一个用于 3D 软件开发的更高级别的平台，让它们以这种方式使用同一种语言产生了显着的影响。OpenGL在1992年由SGI（Silicon Graphics Inc）发布。起初它是作为Iris GL的一个替代品而出现的。Iris GL是SGI的专用图形API，由于它有一些与3D图形无关的API以及一些专利等原因，不适合作为行业的广泛标准，于是SGI编写了OpenGL 1.0规范。在之后，每隔一段时间OpenGL便会出现新的增量更新。  1992年，SGI发布了OpenGL 1.0。  2003年7月，OpenGL ES 1.0发布，它是专为手机、平板电脑、游戏主机等嵌入式系统设计的一个OpenGL API子集。  2004年9月，SGI发布了OpenGL 2.0，这其中就有GLSL 1.0（OpenGL Shading Language）的面世，这是一种类C语言，可以用它对固定管线的顶点/片段着色器进行编程。与之相伴的还支持了MRT（Multiple render targets）和NPOT（Non-power-of-two textures）。  2006年7月，OpenGL API规范的控制权转交给非盈利组织Khronos团队。  2008年8月，OpenGL 3.0发布，支持FBO（Framebuffer Objects）以及VAO（Vertex Array Objects）等多个功能，同时支持了非常多的特性，并且从这版开始OpenGL支持了向后兼容。  2009年8月，OpenGL 3.2发布，废弃了固定渲染管线，发布了核心模式（Core Profile），这种模式的灵活性与效率更高，之后的迭代也都是基于这个核心架构，同时版本中增加了新的着色器阶段：几何着色器。  2010年3月，OpenGL 3.3和OpenGL 4.0一起发布，带来了新的标准规范，自此之后GLSL的版本号与OpenGL版本号保持一致，即GLSL 3.3/4.0，同时新增了曲面细分着色器。  2017年7月，OpenGL 4.6发布，增加了SPIR-V 着色器，SPIR-V 使高级语言前端能够以标准化的中间形式发出程序，供 Vulkan、OpenGL 或 OpenCL 驱动程序摄取。Vulkan历史Vulkan于Khronos在GDC 2015上首次公开，它也曾被叫做是“Next Generation OpenGL Initiative”(glNext)，旨在对OpenGL和OpenGL ES的一次重新设计，将两者统一到一个API中。与OpenGL相同它也是一个跨平台的2D、3D图形API，不同的是它是一个Low Level图形API，即会开放出更多与内存控制相关的接口。Vulkan能较好的支持多线程并行（OpenGL4.0+是为单线程设计的），这使得它的操作和维护比OpenGL复杂得多。另外OpenGL使用GLSL来编写着色器，每个显卡商需要为GLSL单独编写编译器来转换为在显卡上运行的机器码。在这点上Vulkan不同，它会先由操作系统把GLSL预编译为一种名为SPIR-V（Standard Portable Intermediate Representation）的中间码，再由显卡商编写Vulkan驱动程序对GPU进行一些特定的优化，加载速度变快了还节省了显卡商的开发及维护成本。这和Direct3D的HLSL预编译很像。  2016年2月，Vulkan 1.0发布。  2018年2月，Khronos发布MoltenVK，可以理解为MoltenVK是用Metal实现了Vulkan的API，这使得macOS和iOS也能支持Vulkan了。虽然绕了趟远路，但从Dota2的表现上来看，依旧比OpenGL高出了50%的帧率。  2018年3月，Khronos和GPUOpen公开V-EZ项目，它是“Easy Mode”的缩写，是一个基于Vulkan的中间层，相比于Vulkan它保留了Vulkan的大部分API，提供了更简单的内存管理API，封装了诸多底层细节。旨在开发者更容易上手Vulkan。  2018年3月，Vulkan 1.1发布。支持了HLSL语法以及光线追踪。可以更好的模拟DirectX 12。spirv更新至1.3。  2020年1月，Vulkan 1.2发布。新增了23项扩展以及更好的支持HLSL。Direct3D历史Direct3D 是 Microsoft Windows 的图形应用程序编程接口 (API)。作为 DirectX 的一部分，Direct3D 用于在性能很重要的应用程序（例如游戏）中渲染 3D 图形。Direct3D 使用硬件加速（如果它在显卡上可用），允许对整个 3D 渲染管道进行硬件加速，也支持仅部分加速。Direct3D 公开了 3D 图形硬件的高级图形功能，包括 Z 缓冲、W 缓冲、模板缓冲、空间抗锯齿、alpha 混合、颜色混合、Mipmapping、纹理混合，剪裁、剔除、大气效果、透视校正纹理映射、可编程 HLSL 着色器等其他图形效果。与其他 DirectX 技术的集成使 Direct3D 能够提供视频映射、2D 覆盖平面中的硬件 3D 渲染甚至精灵等功能，从而在交互式媒体关系中提供 2D 和 3D 图形的使用。Direct3D 是一种立即模式图形 API。它为每个显卡的 3D 功能（转换、剪辑、照明、材质、纹理、深度缓冲等）提供了一个低级接口。立即模式呈现三个主要抽象：设备、资源和交换链。设备有四种类型，HAL（硬件抽象层）设备（支持硬件加速）、参考设备（模拟不可用的新功能）、软件设备（执行软件渲染）、空设备。每个设备都有一个交换链，交换链由一个或多个后台缓冲区组成，渲染发生在后台缓冲区中。资源有四个属性，资源类型（表面网格、立方体纹理、索引缓冲、顶点缓冲等）、池（内存管理与存储位置）、格式（资源在内存中的布局）、用法（用标志位方式确定如何使用资源）。  1996年6月，第一版Direct3D 2.0跟随DirectX 2.0发布，有”Retained mode”和”Immediate mode”。  1998年8月，Direct3D 6.0发布，增加了许多新特性，如Multitexture、模板缓冲区等。  1999年9月，Direct3D 7.0支持了T&amp;L硬件加速。  2000年11月，Direct3D 8.0发布，引进了可编程管道概念，新增了顶点/片段着色器，这个时候Direct3D完全超越了OpenGL。  2002年12月，Direct3D 9.0发布，发布了Shader Model 2.0。支持浮点纹理格式、MRT（Multiple render targets），9.0是最后一个支持WindowsXP的版本。  2006年11月，Direct3D 10.0发布，仅支持Windows Vista以上操作系统。固定功能管线被淘汰，取而代之的是可编程渲染管线。新增了几何着色器阶段，发布了Shader Model 4.0。  2009年7月，Direct3D 11.0与Windows7一块被发布，Direct3D 11.0新增了曲面细分着色器和Computer Shader，支持了多线程处理技术，发布了Shader Model 5.0。  2015年1月，Direct3D 12.0包含在Windows10一块被发布，更好支持多核心、多线程的优化，降低GPU处理瓶颈，并提升硬件功耗表现。简化了Direct3D 11中的管道状态对象（Pipeline state objects）。  2018年10月，发布了Direct3D 12光线追踪DirectX Raytracing (DXR)的扩展包。Metal历史Metal是一款Low Level、Low Overhead的3D图形API，由苹果公司开发，并在2014年6月随iOS8公开。相比于OpenGL，Metal对底层拥有更大的操控性，同时又有着多线程上大量的优化。Metal Shader使用的是Metal Shader Language（MSL），是一种基于C++ 14的语言。  2014 年 6 月，Metal发布。在由 Apple A7 或更高版本驱动的 iOS 设备上可用，并自 2015 年 6 月 8 日起在运行 OS X El Capitan 的 Mac（2012 型号或更高版本）上可用。  2017 年 6 月，Metal第二个版本发布，Metal 2 可以在 Xcode 中实现更高效的分析和调试、加速机器学习、降低 CPU 工作负载、支持 macOS 上的虚拟现实，以及 Apple A11 GPU 的特性。  2020 年，Apple 宣布将 Mac 迁移到 Apple 芯片，使用 Apple 芯片的 Mac 将配备 Apple GPU，其功能集结合了以前在 macOS 和 iOS 上可用的功能，并将能够利用为 Apple GPU 的基于图块的延迟渲染 (TBDR) 架构量身定制的功能。图形软件发展史20世纪80年代，出现了许多著名的新型商业软件产品，例如Autodesk公司的AutoCAD专注于平面设计，以及它的另一个作品3D Studio专注于3D模型设计，Alias Research公司开发的Alias专注于3D模型设计。Softimage公司开发的Softimage 3D专注于集成建模、动画、渲染并成为业内标准的动画解决方案，副作用软件公司开发的Side Effects软件将程序化建模和运动产品开发成高度紧密集成的2D / 3D动画软件，并融合了多项技术突破。到了20世纪90年代，随着硬件技术的提升，图形软件技术也开始蓬勃发展，产生一批顶级的3D图形软件，例如CAD、3MAX、MAYA、SOFTIMAGE、HOUDINI等。借助这些软件，可以大大降低制作模型和动画的成本。因此90年开始，图形技术发展进入了重大的改革，不仅在技术上大举突破了各类瓶颈，在图形软件上有了大的进化，而且计算机图形技术开始渗透影视、动画、游戏等各行各业。图形技术发展史群体动物移动行为，群体行为的数学模型首先由Craig Reynolds于1986年在计算机上模拟，并很快在3D动画开始大规模使用。动作捕捉，80年代就开始基于计算机的动作捕作为摄影测量分析工具，表演者佩戴标记每个关节附近的标记之间的位置或角度来识别运动。运动跟踪，90年代中期，匹配移动（也称为运动跟踪或摄像头跟踪）虽然与动作捕捉有关，但却是一种完全不同的技术。除了使用特殊的相机和传感器来记录主体的运动外，还会将移动作品与预先存在的实时镜头相匹配，并单独使用计算机软件通过多个框架跟踪场景中的特定点，从而允许插入CGI元素以相对于现有材料的正确位置、比例、方向和运动进入镜头。虚拟演播室，虚拟演播室是一个工作室，这种虚拟场景在90年代电视节目中很普遍，它可以以无缝方式，实时组合人或其他真实物体，包括计算机生成的环境和物体。它要求3D CGI环境自动锁定，进而精确跟踪角色在实时相机和镜头前的任何移动。这种系统的精髓在于它使用某种形式的相机来跟踪创建一个实时的数据流，同时会使用CGI渲染软件，软件使用相机跟踪数据并生成完美拼接的虚拟合成图像。法线贴图，1996年，Krishnamurty和Levoy发明了法线贴图，这是对Jim Blinn 凹凸贴图的改进。PBR&amp;卡通材质，这两个技术都是围绕画风的，PBR 指的是”Physically Based Rendering”， 简化了物理材质的计算流程，用接近物理正确的效果来渲染材质表面，材质包括绝缘体和金属材质两种。卡通渲染（英语：Toon Shading）是一种非真实感绘制（NPR），卡通渲染又称赛璐珞渲染（Cel-shading），旨在使电脑生成的图像呈现出手绘般的效果。为了使图像可以与漫画或者卡通达到形似的效果，专业人员通常使用卡通渲染着色器进行处理。高动态光照（HDRR，High-Dynamic Range rendering），人在黑暗的地方，为了看清楚对象，瞳孔会放大，以吸收更多光线；当突然走到光亮的地方，瞳孔来不及收缩，所以眯起眼睛，保护视网膜上的视神经。而电脑无法判断光线明暗，唯有靠HDRR技术模拟这效果——人眼自动适应光线变化的能力。方法是快速将光线渲染得非常光亮，然后将亮度逐渐降低。HDRR的最终效果是亮处的效果是鲜亮，而黑暗处的效果是能分辨物体的轮廓和深度，而不是以往的一团黑。体积光，可以让用户看到光束效果，例如在一个画面中用户能看到太阳光束射入敞开的窗户，这就是典型的体体积光技术体现。early-z-test，发生在顶点着色器后像素着色器之前的深度测试，原本深度测试在填充率、光照、纹理或像素着色器成为主要瓶颈的情况下已经成为了一个很好的优化，early-z-test这种技术将深度测试更进一步，提前到顶点着色器之后去完成，它节省了片元着色器的计算，但前提是片元着色器中不会有alpha混合和discard操作。光线追踪（Ray Tracing），是三维计算机图形学中的特殊渲染算法，追踪光线从来源开始照射到物体上，再由物体反射的光线“路径”，由于完整运算所有路径十分消耗运算资源，因此现有光线追踪技术仅运算“目所能及”的光线路径，由于是从玩家视角开始进行运算，有时被误解为光线追踪是追踪“从眼睛发出的光线”。通过这样一项技术生成编排好的场景的数学模型显现出来。这样得到的结果类似于光线投射与扫描线渲染方法的结果，但是这种方法有更好的光学效果，例如对于反射与折射有更准确的模拟效果，并且效率非常高，所以当追求高质量的效果时经常使用这种方法。 在物理学中，光线追迹可以用来计算光束在介质中传播的情况。在介质中传播时，光束可能会被介质吸收，改变传播方向或者射出介质表面等。我们通过计算理想化的窄光束（光线）通过介质中的情形来解决这种复杂的情况。 在实际应用中，可以将各种电磁波或者微小粒子看成理想化的窄波束（即光线），基于这种假设，人们利用光线追迹来计算光线在介质中传播的情况。光线追迹方法首先计算一条光线在被介质吸收，或者改变方向前，光线在介质中传播的距离，方向以及到达的新位置，然后从这个新的位置产生出一条新的光线，使用同样的处理方法，最终计算出一个完整的光线在介质中传播的路径。其他等等渲染技术非常多，这里点到为止不再延伸开来。游戏制作团队这里简单介绍下游戏制作团队，虽然大多数人都知道这些知识，但不妨碍我们回顾与总结。艺术家：概念艺术家、三维建模师、纹理艺术家、灯光师、动画师、动捕演员、音效师、配音演员、作曲家等产品设计：游戏设计师、数值设计师、关卡设计师、系统设计师、AI设计师、剧情设计师、操作设计师、技能设计师、制作人等软件工程师：引擎工程师、渲染工程师、游戏系统工程师、AI工程师、网络工程师、构建工程师、工具开发工程师、架构工程师、效能工程师、中间件工程师、安全工程师、测试工程师等运行时引擎架构概述游戏引擎通常由工具套件和运行时组件两部分构成。这里我们主要来说说运行时组件部分。与所有软件系统一样，游戏引擎也是由软件层构建的，即我们通常说的，上层依赖下层，下层不依赖上层，每层中各模块之间不相互依赖，这样的低耦合、高重用度架构在大型软件系统架构中是非常关键的设计。《游戏引擎架构》一书中对整体架构做了介绍，但我认为内容过于粗浅，也有点过时了，于是我自己重新画了架构图。我把整个运行时引擎架构分为十三个层级，每个层级都是只依赖下层，这十三个层级分别为：  目标硬件层  设备驱动层  操作系统层  平台独立层  第三方中间件  核心库  资产管理层  底层渲染器  引擎核心层  引擎应用层  业务基础层  游戏框架层  游戏业务层下面来简单解释一下每个层级的拆解理念：目标硬件层，代表用来执行游戏的主机硬件。设备驱动层，是操作系统或硬件商提供的最低阶软件组件。负责管理硬件资源、也隔离了操作系统及上层引擎。操作系统层，管理协调整台计算机上多个程序的执行工作，进程通过调用操作系统的接口来访问操作系统。平台独立层，包装了常用的库和操作系统接口，供所有平台使用。第三方中间件，提供了独立的解决方案，简化开发流程，缩短开发时间。包括标准库、图形接口等。核心库，是由许许多多独立的软件工具库组成。这些库常常被引擎上层频繁使用，同时也是非常实用的软件工具。资产管理层，提供资源增删改查的完整解决方案，通常会提供一组统一的接口，供引擎和业务去访问任意的游戏资源。底层渲染器，提供最原始的渲染功能，根据应用层的数据调用图形API进行渲染。它通常会经过封装，从业务渲染提交的过程中拆解出来。引擎核心层，为应用层提供了最核心的功能，包括音频、动画、物理、剔除与合批、手柄设备接口等。引擎应用层，在核心层之上建立起来的引擎业务，包括性能剖析工具、UI核心框架、粒子系统、后处理系统等。业务基础层，引擎为游戏框架搭建而做的基础功能，是提供给实现游戏逻辑的重要功能与接口。游戏框架层，通过调用业务基础层来搭建的游戏框架，是游戏实现自身逻辑的框架，也是游戏逻辑的核心。游戏业务层，是实现具体游戏业务的逻辑，通过调用游戏框架来实现具体的业务逻辑。游戏引擎架构图在拆解了整个引擎的架构时，由于模块太多，因此只列了一些主要的模块，保持了基本架构的完整性：架构图中的重要模块，将在后面的文章中做详细的分析和解剖。参考资料：《游戏引擎架构》 译者：叶劲峰《3D游戏引擎发展史》https://www.bilibili.com/read/cv6499569/《游戏引擎wiki》https://zh.wikipedia.org/wiki/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E《你不能不知道的计算机图形技术发展史》1、2https://www.bilibili.com/read/cv196689https://www.bilibili.com/read/cv221830《了解图形接口》https://www.jianshu.com/p/9dea5f163837《图形API发展历史》https://blog.csdn.net/ce1061183126/article/details/106159169《卡通渲染 Wiki》https://zh.wikipedia.org/wiki/%E5%8D%A1%E9%80%9A%E6%B8%B2%E6%9F%93《高动态光照渲染》https://zh.wikipedia.org/wiki/%E9%AB%98%E5%8A%A8%E6%80%81%E5%85%89%E7%85%A7%E6%B8%B2%E6%9F%93《Metal Wiki》https://en.wikipedia.org/wiki/Metal_(API)#History《Direct3D Wiki》https://en.wikipedia.org/wiki/Direct3D#Direct3D_12《OpenGL Wiki》https://en.wikipedia.org/wiki/OpenGL《Vulkan Wiki》https://en.wikipedia.org/wiki/Vulkan_(API)已发布在微信公众号上，点击跳转",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484890&amp;idx=1&amp;sn=1d319050c82fed232d22f1f3dfce0cd3&amp;chksm=fc2260ddcb55e9cbbda832e90def1e8e7440b7ffc85c60264be83d9c6bc62162c5b05839839b&amp;token=834275592&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p><h1 id=\"背景\">背景：</h1><p>作为游戏开发从业者，从业务到算法到语言到框架到引擎，积累了一些知识和经验，特别是在看了好几遍《游戏引擎架构》后对引擎的架构感触颇深。</p><p>近段时间对引擎剖析的想法也较多，正好借着书本对游戏引擎架构做一个完整分析。此书用简明、清楚的方式覆盖了游戏引擎架构的庞大领域，巧妙地平衡了广度与深度，并且提供了足够的细节，使得初学者也能很容易地理解其中的各种概念。</p><p>目标是掌握游戏引擎架构知识，方法是跟随《游戏引擎架构》这本书、结合引擎源码、自己的经验，分析游戏引擎的历史、架构、模块。最后通过实践自主引擎的开发来完成对引擎知识的掌握。</p><p>游戏引擎知识面深而广，所以对这系列的文章书编写范围做个保护，即不对细节进行过多的阐述，重点剖析的是架构、流程以及模块的运作原理。</p><h1 id=\"概述\">概述：</h1><p>文章分为五个部分：</p><ol>  <li>游戏引擎历史</li>  <li>现代引擎概览</li>  <li>计算机图形技术发展史</li>  <li>游戏制作团队</li>  <li>运行时引擎架构概述</li></ol><h1 id=\"正文\">正文：</h1><p>此篇分四个主题来概述一下游戏引擎的基础知识，我会分别从历史、现状、架构、团队，这四个方面来阐述。</p><h2 id=\"游戏引擎历史\">游戏引擎历史</h2><p>有些同学会问，为什么要讲历史？为什么要讲现状？那是因为了解历史和现状能帮助我们更好的理解引擎的每个部分。</p><p>实际上，每每当你回顾历史，就会发现它是由很多巧合构成的，当知道它的来龙去脉时，我们也就能更好的理解“今天为什么它成为这个样子”。</p><p>我认为游戏引擎这个词语用的非常好，它很好的概括它在游戏开发中的地位。</p><p>我们说所有的程序都可以用工具两个字来描述，那么游戏引擎到底带给了我们什么，才让它成为今天人们普遍关注的焦点呢。</p><p>十几年前的游戏都很简单，容量大小都是以兆计的，通常一款游戏的开发周期在8到10个月左右，最主要的是每款游戏开发都需要重头编写代码，期间存在着大量的重复劳动，耗时耗力。</p><p>慢慢地开发人员总结出些规律，某些游戏逻辑总是有些相似的代码，可以做成模块重复使用，这样就可以大大减少游戏开发周期和开发费用。</p><p>一开始，只是做些低耦合的通用方法，然后逐渐形成了模块，接着演变成了复合型框架，最后形成了大型软件工程，即现在的游戏引擎。</p><h3 id=\"id-tech-引擎发展史\">Id Tech 引擎发展史</h3><p>说到引擎发展史不得不说ID software这家游戏公司，很早就开始开发起游戏，从一个小游戏到游戏移植再到《Wolfenstein 3D》，游戏技术让这家公司从无到有，不断创造出一个又一个技术巅峰。</p><p>最后《Wolfenstein 3D》成了游戏引擎的始祖，它不但开创了3D 射击游戏世界，而且程序也被其他游戏所使用。</p><p>对ID公司来说《Wolfenstein 3D》只是小试身手，DOOM（毁灭战士）游戏引擎才是引擎技术的代表，DOOM使用的引擎正是Id Tech 1。</p><p>在DOOM发布后，获得了350万的销量，为ID公司带来了滚滚财源。</p><p>更重要的是DOOM成了ID公司第一款用于商业授权的引擎，这为ID公司增加了一条创收之路，即商业引擎之路从此开始。</p><p>引擎从Id Tech 1到Id Tech 5，每一代升级都是质的飞越。游戏Id Tech引擎也制作出了很多优秀的游戏，包括《Quake》、《半条命》、《反恐精英》等。</p><h3 id=\"unreal-引擎发展史\">Unreal 引擎发展史</h3><p>EPIC公司在1998年发布了Unreal引擎，同时《虚幻》这款FPS游戏也发布出来，画面精致绚丽得到大众的认可。</p><p>不仅如此，重要的是Unreal引擎得益于画面精美和DX规范的通用性，很快就得到了许多游戏公司的支持。而且，由于Unreal引擎的通用性，除了游戏，它还广泛使用在3D建模、建筑设计、动作捕捉、电影特效等等领域。</p><p>Unreal引擎一战成名后，便开启了升级之路，引擎从Unreal 1到 Unreal 5，凭借着优秀的画质表现、适中的显卡要求、强大的自定义工具和一站式配套开发使得Unreal具备了各个平台各种游戏的适应性，因此越来越多的游戏采用Unreal引擎。目前已成为全球最流行的游戏引擎之一。</p><h3 id=\"unity-引擎发展史\">Unity 引擎发展史</h3><p>Unity在2005年6月时发布了1.0版本的引擎。</p><p>最初，是在2005年苹果公司的全球开发者大会上对外公布并开放使用，当时只是一款面向Mac OS X平台的游戏引擎。</p><p>由于其引擎的易用性，受到广大开发者的喜爱，之后Unity公司便开启了快速升级之路，用了10年时间从1.0一路升级到5.0。</p><p>鉴于引擎的更新速度逐渐加快，Unity官方决定不再在其版本号中标注纯数字，而改用年份与版本号的复合形式，如Unity 2018.2，发布时间为2018年7月10日。</p><p>截止目前使用Unity引擎开发出了的手机游戏，无论是在数量上还是在流行度上，都是所有引擎中最多也是最受欢迎的。</p><p>随着显卡性能越来越强，游戏的画质越来越高，游戏开发周期也越来越长，通常都会达到3到5年，自行开发游戏引擎的话时间还会更长，所以大多数游戏公司还是选择购买现成的游戏引擎，简化游戏的开发过程。</p><h2 id=\"现代引擎概览\">现代引擎概览</h2><p>雷神之锤引擎，与游戏业务密切融合，它的第一款游戏是《德军总部》，后相继开发了《毁灭战士》、《雷神之锤》等游戏。Source引擎中的技术也能追溯到雷神之锤的技术。原始雷神之锤引擎的架构相当优秀并且整洁。这些代码都是非常好的例子，能说明工业级游戏引擎是怎样炼成的。</p><p>虚幻引擎，从《虚幻》游戏开始进化，进化到虚幻4代引擎时，号称是业界最好的工具和最丰富的引擎功能。它有方便且强大的着色器制作工具，还提供一个方便快捷的图形用户界面编辑器，虚幻引擎以其全面的功能及内聚易用的工具著称。但虚幻引擎并非完美，大部分开发者都需要用不同方式优化它，才能在具体的目标硬件上运行。可贵的是虚幻引擎拥有极为强大的原型制作工具和商业游戏平台，可用来制作几乎任何3D游戏。</p><p>Source引擎，《半条命2》起家的游戏引擎，其图形能力和工具套件可与虚幻引擎4娉美。</p><p>寒霜引擎，是从《战地：叛逆连队》开发开始的，之后成为艺电应用最广泛的引擎。寒霜引擎拥有强大的统一资产创作工具FrostEd，以及强大的Backend Services工具管道。</p><p>CryEngine，原本是为NVIDIA开发的技术演示程序。确立这个技术具有潜力后，就把演示程序改为了完整的游戏《孤岛惊魂》，最后演化成了游戏引擎。经过多年迭代，CryEngine3已经是一个强大的资产创作工具，具有丰富的功能并拥有高品质的图形渲染引擎。</p><p>索尼的PhyreEngine，专为支持索尼的PS2，PS3，PS4等平台提供技术服务。PhyreEngine3.5让开发者能使用PS3 Cell架构的高度并行能力、PS4的高级演算能力，以及包括其他世界编辑器和开发工具。</p><p>微软的XNA Game Studio，XNA基于微软的C#语言并使用Visual Studio管理游戏项目资产。</p><p>Unity，支持广泛的平台，它的主要设计目标是容易开发及跨平台游戏开发。因此它提供了容易使用的整合编辑环境，我们可以在此环境中创建及处理游戏世界中的资产及实体，并能快速地在编辑器中浏览游戏运行的样子，同时也提供了直接在目标硬件上运行的功能。不仅如此它还提供了全面的资产调节管道，可以为每个平台独立调节性能与品质以达到两者的平衡。</p><h2 id=\"计算机图形技术发展史\">计算机图形技术发展史</h2><p>我把计算机图形技术发展史分为了四个部分，它们分别是，硬件发展史、图形API发展史、图形软件发展史、以及图形技术发展史。</p><h3 id=\"图形硬件发展史\">图形硬件发展史</h3><p>图形硬件，最初由SGI公司（Silicon Graphics Inc）开发的IRIS（综合光栅成像系统）受到市场热捧，它使用2MB内存的8 MHz M68000处理器，定制1024x1024帧缓冲器和几何引擎。其最初的市场定位为3D图形显示终端。随着市场策略的推进，SGI公司在电影、电视等领域的发展迅速并且它们的产品受到欢迎。</p><p>接着是Sun微系统公司，它于1982年由安迪·贝托尔斯海姆与其他同门研究生在斯坦福大学成立。贝托尔斯海姆最初将SUN计算机设计为斯坦福大学网络（因此缩写为“SUN”）的个人CAD工作站。它是围绕Motorola 68000处理器设计的，具有Unix操作系统和虚拟内存，并且与SGI一样，具有嵌入式帧缓冲区。后来的发展包括计算机服务器和基于RISC处理器架构和一系列软件产品（如Solaris操作系统和Java平台）构建的工作站。</p><p>GPU英文全称Graphic Processing Unit，20世纪70年代末GPU概念被提出，它的优点是具有高并行结构，所以GPU在处理图形数据和复杂算法方面由比CPU更高的效率。CPU大部分面积为控制器和寄存器，与之相比，GPU拥有更多的ALU（Arithmetic Logic Unit,逻辑运算单元）用于数据处理，这样的结构适合对密集型数据进行并行处理。GPU采用流式并行计算模式，可对每个数据进行独立的并行计算，所谓“对数据进行独立计算”即：流内任意元素的计算不依赖于其他同类型数据，例如，计算一个顶点的世界位置坐标，不依赖于其他顶点的位置，所谓“并行计算”是指“多个数据可以同时被使用，多个数据并行运算的时间和1个数据单独执行的时间是一样的”。所以，在顶点处理程序中，可以同时处理N个顶点数据。目前，线性代数，物理仿真和光线跟踪算法都已经成功的一直到GPU上。</p><p>第一代GPU，NVIDIA于1998年宣布Modern GPU研发成功，这标志着第一代Mondern GPU的诞生，第一代GPU包括NVIDIA TNT2,ATI的Rage和3Dfx的Voodoo。这些GPU可以独立CPU进行像素缓存区的更新，并可以光栅化三角面片以及进行纹理操作，但是缺乏三维顶点的空间坐标变换能力，这意味着“必须依赖与CPU执行顶点坐标变换的计算”。这一时期的GPU功能非常有限，只能用于纹理组合的数学计算或者像素颜色值得计算。</p><p>第二代GPU，NVIDIA于1999年推出一款显示核心代号NV10的geforce 256，率先将硬体T&amp;L整合到显示核中。T&amp;L原先由CPU负责，或者由另一个独立处理机处理。这次整合T&amp;L是一大进步，原因是显视核心从CPU接管了大量工作。硬件T&amp;L引擎带来的效果是3D 模型可以用更多的多边形来描绘，这样就拥有了更加细腻的效果。而对光照来说，CPU不必在计算大量的光照数据，直接通过显卡就能获得更好的效能。同时，这一阶段的GPU对于纹理的操作也扩展到了立方体纹理（Cube Map）。NVIDIA的GeForce MAX,ATI的Radeon 7500等都是在这一阶段研发的。</p><p>第三代GPU，2001年是第三代Modern GPU的发展时期，这一时期研发的GPU提供Vertex Programmability (顶点编程能力)，如GeForce 3，GeForce 4Ti，ATI 的8500等。这些GPU允许应用程序指定一个序列的指令进行顶点操作控制，这是一个具有开创意义的时期，这一时期确立的GPU编程思想一直延续到今天，不但深入到工程领域帮助改善人类日常生活（医疗、地质勘探、游戏、电影），而且开创或延伸了计算机科学的诸多研究领域（人体绘制、光照模拟、人群动画、通用计算等）。同时Direct8和OpenGL都本着与时俱进的精神，提供了支持Vertex Programmability的发展。不过，这一时期的GPU还不支持像素级的编程能力，即Fragment Programmability(片段编程能力)。</p><p>第四代GPU，发展时期从2002年末到2003年。NVIDIA的GeForceFX和ATI Radeon 9700同时在市场的舞台上闪亮登场，这两种GPU都支持顶点编程和片段编程。同时DriectX和OpenGL也扩展了自身的API，用以支持顶点编程和片段编程。自2003年起，可编程图形处理器正式诞生，并且由于DirectX和OpenGL契而不舍的追赶潮流，导致基于图形硬件的编程技术，简称GPU编程，也宣告诞生。</p><h3 id=\"图形api发展史\">图形API发展史</h3><p>在 1980 年代，开发可与各种图形硬件配合使用的软件是一项真正的挑战。软件开发人员为每个硬件编写自定义接口和驱动程序。这个代价是昂贵的，将导致工作量成倍增加。到 1990 年代初，Silicon Graphics (SGI) 是工作站 3D 图形领域的领导者。他们的 IRIS GL API成为行业标准，比基于开放标准的 PHIGS 使用更广泛。</p><p>OpenGL、DirectX、Vulkan、Metal等都属于图形API，它的本质是封装好的显卡接口，用来将应用程序与显卡驱动联系起来。有了图形API我们可以仅仅调用它的函数来更改渲染状态、缓存顶点数据、开始绘制等等，而如果没有它，我们就需要直接调用显卡驱动的接口来进行渲染，这会涉及到非常多的硬件接口，例如对寄存器的操作，相当繁琐。一般来说我们都不会希望在渲染的同时还要去关注对硬件的控制。</p><p>目前比较常用的图形API：</p><ol>  <li>OpenGL</li>  <li>OpenGL ES</li>  <li>OpenCV</li>  <li>DirectX</li>  <li>Metal</li>  <li>Vunkan</li></ol><p>OpenGL（Open Graphics Library），是一个跨平台、跨语言的编程图形框架，主要用于windows、mac等PC端。它将计算机资源抽象成一个个OpenGL对象，对这些资源的操作抽象为一个个OpenGL指令。</p><p>OpenGL ES（OpenGL for Embedded Systems），OpenGL三维图像API的子集，主要是针对嵌入式设备的图形处理，比如安卓、iOS等。它在OpenGL之上去除了许多不必要的接口，以及性能较低的接口，并且兼容了GLSL着色器语法。</p><p>OpenCV（Open Source Computer Vision Library），它与 OpenGL是图形API中两个大的分支，类似于iOS中的OC和swift，是两个不同的方向。OpenCV主要用于识别技术，例如人脸识别、身份识别、物体识别等，该API的使用需要与人工智能相结合。目前市面上用的最多的识别三方是 face++，且是收费的，支付宝等大厂的识别功能也是集成的face++。</p><p>DirectX，仅支持Windows平台，由很多API组成，是一个多媒体处理框架，并不是单一的图形API。该框架可以大致分为4类，显示、声音、输入、网络。</p><p>Metal，是苹果为了解决3D渲染问题而推出的框架，是为游戏开发者提供的新的平台技术，并且它将3D渲染图像的性能提高了原来的10倍。苹果系统中的CoreGraphics、CoreAnimation、CoreImage框架在2018年以前是基于OpenGL ES封装的，在2018年以后是基于Metal封装的。</p><p>Vunkan，Vulkan API 最初被 Khronos 称为“下一代 OpenGL 计划”，与 OpenGL、Direct3D 11 和 Metal 相比，Vulkan 旨在提供更高的性能和更平衡的 CPU 和 GPU 使用，并为应用程序提供相当低级别的 API 和并行任务。</p><h3 id=\"opengl历史\">OpenGL历史</h3><p>SGI 的竞争对手（包括 Sun Microsystems、Hewlett-Packard 和 IBM）也能够将 PHIGS 标准扩展支持的 3D 硬件推向市场，这迫使 SGI 将 IrisGL 版本作为公共标准开源，称为 OpenGL。</p><p>然而，SGI的许多客户从 IrisGL 到 OpenGL 的转变需要大量投资。此外，IrisGL 具有与 3D 图形无关的 API 函数。例如，它包括一个窗口、键盘和鼠标 API等。其原因是，它是在 X Window System 和 Sun 的 NeWS 之前开发的。而且，由于许可和专利问题，IrisGL的库不适合开放。因此这个转变难度相当大，SGI公司付出了艰辛的努力，得到了市场的认可。</p><p>IrisGL 的限制之一是它只提供对底层硬件支持的功能的访问。如果图形硬件本身不支持某个功能，则应用程序将无法使用它。OpenGL 通过提供硬件不支持的功能的软件实现来克服这个问题，允许应用程序在相对低功耗的系统上使用高级图形。</p><p>OpenGL标准化了对硬件的访问，将硬件接口程序（设备驱动程序）的开发责任推给了硬件制造商，并将窗口功能委托给了底层操作系统。有了这么多不同种类的图形硬件，通过为软件开发人员提供一个用于 3D 软件开发的更高级别的平台，让它们以这种方式使用同一种语言产生了显着的影响。</p><p>OpenGL在1992年由SGI（Silicon Graphics Inc）发布。起初它是作为Iris GL的一个替代品而出现的。Iris GL是SGI的专用图形API，由于它有一些与3D图形无关的API以及一些专利等原因，不适合作为行业的广泛标准，于是SGI编写了OpenGL 1.0规范。在之后，每隔一段时间OpenGL便会出现新的增量更新。</p><ul>  <li>1992年，SGI发布了OpenGL 1.0。</li>  <li>2003年7月，OpenGL ES 1.0发布，它是专为手机、平板电脑、游戏主机等嵌入式系统设计的一个OpenGL API子集。</li>  <li>2004年9月，SGI发布了OpenGL 2.0，这其中就有GLSL 1.0（OpenGL Shading Language）的面世，这是一种类C语言，可以用它对固定管线的顶点/片段着色器进行编程。与之相伴的还支持了MRT（Multiple render targets）和NPOT（Non-power-of-two textures）。</li>  <li>2006年7月，OpenGL API规范的控制权转交给非盈利组织Khronos团队。</li>  <li>2008年8月，OpenGL 3.0发布，支持FBO（Framebuffer Objects）以及VAO（Vertex Array Objects）等多个功能，同时支持了非常多的特性，并且从这版开始OpenGL支持了向后兼容。</li>  <li>2009年8月，OpenGL 3.2发布，废弃了固定渲染管线，发布了核心模式（Core Profile），这种模式的灵活性与效率更高，之后的迭代也都是基于这个核心架构，同时版本中增加了新的着色器阶段：几何着色器。</li>  <li>2010年3月，OpenGL 3.3和OpenGL 4.0一起发布，带来了新的标准规范，自此之后GLSL的版本号与OpenGL版本号保持一致，即GLSL 3.3/4.0，同时新增了曲面细分着色器。</li>  <li>2017年7月，OpenGL 4.6发布，增加了SPIR-V 着色器，SPIR-V 使高级语言前端能够以标准化的中间形式发出程序，供 Vulkan、OpenGL 或 OpenCL 驱动程序摄取。</li></ul><h3 id=\"vulkan历史\">Vulkan历史</h3><p>Vulkan于Khronos在GDC 2015上首次公开，它也曾被叫做是“Next Generation OpenGL Initiative”(glNext)，旨在对OpenGL和OpenGL ES的一次重新设计，将两者统一到一个API中。</p><p>与OpenGL相同它也是一个跨平台的2D、3D图形API，不同的是它是一个Low Level图形API，即会开放出更多与内存控制相关的接口。</p><p>Vulkan能较好的支持多线程并行（OpenGL4.0+是为单线程设计的），这使得它的操作和维护比OpenGL复杂得多。另外OpenGL使用GLSL来编写着色器，每个显卡商需要为GLSL单独编写编译器来转换为在显卡上运行的机器码。在这点上Vulkan不同，它会先由操作系统把GLSL预编译为一种名为SPIR-V（Standard Portable Intermediate Representation）的中间码，再由显卡商编写Vulkan驱动程序对GPU进行一些特定的优化，加载速度变快了还节省了显卡商的开发及维护成本。这和Direct3D的HLSL预编译很像。</p><ul>  <li>2016年2月，Vulkan 1.0发布。</li>  <li>2018年2月，Khronos发布MoltenVK，可以理解为MoltenVK是用Metal实现了Vulkan的API，这使得macOS和iOS也能支持Vulkan了。虽然绕了趟远路，但从Dota2的表现上来看，依旧比OpenGL高出了50%的帧率。</li>  <li>2018年3月，Khronos和GPUOpen公开V-EZ项目，它是“Easy Mode”的缩写，是一个基于Vulkan的中间层，相比于Vulkan它保留了Vulkan的大部分API，提供了更简单的内存管理API，封装了诸多底层细节。旨在开发者更容易上手Vulkan。</li>  <li>2018年3月，Vulkan 1.1发布。支持了HLSL语法以及光线追踪。可以更好的模拟DirectX 12。spirv更新至1.3。</li>  <li>2020年1月，Vulkan 1.2发布。新增了23项扩展以及更好的支持HLSL。</li></ul><h3 id=\"direct3d历史\">Direct3D历史</h3><p>Direct3D 是 Microsoft Windows 的图形应用程序编程接口 (API)。作为 DirectX 的一部分，Direct3D 用于在性能很重要的应用程序（例如游戏）中渲染 3D 图形。Direct3D 使用硬件加速（如果它在显卡上可用），允许对整个 3D 渲染管道进行硬件加速，也支持仅部分加速。</p><p>Direct3D 公开了 3D 图形硬件的高级图形功能，包括 Z 缓冲、W 缓冲、模板缓冲、空间抗锯齿、alpha 混合、颜色混合、Mipmapping、纹理混合，剪裁、剔除、大气效果、透视校正纹理映射、可编程 HLSL 着色器等其他图形效果。与其他 DirectX 技术的集成使 Direct3D 能够提供视频映射、2D 覆盖平面中的硬件 3D 渲染甚至精灵等功能，从而在交互式媒体关系中提供 2D 和 3D 图形的使用。</p><p>Direct3D 是一种立即模式图形 API。它为每个显卡的 3D 功能（转换、剪辑、照明、材质、纹理、深度缓冲等）提供了一个低级接口。立即模式呈现三个主要抽象：设备、资源和交换链。</p><p>设备有四种类型，HAL（硬件抽象层）设备（支持硬件加速）、参考设备（模拟不可用的新功能）、软件设备（执行软件渲染）、空设备。</p><p>每个设备都有一个交换链，交换链由一个或多个后台缓冲区组成，渲染发生在后台缓冲区中。</p><p>资源有四个属性，资源类型（表面网格、立方体纹理、索引缓冲、顶点缓冲等）、池（内存管理与存储位置）、格式（资源在内存中的布局）、用法（用标志位方式确定如何使用资源）。</p><ul>  <li>1996年6月，第一版Direct3D 2.0跟随DirectX 2.0发布，有”Retained mode”和”Immediate mode”。</li>  <li>1998年8月，Direct3D 6.0发布，增加了许多新特性，如Multitexture、模板缓冲区等。</li>  <li>1999年9月，Direct3D 7.0支持了T&amp;L硬件加速。</li>  <li>2000年11月，Direct3D 8.0发布，引进了可编程管道概念，新增了顶点/片段着色器，这个时候Direct3D完全超越了OpenGL。</li>  <li>2002年12月，Direct3D 9.0发布，发布了Shader Model 2.0。支持浮点纹理格式、MRT（Multiple render targets），9.0是最后一个支持WindowsXP的版本。</li>  <li>2006年11月，Direct3D 10.0发布，仅支持Windows Vista以上操作系统。固定功能管线被淘汰，取而代之的是可编程渲染管线。新增了几何着色器阶段，发布了Shader Model 4.0。</li>  <li>2009年7月，Direct3D 11.0与Windows7一块被发布，Direct3D 11.0新增了曲面细分着色器和Computer Shader，支持了多线程处理技术，发布了Shader Model 5.0。</li>  <li>2015年1月，Direct3D 12.0包含在Windows10一块被发布，更好支持多核心、多线程的优化，降低GPU处理瓶颈，并提升硬件功耗表现。简化了Direct3D 11中的管道状态对象（Pipeline state objects）。</li>  <li>2018年10月，发布了Direct3D 12光线追踪DirectX Raytracing (DXR)的扩展包。</li></ul><h3 id=\"metal历史\">Metal历史</h3><p>Metal是一款Low Level、Low Overhead的3D图形API，由苹果公司开发，并在2014年6月随iOS8公开。相比于OpenGL，Metal对底层拥有更大的操控性，同时又有着多线程上大量的优化。Metal Shader使用的是Metal Shader Language（MSL），是一种基于C++ 14的语言。</p><ul>  <li>2014 年 6 月，Metal发布。在由 Apple A7 或更高版本驱动的 iOS 设备上可用，并自 2015 年 6 月 8 日起在运行 OS X El Capitan 的 Mac（2012 型号或更高版本）上可用。</li>  <li>2017 年 6 月，Metal第二个版本发布，Metal 2 可以在 Xcode 中实现更高效的分析和调试、加速机器学习、降低 CPU 工作负载、支持 macOS 上的虚拟现实，以及 Apple A11 GPU 的特性。</li>  <li>2020 年，Apple 宣布将 Mac 迁移到 Apple 芯片，使用 Apple 芯片的 Mac 将配备 Apple GPU，其功能集结合了以前在 macOS 和 iOS 上可用的功能，并将能够利用为 Apple GPU 的基于图块的延迟渲染 (TBDR) 架构量身定制的功能。</li></ul><h3 id=\"图形软件发展史\">图形软件发展史</h3><p>20世纪80年代，出现了许多著名的新型商业软件产品，例如Autodesk公司的AutoCAD专注于平面设计，以及它的另一个作品3D Studio专注于3D模型设计，Alias Research公司开发的Alias专注于3D模型设计。Softimage公司开发的Softimage 3D专注于集成建模、动画、渲染并成为业内标准的动画解决方案，副作用软件公司开发的Side Effects软件将程序化建模和运动产品开发成高度紧密集成的2D / 3D动画软件，并融合了多项技术突破。</p><p>到了20世纪90年代，随着硬件技术的提升，图形软件技术也开始蓬勃发展，产生一批顶级的3D图形软件，例如CAD、3MAX、MAYA、SOFTIMAGE、HOUDINI等。借助这些软件，可以大大降低制作模型和动画的成本。</p><p>因此90年开始，图形技术发展进入了重大的改革，不仅在技术上大举突破了各类瓶颈，在图形软件上有了大的进化，而且计算机图形技术开始渗透影视、动画、游戏等各行各业。</p><h2 id=\"图形技术发展史\">图形技术发展史</h2><p>群体动物移动行为，群体行为的数学模型首先由Craig Reynolds于1986年在计算机上模拟，并很快在3D动画开始大规模使用。</p><p>动作捕捉，80年代就开始基于计算机的动作捕作为摄影测量分析工具，表演者佩戴标记每个关节附近的标记之间的位置或角度来识别运动。</p><p>运动跟踪，90年代中期，匹配移动（也称为运动跟踪或摄像头跟踪）虽然与动作捕捉有关，但却是一种完全不同的技术。除了使用特殊的相机和传感器来记录主体的运动外，还会将移动作品与预先存在的实时镜头相匹配，并单独使用计算机软件通过多个框架跟踪场景中的特定点，从而允许插入CGI元素以相对于现有材料的正确位置、比例、方向和运动进入镜头。</p><p>虚拟演播室，虚拟演播室是一个工作室，这种虚拟场景在90年代电视节目中很普遍，它可以以无缝方式，实时组合人或其他真实物体，包括计算机生成的环境和物体。它要求3D CGI环境自动锁定，进而精确跟踪角色在实时相机和镜头前的任何移动。这种系统的精髓在于它使用某种形式的相机来跟踪创建一个实时的数据流，同时会使用CGI渲染软件，软件使用相机跟踪数据并生成完美拼接的虚拟合成图像。</p><p>法线贴图，1996年，Krishnamurty和Levoy发明了法线贴图，这是对Jim Blinn 凹凸贴图的改进。</p><p>PBR&amp;卡通材质，这两个技术都是围绕画风的，PBR 指的是”Physically Based Rendering”， 简化了物理材质的计算流程，用接近物理正确的效果来渲染材质表面，材质包括绝缘体和金属材质两种。卡通渲染（英语：Toon Shading）是一种非真实感绘制（NPR），卡通渲染又称赛璐珞渲染（Cel-shading），旨在使电脑生成的图像呈现出手绘般的效果。为了使图像可以与漫画或者卡通达到形似的效果，专业人员通常使用卡通渲染着色器进行处理。</p><p>高动态光照（HDRR，High-Dynamic Range rendering），人在黑暗的地方，为了看清楚对象，瞳孔会放大，以吸收更多光线；当突然走到光亮的地方，瞳孔来不及收缩，所以眯起眼睛，保护视网膜上的视神经。而电脑无法判断光线明暗，唯有靠HDRR技术模拟这效果——人眼自动适应光线变化的能力。方法是快速将光线渲染得非常光亮，然后将亮度逐渐降低。HDRR的最终效果是亮处的效果是鲜亮，而黑暗处的效果是能分辨物体的轮廓和深度，而不是以往的一团黑。</p><p>体积光，可以让用户看到光束效果，例如在一个画面中用户能看到太阳光束射入敞开的窗户，这就是典型的体体积光技术体现。</p><p>early-z-test，发生在顶点着色器后像素着色器之前的深度测试，原本深度测试在填充率、光照、纹理或像素着色器成为主要瓶颈的情况下已经成为了一个很好的优化，early-z-test这种技术将深度测试更进一步，提前到顶点着色器之后去完成，它节省了片元着色器的计算，但前提是片元着色器中不会有alpha混合和discard操作。</p><p>光线追踪（Ray Tracing），是三维计算机图形学中的特殊渲染算法，追踪光线从来源开始照射到物体上，再由物体反射的光线“路径”，由于完整运算所有路径十分消耗运算资源，因此现有光线追踪技术仅运算“目所能及”的光线路径，由于是从玩家视角开始进行运算，有时被误解为光线追踪是追踪“从眼睛发出的光线”。通过这样一项技术生成编排好的场景的数学模型显现出来。这样得到的结果类似于光线投射与扫描线渲染方法的结果，但是这种方法有更好的光学效果，例如对于反射与折射有更准确的模拟效果，并且效率非常高，所以当追求高质量的效果时经常使用这种方法。 在物理学中，光线追迹可以用来计算光束在介质中传播的情况。在介质中传播时，光束可能会被介质吸收，改变传播方向或者射出介质表面等。我们通过计算理想化的窄光束（光线）通过介质中的情形来解决这种复杂的情况。 在实际应用中，可以将各种电磁波或者微小粒子看成理想化的窄波束（即光线），基于这种假设，人们利用光线追迹来计算光线在介质中传播的情况。光线追迹方法首先计算一条光线在被介质吸收，或者改变方向前，光线在介质中传播的距离，方向以及到达的新位置，然后从这个新的位置产生出一条新的光线，使用同样的处理方法，最终计算出一个完整的光线在介质中传播的路径。</p><p>其他等等渲染技术非常多，这里点到为止不再延伸开来。</p><h2 id=\"游戏制作团队\">游戏制作团队</h2><p>这里简单介绍下游戏制作团队，虽然大多数人都知道这些知识，但不妨碍我们回顾与总结。</p><p>艺术家：概念艺术家、三维建模师、纹理艺术家、灯光师、动画师、动捕演员、音效师、配音演员、作曲家等</p><p>产品设计：游戏设计师、数值设计师、关卡设计师、系统设计师、AI设计师、剧情设计师、操作设计师、技能设计师、制作人等</p><p>软件工程师：引擎工程师、渲染工程师、游戏系统工程师、AI工程师、网络工程师、构建工程师、工具开发工程师、架构工程师、效能工程师、中间件工程师、安全工程师、测试工程师等</p><h2 id=\"运行时引擎架构概述\">运行时引擎架构概述</h2><p>游戏引擎通常由工具套件和运行时组件两部分构成。这里我们主要来说说运行时组件部分。</p><p>与所有软件系统一样，游戏引擎也是由软件层构建的，即我们通常说的，上层依赖下层，下层不依赖上层，每层中各模块之间不相互依赖，这样的低耦合、高重用度架构在大型软件系统架构中是非常关键的设计。</p><p>《游戏引擎架构》一书中对整体架构做了介绍，但我认为内容过于粗浅，也有点过时了，于是我自己重新画了架构图。</p><p>我把整个运行时引擎架构分为十三个层级，每个层级都是只依赖下层，这十三个层级分别为：</p><ol>  <li>目标硬件层</li>  <li>设备驱动层</li>  <li>操作系统层</li>  <li>平台独立层</li>  <li>第三方中间件</li>  <li>核心库</li>  <li>资产管理层</li>  <li>底层渲染器</li>  <li>引擎核心层</li>  <li>引擎应用层</li>  <li>业务基础层</li>  <li>游戏框架层</li>  <li>游戏业务层</li></ol><p>下面来简单解释一下每个层级的拆解理念：</p><p>目标硬件层，代表用来执行游戏的主机硬件。</p><p>设备驱动层，是操作系统或硬件商提供的最低阶软件组件。负责管理硬件资源、也隔离了操作系统及上层引擎。</p><p>操作系统层，管理协调整台计算机上多个程序的执行工作，进程通过调用操作系统的接口来访问操作系统。</p><p>平台独立层，包装了常用的库和操作系统接口，供所有平台使用。</p><p>第三方中间件，提供了独立的解决方案，简化开发流程，缩短开发时间。包括标准库、图形接口等。</p><p>核心库，是由许许多多独立的软件工具库组成。这些库常常被引擎上层频繁使用，同时也是非常实用的软件工具。</p><p>资产管理层，提供资源增删改查的完整解决方案，通常会提供一组统一的接口，供引擎和业务去访问任意的游戏资源。</p><p>底层渲染器，提供最原始的渲染功能，根据应用层的数据调用图形API进行渲染。它通常会经过封装，从业务渲染提交的过程中拆解出来。</p><p>引擎核心层，为应用层提供了最核心的功能，包括音频、动画、物理、剔除与合批、手柄设备接口等。</p><p>引擎应用层，在核心层之上建立起来的引擎业务，包括性能剖析工具、UI核心框架、粒子系统、后处理系统等。</p><p>业务基础层，引擎为游戏框架搭建而做的基础功能，是提供给实现游戏逻辑的重要功能与接口。</p><p>游戏框架层，通过调用业务基础层来搭建的游戏框架，是游戏实现自身逻辑的框架，也是游戏逻辑的核心。</p><p>游戏业务层，是实现具体游戏业务的逻辑，通过调用游戏框架来实现具体的业务逻辑。</p><h3 id=\"游戏引擎架构图\">游戏引擎架构图</h3><p>在拆解了整个引擎的架构时，由于模块太多，因此只列了一些主要的模块，保持了基本架构的完整性：</p><p>架构图中的重要模块，将在后面的文章中做详细的分析和解剖。</p><h3 id=\"参考资料\">参考资料：</h3><p>《游戏引擎架构》 译者：叶劲峰</p><p>《3D游戏引擎发展史》</p><p>https://www.bilibili.com/read/cv6499569/</p><p>《游戏引擎wiki》</p><p>https://zh.wikipedia.org/wiki/%E6%B8%B8%E6%88%8F%E5%BC%95%E6%93%8E</p><p>《你不能不知道的计算机图形技术发展史》1、2</p><p>https://www.bilibili.com/read/cv196689</p><p>https://www.bilibili.com/read/cv221830</p><p>《了解图形接口》</p><p>https://www.jianshu.com/p/9dea5f163837</p><p>《图形API发展历史》</p><p>https://blog.csdn.net/ce1061183126/article/details/106159169</p><p>《卡通渲染 Wiki》</p><p>https://zh.wikipedia.org/wiki/%E5%8D%A1%E9%80%9A%E6%B8%B2%E6%9F%93</p><p>《高动态光照渲染》</p><p>https://zh.wikipedia.org/wiki/%E9%AB%98%E5%8A%A8%E6%80%81%E5%85%89%E7%85%A7%E6%B8%B2%E6%9F%93</p><p>《Metal Wiki》</p><p>https://en.wikipedia.org/wiki/Metal_(API)#History</p><p>《Direct3D Wiki》</p><p>https://en.wikipedia.org/wiki/Direct3D#Direct3D_12</p><p>《OpenGL Wiki》</p><p>https://en.wikipedia.org/wiki/OpenGL</p><p>《Vulkan Wiki》</p><p>https://en.wikipedia.org/wiki/Vulkan_(API)</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484890&amp;idx=1&amp;sn=1d319050c82fed232d22f1f3dfce0cd3&amp;chksm=fc2260ddcb55e9cbbda832e90def1e8e7440b7ffc85c60264be83d9c6bc62162c5b05839839b&amp;token=834275592&amp;lang=zh_CN#rd\">已发布在微信公众号上，点击跳转</a></p>",
            "url": "http://www.luzexi.com/2021/08/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B042",
            
            
            
            "tags": ["读书笔记","前端技术"],
            
            "date_published": "2021-08-29T00:00:00+08:00",
            "date_modified": "2021-08-29T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        }
    
    ]
}