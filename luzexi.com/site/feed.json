{
    "version": "https://jsonfeed.org/version/1",
    "title": "技术人生",
    "home_page_url": "http://www.luzexi.com/",
    "feed_url": "http://www.luzexi.com/feed.json",
    "description": "技术，哲学，金融",
    "icon": "http://www.luzexi.com/apple-touch-icon.png",
    "favicon": "http://www.luzexi.com/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "Jesse Lu",
        "url": "http://www.luzexi.com",
        "avatar": null
    },
    
"items": [
    
        {
            "id": "http://www.luzexi.com/2021/06/16/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A113",
            "title": "给女儿的信(十三) 要赢的是自己",
            "summary": "女儿 教育 亲情",
            "content_text": "Sharon，Anne，爸爸回到深圳了，很想你们哟。这里的天气和杭州一样暖，只是这里没有太多的雨。爸爸又回到了公司开始工作了。想起在家里和你们一起的这几天，爸爸很开心哟，爸爸喜欢和你们一起玩、一起学习。还记得Sharon跟爸爸一起玩拼图游戏的时候吗，Sharon老想着要和爸爸比谁快。爸爸跟你说，不要总想着和别人比，要和自己比。Sharon疑惑的问爸爸，什么是跟自己比。爸爸跟你说，爸爸以前也总是和别人比，但是和别人比总会让爸爸很紧张发挥不出真正的实力，因为爸爸总想赢，太着急了太在意了赢得也不轻松，输了就会很失落。所以当爸爸想着和别人比的时候，情绪波动很大，特别遇到比自己厉害很多的人时心情就更低落了。爸爸后来不和别人比了，因为这样太不好了，转而和自己比。怎么比呢，例如，去年我能看多少本书，今年我就比去年多看几本书。去年我能认识多少字，今年我就比去年的我多认识一些。每天坚持积累一些些，今天的我比昨天的我进步一些些，每天都在跟昨天的自己比，跟过去的自己比，我每次都能战胜过去的自己，我就像是不断战胜自己的勇士那样，充满了斗志。即使这样爸爸有时候也还是会陷入到和别人比较的陷进中去，但爸爸慢慢习惯和自己比赛后，挣脱出这种困境就越来越容易了。由于每天积累看书，帮助爸爸建立起了丰富的知识，让爸爸在工作和生活当中更加轻松自如哟。Sharon、Anne要和爸爸一起加油哟。爱你们。",
            "content_html": "<p>Sharon，Anne，爸爸回到深圳了，很想你们哟。</p><p>这里的天气和杭州一样暖，只是这里没有太多的雨。爸爸又回到了公司开始工作了。</p><p>想起在家里和你们一起的这几天，爸爸很开心哟，爸爸喜欢和你们一起玩、一起学习。</p><p>还记得Sharon跟爸爸一起玩拼图游戏的时候吗，Sharon老想着要和爸爸比谁快。</p><p>爸爸跟你说，不要总想着和别人比，要和自己比。</p><p>Sharon疑惑的问爸爸，什么是跟自己比。</p><p>爸爸跟你说，爸爸以前也总是和别人比，但是和别人比总会让爸爸很紧张发挥不出真正的实力，因为爸爸总想赢，太着急了太在意了赢得也不轻松，输了就会很失落。</p><p>所以当爸爸想着和别人比的时候，情绪波动很大，特别遇到比自己厉害很多的人时心情就更低落了。</p><p>爸爸后来不和别人比了，因为这样太不好了，转而和自己比。</p><p>怎么比呢，例如，去年我能看多少本书，今年我就比去年多看几本书。</p><p>去年我能认识多少字，今年我就比去年的我多认识一些。</p><p>每天坚持积累一些些，今天的我比昨天的我进步一些些，每天都在跟昨天的自己比，跟过去的自己比，我每次都能战胜过去的自己，我就像是不断战胜自己的勇士那样，充满了斗志。</p><p>即使这样爸爸有时候也还是会陷入到和别人比较的陷进中去，但爸爸慢慢习惯和自己比赛后，挣脱出这种困境就越来越容易了。</p><p>由于每天积累看书，帮助爸爸建立起了丰富的知识，让爸爸在工作和生活当中更加轻松自如哟。</p><p>Sharon、Anne要和爸爸一起加油哟。爱你们。</p>",
            "url": "http://www.luzexi.com/2021/06/16/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A113",
            
            
            
            
            
            "date_published": "2021-06-16T00:00:00+08:00",
            "date_modified": "2021-06-16T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/06/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B027",
            "title": "读书笔记(二十七) 《装载、链接与库》#1",
            "summary": "读书 书 看书 读后感",
            "content_text": "原文发布在微信公众号上，点击跳转到网页地址背景：看此书的起源是我在了解Linux注入技术的时候翻阅到的，由于注入技术需要用到很多ELF格式的内容，很多网络上的技术文章都指向了同一本书。也刚好周围的同事有此书，便翻阅了一下，这一番翻阅打开了我对程序世界的又一扇大门。很快我就自己买了此书并阅读完成，整本书给我很大的震撼，让我对程序从编译到链接到装载有了更深刻的认识。为了能更好的巩固知识，我把我的整个学习过程以及对书本的理解，用自己的语言和自己画的图表达出来，让读者能够很好的接受到我所学的知识。目标：了解编译过程了解动态库和静态库的装载细节了解可执行程序装载和执行过程了解可执行文件和动态库的数据格式疑问：c/c++编译器是如何将cpp编译为可执行文件的？多个c/c++文件是如何编译成一个可执行文件的？操作系统内存是如何初始化和管理的？动态库和静态库的链接和装载过程是怎样的？操作系统的用户态和内核态是如何运作的？正文：原文发布在微信公众号上，点击跳转到网页地址",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484732&amp;idx=1&amp;sn=e53f438b8815df3840208d7caa36f4f7&amp;chksm=fc22603bcb55e92debcabe242e42139c805b56addbc5993c1f521e967806f5bb76d62b0bb612&amp;token=890029854&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p><h2 id=\"背景\">背景：</h2><p>看此书的起源是我在了解Linux注入技术的时候翻阅到的，由于注入技术需要用到很多ELF格式的内容，很多网络上的技术文章都指向了同一本书。也刚好周围的同事有此书，便翻阅了一下，这一番翻阅打开了我对程序世界的又一扇大门。</p><p>很快我就自己买了此书并阅读完成，整本书给我很大的震撼，让我对程序从编译到链接到装载有了更深刻的认识。</p><p>为了能更好的巩固知识，我把我的整个学习过程以及对书本的理解，用自己的语言和自己画的图表达出来，让读者能够很好的接受到我所学的知识。</p><h2 id=\"目标\">目标：</h2><p>了解编译过程</p><p>了解动态库和静态库的装载细节</p><p>了解可执行程序装载和执行过程</p><p>了解可执行文件和动态库的数据格式</p><h2 id=\"疑问\">疑问：</h2><p>c/c++编译器是如何将cpp编译为可执行文件的？</p><p>多个c/c++文件是如何编译成一个可执行文件的？</p><p>操作系统内存是如何初始化和管理的？</p><p>动态库和静态库的链接和装载过程是怎样的？</p><p>操作系统的用户态和内核态是如何运作的？</p><h2 id=\"正文\">正文：</h2><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484732&amp;idx=1&amp;sn=e53f438b8815df3840208d7caa36f4f7&amp;chksm=fc22603bcb55e92debcabe242e42139c805b56addbc5993c1f521e967806f5bb76d62b0bb612&amp;token=890029854&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p>",
            "url": "http://www.luzexi.com/2021/06/14/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B027",
            
            
            
            
            
            "date_published": "2021-06-14T00:00:00+08:00",
            "date_modified": "2021-06-14T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/06/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B026",
            "title": "读书笔记(二十六) 《C++ Primer》#2",
            "summary": "读书 书 看书 读后感",
            "content_text": "原文发布在微信公众号上，点击跳转到网页地址背景：我为什么要重学C++？第一是巩固核心，软件编程有三大核心，语言、操作系统、框架设计，语言首当其冲，核心能力大都看不见摸不着只有你自己知道的东西。第二是将分散的知识串联起来，这样就能产生新的知识和新的创意。第三是当我们在巩固时创造出了新的知识，那么这些新的知识和旧的知识将同时变成智慧融合到身体中。本系列基于《C++ Primer》学习，由于重点放在“重学”，我略过了滚瓜烂熟的部分挑出以前常忽略的部分，以及记忆没有那么深刻的部分，特别是那些重要的但没有上心的部分。开始1.const限定关键字const对变量的类型加以限定，因此它的值在初始化后不能被改变。const默认情况下只在文件内生效，当需要支持多个文件共享时，则使用extern关键字，不管定义和声明都添加extern关键字，并且只需要定义一次。//a.cppextern const int test_constVar = fcn();//b.cppextern const int test_constVar;通过添加extern共享const变量。const引用（常量引用）与普通引用不同的是，常量引用不能被用作它修改它所绑定的对象。const int ci = 10;const int &amp;r1 = ci;r1 = 40; //错误，常量引用不能修改绑定对象int &amp;r2 = ci; //错误，普通引用无法赋值常量严格来说，并不存在常量引用。因为引用不是一个对象，所以我们没法让引用本身恒定不变。事实上，由于c++语言并不允许随意改变引用所绑定的对象，所以从这层意义上理解所有的引用又都算是常量。引用的对象是常量还是非常量可以决定其所能参与的操作，却无论如何都不会影响到引用和对象的绑定关系。简单来说，由于绑定对象无法改变，所以要求引用对象也不能改变。但const引用可以绑定一个非const对象，其意义为，绑定后const引用无法改变，只能由所绑定的对象来决定内容。const指针（常量指针）const指针与const引用有同样的规则。const指针在初始化后无法改变，const指针不能改变所指对象的值，但可以指向非常量变量。当指向非常量时，const指针所指向的对象的值，只能由对象本身来决定。C++11中，用constexpr来表示常量表达式，声明为constexpr的变量是一个常量，编译器会验证变量的值是否为常量表达式并离线计算该值。constexpr int mf = 20 + 1; //离线计算constexpr int limit = mf + 1; //离线计算constexpr int sz = size(); // size()必须是constexpr函数2.类型别名类型别名是某种类型的同义词。使用类型别名是为了让复杂的类型名字变得简单明了、易于理解和使用。C++11新标准中，使用using来定义类型的别名typedef double wages; //wages是double的同义词typedef wages base, *p; //base是double的同义词，并且p是double*的同义词typedef char *pstring; //pstring 是char*的同义词using It = Item_test; // It 是Item_test的同义词//定义wages test1; //定义double 变量It item; //定义Item_test 变量pstring cstr = 0; //定义一个char *3.其他auto和decltype都是用来让编译器在离线下自动识别类型的关键字。其中decltype着重识别结果类型与表达式的关系。预处理器能确保头文件多次包含仍能安全工作，它在编译之前被执行。 #include、#define、#ifdef、#ifndef都是预处理关键字。第3章1.string字符串类前面说using可以用于类型别名，using也可以用于声明命名空间。using namespace::name不过头文件中不应包含using声明，因为这会导致头文件在被拷贝时多次重复声明using。string是标准库中的类对象。string在使用中最容易发生的问题就是拷贝。特别是等号(=、+)引起的合并和拷贝需要注意。string在比较时(==、!=、&lt;、&lt;=、&gt;、&gt;=)有比较算法但每个字符都会比较。严格来说string对象不属于容器类型，但string支持很多与容器类似的操作，比如下标、迭代器等。2.vector动态数组vector是标准中的动态数组模版库。模版本身不是类或函数，可以把模版看成编译器生成的类或函数。编译器根据模版创建类或函数的过程称为实例化。因此使用模版时，我们要指出编译器应把类或函数实例化成何种类型。因此vector是模版而非类型，由vector生成的类才叫类型。vector容器本身就是对象，因此也能通过拷贝初始化。vector&lt;int&gt; v1 = {1,2,3}; // 初始化3个元素，1、2、3vector&lt;int&gt; v2(10,-1); // 初始化10个元素，都是-1vector&lt;int&gt; v3 = v1; // 用拷贝来初始化，将v1中的数据拷贝到v3，完成后v3拥有独立的数据vector&lt;int&gt; v4(20); // 提前预备20个值，每个值都是0由于vector是动态数组，因此如果能在初始化时提前告知vector的话，vector就不用扩容了，运行时性能会更好。3.迭代器迭代器有三种不同含意，一是迭代器概念本身，二是容器定义的迭代器类型，三是指某个迭代器对象。有时她跟指针很像，但又完全不一样。其实迭代器是个由模版封装过的类，根据不同的类型的容器，编译器生成功能相似但命名不同的类。迭代器又重写了==、&gt;、&lt;、!=、&lt;=、&gt;=、+=、-=运算符，使得我们在编写代码时更加方便。共识：当使用迭代器时如果对容器做了增删操作，则会使得迭代器失效，甚至报错和崩溃。迭代器对象是实时生成的，当我们获取迭代器对象时，容器会实时生成一个迭代器对象，我们再通过操作这个迭代器对象达成我们的目的。4.数组一些复杂的数组声明难以理解，因此如果能从数组的名字开始按照由内向外的顺序阅读会更加容易些。int arr[10]; // 普通数组含有10个整数int *ptrs[10]; // ptrs是含有10个整数指针的数组int (*Parray)[10] = &amp;arr; // Parray指向一个含有10个整数的数组int (&amp;arrRef)[10] = arr; // arrRef引用一个含有10个整数的数组int *(&amp;arry)[10] = ptrs; //arry是数组的引用，该数组含有10个整数指针数组真正使用的时候编译器会把它转成指针。因此指向数组的指针可以使用+、-、==、!=运算符号来操作数组。int arr[] = {0,1,2,3};int *p = arr;++p;int *e = &amp;arr[4]; // e指向arr元素的下一位置for(int *b = arr; b!=e ; ++b)    cout &lt;&lt; *b &lt;&lt; endl;至于多维数组，严格来说C++中没有多维数组，通常所说的多维数组其实是数组的数组，也就是用数组类型组成的数组。其中要注意的是在多维数组遍历时，其遍历顺序应该按照数组的整块内存来遍历，否则命中效率比较低。原文发布在微信公众号上，点击跳转到网页地址",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484732&amp;idx=3&amp;sn=13204e3fd9171849653497a8c788c649&amp;chksm=fc22603bcb55e92dfe641a5066c21000b70a3a03a61d2c691324b23a20ae3fffeef40a70facd&amp;token=890029854&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p><h2 id=\"背景\">背景：</h2><p>我为什么要重学C++？第一是巩固核心，软件编程有三大核心，语言、操作系统、框架设计，语言首当其冲，核心能力大都看不见摸不着只有你自己知道的东西。第二是将分散的知识串联起来，这样就能产生新的知识和新的创意。第三是当我们在巩固时创造出了新的知识，那么这些新的知识和旧的知识将同时变成智慧融合到身体中。</p><p>本系列基于《C++ Primer》学习，由于重点放在“重学”，我略过了滚瓜烂熟的部分挑出以前常忽略的部分，以及记忆没有那么深刻的部分，特别是那些重要的但没有上心的部分。</p><h2 id=\"开始\">开始</h2><h2 id=\"1const限定\">1.const限定</h2><p>关键字const对变量的类型加以限定，因此它的值在初始化后不能被改变。</p><p>const默认情况下只在文件内生效，当需要支持多个文件共享时，则使用extern关键字，不管定义和声明都添加extern关键字，并且只需要定义一次。</p><figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"c1\">//a.cpp</span><span class=\"k\">extern</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">test_constVar</span> <span class=\"o\">=</span> <span class=\"n\">fcn</span><span class=\"p\">();</span><span class=\"c1\">//b.cpp</span><span class=\"k\">extern</span> <span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">test_constVar</span><span class=\"p\">;</span></code></pre></figure><p>通过添加extern共享const变量。</p><h2 id=\"const引用常量引用\">const引用（常量引用）</h2><p>与普通引用不同的是，常量引用不能被用作它修改它所绑定的对象。</p><figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">ci</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">r1</span> <span class=\"o\">=</span> <span class=\"n\">ci</span><span class=\"p\">;</span><span class=\"n\">r1</span> <span class=\"o\">=</span> <span class=\"mi\">40</span><span class=\"p\">;</span> <span class=\"c1\">//错误，常量引用不能修改绑定对象</span><span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"n\">ci</span><span class=\"p\">;</span> <span class=\"c1\">//错误，普通引用无法赋值常量</span></code></pre></figure><p>严格来说，并不存在常量引用。因为引用不是一个对象，所以我们没法让引用本身恒定不变。事实上，由于c++语言并不允许随意改变引用所绑定的对象，所以从这层意义上理解所有的引用又都算是常量。引用的对象是常量还是非常量可以决定其所能参与的操作，却无论如何都不会影响到引用和对象的绑定关系。简单来说，由于绑定对象无法改变，所以要求引用对象也不能改变。</p><p>但const引用可以绑定一个非const对象，其意义为，绑定后const引用无法改变，只能由所绑定的对象来决定内容。</p><h2 id=\"const指针常量指针\">const指针（常量指针）</h2><p>const指针与const引用有同样的规则。const指针在初始化后无法改变，const指针不能改变所指对象的值，但可以指向非常量变量。当指向非常量时，const指针所指向的对象的值，只能由对象本身来决定。</p><p>C++11中，用constexpr来表示常量表达式，声明为constexpr的变量是一个常量，编译器会验证变量的值是否为常量表达式并离线计算该值。</p><figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"k\">constexpr</span> <span class=\"kt\">int</span> <span class=\"n\">mf</span> <span class=\"o\">=</span> <span class=\"mi\">20</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">//离线计算</span><span class=\"k\">constexpr</span> <span class=\"kt\">int</span> <span class=\"n\">limit</span> <span class=\"o\">=</span> <span class=\"n\">mf</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">//离线计算</span><span class=\"k\">constexpr</span> <span class=\"kt\">int</span> <span class=\"n\">sz</span> <span class=\"o\">=</span> <span class=\"n\">size</span><span class=\"p\">();</span> <span class=\"c1\">// size()必须是constexpr函数</span></code></pre></figure><h2 id=\"2类型别名\">2.类型别名</h2><p>类型别名是某种类型的同义词。</p><p>使用类型别名是为了让复杂的类型名字变得简单明了、易于理解和使用。</p><p>C++11新标准中，使用using来定义类型的别名</p><figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"k\">typedef</span> <span class=\"kt\">double</span> <span class=\"n\">wages</span><span class=\"p\">;</span> <span class=\"c1\">//wages是double的同义词</span><span class=\"k\">typedef</span> <span class=\"n\">wages</span> <span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">p</span><span class=\"p\">;</span> <span class=\"c1\">//base是double的同义词，并且p是double*的同义词</span><span class=\"k\">typedef</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">pstring</span><span class=\"p\">;</span> <span class=\"c1\">//pstring 是char*的同义词</span><span class=\"k\">using</span> <span class=\"n\">It</span> <span class=\"o\">=</span> <span class=\"n\">Item_test</span><span class=\"p\">;</span> <span class=\"c1\">// It 是Item_test的同义词</span><span class=\"c1\">//定义</span><span class=\"n\">wages</span> <span class=\"n\">test1</span><span class=\"p\">;</span> <span class=\"c1\">//定义double 变量</span><span class=\"n\">It</span> <span class=\"n\">item</span><span class=\"p\">;</span> <span class=\"c1\">//定义Item_test 变量</span><span class=\"n\">pstring</span> <span class=\"n\">cstr</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">//定义一个char *</span></code></pre></figure><h2 id=\"3其他\">3.其他</h2><p>auto和decltype都是用来让编译器在离线下自动识别类型的关键字。其中decltype着重识别结果类型与表达式的关系。</p><p>预处理器能确保头文件多次包含仍能安全工作，它在编译之前被执行。</p><figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"> <span class=\"cp\">#include、#define、#ifdef、#ifndef都是预处理关键字。</span></code></pre></figure><h2 id=\"第3章\">第3章</h2><h2 id=\"1string字符串类\">1.string字符串类</h2><p>前面说using可以用于类型别名，using也可以用于声明命名空间。using namespace::name不过头文件中不应包含using声明，因为这会导致头文件在被拷贝时多次重复声明using。</p><p>string是标准库中的类对象。string在使用中最容易发生的问题就是拷贝。特别是等号(=、+)引起的合并和拷贝需要注意。string在比较时(==、!=、&lt;、&lt;=、&gt;、&gt;=)有比较算法但每个字符都会比较。</p><p>严格来说string对象不属于容器类型，但string支持很多与容器类似的操作，比如下标、迭代器等。</p><h2 id=\"2vector动态数组\">2.vector动态数组</h2><p>vector是标准中的动态数组模版库。模版本身不是类或函数，可以把模版看成编译器生成的类或函数。编译器根据模版创建类或函数的过程称为实例化。因此使用模版时，我们要指出编译器应把类或函数实例化成何种类型。因此vector是模版而非类型，由vector生成的类才叫类型。</p><p>vector容器本身就是对象，因此也能通过拷贝初始化。</p><figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">v1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">};</span> <span class=\"c1\">// 初始化3个元素，1、2、3</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">v2</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">);</span> <span class=\"c1\">// 初始化10个元素，都是-1</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">v3</span> <span class=\"o\">=</span> <span class=\"n\">v1</span><span class=\"p\">;</span> <span class=\"c1\">// 用拷贝来初始化，将v1中的数据拷贝到v3，完成后v3拥有独立的数据</span><span class=\"n\">vector</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">v4</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">);</span> <span class=\"c1\">// 提前预备20个值，每个值都是0</span></code></pre></figure><p>由于vector是动态数组，因此如果能在初始化时提前告知vector的话，vector就不用扩容了，运行时性能会更好。</p><h2 id=\"3迭代器\">3.迭代器</h2><p>迭代器有三种不同含意，一是迭代器概念本身，二是容器定义的迭代器类型，三是指某个迭代器对象。</p><p>有时她跟指针很像，但又完全不一样。</p><p>其实迭代器是个由模版封装过的类，根据不同的类型的容器，编译器生成功能相似但命名不同的类。</p><p>迭代器又重写了==、&gt;、&lt;、!=、&lt;=、&gt;=、+=、-=运算符，使得我们在编写代码时更加方便。</p><p>共识：当使用迭代器时如果对容器做了增删操作，则会使得迭代器失效，甚至报错和崩溃。</p><p>迭代器对象是实时生成的，当我们获取迭代器对象时，容器会实时生成一个迭代器对象，我们再通过操作这个迭代器对象达成我们的目的。</p><h2 id=\"4数组\">4.数组</h2><p>一些复杂的数组声明难以理解，因此如果能从数组的名字开始按照由内向外的顺序阅读会更加容易些。</p><figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">];</span> <span class=\"c1\">// 普通数组含有10个整数</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">ptrs</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">];</span> <span class=\"c1\">// ptrs是含有10个整数指针的数组</span><span class=\"kt\">int</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">Parray</span><span class=\"p\">)[</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">arr</span><span class=\"p\">;</span> <span class=\"c1\">// Parray指向一个含有10个整数的数组</span><span class=\"kt\">int</span> <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arrRef</span><span class=\"p\">)[</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">;</span> <span class=\"c1\">// arrRef引用一个含有10个整数的数组</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arry</span><span class=\"p\">)[</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ptrs</span><span class=\"p\">;</span> <span class=\"c1\">//arry是数组的引用，该数组含有10个整数指针</span></code></pre></figure><p>数组真正使用的时候编译器会把它转成指针。因此指向数组的指针可以使用+、-、==、!=运算符号来操作数组。</p><figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"kt\">int</span> <span class=\"n\">arr</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">};</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">;</span><span class=\"o\">++</span><span class=\"n\">p</span><span class=\"p\">;</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">];</span> <span class=\"c1\">// e指向arr元素的下一位置</span><span class=\"k\">for</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">arr</span><span class=\"p\">;</span> <span class=\"n\">b</span><span class=\"o\">!=</span><span class=\"n\">e</span> <span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">b</span><span class=\"p\">)</span>    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">*</span><span class=\"n\">b</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span></code></pre></figure><p>至于多维数组，严格来说C++中没有多维数组，通常所说的多维数组其实是数组的数组，也就是用数组类型组成的数组。</p><p>其中要注意的是在多维数组遍历时，其遍历顺序应该按照数组的整块内存来遍历，否则命中效率比较低。</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484732&amp;idx=3&amp;sn=13204e3fd9171849653497a8c788c649&amp;chksm=fc22603bcb55e92dfe641a5066c21000b70a3a03a61d2c691324b23a20ae3fffeef40a70facd&amp;token=890029854&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p>",
            "url": "http://www.luzexi.com/2021/06/12/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B026",
            
            
            
            
            
            "date_published": "2021-06-12T00:00:00+08:00",
            "date_modified": "2021-06-12T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/06/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B025",
            "title": "读书笔记(二十五) 《C++ Primer》#1",
            "summary": "读书 书 看书 读后感",
            "content_text": "原文发布在微信公众号上，点击跳转到网页地址背景：我为什么要重学C++？第一是巩固核心，软件编程有三大核心，语言、操作系统、框架设计，语言首当其冲，核心能力大都看不见摸不着只有你自己知道的东西。第二是将分散的知识串联起来，这样就能产生新的知识和新的创意，将这些知识变成智慧融合到身体中。本系列基于《C++ Primer》学习，重学的时候，我略过了滚瓜烂熟的部分，挑出以前忽略的，以及记忆没有那么深刻的，特别是那些重要的但以前没有上心的部分。开始使用命令行界面来学习c++会更好一些，这种学习方式可以让你将精力集中在c++语言本身上，一旦掌握了语言，使用和学习IDE编辑器通常也更容易些。.h文件作为头文件只是程序员的习惯，头文件后缀并没有特定的规范，通常为了方便查看都以.h为后缀。编译器一般不关心文件名的形式，但有的IDE对此有特定要求。c++基础c++是一种静态数据类型语言，它的类型检查发生在编译时。因此，编译器必须知道程序中每一个变量对应的数据类型。c++提供了一组内置数据类型、相应的运算符、以及为数不多的程序流控制语句，这些元素共同构成了c++语言的基本形态。仅就c++的基本形态来说，它是一种简单的编程语言。但其强大的能力显示于它对程序员自定义数据结构的支持，程序员可以通过自主定义新的数据结构来使语言满足他们各自的需求。省略掉一些简单变量类型的内容，将一些特别需要注意，以及大家常忽略又比较重要的内容提取出来。类型转换      char在一些机器上是有符号的，另一些机器上则是无符号的。        当我们赋值给一个无符号类型的变量一个超出它范围的值时，结果是总数取模后的余数。        当我们赋值给带符号类型一个超出他范围的值时，结果是未定义（不可预测）。        切勿混用有符号和无符号的类型，如果表达式里既有带符号又有无符号类型，带符号的数会自动转换成无符号，如果是个负数则会出现异常结果。  无法预知的行为源于编译器无须检查的错误。在某些情况或某些编译器下，含有无法预知行为的程序也能正确执行。不可移植通常都是程序依赖了环境，或操作系统环境或编译器环境，程序应该尽量避免依赖于实现环境的行为。例如我们把 int 的尺寸看成一个固定不变的值，这样的程序就称为不可移植。变量何为对象？对象就是指一块能存储数据并具有某种类型的内存空间。初始化是一个复杂的过程，很多程序员对于初始化的认识，停留在=等号赋值的认知上。事实上它完全不是这样的。它有构造、拷贝、赋值三种途径，且有默认构造、未初始化、定义与声明三个容易出错的地方。初始化并不一定被默认执行，这是因为并对象不一定有默认构造函数，且有些编译器构造的默认构造函数并不一定会去初始化变量，这导致一个未被初始化的变量在拷贝和访问时就会引发错误，因此我们最好自己主动的去初始化每个变量。c++支持分离式编译，允许将程序分为若干个文件，每个文件可被独立编译。因此我们可以把变量的定义和声明区分开来，即在某个文件中定义，在另一些文件中声明后再使用。变量能且只能定义一次，但可以被多次声明，在声明时不能重复初始化：// a.cppint global_index = 5; //定义// b.cppextern int global_index; //声明global_index += 5;// c.cppextern int global_index; //声明global_index -= 2;如上代码中，a.cpp中定义了global_index并初始化为5，在b.cpp和c.cpp中使用。复合类型复合类型有两种，即引用和指针。引用特点：\t引用本身不是对象，而它必须绑定一个对象。\t引用在定义时必须被初始化，它不能为空。\t引用在初始化后，与它的值绑定在一起，并且无法再重新绑定到另外的对象上。指针特点：\t指针本身就有自己的对象概念，存放的是对象的地址，可为null也可以为具体的指针值。\t指针无须在定义时初始化（未初始化有风险），可以为空，也可以指向某个对象，也可能是无效的野指针。引用和指针通过，取地址符（&amp;），解引用（*）来操作，我们来举个例子：int dval = 5; // 初始化int &amp;tval = dval; // 绑定dvalint *pd = &amp;dval; // 取地址，赋值给指针*pd = 3; // 此时dval 为3，tval也为3，*pd也为3特殊指针：\t1.c++11中引入了nullptr的空指针类型，以前用的NULL空指针，其实质是一个宏预处理，NULL定义在cstdlib中值为0。\t\t2.void*也是特殊指针，可用于存放任意对象地址。但不能操作void*指针所指的对象，因为我们并不知道这个对象到底是什么类型，它仅仅是内存空间。原文发布在微信公众号上，点击跳转到网页地址",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484732&amp;idx=2&amp;sn=cbf9e354ddf1157c9913d7e4fc3ad41f&amp;chksm=fc22603bcb55e92dd8e5fdd6210f007c072f1208ecf85a081f0273f26e54ff95ad9d219d2094&amp;token=890029854&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p><h2 id=\"背景\">背景：</h2><p>我为什么要重学C++？第一是巩固核心，软件编程有三大核心，语言、操作系统、框架设计，语言首当其冲，核心能力大都看不见摸不着只有你自己知道的东西。第二是将分散的知识串联起来，这样就能产生新的知识和新的创意，将这些知识变成智慧融合到身体中。</p><p>本系列基于《C++ Primer》学习，重学的时候，我略过了滚瓜烂熟的部分，挑出以前忽略的，以及记忆没有那么深刻的，特别是那些重要的但以前没有上心的部分。</p><h2 id=\"开始\">开始</h2><p>使用命令行界面来学习c++会更好一些，这种学习方式可以让你将精力集中在c++语言本身上，一旦掌握了语言，使用和学习IDE编辑器通常也更容易些。</p><p>.h文件作为头文件只是程序员的习惯，头文件后缀并没有特定的规范，通常为了方便查看都以.h为后缀。</p><p>编译器一般不关心文件名的形式，但有的IDE对此有特定要求。</p><h2 id=\"c基础\">c++基础</h2><p>c++是一种静态数据类型语言，它的类型检查发生在编译时。因此，编译器必须知道程序中每一个变量对应的数据类型。</p><p>c++提供了一组内置数据类型、相应的运算符、以及为数不多的程序流控制语句，这些元素共同构成了c++语言的基本形态。</p><p>仅就c++的基本形态来说，它是一种简单的编程语言。</p><p>但其强大的能力显示于它对程序员自定义数据结构的支持，程序员可以通过自主定义新的数据结构来使语言满足他们各自的需求。</p><p>省略掉一些简单变量类型的内容，将一些特别需要注意，以及大家常忽略又比较重要的内容提取出来。</p><p>类型转换</p><ol>  <li>    <p>char在一些机器上是有符号的，另一些机器上则是无符号的。</p>  </li>  <li>    <p>当我们赋值给一个无符号类型的变量一个超出它范围的值时，结果是总数取模后的余数。</p>  </li>  <li>    <p>当我们赋值给带符号类型一个超出他范围的值时，结果是未定义（不可预测）。</p>  </li>  <li>    <p>切勿混用有符号和无符号的类型，如果表达式里既有带符号又有无符号类型，带符号的数会自动转换成无符号，如果是个负数则会出现异常结果。</p>  </li></ol><p>无法预知的行为源于编译器无须检查的错误。在某些情况或某些编译器下，含有无法预知行为的程序也能正确执行。</p><p>不可移植通常都是程序依赖了环境，或操作系统环境或编译器环境，程序应该尽量避免依赖于实现环境的行为。例如我们把 int 的尺寸看成一个固定不变的值，这样的程序就称为不可移植。</p><h2 id=\"变量\">变量</h2><p>何为对象？对象就是指一块能存储数据并具有某种类型的内存空间。</p><p>初始化是一个复杂的过程，很多程序员对于初始化的认识，停留在=等号赋值的认知上。事实上它完全不是这样的。</p><p>它有构造、拷贝、赋值三种途径，且有默认构造、未初始化、定义与声明三个容易出错的地方。</p><p>初始化并不一定被默认执行，这是因为并对象不一定有默认构造函数，且有些编译器构造的默认构造函数并不一定会去初始化变量，这导致一个未被初始化的变量在拷贝和访问时就会引发错误，因此我们最好自己主动的去初始化每个变量。</p><p>c++支持分离式编译，允许将程序分为若干个文件，每个文件可被独立编译。</p><p>因此我们可以把变量的定义和声明区分开来，即在某个文件中定义，在另一些文件中声明后再使用。</p><p>变量能且只能定义一次，但可以被多次声明，在声明时不能重复初始化：</p><figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"c1\">// a.cpp</span><span class=\"kt\">int</span> <span class=\"n\">global_index</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"c1\">//定义</span><span class=\"c1\">// b.cpp</span><span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"n\">global_index</span><span class=\"p\">;</span> <span class=\"c1\">//声明</span><span class=\"n\">global_index</span> <span class=\"o\">+=</span> <span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"c1\">// c.cpp</span><span class=\"k\">extern</span> <span class=\"kt\">int</span> <span class=\"n\">global_index</span><span class=\"p\">;</span> <span class=\"c1\">//声明</span><span class=\"n\">global_index</span> <span class=\"o\">-=</span> <span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"err\">如上代码中，</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">cpp</span><span class=\"err\">中定义了</span><span class=\"n\">global_index</span><span class=\"err\">并初始化为</span><span class=\"mi\">5</span><span class=\"err\">，在</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">cpp</span><span class=\"err\">和</span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">cpp</span><span class=\"err\">中使用。</span></code></pre></figure><h2 id=\"复合类型\">复合类型</h2><p>复合类型有两种，即引用和指针。</p><p>引用特点：</p><pre><code>\t引用本身不是对象，而它必须绑定一个对象。\t引用在定义时必须被初始化，它不能为空。\t引用在初始化后，与它的值绑定在一起，并且无法再重新绑定到另外的对象上。</code></pre><p>指针特点：</p><pre><code>\t指针本身就有自己的对象概念，存放的是对象的地址，可为null也可以为具体的指针值。\t指针无须在定义时初始化（未初始化有风险），可以为空，也可以指向某个对象，也可能是无效的野指针。</code></pre><p>引用和指针通过，取地址符（&amp;），解引用（*）来操作，我们来举个例子：</p><figure class=\"highlight\"><pre><code class=\"language-c--\" data-lang=\"c++\"><span class=\"kt\">int</span> <span class=\"n\">dval</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">;</span> <span class=\"c1\">// 初始化</span><span class=\"kt\">int</span> <span class=\"o\">&amp;</span><span class=\"n\">tval</span> <span class=\"o\">=</span> <span class=\"n\">dval</span><span class=\"p\">;</span> <span class=\"c1\">// 绑定dval</span><span class=\"kt\">int</span> <span class=\"o\">*</span><span class=\"n\">pd</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">dval</span><span class=\"p\">;</span> <span class=\"c1\">// 取地址，赋值给指针</span><span class=\"o\">*</span><span class=\"n\">pd</span> <span class=\"o\">=</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"c1\">// 此时dval 为3，tval也为3，*pd也为3</span></code></pre></figure><p>特殊指针：</p><pre><code>\t1.c++11中引入了nullptr的空指针类型，以前用的NULL空指针，其实质是一个宏预处理，NULL定义在cstdlib中值为0。\t\t2.void*也是特殊指针，可用于存放任意对象地址。但不能操作void*指针所指的对象，因为我们并不知道这个对象到底是什么类型，它仅仅是内存空间。</code></pre><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484732&amp;idx=2&amp;sn=cbf9e354ddf1157c9913d7e4fc3ad41f&amp;chksm=fc22603bcb55e92dd8e5fdd6210f007c072f1208ecf85a081f0273f26e54ff95ad9d219d2094&amp;token=890029854&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p>",
            "url": "http://www.luzexi.com/2021/06/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B025",
            
            
            
            
            
            "date_published": "2021-06-07T00:00:00+08:00",
            "date_modified": "2021-06-07T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/05/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B024",
            "title": "读书笔记(二十四) 《如何高效阅读 - 中》",
            "summary": "读书 书 看书 读后感",
            "content_text": "原文发布在微信公众号上，点击跳转到网页地址背景：看了很多书，也总结过很多书，对如何看书以及如何总结书本仍然迷茫。所以自己找了3本书，《如何阅读》、《如何阅读一本书》、《如何高效阅读一本书》，专门针对这三本书做了仔细的总结和分析。我把文章分为上、中、下三篇，本篇为中篇，讲的是《如何阅读一本书》这本书。书中有几个方法和框架，无论你是完全照做，或只是掌握个形式，你都得了解要如何跟着规则走，这是第一步。只有了解规则怎么走，熟悉了规则，才会能逐渐掌握。就像我们在学习新知识的时候那样，可能一开始只是模仿，只是形式上的掌握，没有触及技巧的灵魂。随着我们熟练度的深入，规则越来越熟悉，技巧越来越熟练，也就慢慢地将技巧的灵魂融入到我们的身体中甚至生活习惯中。下面我们就来看看书中是怎么论述阅读规则和技巧的。简要总结：      阅读有四个层次，基础阅读、检视阅读、分析阅读、主题阅读。        主动阅读就是带着目的阅读，在阅读前提出问题，带着问题阅读，并且在多次重复阅读中回答问题。最后阅读完成用自己的语言写大纲和评价。        主题阅读需要阅读很多同一主题的书，然后再做分析和讨论。        针对不同类型的读物，我们需要用不同类型的方法。        珍惜一本好书的方法，就是读很多遍，甚至是一辈子都在读。        主动阅读对我们各方面的帮助都会很大。  正文：原文发布在微信公众号上，点击跳转到网页地址",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484709&amp;idx=1&amp;sn=4c609d7afb6e41db78948f7797e31de6&amp;chksm=fc226022cb55e934935d6df6b188978331f28a6854abd70eec313fc71d225a709bdcbd291af0&amp;token=679775473&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p><h2 id=\"背景\">背景：</h2><p>看了很多书，也总结过很多书，对如何看书以及如何总结书本仍然迷茫。所以自己找了3本书，《如何阅读》、《如何阅读一本书》、《如何高效阅读一本书》，专门针对这三本书做了仔细的总结和分析。我把文章分为上、中、下三篇，本篇为中篇，讲的是《如何阅读一本书》这本书。</p><p>书中有几个方法和框架，无论你是完全照做，或只是掌握个形式，你都得了解要如何跟着规则走，这是第一步。</p><p>只有了解规则怎么走，熟悉了规则，才会能逐渐掌握。就像我们在学习新知识的时候那样，可能一开始只是模仿，只是形式上的掌握，没有触及技巧的灵魂。随着我们熟练度的深入，规则越来越熟悉，技巧越来越熟练，也就慢慢地将技巧的灵魂融入到我们的身体中甚至生活习惯中。</p><p>下面我们就来看看书中是怎么论述阅读规则和技巧的。</p><h2 id=\"简要总结\">简要总结：</h2><ol>  <li>    <p>阅读有四个层次，基础阅读、检视阅读、分析阅读、主题阅读。</p>  </li>  <li>    <p>主动阅读就是带着目的阅读，在阅读前提出问题，带着问题阅读，并且在多次重复阅读中回答问题。最后阅读完成用自己的语言写大纲和评价。</p>  </li>  <li>    <p>主题阅读需要阅读很多同一主题的书，然后再做分析和讨论。</p>  </li>  <li>    <p>针对不同类型的读物，我们需要用不同类型的方法。</p>  </li>  <li>    <p>珍惜一本好书的方法，就是读很多遍，甚至是一辈子都在读。</p>  </li>  <li>    <p>主动阅读对我们各方面的帮助都会很大。</p>  </li></ol><h2 id=\"正文\">正文：</h2><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484709&amp;idx=1&amp;sn=4c609d7afb6e41db78948f7797e31de6&amp;chksm=fc226022cb55e934935d6df6b188978331f28a6854abd70eec313fc71d225a709bdcbd291af0&amp;token=679775473&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p>",
            "url": "http://www.luzexi.com/2021/05/29/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B024",
            
            
            
            
            
            "date_published": "2021-05-29T00:00:00+08:00",
            "date_modified": "2021-05-29T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/05/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B023",
            "title": "读书笔记(二十三) 《如何高效阅读 - 上》",
            "summary": "读书 书 看书 读后感",
            "content_text": "原文发布在微信公众号上，点击跳转到网页地址背景：看了很多书，也总结了很多书，但对读书这个词语越来越迷茫。迷茫的是，不知道自己的阅读习惯是否真的好，自己的阅读效率是否真的高，我对自己的阅读能力不自信。因此买了三本经典阅读技巧书，一本是《如何阅读一本书》、另一个本是《如何阅读》，再加上去年读过的《如何有效阅读一本书》，三本书加起来，对阅读的技巧和效率做一个巩固和总结。因此我把此系列总结文章分成三部分，上、中、下，本文是上篇。本文总结的是《如何阅读》这本书，它主要讲的主题是，如何提高我们的阅读速度。阅读速度是否是阅读的关键呢，我认为是的，但也认为不是。关键在于你怎么理解和运用。我们来看看作者是怎么认为的。文中并没有详细的提到带着目的去阅读的具体方法，但全文都在提倡带着目的去阅读，我认为这是个重要方法，这个重要的方法我打算在另一本书《如何阅读一本书》的总结里做分析。简要总结：不一定什么书都要细读，针对不同的书要使用不同的阅读方式。提高阅读速度的技巧有很多种，针对不同的内容使用不同阅读速度。阅读的环境和习惯是提高效率的一个重要关键点。理解力是阅读效率的一个重要指标，它要求我们和作者不断对话，彼此交流达到沟通理解的地步。阅读笔记是增加理解力，加强注意力，提高回顾效率的一个有效方式。正文：原文发布在微信公众号上，点击跳转到网页地址",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484653&amp;idx=1&amp;sn=f16e52ea17560947ace74b8a7ecfaefb&amp;chksm=fc2261eacb55e8fc2d96d43bcf8dc1978cfa67e678d5003b793d33a7adb7bdf7b4859e28c740&amp;token=2074622695&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p><h2 id=\"背景\">背景：</h2><p>看了很多书，也总结了很多书，但对读书这个词语越来越迷茫。</p><p>迷茫的是，不知道自己的阅读习惯是否真的好，自己的阅读效率是否真的高，我对自己的阅读能力不自信。</p><p>因此买了三本经典阅读技巧书，一本是《如何阅读一本书》、另一个本是《如何阅读》，再加上去年读过的《如何有效阅读一本书》，</p><p>三本书加起来，对阅读的技巧和效率做一个巩固和总结。因此我把此系列总结文章分成三部分，上、中、下，本文是上篇。</p><p>本文总结的是《如何阅读》这本书，它主要讲的主题是，如何提高我们的阅读速度。</p><p>阅读速度是否是阅读的关键呢，我认为是的，但也认为不是。关键在于你怎么理解和运用。我们来看看作者是怎么认为的。</p><p>文中并没有详细的提到带着目的去阅读的具体方法，但全文都在提倡带着目的去阅读，我认为这是个重要方法，这个重要的方法我打算在另一本书《如何阅读一本书》的总结里做分析。</p><h2 id=\"简要总结\">简要总结：</h2><pre><code>不一定什么书都要细读，针对不同的书要使用不同的阅读方式。提高阅读速度的技巧有很多种，针对不同的内容使用不同阅读速度。阅读的环境和习惯是提高效率的一个重要关键点。理解力是阅读效率的一个重要指标，它要求我们和作者不断对话，彼此交流达到沟通理解的地步。阅读笔记是增加理解力，加强注意力，提高回顾效率的一个有效方式。</code></pre><h2 id=\"正文\">正文：</h2><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484653&amp;idx=1&amp;sn=f16e52ea17560947ace74b8a7ecfaefb&amp;chksm=fc2261eacb55e8fc2d96d43bcf8dc1978cfa67e678d5003b793d33a7adb7bdf7b4859e28c740&amp;token=2074622695&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p>",
            "url": "http://www.luzexi.com/2021/05/23/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B023",
            
            
            
            
            
            "date_published": "2021-05-23T00:00:00+08:00",
            "date_modified": "2021-05-23T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/05/14/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A865",
            "title": "思路探讨(六十五) 人生的框架",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "目标管理从2月份到现在已经实践了有一段时间了，它给我带来了很多震撼的效果，也开阔了我不少视野。我慢慢发现行为习惯和思维习惯的改变就像脱胎换骨一样，是极难的，也是极其痛苦的过程。当然这也意味着，目标管理的这3个月折磨的我很痛苦，不过这些都是值得的，都是改变行为习惯和思维习惯所必须经历。人就是这样的，改变的太多太快，身体就会承受很大的痛苦，心思上和肉体上都会有。最大的体会是，目标给我提供了动力和方向。这给了我很多提示，很多旧思想和旧习惯在我脑海中浮现。以前经常会去寻找安全感，去为获得安全感而努力，比如想着有一天能安心躺着赚钱，或者存够钱去农村养老，或者找到一份安逸稳定的饭碗，还有我们总是想早点完成手头上的工作来获得安全感。这其实就是人性的一面，为获得安全感而活，所以很多新闻标题都以恐吓人的方式来命名，以吸引人来关注。这些年的经历告诉我，不要试图去追求安全感，周遭的环境从来都不会有绝对的安全，如果有，那肯定是陷进，你安全的越久，就会陷的越深越无法自拔。只有不断的挑战，不断努力，不断拼搏，才能让自己有永恒的动力，才会有不灭的优势。也体会到，人越老，年龄越大就越对周围的事物失去兴趣，保持热情变得越来越困难。年轻时对周围的事物都充满了新鲜感，社会生活了10几年后，这层新鲜感就不在了，留下的都是枯燥和乏味。有些人沉沦，有些人走偏，这也都是在预料之中的事。保持热情，就要保持好奇。而保持好奇心最好的方式，就要有目标，这些都是一环扣一环的，有目标，可量化，就能得到反馈，有反馈就有令人兴奋的动力。这些我都写在《目标管理》的一篇文章中，这些年我建立了自己的框架，框架中包含了做人做事的心态，家庭，价值观，目标，行为习惯和思维习惯等方方面面，我希望我的人生是平衡的，这样走下去才会更加的稳。什么是更加稳的人生呢？1.更少的情绪波动（外部波动可能很大，内部波动则更小）2.要事优先，做更重要的事情3.朝着正确的人生方向不偏离4.帮助周围的人一起往更好的方向奔去同时这个框架让我所做的事情变得可积累，甚至是把原本不可积累事情的变成了可积累。这样，在这个框架中，我积累的越多，框架就越强大，我也会活的更好些。当然，框架不是一蹴而就的，可能需要建设10年20年甚至一辈子，所以我一直在完善这个框架，不断去调整它，加入更好的元素，去掉错误的理解，调整偏离的方向。框架也同时成为了我人生中的可以一直感兴趣的事情，因为我在不断研究它完善它，我相信这个框架会给我带来越来越好的人生。也希望各位能共同努力，往更好的人生方向奔去。一点点小总结，希望能给大家带去一些参考价值。",
            "content_html": "<p>目标管理从2月份到现在已经实践了有一段时间了，它给我带来了很多震撼的效果，也开阔了我不少视野。</p><p>我慢慢发现行为习惯和思维习惯的改变就像脱胎换骨一样，是极难的，也是极其痛苦的过程。</p><p>当然这也意味着，目标管理的这3个月折磨的我很痛苦，不过这些都是值得的，都是改变行为习惯和思维习惯所必须经历。人就是这样的，改变的太多太快，身体就会承受很大的痛苦，心思上和肉体上都会有。</p><h3 id=\"最大的体会是目标给我提供了动力和方向\">最大的体会是，目标给我提供了动力和方向。</h3><p>这给了我很多提示，很多旧思想和旧习惯在我脑海中浮现。</p><p>以前经常会去寻找安全感，去为获得安全感而努力，比如想着有一天能安心躺着赚钱，或者存够钱去农村养老，或者找到一份安逸稳定的饭碗，还有我们总是想早点完成手头上的工作来获得安全感。</p><p>这其实就是人性的一面，为获得安全感而活，所以很多新闻标题都以恐吓人的方式来命名，以吸引人来关注。</p><h3 id=\"这些年的经历告诉我不要试图去追求安全感周遭的环境从来都不会有绝对的安全如果有那肯定是陷进你安全的越久就会陷的越深越无法自拔\">这些年的经历告诉我，不要试图去追求安全感，周遭的环境从来都不会有绝对的安全，如果有，那肯定是陷进，你安全的越久，就会陷的越深越无法自拔。</h3><h3 id=\"只有不断的挑战不断努力不断拼搏才能让自己有永恒的动力才会有不灭的优势\">只有不断的挑战，不断努力，不断拼搏，才能让自己有永恒的动力，才会有不灭的优势。</h3><p>也体会到，人越老，年龄越大就越对周围的事物失去兴趣，保持热情变得越来越困难。</p><p>年轻时对周围的事物都充满了新鲜感，社会生活了10几年后，这层新鲜感就不在了，留下的都是枯燥和乏味。有些人沉沦，有些人走偏，这也都是在预料之中的事。</p><p>保持热情，就要保持好奇。而保持好奇心最好的方式，就要有目标，这些都是一环扣一环的，有目标，可量化，就能得到反馈，有反馈就有令人兴奋的动力。</p><p>这些我都写在《目标管理》的一篇文章中，这些年我建立了自己的框架，框架中包含了做人做事的心态，家庭，价值观，目标，行为习惯和思维习惯等方方面面，我希望我的人生是平衡的，这样走下去才会更加的稳。</p><p>什么是更加稳的人生呢？</p><pre><code>1.更少的情绪波动（外部波动可能很大，内部波动则更小）2.要事优先，做更重要的事情3.朝着正确的人生方向不偏离4.帮助周围的人一起往更好的方向奔去</code></pre><p>同时这个框架让我所做的事情变得可积累，甚至是把原本不可积累事情的变成了可积累。这样，在这个框架中，我积累的越多，框架就越强大，我也会活的更好些。</p><h3 id=\"当然框架不是一蹴而就的可能需要建设10年20年甚至一辈子所以我一直在完善这个框架不断去调整它加入更好的元素去掉错误的理解调整偏离的方向\">当然，框架不是一蹴而就的，可能需要建设10年20年甚至一辈子，所以我一直在完善这个框架，不断去调整它，加入更好的元素，去掉错误的理解，调整偏离的方向。</h3><p>框架也同时成为了我人生中的可以一直感兴趣的事情，因为我在不断研究它完善它，我相信这个框架会给我带来越来越好的人生。也希望各位能共同努力，往更好的人生方向奔去。</p><p>一点点小总结，希望能给大家带去一些参考价值。</p>",
            "url": "http://www.luzexi.com/2021/05/14/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A865",
            
            
            
            
            
            "date_published": "2021-05-14T00:00:00+08:00",
            "date_modified": "2021-05-14T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/05/11/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A112",
            "title": "给女儿的信(十二) 关于积分制",
            "summary": "女儿 教育 亲情",
            "content_text": "hi Sharon Anne，爸爸几天不见好想你们。爸爸又回到深圳工作了，爸爸跟你们说过，爸爸不只是来工作的，更是来学习的。爸爸每天都很努力的去学习，去思考，爸爸想多学一点。但是，你知道，每个人都会有累的时候，都会有这么段时间想偷懒的时候。爸爸不想偷懒，但人就是会有是有懒的时候，懒的早起，懒的看书，懒的运动，懒的写文章。这不是爸爸想要的，爸爸想克服它，为了能抵抗人的懒惰，爸爸想了很多办法，也尝试了很多办法。幸运的是，爸爸终于找到一个很好的办法来抵抗懒惰，那就是给自己设定目标，并且奖励小星星。爸爸给自己设置了很多奖励小星星的任务，比如看完一本书，就给自己10颗小星星，写一篇文章就给自己8颗小星星，每天早起锻炼就给自己1颗小星星。爸爸又给自己设定了奖励，比如用30颗小星星换一次回家休息的机会，用50颗小星星换一次去外面野餐的机会，80颗小星星换一个游戏。爸爸把这些小星星积累起来，到了足够多的时候，就把它们用在自己喜欢的事情上。于是为了能够凑足小星星，获得自己想要的奖励，爸爸又充满的动力了，每天都努力读书，写文章，锻炼，攒小星星。哈哈，是不是很好玩，爸爸也跟你们一起攒小星星呢，攒满了小星星，一起去玩哦。加油Sharon，加油Anne，爸爸喜欢你们哦，要照顾好妈妈呦，笔芯。",
            "content_html": "<p>hi Sharon Anne，爸爸几天不见好想你们。爸爸又回到深圳工作了，爸爸跟你们说过，爸爸不只是来工作的，更是来学习的。</p><p>爸爸每天都很努力的去学习，去思考，爸爸想多学一点。</p><p>但是，你知道，每个人都会有累的时候，都会有这么段时间想偷懒的时候。</p><p>爸爸不想偷懒，但人就是会有是有懒的时候，懒的早起，懒的看书，懒的运动，懒的写文章。</p><p>这不是爸爸想要的，爸爸想克服它，为了能抵抗人的懒惰，爸爸想了很多办法，也尝试了很多办法。</p><p>幸运的是，爸爸终于找到一个很好的办法来抵抗懒惰，那就是给自己设定目标，并且奖励小星星。</p><p>爸爸给自己设置了很多奖励小星星的任务，</p><p>比如看完一本书，就给自己10颗小星星，写一篇文章就给自己8颗小星星，每天早起锻炼就给自己1颗小星星。</p><p>爸爸又给自己设定了奖励，比如用30颗小星星换一次回家休息的机会，用50颗小星星换一次去外面野餐的机会，80颗小星星换一个游戏。</p><p>爸爸把这些小星星积累起来，到了足够多的时候，就把它们用在自己喜欢的事情上。</p><p>于是为了能够凑足小星星，获得自己想要的奖励，爸爸又充满的动力了，每天都努力读书，写文章，锻炼，攒小星星。</p><p>哈哈，是不是很好玩，爸爸也跟你们一起攒小星星呢，攒满了小星星，一起去玩哦。</p><p>加油Sharon，加油Anne，爸爸喜欢你们哦，要照顾好妈妈呦，笔芯。</p>",
            "url": "http://www.luzexi.com/2021/05/11/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A112",
            
            
            
            
            
            "date_published": "2021-05-11T00:00:00+08:00",
            "date_modified": "2021-05-11T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/05/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B022",
            "title": "读书笔记(二十二) 《金字塔原理》下",
            "summary": "读书 书 看书 读后感",
            "content_text": "原文发布在微信公众号上，点击跳转到网页地址背景：上一篇，我们总结了《金字塔原理》上半部分，这一篇继续了解思考、表达的逻辑。本书我们主要学习的是框架，以前都是没有章法的去思考、去表达、去分析，看了这本书后就知道思考、表达、分析、和解决问题的框架。当然理论和实践差距比较大，我们应该把这些理论落地到实践中去。建立起自己在现实中的框架，这样我们在学习和工作中会更稳一些，倘若我们发现自己的框架有问题，我们则需要停下来先修理自己的框架，这样就能逐渐形成自己的体系，从而让你更有章法、更有节奏、更有效率的去解决问题。概述：回顾一下前面的知识，前面我们说了，我们在表达时的逻辑，表达时要以金字塔的形式叙述，这样能让听者和读者更容易接受。序言的故事结构，就很好的契合了这种表达目的，由于序言常以故事结构作为表达形式，而人更容易接受以故事形式叙述的事情，所以它更能让人接受和吸收。序言有4个要素组成，即背景、冲突、疑问、答案，遵照这4个要素，我们在表达时就会更容易些。表达逻辑之后，也讲到思考的逻辑。我们在应用逻辑顺序时，会用到逻辑的时间顺序、结构顺序、程度顺序去分析和归纳问题。当然，采用各种逻辑思考最终目的是要产生新的思想，那么如何提高产生新的思想的概率呢，我们可以通过分析和归纳的方法。即，列出值得思考的思想、找出思想之间的共同点、提出新的思想。简单回顾到这里，现在继续下篇的总结，内容包括：  解决问题的逻辑          界定问题的框架      结构化分析问题        演示的逻辑          书面上的金字塔      PPT上的金字塔      字里行间的金字塔      正文：原文发布在微信公众号上，点击跳转到网页地址",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484626&amp;idx=1&amp;sn=cdbe54838b9b0207441663acb49bec6f&amp;chksm=fc2261d5cb55e8c3185818b45f69941cffe1cfe7466b901b907c08d16576a04a3eb11890b6e0&amp;token=1892444225&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p><h2 id=\"背景\">背景：</h2><p>上一篇，我们总结了《金字塔原理》上半部分，这一篇继续了解思考、表达的逻辑。</p><p>本书我们主要学习的是框架，以前都是没有章法的去思考、去表达、去分析，看了这本书后就知道思考、表达、分析、和解决问题的框架。当然理论和实践差距比较大，我们应该把这些理论落地到实践中去。</p><p>建立起自己在现实中的框架，这样我们在学习和工作中会更稳一些，倘若我们发现自己的框架有问题，我们则需要停下来先修理自己的框架，这样就能逐渐形成自己的体系，从而让你更有章法、更有节奏、更有效率的去解决问题。</p><h2 id=\"概述\">概述：</h2><p>回顾一下前面的知识，前面我们说了，我们在表达时的逻辑，表达时要以金字塔的形式叙述，这样能让听者和读者更容易接受。</p><p>序言的故事结构，就很好的契合了这种表达目的，由于序言常以故事结构作为表达形式，而人更容易接受以故事形式叙述的事情，所以它更能让人接受和吸收。</p><p>序言有4个要素组成，即背景、冲突、疑问、答案，遵照这4个要素，我们在表达时就会更容易些。</p><p>表达逻辑之后，也讲到思考的逻辑。我们在应用逻辑顺序时，会用到逻辑的时间顺序、结构顺序、程度顺序去分析和归纳问题。</p><p>当然，采用各种逻辑思考最终目的是要产生新的思想，那么如何提高产生新的思想的概率呢，我们可以通过分析和归纳的方法。</p><p>即，列出值得思考的思想、找出思想之间的共同点、提出新的思想。</p><p>简单回顾到这里，现在继续下篇的总结，内容包括：</p><ul>  <li>解决问题的逻辑    <ul>      <li>界定问题的框架</li>      <li>结构化分析问题</li>    </ul>  </li>  <li>演示的逻辑    <ul>      <li>书面上的金字塔</li>      <li>PPT上的金字塔</li>      <li>字里行间的金字塔</li>    </ul>  </li></ul><h2 id=\"正文\">正文：</h2><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484626&amp;idx=1&amp;sn=cdbe54838b9b0207441663acb49bec6f&amp;chksm=fc2261d5cb55e8c3185818b45f69941cffe1cfe7466b901b907c08d16576a04a3eb11890b6e0&amp;token=1892444225&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p>",
            "url": "http://www.luzexi.com/2021/05/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B022",
            
            
            
            
            
            "date_published": "2021-05-09T00:00:00+08:00",
            "date_modified": "2021-05-09T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/05/03/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A864",
            "title": "思路探讨(六十四) 习惯养成-阅读技巧-要事优先",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "看到了越来越多人的努力和奋进，因此不要以为自己是最努力的那个。当然努力只是开始，为了能有一个好的结果，我们不只是努力就够了，还要有目标和策略。人总是对自己当前的能力高估，对自己的未来低估。这是自然反应，反人性的。为了能做反人性的事做的更好，我们需要形成好习惯，这样才能在反人性的事情上，做起来更容易些。最近开始整理读书技巧，以前看过《如何有效阅读一本书》改进了下自己在阅读时的习惯和技巧，现在正在看《如何阅读一本书》，前一本是日本人写的，后一本是美国人写的，两本书的风格不同，但都挺有用的，我把两本书结合起来，巩固自己的阅读技巧，这对自己巩固学习基础建设很重要，磨刀不误砍柴工。最后聊下事情的重要性，我发现生活中90%的事情都是紧急但不重要的，而10%是重要的事情却常常被我们以各种理由搁置。因此我们常常做的都是无用功，做这些无用功的理由通常是比较荒唐的，但当事人以及周围的人听起来却是理所当然。这些，养成好习惯、做重要的事情、巩固基础技巧、历史和人性，我将继续总结，继续说出我的理解，继续分享。",
            "content_html": "<p>看到了越来越多人的努力和奋进，因此不要以为自己是最努力的那个。</p><p>当然努力只是开始，为了能有一个好的结果，我们不只是努力就够了，还要有目标和策略。</p><p>人总是对自己当前的能力高估，对自己的未来低估。这是自然反应，反人性的。</p><p>为了能做反人性的事做的更好，我们需要形成好习惯，这样才能在反人性的事情上，做起来更容易些。</p><p>最近开始整理读书技巧，以前看过《如何有效阅读一本书》改进了下自己在阅读时的习惯和技巧，现在正在看《如何阅读一本书》，</p><p>前一本是日本人写的，后一本是美国人写的，两本书的风格不同，但都挺有用的，</p><p>我把两本书结合起来，巩固自己的阅读技巧，这对自己巩固学习基础建设很重要，磨刀不误砍柴工。</p><p>最后聊下事情的重要性，我发现生活中90%的事情都是紧急但不重要的，而10%是重要的事情却常常被我们以各种理由搁置。</p><p>因此我们常常做的都是无用功，做这些无用功的理由通常是比较荒唐的，但当事人以及周围的人听起来却是理所当然。</p><p>这些，养成好习惯、做重要的事情、巩固基础技巧、历史和人性，我将继续总结，继续说出我的理解，继续分享。</p>",
            "url": "http://www.luzexi.com/2021/05/03/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A864",
            
            
            
            
            
            "date_published": "2021-05-03T00:00:00+08:00",
            "date_modified": "2021-05-03T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/04/27/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A863",
            "title": "思路探讨(六十三) 投资-工作-生活",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "假如你的股票投资，已经有100万，并且已经盈利了50%，你在这场投资游戏中还会慌吗？如果投资注定是一场漫长的游戏，那么你该如何正确的面对一时的亏损，面对投资标的的选择？投资本身就反应了我们的价值观，这种价值观最后都会反应到，投资回报中，从长期来看就是这样的。当然这中间，波动会很大，你会意外的发现买了后就涨或跌，如果你需要安全感，就不要做投资，投资本身就是打破安全感的事情。投资也好，工作也好，生活也好，其实都是一个道理。最终你会发现，其实事情可以很简单，做好人做好事，多帮助他人，这样我们保持下去，生活就会对我们好。但因为时间过于漫长了，效果也很难在短时间见到，所以很多人都想走捷径，最终走了偏门。其实最艰难的道路就是捷径，那就是做好自己，帮助他人，一步一个脚印脚踏实地向前走。再看看自己的平衡轮，将自己的轮子平衡一下，这样就可以走的更稳一些，同时稳的同时也更快了。",
            "content_html": "<p>假如你的股票投资，已经有100万，并且已经盈利了50%，你在这场投资游戏中还会慌吗？</p><p>如果投资注定是一场漫长的游戏，那么你该如何正确的面对一时的亏损，面对投资标的的选择？</p><p>投资本身就反应了我们的价值观，这种价值观最后都会反应到，投资回报中，从长期来看就是这样的。</p><p>当然这中间，波动会很大，你会意外的发现买了后就涨或跌，如果你需要安全感，就不要做投资，投资本身就是打破安全感的事情。</p><p>投资也好，工作也好，生活也好，其实都是一个道理。</p><p>最终你会发现，其实事情可以很简单，做好人做好事，多帮助他人，这样我们保持下去，生活就会对我们好。</p><p>但因为时间过于漫长了，效果也很难在短时间见到，所以很多人都想走捷径，最终走了偏门。</p><p>其实最艰难的道路就是捷径，那就是做好自己，帮助他人，一步一个脚印脚踏实地向前走。</p><p>再看看自己的平衡轮，将自己的轮子平衡一下，这样就可以走的更稳一些，同时稳的同时也更快了。</p>",
            "url": "http://www.luzexi.com/2021/04/27/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A863",
            
            
            
            
            
            "date_published": "2021-04-27T00:00:00+08:00",
            "date_modified": "2021-04-27T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/04/18/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A111",
            "title": "给女儿的信(十一) 时间很重要",
            "summary": "女儿 教育 亲情",
            "content_text": "Hi Sharon，Anne，爸爸好想你们。没过几天没看到你们就很想你们。Sharon生病了还吐了，爸爸心疼你，要保护好自己的身体哦。Anne也是，在姐姐生病时要照顾好姐姐和妈妈，帮助妈妈一起照顾好姐姐，大家一起对抗病魔哈。最近爸爸在抓紧时间学习，爸爸发现时间对人很重要。假如我们的时间用不完的话，我们就能做很多我们想做但又没时间做的事情，比如锻炼健身、看书、写文章、去旅行看看世界等。如果爸爸有用不完的时间的话，爸爸就能一边跟你们在一起玩，又一边能学习和工作了。可是时间是有限的，爸爸1天就24个小时，除去睡觉吃饭休息，满打满算也就只有12个小时的时间。为了赚钱爸爸又要把12个小时里的8个小时分给公司，帮公司干活，剩下的4个小时，爸爸要学习新的知识，还要和妈妈聊天，要去奶奶家看奶奶，还要和你们玩，时间实在不够用。所以爸爸很珍惜时间，每天精打细算的花时间，好想让每一分钟的时间都用在刀口上。为了能把所有花时间做过的事情都保存下来，爸爸把每件事都记录了下来，这样就可以保存爸爸做过的每一件事。就好像时间停留在了那个点上一样，所有做过的事情都停留在了每个时间点上。以后再翻开这些记录的文章去回忆时，一下子就能记起来当时发生的环境和心情了，是不是很好：）为了精打细算的花时间，爸爸给自己定了计划，爸爸每年都给自己定一个大的计划，然后把大的计划拆分成很多很多份，直到爸爸知道每天应该干什么，当爸爸知道每天都该做什么的时候，做每件事的时候都会觉得非常有意义。爸爸相信只要每天不断学习，不断进步，这些计划和目标都会慢慢变成现实的。给爸爸加油喔~喜欢你们Sharon和Anne，我们一起加油，我们一家人都很优秀，继续加油。",
            "content_html": "<p>Hi Sharon，Anne，爸爸好想你们。没过几天没看到你们就很想你们。</p><p>Sharon生病了还吐了，爸爸心疼你，要保护好自己的身体哦。Anne也是，在姐姐生病时要照顾好姐姐和妈妈，帮助妈妈一起照顾好姐姐，大家一起对抗病魔哈。</p><p>最近爸爸在抓紧时间学习，爸爸发现时间对人很重要。</p><p>假如我们的时间用不完的话，我们就能做很多我们想做但又没时间做的事情，比如锻炼健身、看书、写文章、去旅行看看世界等。</p><p>如果爸爸有用不完的时间的话，爸爸就能一边跟你们在一起玩，又一边能学习和工作了。</p><p>可是时间是有限的，爸爸1天就24个小时，除去睡觉吃饭休息，满打满算也就只有12个小时的时间。</p><p>为了赚钱爸爸又要把12个小时里的8个小时分给公司，帮公司干活，剩下的4个小时，爸爸要学习新的知识，还要和妈妈聊天，要去奶奶家看奶奶，还要和你们玩，时间实在不够用。</p><p>所以爸爸很珍惜时间，每天精打细算的花时间，好想让每一分钟的时间都用在刀口上。</p><p>为了能把所有花时间做过的事情都保存下来，爸爸把每件事都记录了下来，这样就可以保存爸爸做过的每一件事。</p><p>就好像时间停留在了那个点上一样，所有做过的事情都停留在了每个时间点上。以后再翻开这些记录的文章去回忆时，一下子就能记起来当时发生的环境和心情了，是不是很好：）</p><p>为了精打细算的花时间，爸爸给自己定了计划，爸爸每年都给自己定一个大的计划，然后把大的计划拆分成很多很多份，直到爸爸知道每天应该干什么，当爸爸知道每天都该做什么的时候，做每件事的时候都会觉得非常有意义。</p><p>爸爸相信只要每天不断学习，不断进步，这些计划和目标都会慢慢变成现实的。给爸爸加油喔~</p><p>喜欢你们Sharon和Anne，我们一起加油，我们一家人都很优秀，继续加油。</p>",
            "url": "http://www.luzexi.com/2021/04/18/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A111",
            
            
            
            
            
            "date_published": "2021-04-18T00:00:00+08:00",
            "date_modified": "2021-04-18T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/04/18/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A862",
            "title": "思路探讨(六十二) 知识的深度与广度",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "知识的深度和广度都是非常重要的，没有一定说，只做某个方向一定能成，或者说只要涉猎足够广一定能成事。很多有知识深度的人，特别是某个专业领域特别强的人，会去鄙视那些专业程度不深但知道很多个领域知识的人。例如学者就常看不上商人，学者有足够深的专业，而商人则有足够广的领域涉猎。其实这种思维是非常错误的，也是狭隘的，其本身的做法也是不够明智的。实际上深度和广度是兼并的，知识的深度支撑了广度，广度又回馈了深度，这样深度和广度相辅相成的才是比较好的模式，这也是人们口中常说的“一专多精”的意义所在。就像你懂的事情越多，越能对事物提出不同的观点那样。不同领域间的知识常以惊人的方式互相取长补短。毕竟，创造的核心是将从未有过交集的东西融合在一起。如果你接受了人需要博识的观点后，学会了微精通，那么你就能从多种微精通实践中获得了思维流畅性，自然而然就从封闭转换到了开放。这是种普遍的生活观，开放地拥抱生活中的各种奇迹机遇，你就会变得乐于学习了，因为你知道了获取专业知识的微精通的奥秘，不再有被其他领域拒之门外的挫败感。那时你就会变得信心十足、无所畏惧，这是任何境遇下都需要的优秀品质。",
            "content_html": "<p>知识的深度和广度都是非常重要的，没有一定说，只做某个方向一定能成，或者说只要涉猎足够广一定能成事。</p><p>很多有知识深度的人，特别是某个专业领域特别强的人，会去鄙视那些专业程度不深但知道很多个领域知识的人。例如学者就常看不上商人，学者有足够深的专业，而商人则有足够广的领域涉猎。其实这种思维是非常错误的，也是狭隘的，其本身的做法也是不够明智的。</p><p>实际上深度和广度是兼并的，知识的深度支撑了广度，广度又回馈了深度，这样深度和广度相辅相成的才是比较好的模式，这也是人们口中常说的“一专多精”的意义所在。</p><p>就像你懂的事情越多，越能对事物提出不同的观点那样。不同领域间的知识常以惊人的方式互相取长补短。毕竟，创造的核心是将从未有过交集的东西融合在一起。</p><p>如果你接受了人需要博识的观点后，学会了微精通，那么你就能从多种微精通实践中获得了思维流畅性，自然而然就从封闭转换到了开放。</p><p>这是种普遍的生活观，开放地拥抱生活中的各种奇迹机遇，你就会变得乐于学习了，因为你知道了获取专业知识的微精通的奥秘，不再有被其他领域拒之门外的挫败感。那时你就会变得信心十足、无所畏惧，这是任何境遇下都需要的优秀品质。</p>",
            "url": "http://www.luzexi.com/2021/04/18/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A862",
            
            
            
            
            
            "date_published": "2021-04-18T00:00:00+08:00",
            "date_modified": "2021-04-18T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/04/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B021",
            "title": "读书笔记(二十一) 《金字塔原理》上",
            "summary": "读书 书 看书 读后感",
            "content_text": "原文发布在微信公众号上，点击跳转到网页地址背景：很多同学在大学里就已经学习过《金字塔原理》，这本书主要讲了如何借鉴几个经典的框架来解决和表达问题。看了这本书后，发现书中说的东西非常好，于是我在现实生活和工作中也落地实践了许多，基于这些理论和实践经验，我想对这本书中所描述的知识做一次全面的回顾和总结。疑问：为了能够更好的理解这本书，我同时给自己提了很多疑问，这让我在看书的同时有了目标性。我也想通过疑问-解答的方式来总结这本书的内容，因为这种方式更能让人接受。为什么说是金字塔？（让人感觉很势利）为什么要用框架去解决问题？会不会让做事变的很死板？有哪些比较经典的框架？它们具体是怎么去做表达和解决问题的？概述：金字塔原理是一种突出重点、逻辑清晰、层次分明、简单易懂的思考方式和沟通方式。它的基本结构是：结论先行，以上统下，归类分组，逻辑递进。先重要后次要，先总结后具体，先框架后细节，先结论后原因，先结果后过程，先论点后论据。它能够帮助我们挖掘受众的意图、需求点、利益点、关注点、兴趣点。也能让我们在沟通时达到，观点鲜明、重点突出、思路清晰、层次分明、简单易懂，让对方有兴趣、能理解、记得住。其具体做法是，自上而下的表达，自上而下的思考，纵向总结概括，横向归类分组，序言讲故事，标题提炼思想精华。原文发布在微信公众号上，点击跳转到网页地址",
            "content_html": "<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484575&amp;idx=1&amp;sn=2d34a8dbcfb9c1210fa3e0ae5b0c13fb&amp;chksm=fc226198cb55e88e892b31fa217da8e11e8eb6bfbcbd74805e610b706f69c4e776cb7da9b40f&amp;token=673219380&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p><h3 id=\"背景\">背景：</h3><p>很多同学在大学里就已经学习过《金字塔原理》，这本书主要讲了如何借鉴几个经典的框架来解决和表达问题。</p><p>看了这本书后，发现书中说的东西非常好，于是我在现实生活和工作中也落地实践了许多，基于这些理论和实践经验，我想对这本书中所描述的知识做一次全面的回顾和总结。</p><h3 id=\"疑问\">疑问：</h3><p>为了能够更好的理解这本书，我同时给自己提了很多疑问，这让我在看书的同时有了目标性。我也想通过疑问-解答的方式来总结这本书的内容，因为这种方式更能让人接受。</p><p>为什么说是金字塔？（让人感觉很势利）为什么要用框架去解决问题？会不会让做事变的很死板？有哪些比较经典的框架？它们具体是怎么去做表达和解决问题的？</p><h3 id=\"概述\">概述：</h3><p>金字塔原理是一种突出重点、逻辑清晰、层次分明、简单易懂的思考方式和沟通方式。</p><p>它的基本结构是：结论先行，以上统下，归类分组，逻辑递进。先重要后次要，先总结后具体，先框架后细节，先结论后原因，先结果后过程，先论点后论据。</p><p>它能够帮助我们挖掘受众的意图、需求点、利益点、关注点、兴趣点。也能让我们在沟通时达到，观点鲜明、重点突出、思路清晰、层次分明、简单易懂，让对方有兴趣、能理解、记得住。其具体做法是，自上而下的表达，自上而下的思考，纵向总结概括，横向归类分组，序言讲故事，标题提炼思想精华。</p><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzU1ODY1ODY2NA==&amp;mid=2247484575&amp;idx=1&amp;sn=2d34a8dbcfb9c1210fa3e0ae5b0c13fb&amp;chksm=fc226198cb55e88e892b31fa217da8e11e8eb6bfbcbd74805e610b706f69c4e776cb7da9b40f&amp;token=673219380&amp;lang=zh_CN#rd\">原文发布在微信公众号上，点击跳转到网页地址</a></p>",
            "url": "http://www.luzexi.com/2021/04/11/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B021",
            
            
            
            
            
            "date_published": "2021-04-11T00:00:00+08:00",
            "date_modified": "2021-04-11T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/04/03/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A861",
            "title": "思路探讨(六十一) 《原则》摘录",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "最近看了《原则》一书的前半部分，讲述的是桥水创始人瑞.达利欧的个人经历。这本书2019年6月份就买了，一直没空看，但我知道它是一本好书，直到2021年过年时才从箱底里翻出来看。（我时常翻箱底，因为我知道很多东西被我遗忘在箱底了，我时常要去翻它们，这会让我有很多惊喜）本来这周想用自己的小脑袋思考弄清楚点事情，可惜在电脑前发呆了1个小时也没写出一个字，个人思考的力量毕竟有限，所以还是看书吧，站在巨人的肩膀上，让巨人带你领略风景。最近现在每次看书都会画线并记录自己的感受，就讲讲我记录的笔记吧。原文：我一直记不住没有内在逻辑的东西（如电话号码），而且我不喜欢听从别人的指示。同时，我的好奇心很强，喜欢自己把事情弄清楚，不过当时我并不像现在这么清楚地知道这一点。笔记：我也一样，记不住没有逻辑的东西，喜欢自主的想法，不喜欢被动。原文：我一直不明白，除了能得到母亲的认可之外，上学上得好还能给给我什么。笔记：这让我更加慎重的考虑我的孩子的成长和教育，如何才能让她们更有自主的学习动力。原文：与失败比起来，我对乏味和平庸的恐惧要严重得多。对我而言，很好的事要比糟糕的事好，糟糕的事要比平庸的事好，因为糟糕的事至少给生活增加了滋味。笔记：我不想要乏味和平庸，即使失败也比平庸和乏味来的好。失败还意味着拼搏过，平庸和乏味基本上都是由于躺在舒适区不想动的缘故。原文：经历这些让我认识到，尽管几乎所有人都会估计未来和当下大同小异，但未来通常和当下大相径庭。笔记：未来和当下总是出乎人们的意料，相差比较大。原文：这个现实传递给我的信息时：你最好弄明白其他时间，其他地点，其他人身上发生的事，因为如果你不这么做，你就不知道这些事情会不会发生在你身上，而且一旦发生在你身上，你将不知道如何应对。笔记：弄明白历史能更清晰的看清当下自己身上正在发生的事情。原文：哈佛教学：没有教师在黑板前告诉我们什么东西要记住，也没有考试测试我们有没有记住。相反，教师给我们的都是真实的案例研究，让我们进行阅读与分析。然后我们分成小组自由讨论，加入我们处在和案例中的人相同的情况下，我们会怎么做。这正是我喜欢的教学方式。笔记：开放式教育，自主阅读，案例分析，讨论，实践。原文：你必须既有防御心又有进攻心。如果没有进攻心，你就赚不到钱，而如果没有防御心，你的钱就保不住。笔记：进攻和防御最好兼备原文：把赚钱作为你的目标是没有意义的，因为金钱并没有固有的价值，金钱的价值来自它能买到的东西，但金钱并不能买到一切。更聪明的做法是，先确定你真正想要什么，你真正的目标是什么，然后想想你为了得到这些目标需要做什么。笔记：真正想要什么，制定目标，目标不是钱，而是自己的想法，用自己的视野去实现，并拓展自己的视野。原文：在考虑有意义的人际关系与金钱相比的重要性时，很明显，人际关系更重要，因为一种有意义的人际关系时无价的，我用再多的金钱也买不到比这更有价值的东西。有意义的工作和有意义人际关系都是我的主要目标，我做的一切事情都是为了实现这两个目标。赚钱只是其附带结果。笔记：有意义的工作和有意义的人际关系，是核心。围绕着这个两个有意义，人生才真正有意义。有意义的工作指自己想做的工作，有意义人人际关系，指与周围同事、家人、朋友建立良好的关系。…还有很多，摘录的只是百分之一，这本书不错，摘录部分内容希望能给大家带来一点启示。",
            "content_html": "<p>最近看了《原则》一书的前半部分，讲述的是桥水创始人瑞.达利欧的个人经历。</p><p>这本书2019年6月份就买了，一直没空看，但我知道它是一本好书，直到2021年过年时才从箱底里翻出来看。（我时常翻箱底，因为我知道很多东西被我遗忘在箱底了，我时常要去翻它们，这会让我有很多惊喜）</p><p>本来这周想用自己的小脑袋思考弄清楚点事情，可惜在电脑前发呆了1个小时也没写出一个字，个人思考的力量毕竟有限，所以还是看书吧，站在巨人的肩膀上，让巨人带你领略风景。</p><p>最近现在每次看书都会画线并记录自己的感受，就讲讲我记录的笔记吧。</p><p>原文：我一直记不住没有内在逻辑的东西（如电话号码），而且我不喜欢听从别人的指示。同时，我的好奇心很强，喜欢自己把事情弄清楚，不过当时我并不像现在这么清楚地知道这一点。</p><h3 id=\"笔记我也一样记不住没有逻辑的东西喜欢自主的想法不喜欢被动\">笔记：我也一样，记不住没有逻辑的东西，喜欢自主的想法，不喜欢被动。</h3><p>原文：我一直不明白，除了能得到母亲的认可之外，上学上得好还能给给我什么。</p><h3 id=\"笔记这让我更加慎重的考虑我的孩子的成长和教育如何才能让她们更有自主的学习动力\">笔记：这让我更加慎重的考虑我的孩子的成长和教育，如何才能让她们更有自主的学习动力。</h3><p>原文：与失败比起来，我对乏味和平庸的恐惧要严重得多。对我而言，很好的事要比糟糕的事好，糟糕的事要比平庸的事好，因为糟糕的事至少给生活增加了滋味。</p><h3 id=\"笔记我不想要乏味和平庸即使失败也比平庸和乏味来的好失败还意味着拼搏过平庸和乏味基本上都是由于躺在舒适区不想动的缘故\">笔记：我不想要乏味和平庸，即使失败也比平庸和乏味来的好。失败还意味着拼搏过，平庸和乏味基本上都是由于躺在舒适区不想动的缘故。</h3><p>原文：经历这些让我认识到，尽管几乎所有人都会估计未来和当下大同小异，但未来通常和当下大相径庭。</p><h3 id=\"笔记未来和当下总是出乎人们的意料相差比较大\">笔记：未来和当下总是出乎人们的意料，相差比较大。</h3><p>原文：这个现实传递给我的信息时：你最好弄明白其他时间，其他地点，其他人身上发生的事，因为如果你不这么做，你就不知道这些事情会不会发生在你身上，而且一旦发生在你身上，你将不知道如何应对。</p><h3 id=\"笔记弄明白历史能更清晰的看清当下自己身上正在发生的事情\">笔记：弄明白历史能更清晰的看清当下自己身上正在发生的事情。</h3><p>原文：哈佛教学：没有教师在黑板前告诉我们什么东西要记住，也没有考试测试我们有没有记住。相反，教师给我们的都是真实的案例研究，让我们进行阅读与分析。然后我们分成小组自由讨论，加入我们处在和案例中的人相同的情况下，我们会怎么做。这正是我喜欢的教学方式。</p><h3 id=\"笔记开放式教育自主阅读案例分析讨论实践\">笔记：开放式教育，自主阅读，案例分析，讨论，实践。</h3><p>原文：你必须既有防御心又有进攻心。如果没有进攻心，你就赚不到钱，而如果没有防御心，你的钱就保不住。</p><h3 id=\"笔记进攻和防御最好兼备\">笔记：进攻和防御最好兼备</h3><p>原文：把赚钱作为你的目标是没有意义的，因为金钱并没有固有的价值，金钱的价值来自它能买到的东西，但金钱并不能买到一切。更聪明的做法是，先确定你真正想要什么，你真正的目标是什么，然后想想你为了得到这些目标需要做什么。</p><h3 id=\"笔记真正想要什么制定目标目标不是钱而是自己的想法用自己的视野去实现并拓展自己的视野\">笔记：真正想要什么，制定目标，目标不是钱，而是自己的想法，用自己的视野去实现，并拓展自己的视野。</h3><p>原文：在考虑有意义的人际关系与金钱相比的重要性时，很明显，人际关系更重要，因为一种有意义的人际关系时无价的，我用再多的金钱也买不到比这更有价值的东西。有意义的工作和有意义人际关系都是我的主要目标，我做的一切事情都是为了实现这两个目标。赚钱只是其附带结果。</p><h3 id=\"笔记有意义的工作和有意义的人际关系是核心围绕着这个两个有意义人生才真正有意义有意义的工作指自己想做的工作有意义人人际关系指与周围同事家人朋友建立良好的关系\">笔记：有意义的工作和有意义的人际关系，是核心。围绕着这个两个有意义，人生才真正有意义。有意义的工作指自己想做的工作，有意义人人际关系，指与周围同事、家人、朋友建立良好的关系。</h3><p>…</p><h3 id=\"还有很多摘录的只是百分之一这本书不错摘录部分内容希望能给大家带来一点启示\">还有很多，摘录的只是百分之一，这本书不错，摘录部分内容希望能给大家带来一点启示。</h3>",
            "url": "http://www.luzexi.com/2021/04/03/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A861",
            
            
            
            
            
            "date_published": "2021-04-03T00:00:00+08:00",
            "date_modified": "2021-04-03T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/03/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B020",
            "title": "读书笔记(二十) 《目标管理》",
            "summary": "读书 书 看书 读后感",
            "content_text": "背景：机缘巧合从印象笔记中看到目标管理这个课程，也正好契合我最近的理念。我发现学习，工作，生活如果没有目标就很难做的好，同样的人生如果没有目标，就很难保持动力和正确的方向。虽然我一直提倡时间管理，精力管理，但这一切都是为了什么呢？在漫无目的的行动中，常常使我迷茫，因为太枯燥太无聊了，我时常问自己，“这样坚持下去真的有效吗？”于是目标管理映入我的眼帘，以前很排斥的东西，现在变成了我的宝贝。当然事情并没有这么顺利，我发现它需要一个很强大的习惯来支撑它的运作，不过我认定这是个好东西我开始将目标管理付诸于实际生活中，它是一个漫长的练习过程，我希望在学习和实践中不断领悟其精髓，并分享给大家。疑问：我在这次好奇般的学习过程中到底学到了什么呢？我给自己提出了几个疑问，并做了总结和自我解答。我们为什么害怕目标？为什么要目标管理？目标管理的精髓是什么？它有哪些策略可以用？分别是什么？内容：我们对目标管理其实有很深的偏见。因为无论是工作还是学校学习，都会有上级和老师给我们的目标，每次这种目标都会给我们很大的压力。甚至很多时候因为目标太大，压力太重，压垮了我们。所以我们大部分人都很害怕‘目标’这两个字，很少有人能真正主动去接受它、拆解它、分析它。我也是一样，只是在学习过程中，我渐渐了解了如何应对，慢慢的熟知了它，并且喜欢上了它。这里我想所讲的目标管理，都是我们自己主动发出的目标，而不是别人给予我们的目标。因为这两者有很大的不同，一个是你自己想要的，另一个则是别人强加给你的。至于怎么把别人强加给你的目标变成自己的目标则是另外一回事了。目标管理有一个成功方程式，即，目标达成 = 目标 * 策略 * （动力 - 阻力）方程式中每个词语都是关键，目标、策略、动力、阻力。下面我们就来 一 一 分解他们。首先，目标制定非常关键，它是所有一切的前提，好的目标让我们动力满满，而差的目标让我们沮丧。定目标的时候，我们要考虑自己的力量，不能超过自己能力范围太多，这样会让我们受到很大的挫败感而不敢前进，也不能在自己的能力范围之内，会让我们觉得很无聊。目标制定的时候要有延展性，就是在原来可达到的目标之上延展30-50%左右，这样目标会更加合理些。如果原来完全没接触过的，则要把目标定的低一些，以免挫败感太强烈。其次，目标要符合我们的价值观。价值观反应了我们的个性，如果不符合我们的价值观，我们在目标的执行过程中也很难进行下去。其根本原因通常是跟我们的价值观相反的东西，我们很难坚持。没有绝对好的价值观，价值观通常不是我们想要的东西，而是反应我们性格的东西，你是什么样的人，就会有什么样的价值观。接着，目标定制要有符合SMART原则，即：要具体的，可衡量的，可达到的，和其他目标有关联的。最后，长远目标要拆分成很多小而简单的目标，比如1年的目标要拆分到月目标，再拆分到周目标，再细分到每天所要做的事情上来。也只有这样才能让自己感到安全，把事情落地到每天的任务上才能让我们有实实在在的安全感，而不会只是远远得望着这个1整年的大目标而感到害怕。当然我们在制定目标的时候，最好不要只制定单方面的目标，因为单一的目标会让自己很枯燥，也无法平衡人生的这辆车。我们的目标应该比较多元化，这些目标加起来应该要平衡我们人生的各个方向，包括，精神上的、思维上的、情绪、身体、婚姻、亲情、人际、专业、娱乐、财务。只有这样才能让我们能感到，是整辆车在不断前进，而不单单是单个轮子在走，整辆车则停滞不前。下面是一些在目标执行过程中的策略，前半部分是我在实践过程中的一些体会，后半部分是目标管理的学习，有助于我们更好的坚持下去，并最终完成目标。这是一个过程，首先我们要享受过程，在过程中学习和进步，其次我们要不断调整自己，努力让自己达成目标获得成就。这不仅能让我们达成目标获得成就，更重要的是在未来的日子中，我们能活的更加自信和洒脱，也许无法让你财务自由，但肯定能让你精神自由。策略1观察自己记录生活中的每一样事情，这样可以方便我们统计自己的行为。由于我们很难看清自己，自己的日常生活中觉醒过来是很难的，所以将自己生活中的每一件事记录下来，再隔1周去看这些数据，会有惊人的发现。发现了自己的问题，并寻求改善，再记录，在分析，再改善，形成一种良性循环。记录的方式有两种第一种是，对某些自己在意的事做数据记录，并统计，最后通过数据分析，看到自己的问题，再寻找解决办法第二种是，把事情的前因后果，和自己的所思所想，记录下来，通过复盘的形式寻找调整方案策略2强化习惯在做了某件事之后，如果得到一个你很喜欢的结果，那么这件事做多了，就会被强化。其结果可以是物品、赞扬、活动等，因此我们这里最应该研究的是如何奖励自己。研究奖励时应该注意，做完某件事后，会很愉快，这个愉快到底是从哪里来才是关键。下面些奖励的例子娱乐：看电影，爬山，游乐场，旅行，玩游戏感情：和家人玩，和朋友玩，和闺蜜玩物品：买电子产品，买家具电器，买衣服鞋子社交：得到赞扬，受人关注食物：美食，巧克力策略3列出阻力，并且列出应对方案列出所有可能阻碍自己计划进行的障碍，并想出应对方案当预料到的阻碍来临时，用自己设计好的应对方案去应对。如果不行，则再更换其他方案，直到能应对为止。当自己实行应对方案时，有没有效果都要记录下来。这能够不断记得自己的目标，也能看到自己的进步。策略4记录反馈数据前面说，我们的目标必须是可衡量的，也就是说，每一步必须都是可用数据表现出来了。在每次小目标完成时都要把数据记录下来，这样可以及时帮助我们调整计划。比如，能看到我们最近的目标进度，情绪变化等等，从而调整新的计划和应对方案。策略5和自己签约这是一个增强动力的方法。把目标想象成一个项目，甲方乙方都是自己，作为甲方，我要监督项目的进展，把控项目的质量，在项目完成后给予报酬。作为乙方，你要遵守合约的约定，调动资源，合理安排进度，排除障碍，保证高质量的完成项目。用这种很正式的书面约定，签字画押，将自己与目标绑定。一个人对目标承诺度越高，他完成目标的可能性就越大。这样就能让自己非常重视目标，也就有了动力。1.合约能让自己明确这个目标对自己有多重要。2.合约会加强你对目标成功的期待。它会让你看到目标实现后的样子，就好像前方的苹果树，你能清晰的看到它。3.合约是一种自我约束，尽一切努力去完成约定，不能随便毁约，这就是契约精神。合约内容1.把SMART目标写在合约里。2.写下这个目标对你的重要性，1-5分。3.把目标拆分成小目标也写在合约里，每个小目标的内容，阶段性的目标，周目标，这样就能减少自己对目标的恐惧。4.把计划写在合约里，受到阻碍时的应对方案。5.在合约里写明奖励机制，对小目标、阶段性目标也要有奖励。6.写下你曾经经历过的依次成功经历，写出自己的哪些特质和能力让自己成功。7.写下自己对合约的承诺，签字画押，并贴在墙上，同时把合约给重要的人看，从而获得他们的支持，亲人和朋友对你的支持是非常重要的。策略 6自我关怀大多数人总是在批评自己，而不是在关怀自己自我批评是我们每个人都很熟悉和擅长的一件事。常常，当我们没有达成预想的目标时，或者经历失败的时候，我们总是会对自己说，“我就是不如别人”，“我真的很失败”，“我怎么就是做不好呢”，然后你可能会对自己说，“你应该再努力点”，“你不能总是这样懒惰”，“你再不努力就没有机会了”，我们以为只有不断鞭策自己、不断找出问题并改正，才能够进步，才能够达成目标。这其实是我们自身启动了防御系统，通过自我批评的防御系统来改变自己，通过改变自己，让自己变得更加安全。这个防御系统有很多负面作用，它会让我们出现三种常见表现，第一，战斗，猛烈的批评自己，第二，僵住，不停反思自己为什么会这样，以后该怎么做，第三，逃跑，逃避所有可能的失败，一个人呆在安全的地方。它对我们实现目标有相反的作用，会导致我们降低自信，增加焦虑感，甚至导致抑郁，这些会让我们放弃目标的概率变的更大。自我关怀则不是，它可以让我们更好的坚持目标。它最重要的作用是，让我们感到放松和安全，我们就像怀抱里获得温暖的孩子那样，当我们获得了力量，就不会轻易放弃我们的目标了。第一个方法，写自我关怀日记日记分为三部分：此时此刻，连接，爱。1.不带任何评价的写出此时此刻的感受，2.要意识到世界上每个人都在经历挫折和痛苦，3.把自己当做好朋友用关怀的语气给自己写些温暖的话语。第二个方法，身体触摸原理是，当母亲轻抚孩子的头，轻拍孩子的肩膀，拥抱孩子的时候，孩子都会感到安全和轻松。同样的，我们对自己做类似的触摸时，也会感到被关爱，这样身体和精神都会放松下来。找一个能让你感到安全、感到被支持的身体姿势，用这个姿势来安慰自己。例如：把一只手放在心上双手交叠在心上一只手放在心上，一只手放在肚子上两只手交叠放在肚子上一只手或两只手放在脸颊上交叉胳膊，给自己一个温柔的拥抱把手放在大腿上，轻轻地拍一只手轻拍另一只收第三个方法，对自己说善意的话语在心里，或者对着镜子里的自己说，让自己感到安全、温暖、被支持的话语。这个方法可以降低我们内在批评的背景声音，从而减少内在冲突，让我们在实现目标的路上更加平静和自信。善意的话语有点像是祝福自己的话语，“愿我平安、愿我平静、愿我勇敢”找善意的话语，聚焦一个问题：我需要什么？然后从内心深处的需要找适合自己的话语。找到内心需要，而不是想要，需要是脖子以下的需要，包括，被认可、被欣赏、被爱、被看见、被听到、被保护、被珍惜、被尊重。去发现和找到适合自己的，当自己情绪低落的时候，希望别人对你说什么？哪些话能够安慰到你，然你平静下来或振作起来？把这些话记录下来，作为自己的“善意话语库”，供自己随时使用。这三个方法要勤加练习，自我关怀让阻碍我们实现目标的最大敌人（我们自己），变成帮助我们实现目标的最好盟友。策略7建立自我奖励机制1.列出自我奖励清单    头脑风暴出所有让你感到高兴、满足、愉快的事物和活动。        想象奖励：达成目标后的美好场景，让自己产生愉悦的感觉        口头奖励：当做了符合目标的行为后，对自己口头的表扬2.行为和奖励配对    即，做了什么，就会获得什么奖励，这样就能强化我们的行为，让自己更加喜欢去做这件事。经常让自己去想象获得奖励时的场景，这不仅会对你现在的行为有好处，而且会提醒和强化你的长期目标是什么，让你更聚焦于自己的目标。口头奖励加强的自我关怀，替代了破坏性强的自我批评，例如达成小目标后对自己说“你能这样做很棒”，替代了破坏性强的自我批评“这没什么大不了的，别人都比你做的好”我们经常赞扬和鼓励自己，就会更愿意去做自己期待的事情。用奖励强化行为，完成什么事后，获得什么奖励，这种强化机制，让自己更有动力去执行这件事。奖励强化行为可以用个方法更有效，即代币机制：1.给期待的行为制定相应的分值，2.积累到一定分值可以获得奖励，3.给每个奖励都标上需要的分值，4.用代币机制去获得这个奖励可以用这种方式为自己建立良好的习惯。执行了什么符合目标的事情，获得多少分值，累积了多少分值，想要获得什么奖励。关键在于记录，记录自己做的事情，并记录分数。自我奖励改善了我和自己的关系，我们犒劳了自己，奖赏了自己，关注自己的需要并满足它们，这些都是滋养自己的事情。让自己（主动让自己，调整自己）进入一个良性的循环中去。专项对策：计划遇阻的对策很多人认为事情的发展是一条直线，其实不是，它是曲折的，不可预测的。大部分人害怕失败，当他们看到失败的可能性时，为了避免彻底失败，干脆主动放弃，逃避失败。大部分人对自己太苛刻，用很多‘必须’和‘应该’来包装自己的计划，一旦计划中断，就会自我攻击，‘你就是不如别人’、‘你就是个三分钟热度的人’、‘你一辈子也就这样了’很多人只关注结果，而不享受过程。当不符合预期的情况出现时，就会因为害怕而夸大可能出现的结果。比如三天不运动就会说，自己的坚持运动的计划破产了。悲观预期削弱了他们前进的动力，无法继续走下去。用ABCDE法，即，A记录客观事实B记录发生后自己的看法C记录行为导致的结果D重新审视自己的看法E计划在新看法下激发新行动因为这事会发生很多次，所以我认为除了这个方法外，我们可以再改进方法，即，记录，统计，总结，制定应对方法。把所有阻碍都记录下来，然后统计原因，总结原因，制定当这些原因发生的时候，我们应该用什么样的方法或技巧去应对。专项对策：计划失败时的对策《终生成长》提到的成长型思维是关键固定型思维，人是天生的，聪明和笨是不无法改变的，人的基因决定了一切，命运是无法改变的，他人的成功对我造成了威胁。成长型思维，人的智力是可以提高的（这会让人产生学习的欲望），人是可以通过努力学习和拼搏改变命运的，遇到困难时迎接挑战面对挫折坚持不懈，努力练习才能熟能生巧，从他人的成功中学到新的知识获得新的灵感。关键是去塑造成长型思维，有哪些方法可以帮助我们塑造成长型思维呢？1.当出现失败时，观察自己的固定型思维在说些什么。把它们写下来，它们可能是“放弃吧，你的能力还做不了这么难的事情”或者“不管你怎么努力，你永远都不可能比别人优秀”2.和自己的固定型思维对话，例如“欢迎你存在，你的存在使得我有对照，可以让我变的更好。让我们来看看能从这次失败中学到什么？我可以做些什么可以让我做得更好些”3.列出具体的调整计划，按照调整计划去行动。这步很重要，是思维到行为落地的过程，只有真正行动起来才算有效调整。也只有真正按调整计划行动起来，成长型思维才算真正建立起来。塑造成长型思维的关键是让自己的关注点，从“我是不是足够好”转变为关注“我还能学到什么东西”，不断从失败中学习成长，让失败成为我们实现目标的加速器。（可以学习下人复盘加速成长）专项对策：意志力意志力包括三种不同级别大小的力量1.我不要2.我要做3.我想要我不要，说的是我为了自身考虑，不要做什么，比如我不要吸烟、我不要玩游戏、我不要吃甜食等。我不要这种力量虽然能够促进自我，但力量太薄弱，人很难用这种力量与自己对抗。我要做，说的是我在事情面前认为自己应该做的，比如我要努力干活，我要努力学习，我要坚持运动。我要做这种力量，虽然比我不要更强大一些，但仍然不受我们控制，不是我们要做就能做到的，时常会遇到我们要做什么但最终还是没有去做或者做不下去的情况。我想要，说的是当自己知道真正的目标的时候，就更有可能拒绝眼前的诱惑，并且会主动去选择那些困难的任务，所以它是前面两种力量的基础，也是根基最深的力量。我想要这种力量，带给你无穷的想象力，无穷的动力，让你能想出各种办法，专心专注的去实现自己的目标。意志力就是去驾驭这三种力量而存在的，如果驾驭的好，它就能帮我们实现目标。意志力也是可以通过练习提高的。提高意志力方案1.运动提高意志力储备运动就是提高意志力储备的最好的方法之一。每天运动一下，可以是10分钟-60分钟之间，不断加强锻炼强度，让自己不断去提高意志力储备。这里提醒大家一句，低强度而持续的锻炼，比高强度但短暂的锻炼有更明显的提高意志力的效果。2.有计划的练习，‘我不要’，‘我要做’，‘我想要’的三种能力1.列出‘我不要’的事情，和，‘我要做’的事情，用任务的方式去做自己给自己规定的事情。    比如，我不要喝咖啡，我不要吸烟，我不要吃甜食。我要每天看书30分钟，我要每天早起，我要每月强制存款3000元，我要每周写篇文章。2.有意识的每天练习‘我不要’和‘我要做’能锻炼自己的意志力，为自己的执行计划打下坚定的基础。    增强这两种力量，对我们实现目标的可能性也就越大。3.练习‘我想要’的力量时，有两个方法，    一是，每天花两分钟在脑海中描绘目标实现后的景象，始终记住自己的目标。    二是，面对诱惑时不马上行动，而是先等10分钟，10分钟里告诉自己真正想要的是什么，让前额皮层开始工作。 通过每天记住自己的目标，诱惑前思考10分钟，来锻炼“我想要”的力量，这样做的同时也会增强“我不要”和“我要做”的力量。给自己未来写信方案我们会把未来的自己想象成完全不同的人，这是一种错误的想象。这会让我们对待未来的自己就像对待陌生人一样。当我们考虑未来的自己的时候，你就好像在想一个陌生人一样。这样的话，你就有很大可能对未来的自己说，“去你的，你会怎么样我一点都不关心”，这会导致我们不关心自己的未来，而被当下的诱惑所屈服。这也是为什么很多人不为未来做准备的原因，因为和陌生人的幸福比起来，我们更关心自己的幸福。比如，不为年老的自己存款，不为了未来更优秀的自己而学习，不为了未来的身体健康而锻炼，不为了更好的节奏而早起等等等。有一种测量方式，叫做‘未来自我的连续性’，这个方法可以帮助我们认识到未来的自己在本质上和现在的自己是一样的。研究表明，那些“未来自我连续性”比较高的人，也就是“现在的我”和“未来的我”圆圈重叠得比较多的人，为未来计划和实施的事情也越多，表象上来看他们的存款更多，储备的知识更丰富，也更加健康，未来也更加美好。当你的两个圈重叠越多时，你就越有可能为未来的目标而努力，你的目标也就越容易实现。我们可以每个月给未来的自己写封信，这有助于我们挡住眼前即时满足的诱惑，而选择更有利于长期目标的行动。信中可以写：想象下自己未来在做什么？他会如何看待现在做出的选择？向未来的自己描述下自己将会怎么做，这是他希望的吗？我对未来有什么希望？我觉得自己会变成什么样？想象未来的自己回头看现在的自己，他会为现在的自己做了什么而表示感激？每个月写一封，这样的信，给未来的自己，让自己和未来的自己越来越亲密，重叠度越来越高，也就越来越喜欢做对自己未来有帮助的事情了。专项对策：时间不够假如你是个‘时间富翁’，有取之不尽的时间，你每天都有很多时间去做你想要做的事情，运动、学习、工作、副业，实现一个个目标，你变得健康、自信、富有。因此关键是时间，和使用时间的效率。时间和效率，两者不同，一个是注重使用情况，另一个注重使用的点。我们知道二八原则，20%的重要的事情，要花费80%的精力是比较高效的，而反过来如果我们把80%的精力花在80%不重要的事情上，效率就会很差。首先把无效时间转变为有效时间。如何转变呢？1.关键在于记录时间2.记录后，分析你的时间，每天无效时间和有效时间分别是多少3.把无效时间转变为以有效时间。其次重注效率。给那些重要但不紧急的目标加上优先级。我们很多时候都是在工作，处理的都是紧急但不重要的事情，导致对我们重要而不紧急的事情被无限期拖延。方法1，每天列个清单，只做5件事，如果出现了更重要的事情，则在5件事中删除一件。这样可以确保我们把时间花在这些重要的事情上。方法2，把紧急但可以缓一缓做的事情放在一个列表里，然后在某段时间批量处理。比如还信用卡，回某人短息，处理邮件，安排会议时间等，放在任务列表里，等到自己手头上的事情结束时，集合起来去完成它们。最后是时间盒子法安排固定一段时间，专门做某事，就叫做时间盒子。比如早上8点到8点半：30分钟写文章，9点到9点半：健身房运动，晚上10点10点半：中午12点到12点半，30分钟看书：梳理一天的生活。把时间固定下来，成为一个时间盒子。这样能确保我们每天都能朝着目标行动。时间盒子要注意两点：1.时间要固定，形成固定节奏后不能随意改动。2.时间盒子内，神圣不可侵犯，关掉手机关掉电视，全心全意做好这件事。",
            "content_html": "<h3 id=\"背景\">背景：</h3><p>机缘巧合从印象笔记中看到目标管理这个课程，也正好契合我最近的理念。我发现学习，工作，生活如果没有目标就很难做的好，同样的人生如果没有目标，就很难保持动力和正确的方向。</p><p>虽然我一直提倡时间管理，精力管理，但这一切都是为了什么呢？在漫无目的的行动中，常常使我迷茫，因为太枯燥太无聊了，我时常问自己，“这样坚持下去真的有效吗？”于是目标管理映入我的眼帘，以前很排斥的东西，现在变成了我的宝贝。</p><p>当然事情并没有这么顺利，我发现它需要一个很强大的习惯来支撑它的运作，不过我认定这是个好东西我开始将目标管理付诸于实际生活中，它是一个漫长的练习过程，我希望在学习和实践中不断领悟其精髓，并分享给大家。</p><h3 id=\"疑问\">疑问：</h3><p>我在这次好奇般的学习过程中到底学到了什么呢？我给自己提出了几个疑问，并做了总结和自我解答。</p><h3 id=\"我们为什么害怕目标\">我们为什么害怕目标？</h3><h3 id=\"为什么要目标管理\">为什么要目标管理？</h3><h3 id=\"目标管理的精髓是什么\">目标管理的精髓是什么？</h3><h3 id=\"它有哪些策略可以用分别是什么\">它有哪些策略可以用？分别是什么？</h3><h3 id=\"内容\">内容：</h3><p>我们对目标管理其实有很深的偏见。因为无论是工作还是学校学习，都会有上级和老师给我们的目标，每次这种目标都会给我们很大的压力。甚至很多时候因为目标太大，压力太重，压垮了我们。所以我们大部分人都很害怕‘目标’这两个字，很少有人能真正主动去接受它、拆解它、分析它。</p><p>我也是一样，只是在学习过程中，我渐渐了解了如何应对，慢慢的熟知了它，并且喜欢上了它。这里我想所讲的目标管理，都是我们自己主动发出的目标，而不是别人给予我们的目标。因为这两者有很大的不同，一个是你自己想要的，另一个则是别人强加给你的。至于怎么把别人强加给你的目标变成自己的目标则是另外一回事了。</p><p>目标管理有一个成功方程式，即，</p><pre><code>目标达成 = 目标 * 策略 * （动力 - 阻力）</code></pre><p>方程式中每个词语都是关键，目标、策略、动力、阻力。下面我们就来 一 一 分解他们。</p><h3 id=\"首先目标制定非常关键它是所有一切的前提好的目标让我们动力满满而差的目标让我们沮丧\">首先，目标制定非常关键，它是所有一切的前提，好的目标让我们动力满满，而差的目标让我们沮丧。</h3><p>定目标的时候，我们要考虑自己的力量，不能超过自己能力范围太多，这样会让我们受到很大的挫败感而不敢前进，也不能在自己的能力范围之内，会让我们觉得很无聊。</p><p>目标制定的时候要有延展性，就是在原来可达到的目标之上延展30-50%左右，这样目标会更加合理些。如果原来完全没接触过的，则要把目标定的低一些，以免挫败感太强烈。</p><h3 id=\"其次目标要符合我们的价值观\">其次，目标要符合我们的价值观。</h3><p>价值观反应了我们的个性，如果不符合我们的价值观，我们在目标的执行过程中也很难进行下去。</p><p>其根本原因通常是跟我们的价值观相反的东西，我们很难坚持。</p><p>没有绝对好的价值观，价值观通常不是我们想要的东西，而是反应我们性格的东西，你是什么样的人，就会有什么样的价值观。</p><h3 id=\"接着目标定制要有符合smart原则即要具体的可衡量的可达到的和其他目标有关联的\">接着，目标定制要有符合SMART原则，即：要具体的，可衡量的，可达到的，和其他目标有关联的。</h3><h3 id=\"最后长远目标要拆分成很多小而简单的目标比如1年的目标要拆分到月目标再拆分到周目标再细分到每天所要做的事情上来\">最后，长远目标要拆分成很多小而简单的目标，比如1年的目标要拆分到月目标，再拆分到周目标，再细分到每天所要做的事情上来。</h3><p>也只有这样才能让自己感到安全，把事情落地到每天的任务上才能让我们有实实在在的安全感，而不会只是远远得望着这个1整年的大目标而感到害怕。</p><p>当然我们在制定目标的时候，最好不要只制定单方面的目标，因为单一的目标会让自己很枯燥，也无法平衡人生的这辆车。我们的目标应该比较多元化，这些目标加起来应该要平衡我们人生的各个方向，包括，精神上的、思维上的、情绪、身体、婚姻、亲情、人际、专业、娱乐、财务。只有这样才能让我们能感到，是整辆车在不断前进，而不单单是单个轮子在走，整辆车则停滞不前。</p><h3 id=\"下面是一些在目标执行过程中的策略前半部分是我在实践过程中的一些体会后半部分是目标管理的学习有助于我们更好的坚持下去并最终完成目标\">下面是一些在目标执行过程中的策略，前半部分是我在实践过程中的一些体会，后半部分是目标管理的学习，有助于我们更好的坚持下去，并最终完成目标。</h3><h3 id=\"这是一个过程首先我们要享受过程在过程中学习和进步其次我们要不断调整自己努力让自己达成目标获得成就\">这是一个过程，首先我们要享受过程，在过程中学习和进步，其次我们要不断调整自己，努力让自己达成目标获得成就。</h3><h3 id=\"这不仅能让我们达成目标获得成就更重要的是在未来的日子中我们能活的更加自信和洒脱也许无法让你财务自由但肯定能让你精神自由\">这不仅能让我们达成目标获得成就，更重要的是在未来的日子中，我们能活的更加自信和洒脱，也许无法让你财务自由，但肯定能让你精神自由。</h3><h3 id=\"策略1\">策略1</h3><p>观察自己</p><p>记录生活中的每一样事情，这样可以方便我们统计自己的行为。由于我们很难看清自己，自己的日常生活中觉醒过来是很难的，所以将自己生活中的每一件事记录下来，再隔1周去看这些数据，会有惊人的发现。</p><p>发现了自己的问题，并寻求改善，再记录，在分析，再改善，形成一种良性循环。</p><p>记录的方式有两种</p><pre><code>第一种是，对某些自己在意的事做数据记录，并统计，最后通过数据分析，看到自己的问题，再寻找解决办法第二种是，把事情的前因后果，和自己的所思所想，记录下来，通过复盘的形式寻找调整方案</code></pre><h3 id=\"策略2\">策略2</h3><h3 id=\"强化习惯\">强化习惯</h3><h3 id=\"在做了某件事之后如果得到一个你很喜欢的结果那么这件事做多了就会被强化\">在做了某件事之后，如果得到一个你很喜欢的结果，那么这件事做多了，就会被强化。</h3><p>其结果可以是物品、赞扬、活动等，因此我们这里最应该研究的是如何奖励自己。</p><p>研究奖励时应该注意，做完某件事后，会很愉快，这个愉快到底是从哪里来才是关键。</p><p>下面些奖励的例子</p><p>娱乐：看电影，爬山，游乐场，旅行，玩游戏感情：和家人玩，和朋友玩，和闺蜜玩物品：买电子产品，买家具电器，买衣服鞋子社交：得到赞扬，受人关注食物：美食，巧克力</p><h3 id=\"策略3\">策略3</h3><p>列出阻力，并且列出应对方案</p><h3 id=\"列出所有可能阻碍自己计划进行的障碍并想出应对方案\">列出所有可能阻碍自己计划进行的障碍，并想出应对方案</h3><h3 id=\"当预料到的阻碍来临时用自己设计好的应对方案去应对\">当预料到的阻碍来临时，用自己设计好的应对方案去应对。</h3><h3 id=\"如果不行则再更换其他方案直到能应对为止\">如果不行，则再更换其他方案，直到能应对为止。</h3><p>当自己实行应对方案时，有没有效果都要记录下来。这能够不断记得自己的目标，也能看到自己的进步。</p><h3 id=\"策略4\">策略4</h3><p>记录反馈数据</p><p>前面说，我们的目标必须是可衡量的，也就是说，每一步必须都是可用数据表现出来了。</p><h3 id=\"在每次小目标完成时都要把数据记录下来这样可以及时帮助我们调整计划\">在每次小目标完成时都要把数据记录下来，这样可以及时帮助我们调整计划。</h3><h3 id=\"比如能看到我们最近的目标进度情绪变化等等从而调整新的计划和应对方案\">比如，能看到我们最近的目标进度，情绪变化等等，从而调整新的计划和应对方案。</h3><h3 id=\"策略5\">策略5</h3><p>和自己签约</p><p>这是一个增强动力的方法。</p><h3 id=\"把目标想象成一个项目甲方乙方都是自己\">把目标想象成一个项目，甲方乙方都是自己，</h3><h3 id=\"作为甲方我要监督项目的进展把控项目的质量在项目完成后给予报酬\">作为甲方，我要监督项目的进展，把控项目的质量，在项目完成后给予报酬。</h3><h3 id=\"作为乙方你要遵守合约的约定调动资源合理安排进度排除障碍保证高质量的完成项目\">作为乙方，你要遵守合约的约定，调动资源，合理安排进度，排除障碍，保证高质量的完成项目。</h3><p>用这种很正式的书面约定，签字画押，将自己与目标绑定。一个人对目标承诺度越高，他完成目标的可能性就越大。</p><p>这样就能让自己非常重视目标，也就有了动力。</p><h3 id=\"1合约能让自己明确这个目标对自己有多重要\">1.合约能让自己明确这个目标对自己有多重要。</h3><h3 id=\"2合约会加强你对目标成功的期待它会让你看到目标实现后的样子就好像前方的苹果树你能清晰的看到它\">2.合约会加强你对目标成功的期待。它会让你看到目标实现后的样子，就好像前方的苹果树，你能清晰的看到它。</h3><h3 id=\"3合约是一种自我约束尽一切努力去完成约定不能随便毁约这就是契约精神\">3.合约是一种自我约束，尽一切努力去完成约定，不能随便毁约，这就是契约精神。</h3><p>合约内容</p><pre><code>1.把SMART目标写在合约里。2.写下这个目标对你的重要性，1-5分。3.把目标拆分成小目标也写在合约里，每个小目标的内容，阶段性的目标，周目标，这样就能减少自己对目标的恐惧。4.把计划写在合约里，受到阻碍时的应对方案。5.在合约里写明奖励机制，对小目标、阶段性目标也要有奖励。6.写下你曾经经历过的依次成功经历，写出自己的哪些特质和能力让自己成功。7.写下自己对合约的承诺，签字画押，并贴在墙上，同时把合约给重要的人看，从而获得他们的支持，亲人和朋友对你的支持是非常重要的。</code></pre><h3 id=\"策略-6\">策略 6</h3><h3 id=\"自我关怀\">自我关怀</h3><p>大多数人总是在批评自己，而不是在关怀自己自我批评是我们每个人都很熟悉和擅长的一件事。</p><p>常常，当我们没有达成预想的目标时，或者经历失败的时候，我们总是会对自己说，“我就是不如别人”，“我真的很失败”，“我怎么就是做不好呢”，然后你可能会对自己说，“你应该再努力点”，“你不能总是这样懒惰”，“你再不努力就没有机会了”，我们以为只有不断鞭策自己、不断找出问题并改正，才能够进步，才能够达成目标。</p><h3 id=\"这其实是我们自身启动了防御系统通过自我批评的防御系统来改变自己通过改变自己让自己变得更加安全\">这其实是我们自身启动了防御系统，通过自我批评的防御系统来改变自己，通过改变自己，让自己变得更加安全。</h3><h3 id=\"这个防御系统有很多负面作用它会让我们出现三种常见表现第一战斗猛烈的批评自己第二僵住不停反思自己为什么会这样以后该怎么做第三逃跑逃避所有可能的失败一个人呆在安全的地方\">这个防御系统有很多负面作用，它会让我们出现三种常见表现，第一，战斗，猛烈的批评自己，第二，僵住，不停反思自己为什么会这样，以后该怎么做，第三，逃跑，逃避所有可能的失败，一个人呆在安全的地方。</h3><h3 id=\"它对我们实现目标有相反的作用会导致我们降低自信增加焦虑感甚至导致抑郁这些会让我们放弃目标的概率变的更大\">它对我们实现目标有相反的作用，会导致我们降低自信，增加焦虑感，甚至导致抑郁，这些会让我们放弃目标的概率变的更大。</h3><p>自我关怀则不是，它可以让我们更好的坚持目标。它最重要的作用是，让我们感到放松和安全，我们就像怀抱里获得温暖的孩子那样，当我们获得了力量，就不会轻易放弃我们的目标了。</p><h3 id=\"第一个方法写自我关怀日记\">第一个方法，写自我关怀日记</h3><p>日记分为三部分：此时此刻，连接，爱。</p><pre><code>1.不带任何评价的写出此时此刻的感受，2.要意识到世界上每个人都在经历挫折和痛苦，3.把自己当做好朋友用关怀的语气给自己写些温暖的话语。</code></pre><h3 id=\"第二个方法身体触摸\">第二个方法，身体触摸</h3><p>原理是，当母亲轻抚孩子的头，轻拍孩子的肩膀，拥抱孩子的时候，孩子都会感到安全和轻松。同样的，我们对自己做类似的触摸时，也会感到被关爱，这样身体和精神都会放松下来。找一个能让你感到安全、感到被支持的身体姿势，用这个姿势来安慰自己。</p><p>例如：</p><pre><code>把一只手放在心上双手交叠在心上一只手放在心上，一只手放在肚子上两只手交叠放在肚子上一只手或两只手放在脸颊上交叉胳膊，给自己一个温柔的拥抱把手放在大腿上，轻轻地拍一只手轻拍另一只收</code></pre><h3 id=\"第三个方法对自己说善意的话语\">第三个方法，对自己说善意的话语</h3><p>在心里，或者对着镜子里的自己说，让自己感到安全、温暖、被支持的话语。这个方法可以降低我们内在批评的背景声音，从而减少内在冲突，让我们在实现目标的路上更加平静和自信。</p><p>善意的话语有点像是祝福自己的话语，“愿我平安、愿我平静、愿我勇敢”找善意的话语，聚焦一个问题：我需要什么？然后从内心深处的需要找适合自己的话语。</p><h3 id=\"找到内心需要而不是想要需要是脖子以下的需要包括被认可被欣赏被爱被看见被听到被保护被珍惜被尊重\">找到内心需要，而不是想要，需要是脖子以下的需要，包括，被认可、被欣赏、被爱、被看见、被听到、被保护、被珍惜、被尊重。</h3><h3 id=\"去发现和找到适合自己的当自己情绪低落的时候希望别人对你说什么哪些话能够安慰到你然你平静下来或振作起来\">去发现和找到适合自己的，当自己情绪低落的时候，希望别人对你说什么？哪些话能够安慰到你，然你平静下来或振作起来？</h3><h3 id=\"把这些话记录下来作为自己的善意话语库供自己随时使用\">把这些话记录下来，作为自己的“善意话语库”，供自己随时使用。</h3><p>这三个方法要勤加练习，自我关怀让阻碍我们实现目标的最大敌人（我们自己），变成帮助我们实现目标的最好盟友。</p><h3 id=\"策略7\">策略7</h3><h3 id=\"建立自我奖励机制\">建立自我奖励机制</h3><p>1.列出自我奖励清单    头脑风暴出所有让你感到高兴、满足、愉快的事物和活动。        想象奖励：达成目标后的美好场景，让自己产生愉悦的感觉        口头奖励：当做了符合目标的行为后，对自己口头的表扬2.行为和奖励配对    即，做了什么，就会获得什么奖励，这样就能强化我们的行为，让自己更加喜欢去做这件事。</p><h3 id=\"经常让自己去想象获得奖励时的场景这不仅会对你现在的行为有好处而且会提醒和强化你的长期目标是什么让你更聚焦于自己的目标\">经常让自己去想象获得奖励时的场景，这不仅会对你现在的行为有好处，而且会提醒和强化你的长期目标是什么，让你更聚焦于自己的目标。</h3><p>口头奖励加强的自我关怀，替代了破坏性强的自我批评，例如达成小目标后对自己说“你能这样做很棒”，替代了破坏性强的自我批评“这没什么大不了的，别人都比你做的好”</p><p>我们经常赞扬和鼓励自己，就会更愿意去做自己期待的事情。</p><p>用奖励强化行为，完成什么事后，获得什么奖励，这种强化机制，让自己更有动力去执行这件事。</p><p>奖励强化行为可以用个方法更有效，即代币机制：</p><pre><code>1.给期待的行为制定相应的分值，2.积累到一定分值可以获得奖励，3.给每个奖励都标上需要的分值，4.用代币机制去获得这个奖励</code></pre><p>可以用这种方式为自己建立良好的习惯。执行了什么符合目标的事情，获得多少分值，累积了多少分值，想要获得什么奖励。关键在于记录，记录自己做的事情，并记录分数。</p><h3 id=\"自我奖励改善了我和自己的关系我们犒劳了自己奖赏了自己关注自己的需要并满足它们这些都是滋养自己的事情\">自我奖励改善了我和自己的关系，我们犒劳了自己，奖赏了自己，关注自己的需要并满足它们，这些都是滋养自己的事情。</h3><p>让自己（主动让自己，调整自己）进入一个良性的循环中去。</p><hr /><h3 id=\"专项对策计划遇阻的对策\">专项对策：计划遇阻的对策</h3><p>很多人认为事情的发展是一条直线，其实不是，它是曲折的，不可预测的。</p><h3 id=\"大部分人害怕失败当他们看到失败的可能性时为了避免彻底失败干脆主动放弃逃避失败\">大部分人害怕失败，当他们看到失败的可能性时，为了避免彻底失败，干脆主动放弃，逃避失败。</h3><h3 id=\"大部分人对自己太苛刻用很多必须和应该来包装自己的计划一旦计划中断就会自我攻击你就是不如别人你就是个三分钟热度的人你一辈子也就这样了\">大部分人对自己太苛刻，用很多‘必须’和‘应该’来包装自己的计划，一旦计划中断，就会自我攻击，‘你就是不如别人’、‘你就是个三分钟热度的人’、‘你一辈子也就这样了’</h3><p>很多人只关注结果，而不享受过程。当不符合预期的情况出现时，就会因为害怕而夸大可能出现的结果。比如三天不运动就会说，自己的坚持运动的计划破产了。悲观预期削弱了他们前进的动力，无法继续走下去。</p><p>用ABCDE法，即，</p><pre><code>A记录客观事实B记录发生后自己的看法C记录行为导致的结果D重新审视自己的看法E计划在新看法下激发新行动</code></pre><p>因为这事会发生很多次，所以我认为除了这个方法外，我们可以再改进方法，即，记录，统计，总结，制定应对方法。把所有阻碍都记录下来，然后统计原因，总结原因，制定当这些原因发生的时候，我们应该用什么样的方法或技巧去应对。</p><hr /><h3 id=\"专项对策计划失败时的对策\">专项对策：计划失败时的对策</h3><p>《终生成长》提到的成长型思维是关键</p><p>固定型思维，人是天生的，聪明和笨是不无法改变的，人的基因决定了一切，命运是无法改变的，他人的成功对我造成了威胁。</p><h3 id=\"成长型思维人的智力是可以提高的这会让人产生学习的欲望人是可以通过努力学习和拼搏改变命运的遇到困难时迎接挑战面对挫折坚持不懈努力练习才能熟能生巧从他人的成功中学到新的知识获得新的灵感\">成长型思维，人的智力是可以提高的（这会让人产生学习的欲望），人是可以通过努力学习和拼搏改变命运的，遇到困难时迎接挑战面对挫折坚持不懈，努力练习才能熟能生巧，从他人的成功中学到新的知识获得新的灵感。</h3><p>关键是去塑造成长型思维，有哪些方法可以帮助我们塑造成长型思维呢？</p><h3 id=\"1当出现失败时观察自己的固定型思维在说些什么把它们写下来它们可能是放弃吧你的能力还做不了这么难的事情或者不管你怎么努力你永远都不可能比别人优秀\">1.当出现失败时，观察自己的固定型思维在说些什么。把它们写下来，它们可能是“放弃吧，你的能力还做不了这么难的事情”或者“不管你怎么努力，你永远都不可能比别人优秀”</h3><h3 id=\"2和自己的固定型思维对话例如欢迎你存在你的存在使得我有对照可以让我变的更好让我们来看看能从这次失败中学到什么我可以做些什么可以让我做得更好些\">2.和自己的固定型思维对话，例如“欢迎你存在，你的存在使得我有对照，可以让我变的更好。让我们来看看能从这次失败中学到什么？我可以做些什么可以让我做得更好些”</h3><h3 id=\"3列出具体的调整计划按照调整计划去行动这步很重要是思维到行为落地的过程只有真正行动起来才算有效调整也只有真正按调整计划行动起来成长型思维才算真正建立起来\">3.列出具体的调整计划，按照调整计划去行动。这步很重要，是思维到行为落地的过程，只有真正行动起来才算有效调整。也只有真正按调整计划行动起来，成长型思维才算真正建立起来。</h3><h3 id=\"塑造成长型思维的关键是让自己的关注点从我是不是足够好转变为关注我还能学到什么东西不断从失败中学习成长让失败成为我们实现目标的加速器\">塑造成长型思维的关键是让自己的关注点，从“我是不是足够好”转变为关注“我还能学到什么东西”，不断从失败中学习成长，让失败成为我们实现目标的加速器。</h3><p>（可以学习下人复盘加速成长）</p><hr /><h3 id=\"专项对策意志力\">专项对策：意志力</h3><p>意志力包括三种不同级别大小的力量</p><pre><code>1.我不要2.我要做3.我想要</code></pre><p>我不要，说的是我为了自身考虑，不要做什么，比如我不要吸烟、我不要玩游戏、我不要吃甜食等。我不要这种力量虽然能够促进自我，但力量太薄弱，人很难用这种力量与自己对抗。</p><p>我要做，说的是我在事情面前认为自己应该做的，比如我要努力干活，我要努力学习，我要坚持运动。我要做这种力量，虽然比我不要更强大一些，但仍然不受我们控制，不是我们要做就能做到的，时常会遇到我们要做什么但最终还是没有去做或者做不下去的情况。</p><p>我想要，说的是当自己知道真正的目标的时候，就更有可能拒绝眼前的诱惑，并且会主动去选择那些困难的任务，所以它是前面两种力量的基础，也是根基最深的力量。我想要这种力量，带给你无穷的想象力，无穷的动力，让你能想出各种办法，专心专注的去实现自己的目标。</p><p>意志力就是去驾驭这三种力量而存在的，如果驾驭的好，它就能帮我们实现目标。意志力也是可以通过练习提高的。</p><h3 id=\"提高意志力方案\">提高意志力方案</h3><p>1.运动提高意志力储备</p><pre><code>运动就是提高意志力储备的最好的方法之一。每天运动一下，可以是10分钟-60分钟之间，不断加强锻炼强度，让自己不断去提高意志力储备。这里提醒大家一句，低强度而持续的锻炼，比高强度但短暂的锻炼有更明显的提高意志力的效果。</code></pre><p>2.有计划的练习，‘我不要’，‘我要做’，‘我想要’的三种能力</p><pre><code>1.列出‘我不要’的事情，和，‘我要做’的事情，用任务的方式去做自己给自己规定的事情。    比如，我不要喝咖啡，我不要吸烟，我不要吃甜食。我要每天看书30分钟，我要每天早起，我要每月强制存款3000元，我要每周写篇文章。2.有意识的每天练习‘我不要’和‘我要做’能锻炼自己的意志力，为自己的执行计划打下坚定的基础。    增强这两种力量，对我们实现目标的可能性也就越大。3.练习‘我想要’的力量时，有两个方法，    一是，每天花两分钟在脑海中描绘目标实现后的景象，始终记住自己的目标。    二是，面对诱惑时不马上行动，而是先等10分钟，10分钟里告诉自己真正想要的是什么，让前额皮层开始工作。 通过每天记住自己的目标，诱惑前思考10分钟，来锻炼“我想要”的力量，这样做的同时也会增强“我不要”和“我要做”的力量。</code></pre><h3 id=\"给自己未来写信方案\">给自己未来写信方案</h3><p>我们会把未来的自己想象成完全不同的人，这是一种错误的想象。</p><h3 id=\"这会让我们对待未来的自己就像对待陌生人一样当我们考虑未来的自己的时候你就好像在想一个陌生人一样\">这会让我们对待未来的自己就像对待陌生人一样。当我们考虑未来的自己的时候，你就好像在想一个陌生人一样。</h3><p>这样的话，你就有很大可能对未来的自己说，“去你的，你会怎么样我一点都不关心”，这会导致我们不关心自己的未来，而被当下的诱惑所屈服。</p><h3 id=\"这也是为什么很多人不为未来做准备的原因因为和陌生人的幸福比起来我们更关心自己的幸福\">这也是为什么很多人不为未来做准备的原因，因为和陌生人的幸福比起来，我们更关心自己的幸福。</h3><h3 id=\"比如不为年老的自己存款不为了未来更优秀的自己而学习不为了未来的身体健康而锻炼不为了更好的节奏而早起等等等\">比如，不为年老的自己存款，不为了未来更优秀的自己而学习，不为了未来的身体健康而锻炼，不为了更好的节奏而早起等等等。</h3><p>有一种测量方式，叫做‘未来自我的连续性’，这个方法可以帮助我们认识到未来的自己在本质上和现在的自己是一样的。</p><h3 id=\"研究表明那些未来自我连续性比较高的人也就是现在的我和未来的我圆圈重叠得比较多的人为未来计划和实施的事情也越多表象上来看他们的存款更多储备的知识更丰富也更加健康未来也更加美好\">研究表明，那些“未来自我连续性”比较高的人，也就是“现在的我”和“未来的我”圆圈重叠得比较多的人，为未来计划和实施的事情也越多，表象上来看他们的存款更多，储备的知识更丰富，也更加健康，未来也更加美好。</h3><p>当你的两个圈重叠越多时，你就越有可能为未来的目标而努力，你的目标也就越容易实现。</p><p>我们可以每个月给未来的自己写封信，这有助于我们挡住眼前即时满足的诱惑，而选择更有利于长期目标的行动。</p><p>信中可以写：</p><pre><code>想象下自己未来在做什么？他会如何看待现在做出的选择？向未来的自己描述下自己将会怎么做，这是他希望的吗？我对未来有什么希望？我觉得自己会变成什么样？想象未来的自己回头看现在的自己，他会为现在的自己做了什么而表示感激？</code></pre><p>每个月写一封，这样的信，给未来的自己，让自己和未来的自己越来越亲密，重叠度越来越高，也就越来越喜欢做对自己未来有帮助的事情了。</p><hr /><h3 id=\"专项对策时间不够\">专项对策：时间不够</h3><p>假如你是个‘时间富翁’，有取之不尽的时间，你每天都有很多时间去做你想要做的事情，运动、学习、工作、副业，实现一个个目标，你变得健康、自信、富有。</p><p>因此关键是时间，和使用时间的效率。时间和效率，两者不同，一个是注重使用情况，另一个注重使用的点。</p><h3 id=\"我们知道二八原则20的重要的事情要花费80的精力是比较高效的而反过来如果我们把80的精力花在80不重要的事情上效率就会很差\">我们知道二八原则，20%的重要的事情，要花费80%的精力是比较高效的，而反过来如果我们把80%的精力花在80%不重要的事情上，效率就会很差。</h3><p>首先把无效时间转变为有效时间。如何转变呢？</p><pre><code>1.关键在于记录时间2.记录后，分析你的时间，每天无效时间和有效时间分别是多少3.把无效时间转变为以有效时间。</code></pre><h3 id=\"其次重注效率\">其次重注效率。</h3><p>给那些重要但不紧急的目标加上优先级。我们很多时候都是在工作，处理的都是紧急但不重要的事情，导致对我们重要而不紧急的事情被无限期拖延。</p><h3 id=\"方法1每天列个清单只做5件事如果出现了更重要的事情则在5件事中删除一件\">方法1，每天列个清单，只做5件事，如果出现了更重要的事情，则在5件事中删除一件。</h3><p>这样可以确保我们把时间花在这些重要的事情上。</p><h3 id=\"方法2把紧急但可以缓一缓做的事情放在一个列表里然后在某段时间批量处理\">方法2，把紧急但可以缓一缓做的事情放在一个列表里，然后在某段时间批量处理。</h3><p>比如还信用卡，回某人短息，处理邮件，安排会议时间等，放在任务列表里，等到自己手头上的事情结束时，集合起来去完成它们。</p><h3 id=\"最后是时间盒子法\">最后是时间盒子法</h3><p>安排固定一段时间，专门做某事，就叫做时间盒子。</p><h3 id=\"比如早上8点到8点半30分钟写文章9点到9点半健身房运动晚上10点10点半中午12点到12点半30分钟看书梳理一天的生活\">比如早上8点到8点半：30分钟写文章，9点到9点半：健身房运动，晚上10点10点半：中午12点到12点半，30分钟看书：梳理一天的生活。</h3><h3 id=\"把时间固定下来成为一个时间盒子这样能确保我们每天都能朝着目标行动\">把时间固定下来，成为一个时间盒子。这样能确保我们每天都能朝着目标行动。</h3><p>时间盒子要注意两点：</p><pre><code>1.时间要固定，形成固定节奏后不能随意改动。2.时间盒子内，神圣不可侵犯，关掉手机关掉电视，全心全意做好这件事。</code></pre>",
            "url": "http://www.luzexi.com/2021/03/28/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B020",
            
            
            
            
            
            "date_published": "2021-03-28T00:00:00+08:00",
            "date_modified": "2021-03-28T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/03/22/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A860",
            "title": "思路探讨(六十) 杂谈",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "最近看了《基业长青》，这本书着实不错，它讲了组织发展的核心，分析了曾经那些高瞻远瞩的公司是如何屹立不倒并越走越旺的根本原因。作者为了不让自己陷入自己设计好的偏见陷阱中，拿了各种与自己观念相反的案例来分析，包括那些曾经高瞻远瞩公司后来倒下去的案例，以及并没有与自己观点相符但活的很好的公司。全书给我很多启发，其精神世界的力量贯穿始终，后面打算专门写一篇关于此书的文章来全面介绍此书的精髓之处。看完后让我沉思许久，发现我的技术经验是我唯一的财富，它不能转变成为可以传承的东西，或者说可以几代人不断经营的东西，这让我重新审视了我的职业和我正在做的事情。从更大的视角来说，我现在做的事情是短视的。我正在做一件，只考虑了我自己的事情。我喜欢编程技术，用它来赚钱养家糊口，这其实就是短视的一种，因为我并没有建立几代人可以共同努力的东西，只顾自己喜欢和擅长的东西。我的经验和技术会随着我的死亡而消失，期间也无法与任何人共同经营，而我只能自己拼搏，然后独自乐呵或悲伤。经验的好处是让我在处理事情的时候有了依据，但同时也限制了我的想象力。想到这里，我确实短视了很多年了，只想到自己没有太多的顾及别人。不过庆幸的是这么多年下来，我比较注重精神世界，没有被世俗吞没。来深圳后，让我想明白一件事，大多数事情跟我想象的完全不一样，我只要做好我认为对的事情就可以了，直到自己认识到有问题及时改进，这样不断完善自己。人与人的区别是精神世界，俗话说，广厦千间，夜眠仅需六尺，家财万贯，日食不过三餐。房再多，睡觉时也只需要4平方面的床，钱再多，一天只不过吃三餐。说到这里，让我想起，以前看过的《亮剑》中的军魂，它就是精神世界的代表，它应该代表了军队中精神世界的比较高的境界。狭路相逢勇者胜，逢敌先亮剑而不是想着先退缩，这是真实战斗中比较好的精神状态。精神世界是人类最高层级的东西，就因为人有精神世界，才与机器人完全区别开来。所以我在自律的同时，一直告诫自己，要多观察自己，要多问自己为什么，要多看看别人和自己的区别是什么，避免死板。如果我想要更多的确定性，就得付出更多的努力，去经营的世界，经营的理念，步步完善，日日积累。有才却耐不住性子，忍受不了枯燥，和平庸者没两样，甚至会更差。更何况我自认为，我是个《笨小孩》，这首歌也在最近的歌单里放了很多遍，勉励自己要稳扎稳打。所以不要放纵，它会成为习惯，要时常忍耐，才能守住自己的成果，因为它很容易就灰飞烟灭。回头看去年最大的成就是，其实是成功戒烟。最后再提醒自己两句：1.你是什么样的人，你就会有什么样的朋友和家人。2.你怎么对待别人，别人就会怎么对待你。",
            "content_html": "<p>最近看了《基业长青》，这本书着实不错，它讲了组织发展的核心，分析了曾经那些高瞻远瞩的公司是如何屹立不倒并越走越旺的根本原因。</p><p>作者为了不让自己陷入自己设计好的偏见陷阱中，拿了各种与自己观念相反的案例来分析，包括那些曾经高瞻远瞩公司后来倒下去的案例，以及并没有与自己观点相符但活的很好的公司。</p><p>全书给我很多启发，其精神世界的力量贯穿始终，后面打算专门写一篇关于此书的文章来全面介绍此书的精髓之处。</p><p>看完后让我沉思许久，发现我的技术经验是我唯一的财富，它不能转变成为可以传承的东西，或者说可以几代人不断经营的东西，这让我重新审视了我的职业和我正在做的事情。</p><p>从更大的视角来说，我现在做的事情是短视的。</p><p>我正在做一件，只考虑了我自己的事情。</p><p>我喜欢编程技术，用它来赚钱养家糊口，这其实就是短视的一种，因为我并没有建立几代人可以共同努力的东西，只顾自己喜欢和擅长的东西。</p><p>我的经验和技术会随着我的死亡而消失，期间也无法与任何人共同经营，而我只能自己拼搏，然后独自乐呵或悲伤。</p><p>经验的好处是让我在处理事情的时候有了依据，但同时也限制了我的想象力。</p><p>想到这里，我确实短视了很多年了，只想到自己没有太多的顾及别人。</p><p>不过庆幸的是这么多年下来，我比较注重精神世界，没有被世俗吞没。来深圳后，让我想明白一件事，大多数事情跟我想象的完全不一样，我只要做好我认为对的事情就可以了，直到自己认识到有问题及时改进，这样不断完善自己。</p><p>人与人的区别是精神世界，俗话说，广厦千间，夜眠仅需六尺，家财万贯，日食不过三餐。</p><p>房再多，睡觉时也只需要4平方面的床，钱再多，一天只不过吃三餐。</p><p>说到这里，让我想起，以前看过的《亮剑》中的军魂，它就是精神世界的代表，它应该代表了军队中精神世界的比较高的境界。</p><p>狭路相逢勇者胜，逢敌先亮剑而不是想着先退缩，这是真实战斗中比较好的精神状态。</p><p>精神世界是人类最高层级的东西，就因为人有精神世界，才与机器人完全区别开来。所以我在自律的同时，一直告诫自己，要多观察自己，要多问自己为什么，要多看看别人和自己的区别是什么，避免死板。</p><p>如果我想要更多的确定性，就得付出更多的努力，去经营的世界，经营的理念，步步完善，日日积累。</p><p>有才却耐不住性子，忍受不了枯燥，和平庸者没两样，甚至会更差。更何况我自认为，我是个《笨小孩》，这首歌也在最近的歌单里放了很多遍，勉励自己要稳扎稳打。</p><p>所以不要放纵，它会成为习惯，要时常忍耐，才能守住自己的成果，因为它很容易就灰飞烟灭。回头看去年最大的成就是，其实是成功戒烟。</p><p>最后再提醒自己两句：</p><h3 id=\"1你是什么样的人你就会有什么样的朋友和家人\">1.你是什么样的人，你就会有什么样的朋友和家人。</h3><h3 id=\"2你怎么对待别人别人就会怎么对待你\">2.你怎么对待别人，别人就会怎么对待你。</h3>",
            "url": "http://www.luzexi.com/2021/03/22/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A860",
            
            
            
            
            
            "date_published": "2021-03-22T00:00:00+08:00",
            "date_modified": "2021-03-22T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/03/18/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A110",
            "title": "给女儿的信(十) 关于自我驱动",
            "summary": "女儿 教育 亲情",
            "content_text": "Hi Sharon Anne，爸爸又想你们了。爸爸再给你们讲讲最近爸爸给自己定目标的事情。爸爸为什么要给自己定目标呢？因为人总是会有懒的时候，总是会有不用脑子去做事情的时候，爸爸想更好的鞭策自己。于是自己给自己定目标，有了目标，爸爸就要想各种办法去慢慢的实现目标，爸爸在慢慢实现目标的过程中，就会不断得动脑筋。这样爸爸不断的动脑筋，既实现了目标，自己获得了成就感，开心了，脑袋也越来越聪明了，你说这是不是一举三得。爸爸知道无论大人小孩，都会有懒的动的时候。我们家每个人都很自律，每天都会坚持打卡，每天都会学习、看书，我们家每个人都很棒喔。但打卡、学习、看书，并不一定代表着动脑子哦，有时会进入一种浑浑噩噩的状态，手在写、嘴巴在动，但脑子却不在动。这很常见，爸爸时常会这样不动脑子的时候。这样很浪费时间，看似自己在学习，其实是在浪费时间。于是爸爸问自己，那该怎么办呢，爸爸想到了，用定目标的方式来驱动自己，驱动自己去做的更好。有了目标，爸爸就会想各种办法去实现目标，这样既动了脑子，又完成了目标，自己就会很开心。你们也可以试试喔，很有趣很好玩的，多练习几次，一旦上手了就会感觉很棒喔。Sharon和Anne也要加油喔，妈妈和小姨妈也是呢，我们全家都一起加油好不好！加油~",
            "content_html": "<p>Hi Sharon Anne，爸爸又想你们了。</p><p>爸爸再给你们讲讲最近爸爸给自己定目标的事情。</p><p>爸爸为什么要给自己定目标呢？</p><p>因为人总是会有懒的时候，总是会有不用脑子去做事情的时候，爸爸想更好的鞭策自己。</p><p>于是自己给自己定目标，有了目标，爸爸就要想各种办法去慢慢的实现目标，爸爸在慢慢实现目标的过程中，就会不断得动脑筋。</p><p>这样爸爸不断的动脑筋，既实现了目标，自己获得了成就感，开心了，脑袋也越来越聪明了，你说这是不是一举三得。</p><p>爸爸知道无论大人小孩，都会有懒的动的时候。</p><p>我们家每个人都很自律，每天都会坚持打卡，每天都会学习、看书，我们家每个人都很棒喔。</p><p>但打卡、学习、看书，并不一定代表着动脑子哦，有时会进入一种浑浑噩噩的状态，手在写、嘴巴在动，但脑子却不在动。</p><p>这很常见，爸爸时常会这样不动脑子的时候。这样很浪费时间，看似自己在学习，其实是在浪费时间。</p><p>于是爸爸问自己，那该怎么办呢，爸爸想到了，用定目标的方式来驱动自己，驱动自己去做的更好。</p><p>有了目标，爸爸就会想各种办法去实现目标，这样既动了脑子，又完成了目标，自己就会很开心。</p><p>你们也可以试试喔，很有趣很好玩的，多练习几次，一旦上手了就会感觉很棒喔。</p><p>Sharon和Anne也要加油喔，妈妈和小姨妈也是呢，我们全家都一起加油好不好！加油~</p>",
            "url": "http://www.luzexi.com/2021/03/18/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A110",
            
            
            
            
            
            "date_published": "2021-03-18T00:00:00+08:00",
            "date_modified": "2021-03-18T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/03/15/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A859",
            "title": "思路探讨(五十九) 避免自动驾驶",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "这周继续目标管理，执行过程中细节比较多，每个脚步每个转折我都记录下来了，待积累一段时间再来为大家呈现我的总结和分享。我对目标管理的赞不绝口：目标管理是我见过的，最强的，自我驱动方式，也是我见过的最好的自我潜力挖掘方式。一直以来我都在为自己找自我驱动的方式，也一直认为自我驱动是人这一生很重要的东西。活了这么久，我受够了日复一日枯燥乏味的生活，希望能给自己一些改变，寻找自我驱动就是我寻求突破和改变的途径。其实我们在日常工作生活中，非常容易行尸走肉，无论做的是什么高级的’活‘，都是如此。无论什么事情，做多了，我们就会发现很无聊，如果我们没有从中发现新的亮点，新的兴趣点的话，就会陷入疲惫，陷入枯燥乏味，陷入苦闷的状态。我写公众号本身就是为了避免行尸走肉，所以我很喜欢写公众号，它能让我思考，反思。通过写公众号我找出了自身很多问题，这样就能更好的观察自己、了解自己。我知道，无论做什么都是会陷入一种自动驾驶的状态，当进入自动驾驶状态时，我们会很自然的忽视周围发生的问题。看书、健身、写作、学习、做题、工作、甚至社交也同样不例外。特别是 ，我一直提倡的自律，时间管理，精力管理，目标管理，其实自律这东西最容易行尸走肉，每天日复一日的做同样的事情，如果你没有找到做这些事情的动力、看到自律的未来、没有期望其达到的目标，那么做的再多，坚持得再久，可能效果也会是微乎其微的。所以关键不是你做了多少，而是你是否主动去思考、分析、调查，思考后有没去尝试、去实践。主动思考驱动了自我完善，觉醒了自我意识。但其实实际中并没那么容易，主动思考很难，人都有惰性，不是随时都能做到的，那么怎么让自己保持主动思考呢，目标管理就可以。当然它是有前提条件的，前提条件是：自律、进取。这也是我核心价值观中的前两个。",
            "content_html": "<p>这周继续目标管理，执行过程中细节比较多，每个脚步每个转折我都记录下来了，待积累一段时间再来为大家呈现我的总结和分享。</p><h3 id=\"我对目标管理的赞不绝口目标管理是我见过的最强的自我驱动方式也是我见过的最好的自我潜力挖掘方式\">我对目标管理的赞不绝口：目标管理是我见过的，最强的，自我驱动方式，也是我见过的最好的自我潜力挖掘方式。</h3><p>一直以来我都在为自己找自我驱动的方式，也一直认为自我驱动是人这一生很重要的东西。</p><p>活了这么久，我受够了日复一日枯燥乏味的生活，希望能给自己一些改变，寻找自我驱动就是我寻求突破和改变的途径。</p><p>其实我们在日常工作生活中，非常容易行尸走肉，无论做的是什么高级的’活‘，都是如此。</p><p>无论什么事情，做多了，我们就会发现很无聊，如果我们没有从中发现新的亮点，新的兴趣点的话，就会陷入疲惫，陷入枯燥乏味，陷入苦闷的状态。</p><h3 id=\"我写公众号本身就是为了避免行尸走肉所以我很喜欢写公众号它能让我思考反思通过写公众号我找出了自身很多问题这样就能更好的观察自己了解自己\">我写公众号本身就是为了避免行尸走肉，所以我很喜欢写公众号，它能让我思考，反思。通过写公众号我找出了自身很多问题，这样就能更好的观察自己、了解自己。</h3><p>我知道，无论做什么都是会陷入一种自动驾驶的状态，当进入自动驾驶状态时，我们会很自然的忽视周围发生的问题。</p><p>看书、健身、写作、学习、做题、工作、甚至社交也同样不例外。</p><p>特别是 ，我一直提倡的自律，时间管理，精力管理，目标管理，其实自律这东西最容易行尸走肉，每天日复一日的做同样的事情，如果你没有找到做这些事情的动力、看到自律的未来、没有期望其达到的目标，那么做的再多，坚持得再久，可能效果也会是微乎其微的。</p><h3 id=\"所以关键不是你做了多少而是你是否主动去思考分析调查思考后有没去尝试去实践\">所以关键不是你做了多少，而是你是否主动去思考、分析、调查，思考后有没去尝试、去实践。</h3><h3 id=\"主动思考驱动了自我完善觉醒了自我意识\">主动思考驱动了自我完善，觉醒了自我意识。</h3><p>但其实实际中并没那么容易，主动思考很难，人都有惰性，不是随时都能做到的，那么怎么让自己保持主动思考呢，目标管理就可以。</p><p>当然它是有前提条件的，前提条件是：自律、进取。这也是我核心价值观中的前两个。</p>",
            "url": "http://www.luzexi.com/2021/03/15/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A859",
            
            
            
            
            
            "date_published": "2021-03-15T00:00:00+08:00",
            "date_modified": "2021-03-15T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/03/08/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A858",
            "title": "思路探讨(五十八) 学习目标管理的第二周",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "说到上周，给自己定的目标比较满，自己比较焦虑，当时写下思路探讨57后，发现最后竟然在自己的奋力拼搏之下在周日的最后一刻完成了。虽然完成了，喜悦感和成就感，仍然很少，因为太满太重，让自己很焦虑，做事很急躁，即使完成了也觉得太辛苦了，不想再来第二次。这周又继续犯了同样的毛病，，给自己定的目标仍然太高，但心态稳了，由于这周紧急事情比较多，大部分时间都花费在了工作上，留给自己的时间很少。但我仍然挤出了不少时间来完成目标，可惜最后仍然还有一项完全没时间去做。我原谅了我自己，我跟我自己说，事情一直在变，没有按计划走很正常，以后我要考虑的更周到一些，于是默默的将这项目标移到了下周。没有按计划走很正常，生活和工作中失败也很正常，我一生都充斥着失败，我曾一度认为自己会成为那个游走在社会边缘的人成为一个寄生虫，最后还不是挺过来了。失败是人生旅途中的很关键的要素，它激发我的反思，敲醒了我的斗志，让我从迷糊和沉睡中醒来，进而让我从困惑中走出来。所以没有必要太在意，反而要感谢它，它抹去了那层虚伪的窗户纸，让我们知道我们自己现在的真实状况。当你遇到失败时，你应该这么想，所有杀不死你的终将使你强大。只要秉持这个理念，你就能从失败走向成功，从黑暗走向光明。其实这周我完成了很多事情，目标清单上的内容，我很有把握努力一下能完成它们，虽然最后还是有一项没完成，但我没有沮丧，也没有焦虑，从这个现象上看，我进步了，我对目标的本身，以及对制定目标的意义有了更深层次的理解，同时我认为我对制定目标的尺度在越来越靠谱了。前面一直都在说我给自己制定周目标，但其实周目标的大方向要用月目标来配合，月目标要用年目标来配合，这样才能真正发现自己每周做的事情都是有意义的，而1年目标要用5年目标来指引方向，5年目标要用10年目标来指引方向，10年目标要用生命的目标来指引方向。只有这样一环扣一环，拆分到每周的目标才会更加清晰，信心也能得到更加多的支撑，知道自己要什么，该怎么做。当你知道自己要什么，该怎么做时，具体执行时如果能多坚持几周，每周都能完成自己拆分后的目标，我猜你很快就能体会到什么叫信心爆棚、动力十足、思路广阔。很多人害怕目标，一看到目标就吓坏了。其实目标没有这么可怕，就像我今天跟媳妇提出要买别墅这个目标时那样，媳妇连想都没想过，分析都没分析过就吓坏了，直接反击到“不可能”。其实这个目标有很多条道路通向它，比如选择3、4、5线城市的别墅，别墅本身就没有那么多聚集属性，本身就是要远离城市的喧嚣，是一个要让自己更加独立和自律的地方，假如我们没有那么多现金可以抵押现有的房子拿现金付首付，也可以向亲戚朋友借点钱，或者把房子卖了去3、4线，或者把现有的房子拆分成两半，一半付别墅首付，一半付更小套的首付，装修自己来，自己一天天蚂蚁搬砖自己DIY。如果仅仅是为了住别墅，其实方法有很多种，条条道路通罗马，把所有选项整理一下，找出适合自己的，目标就变的没那么可怕了。哈哈哈哈我脑洞挺大的，说实话，这个脑洞还真的可行。以前我时常问自己，我究竟要的是什么，后来改成了，我想成为什么样的人，现在又改成了，我想让后人如何评价我，每一层思想的蜕变都有不一样的风景。每每遇到问题，都要以这个为前提去思考。希望我的学习分享，能给大家一些启示。",
            "content_html": "<p>说到上周，给自己定的目标比较满，自己比较焦虑，当时写下思路探讨57后，发现最后竟然在自己的奋力拼搏之下在周日的最后一刻完成了。</p><p>虽然完成了，喜悦感和成就感，仍然很少，因为太满太重，让自己很焦虑，做事很急躁，即使完成了也觉得太辛苦了，不想再来第二次。</p><p>这周又继续犯了同样的毛病，，给自己定的目标仍然太高，但心态稳了，由于这周紧急事情比较多，大部分时间都花费在了工作上，留给自己的时间很少。但我仍然挤出了不少时间来完成目标，可惜最后仍然还有一项完全没时间去做。</p><p>我原谅了我自己，我跟我自己说，事情一直在变，没有按计划走很正常，以后我要考虑的更周到一些，于是默默的将这项目标移到了下周。</p><h3 id=\"没有按计划走很正常生活和工作中失败也很正常我一生都充斥着失败我曾一度认为自己会成为那个游走在社会边缘的人成为一个寄生虫最后还不是挺过来了\">没有按计划走很正常，生活和工作中失败也很正常，我一生都充斥着失败，我曾一度认为自己会成为那个游走在社会边缘的人成为一个寄生虫，最后还不是挺过来了。</h3><h3 id=\"失败是人生旅途中的很关键的要素它激发我的反思敲醒了我的斗志让我从迷糊和沉睡中醒来进而让我从困惑中走出来所以没有必要太在意反而要感谢它它抹去了那层虚伪的窗户纸让我们知道我们自己现在的真实状况\">失败是人生旅途中的很关键的要素，它激发我的反思，敲醒了我的斗志，让我从迷糊和沉睡中醒来，进而让我从困惑中走出来。所以没有必要太在意，反而要感谢它，它抹去了那层虚伪的窗户纸，让我们知道我们自己现在的真实状况。</h3><h3 id=\"当你遇到失败时你应该这么想所有杀不死你的终将使你强大只要秉持这个理念你就能从失败走向成功从黑暗走向光明\">当你遇到失败时，你应该这么想，所有杀不死你的终将使你强大。只要秉持这个理念，你就能从失败走向成功，从黑暗走向光明。</h3><p>其实这周我完成了很多事情，目标清单上的内容，我很有把握努力一下能完成它们，虽然最后还是有一项没完成，但我没有沮丧，也没有焦虑，从这个现象上看，我进步了，我对目标的本身，以及对制定目标的意义有了更深层次的理解，同时我认为我对制定目标的尺度在越来越靠谱了。</p><h3 id=\"前面一直都在说我给自己制定周目标但其实周目标的大方向要用月目标来配合月目标要用年目标来配合这样才能真正发现自己每周做的事情都是有意义的而1年目标要用5年目标来指引方向5年目标要用10年目标来指引方向10年目标要用生命的目标来指引方向\">前面一直都在说我给自己制定周目标，但其实周目标的大方向要用月目标来配合，月目标要用年目标来配合，这样才能真正发现自己每周做的事情都是有意义的，而1年目标要用5年目标来指引方向，5年目标要用10年目标来指引方向，10年目标要用生命的目标来指引方向。</h3><h3 id=\"只有这样一环扣一环拆分到每周的目标才会更加清晰信心也能得到更加多的支撑知道自己要什么该怎么做\">只有这样一环扣一环，拆分到每周的目标才会更加清晰，信心也能得到更加多的支撑，知道自己要什么，该怎么做。</h3><h3 id=\"当你知道自己要什么该怎么做时具体执行时如果能多坚持几周每周都能完成自己拆分后的目标我猜你很快就能体会到什么叫信心爆棚动力十足思路广阔\">当你知道自己要什么，该怎么做时，具体执行时如果能多坚持几周，每周都能完成自己拆分后的目标，我猜你很快就能体会到什么叫信心爆棚、动力十足、思路广阔。</h3><p>很多人害怕目标，一看到目标就吓坏了。其实目标没有这么可怕，就像我今天跟媳妇提出要买别墅这个目标时那样，媳妇连想都没想过，分析都没分析过就吓坏了，直接反击到“不可能”。</p><p>其实这个目标有很多条道路通向它，比如选择3、4、5线城市的别墅，别墅本身就没有那么多聚集属性，本身就是要远离城市的喧嚣，是一个要让自己更加独立和自律的地方，假如我们没有那么多现金可以抵押现有的房子拿现金付首付，也可以向亲戚朋友借点钱，或者把房子卖了去3、4线，或者把现有的房子拆分成两半，一半付别墅首付，一半付更小套的首付，装修自己来，自己一天天蚂蚁搬砖自己DIY。如果仅仅是为了住别墅，其实方法有很多种，条条道路通罗马，把所有选项整理一下，找出适合自己的，目标就变的没那么可怕了。</p><p>哈哈哈哈我脑洞挺大的，说实话，这个脑洞还真的可行。</p><p>以前我时常问自己，我究竟要的是什么，后来改成了，我想成为什么样的人，现在又改成了，我想让后人如何评价我，每一层思想的蜕变都有不一样的风景。每每遇到问题，都要以这个为前提去思考。</p><p>希望我的学习分享，能给大家一些启示。</p>",
            "url": "http://www.luzexi.com/2021/03/08/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A858",
            
            
            
            
            
            "date_published": "2021-03-08T00:00:00+08:00",
            "date_modified": "2021-03-08T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/02/28/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A857",
            "title": "思路探讨(五十七) 目标管理学习的第一周",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "目标管理这个词已经听过很多次了，以前一直对它有点排斥，以为是陈词滥调，因此也一直没有去研究。但就在最近发现自己对目标管理这个东西越来越感兴趣了，越来越对目标这个事感兴趣，于是找了网上的学习资料学习了一下‘目标管理’，并在我生活中实践一下。其实这也符合我近些年一直练习的精力管理和时间管理，也让我回忆起，去年看过的一本书《精英们的清晨日课》，里面的一些话让我感同身受，后续再回顾总结一下这本书。这里简单介绍下目标在制定时必须遵守的原则。首先目标必须与我们的核心价值观一致，核心价值观就是我们自己认为我这一生想成为什么样的人，自律、智慧、真诚、可靠、进取、友爱、合作、魅力、独立、冒险、安全等等。其次我们的目标必须遵循3个准则：\t1. 目标必须遵循 SMART原则，即具体的、可测量的、可达到的、和其他目标相关联的、有时间限制的。\t2. 目标必须在人生的各领域平衡，包括，事业、家庭、健康、关系、财务、精神生活等人生各领域，一个不能少。\t3. 目标必须是有挑战性的，并且不能是够不到的，也不能是轻松就能办到的，必须我们使劲用力跳一下能够到的目标。\t\t有挑战性目标，会给你带来突破限制的想象力和创造力，让你看到自己都没发现的潜力。等等等….其实里面有很多内容和原理，待我日后一一跟大家详述。很不幸目标管理学习第一周，由于自己制定的目标太大，导致挫败感很强烈。在此我对这次失败的目标管理总结一下。第一，这周我给自己设定了一个周目标，可以我设定了很多的目标，把自己的目标排的很满。这周前3天动力很足但后几天就嫣了，因为前3天太用力了差点累垮了自己，虽然我做了很多事情，完成了比较重的任务，但没有感觉到成就感，相反挫败感却油然而生。这是因为自己给自己制定的目标太多，即使我花了大力气也没能完成，自己却发现用力过猛有点不适应。当我发现无法完成所有任务时，情绪就会低落，精神状态就会萎靡，接下来就越来越糟糕。第二，我在制定目标时并没有思考，它是否符合我的核心价值观，而是一味的觉得自己想达成这些目标。没有核心价值观的支撑，目标在执行时，显得很脆弱，一旦遇到不顺心的事，就没有底层原动力去支撑继续前进。目标必须符合我的核心价值观，我的核心价值观是，自律，智慧，团队合作，进取。当然核心价值观随着年龄的增大会有所不同，我也不断在审视自己的核心价值观。第三，我的目标并没有平衡我的生活，只是一味的在某个方向上尝试突破。在制定目标前，我并没有审视自己在人生各领域的进展，而一味的选择自己认为现在重要的方向去突破。这让我的工作和生活，在原来的基础上更加偏离轨道，向着一个更极端的方向驶去。也同时导致了我对世界和周围事物的理解更加偏执。总的来说，我并没有仔细认真的对待目标管理的每个细节，而是粗糙的将它理解为，定目标，执行目标，完成目标的简单过程，导致目标执行时很痛苦，最终也难以完成的结果。没关系，这只是第一周的学习，失败也是常有的，失败给我警示，总结复盘带给我进步。后面我会，调整目标，改善行动策略，设定奖励，写计划，拆分目标等等，待我下回一一跟大家分享我学习的过程。也为了更加完善我的目标管理练习，接下去我也会加入目标执行的统计日志，记录每次执行目标时的原因、行动、结果，用数据统计和数据分析的方式来改善我执行目标的方式。仍然在学习中，希望我的分享能给大家一些启示。",
            "content_html": "<p>目标管理这个词已经听过很多次了，以前一直对它有点排斥，以为是陈词滥调，因此也一直没有去研究。</p><p>但就在最近发现自己对目标管理这个东西越来越感兴趣了，越来越对目标这个事感兴趣，于是找了网上的学习资料学习了一下‘目标管理’，并在我生活中实践一下。</p><p>其实这也符合我近些年一直练习的精力管理和时间管理，也让我回忆起，去年看过的一本书《精英们的清晨日课》，里面的一些话让我感同身受，后续再回顾总结一下这本书。</p><p>这里简单介绍下目标在制定时必须遵守的原则。</p><p>首先目标必须与我们的核心价值观一致，核心价值观就是我们自己认为我这一生想成为什么样的人，自律、智慧、真诚、可靠、进取、友爱、合作、魅力、独立、冒险、安全等等。</p><p>其次我们的目标必须遵循3个准则：</p><pre><code>\t1. 目标必须遵循 SMART原则，即具体的、可测量的、可达到的、和其他目标相关联的、有时间限制的。\t2. 目标必须在人生的各领域平衡，包括，事业、家庭、健康、关系、财务、精神生活等人生各领域，一个不能少。\t3. 目标必须是有挑战性的，并且不能是够不到的，也不能是轻松就能办到的，必须我们使劲用力跳一下能够到的目标。\t\t有挑战性目标，会给你带来突破限制的想象力和创造力，让你看到自己都没发现的潜力。</code></pre><p>等等等….其实里面有很多内容和原理，待我日后一一跟大家详述。</p><p>很不幸目标管理学习第一周，由于自己制定的目标太大，导致挫败感很强烈。</p><p>在此我对这次失败的目标管理总结一下。</p><h3 id=\"第一这周我给自己设定了一个周目标可以我设定了很多的目标把自己的目标排的很满\">第一，这周我给自己设定了一个周目标，可以我设定了很多的目标，把自己的目标排的很满。</h3><p>这周前3天动力很足但后几天就嫣了，因为前3天太用力了差点累垮了自己，虽然我做了很多事情，完成了比较重的任务，但没有感觉到成就感，相反挫败感却油然而生。</p><p>这是因为自己给自己制定的目标太多，即使我花了大力气也没能完成，自己却发现用力过猛有点不适应。当我发现无法完成所有任务时，情绪就会低落，精神状态就会萎靡，接下来就越来越糟糕。</p><h3 id=\"第二我在制定目标时并没有思考它是否符合我的核心价值观而是一味的觉得自己想达成这些目标\">第二，我在制定目标时并没有思考，它是否符合我的核心价值观，而是一味的觉得自己想达成这些目标。</h3><p>没有核心价值观的支撑，目标在执行时，显得很脆弱，一旦遇到不顺心的事，就没有底层原动力去支撑继续前进。</p><p>目标必须符合我的核心价值观，我的核心价值观是，自律，智慧，团队合作，进取。当然核心价值观随着年龄的增大会有所不同，我也不断在审视自己的核心价值观。</p><h3 id=\"第三我的目标并没有平衡我的生活只是一味的在某个方向上尝试突破\">第三，我的目标并没有平衡我的生活，只是一味的在某个方向上尝试突破。</h3><p>在制定目标前，我并没有审视自己在人生各领域的进展，而一味的选择自己认为现在重要的方向去突破。</p><p>这让我的工作和生活，在原来的基础上更加偏离轨道，向着一个更极端的方向驶去。也同时导致了我对世界和周围事物的理解更加偏执。</p><h3 id=\"总的来说我并没有仔细认真的对待目标管理的每个细节而是粗糙的将它理解为定目标执行目标完成目标的简单过程导致目标执行时很痛苦最终也难以完成的结果\">总的来说，我并没有仔细认真的对待目标管理的每个细节，而是粗糙的将它理解为，定目标，执行目标，完成目标的简单过程，导致目标执行时很痛苦，最终也难以完成的结果。</h3><p>没关系，这只是第一周的学习，失败也是常有的，失败给我警示，总结复盘带给我进步。后面我会，调整目标，改善行动策略，设定奖励，写计划，拆分目标等等，待我下回一一跟大家分享我学习的过程。</p><p>也为了更加完善我的目标管理练习，接下去我也会加入目标执行的统计日志，记录每次执行目标时的原因、行动、结果，用数据统计和数据分析的方式来改善我执行目标的方式。</p><h3 id=\"仍然在学习中希望我的分享能给大家一些启示\">仍然在学习中，希望我的分享能给大家一些启示。</h3>",
            "url": "http://www.luzexi.com/2021/02/28/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A857",
            
            
            
            
            
            "date_published": "2021-02-28T00:00:00+08:00",
            "date_modified": "2021-02-28T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/02/27/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A19",
            "title": "给女儿的信(九) 关于定目标",
            "summary": "女儿 教育 亲情",
            "content_text": "Sharon，Anne，爸爸好想你们。还没过1周时间，爸爸就忍不住要想你们了，爸爸开始数剩下还有多少日子才能见到你们了。爸爸给你们讲讲最近爸爸的工作和生活。在新的一年里，爸爸想给自己在新的一年里有一个明确目标，这样爸爸学习和工作就会有方向。于是爸爸给自己定了几个目标，希望自己在新的一年里能完成它们。它们有，早起锻炼，看完某些爸爸想看但又一直没时间看的书，学习某个爸爸工作上的技能，总结爸爸学过的知识，等等等。在定目标的时候，爸爸看了本书，书中教我们如何定目标。原来定目标也有方法，你说搞笑不搞笑。爸爸还真的学到了不少东西，比如，它说，这个目标必须是具体的，不能含糊不清，比如锻炼就不行，必须是锻炼多少分钟，才是具体的。并且这个目标必须是有期限的，不能无限期延迟，比如以后在学习就不行，必须是这周每天学习半小时，才是有期限的。最后这个目标必须是自己经过努力后能够完成的，不能完不成，而且必须是经过自己努力后才能完成的目标，比如爸爸每天只能学习半小时，但爸爸努力下每天可以学习1个小时，这才是有挑战的目标。但是你知道么，爸爸在第一个星期，给自己定了目标后，发现自己定下的目标太多了，完不成。哈哈哈，爸爸很失落，心情很难受。第一个星期，定目标失败了，没关系，我们还有第二个星期，第三个星期，爸爸可以再定目标，调整目标难度，让自己能够努力一把就能达成的那种，但定目标的时候也要小心，不能定的太低，太低了，难度太小，自己都觉得没意思了。你说搞笑不搞笑。爸爸一直在努力，Sharon，Anne，小姨妈，妈妈，大家都要一起加油哦。加油~喜欢你们，笔心。",
            "content_html": "<p>Sharon，Anne，爸爸好想你们。还没过1周时间，爸爸就忍不住要想你们了，爸爸开始数剩下还有多少日子才能见到你们了。</p><p>爸爸给你们讲讲最近爸爸的工作和生活。</p><p>在新的一年里，爸爸想给自己在新的一年里有一个明确目标，这样爸爸学习和工作就会有方向。</p><p>于是爸爸给自己定了几个目标，希望自己在新的一年里能完成它们。</p><p>它们有，早起锻炼，看完某些爸爸想看但又一直没时间看的书，学习某个爸爸工作上的技能，总结爸爸学过的知识，等等等。</p><p>在定目标的时候，爸爸看了本书，书中教我们如何定目标。</p><p>原来定目标也有方法，你说搞笑不搞笑。</p><p>爸爸还真的学到了不少东西，比如，它说，</p><p>这个目标必须是具体的，不能含糊不清，比如锻炼就不行，必须是锻炼多少分钟，才是具体的。并且这个目标必须是有期限的，不能无限期延迟，比如以后在学习就不行，必须是这周每天学习半小时，才是有期限的。最后这个目标必须是自己经过努力后能够完成的，不能完不成，而且必须是经过自己努力后才能完成的目标，比如爸爸每天只能学习半小时，但爸爸努力下每天可以学习1个小时，这才是有挑战的目标。</p><p>但是你知道么，爸爸在第一个星期，给自己定了目标后，发现自己定下的目标太多了，完不成。</p><p>哈哈哈，爸爸很失落，心情很难受。</p><p>第一个星期，定目标失败了，没关系，我们还有第二个星期，第三个星期，爸爸可以再定目标，调整目标难度，让自己能够努力一把就能达成的那种，但定目标的时候也要小心，不能定的太低，太低了，难度太小，自己都觉得没意思了。</p><p>你说搞笑不搞笑。</p><p>爸爸一直在努力，Sharon，Anne，小姨妈，妈妈，大家都要一起加油哦。加油~</p><p>喜欢你们，笔心。</p>",
            "url": "http://www.luzexi.com/2021/02/27/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A19",
            
            
            
            
            
            "date_published": "2021-02-27T00:00:00+08:00",
            "date_modified": "2021-02-27T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/02/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B019",
            "title": "读书笔记(十九) 《十分钟冥想》",
            "summary": "读书 书 看书 读后感",
            "content_text": "背景：买此书《十分钟冥想》时，是在一个比较特殊的时期，自己的精神状态比较混乱，恰好在某本书中看到推荐此书的评语。抱着好奇心和神秘感读了此书，刚读前几章就深深体会到此书的精妙。于是在后面的几个月中，我逐步践行了书中所描述的冥想技巧，着实很受益，让自己在这个繁杂的社会中获得了一片小小的宁静。疑问：整本书大约有25万字，读完并践行后，我把整个过程分为四个部分：\t1. 第一部分，告诉你什么是冥想？为什么要冥想？\t2. 第二部分，告诉你如何去冥想？\t3. 第三部分，告诉你如何将冥想融入生活？\t4. 第四部分，我的冥想体验记录，增进你对冥想的了解结论：书对我的帮助很大，可以认为这是一本能教会你如何排除外界干扰的书，如果你肯坚定的去练习冥想的话，一切事情都会越来越专注。我也从冥想中学习到了如何保持专注，以及如何在平常事物中发现新的趣味（书中称觉醒），同时自己也日复一日的不断练习，希望自己能有一天在杂乱或危机的环境中仍然能保持定力，也希望自己能在发现事物的更多面。不只是学习，冥想从此成为了我排除干扰，练习专注的一个方法，我把它当作我日常生活中的一部分，借助它来缓解我的紧张、焦虑和急躁的性格，同时也借助它来帮助我练习心流体验（《心流》一书中所描绘的专注）。关于心流体验，我将在另一个篇文章中写关于我看了《心流》这本书后，在自己工作、学习、生活中是如何去实践，书中所描绘的心流，如何去整理内心秩序，让自己更加专注于当下的事物，挖掘更多当下事物的乐趣。内容：点击查看内容",
            "content_html": "<h2 id=\"背景\">背景：</h2><p>买此书《十分钟冥想》时，是在一个比较特殊的时期，自己的精神状态比较混乱，恰好在某本书中看到推荐此书的评语。抱着好奇心和神秘感读了此书，刚读前几章就深深体会到此书的精妙。</p><p>于是在后面的几个月中，我逐步践行了书中所描述的冥想技巧，着实很受益，让自己在这个繁杂的社会中获得了一片小小的宁静。</p><h2 id=\"疑问\">疑问：</h2><p>整本书大约有25万字，读完并践行后，我把整个过程分为四个部分：</p><pre><code>\t1. 第一部分，告诉你什么是冥想？为什么要冥想？\t2. 第二部分，告诉你如何去冥想？\t3. 第三部分，告诉你如何将冥想融入生活？\t4. 第四部分，我的冥想体验记录，增进你对冥想的了解</code></pre><h2 id=\"结论\">结论：</h2><p>书对我的帮助很大，可以认为这是一本能教会你如何排除外界干扰的书，如果你肯坚定的去练习冥想的话，一切事情都会越来越专注。</p><p>我也从冥想中学习到了如何保持专注，以及如何在平常事物中发现新的趣味（书中称觉醒），同时自己也日复一日的不断练习，希望自己能有一天在杂乱或危机的环境中仍然能保持定力，也希望自己能在发现事物的更多面。</p><p>不只是学习，冥想从此成为了我排除干扰，练习专注的一个方法，我把它当作我日常生活中的一部分，借助它来缓解我的紧张、焦虑和急躁的性格，同时也借助它来帮助我练习心流体验（《心流》一书中所描绘的专注）。关于心流体验，我将在另一个篇文章中写关于我看了《心流》这本书后，在自己工作、学习、生活中是如何去实践，书中所描绘的心流，如何去整理内心秩序，让自己更加专注于当下的事物，挖掘更多当下事物的乐趣。</p><h2 id=\"内容\">内容：</h2><h2 id=\"点击查看内容\"><a href=\"https://mp.weixin.qq.com/s/x3_Xq7-lUh8D2BCf0i9C1Q\">点击查看内容</a></h2>",
            "url": "http://www.luzexi.com/2021/02/21/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B019",
            
            
            
            
            
            "date_published": "2021-02-21T00:00:00+08:00",
            "date_modified": "2021-02-21T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/02/17/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A856",
            "title": "思路探讨(五十六) 自信的支撑点",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "这篇聊聊自信的支撑点。事情的缘由是，最近看到很多人都会因为xxx而感到自豪。这个xxx指某件事，或某个能力，或某个项目，或某个企业。于是想到了自己是否会因为某个东西而感到自豪，想了想，我可能会因为自己看了很多书而感到自豪，也可能会因为自己坚持健身很多年而感到自豪，会因为自己在腾讯感到自豪，会因为自己写了很多文章感到自豪。每个人都有自信的支撑点，有些人会因为自己有钱而感到自信，有些人则会因为自己有学识而感到自信，有些人则是强壮的身体，有些人则是美貌，有些人则是说话表达技巧。除了自身的因素外，他人也会成为支撑自己信心的点，比如有亲人中的某位有权有势的人会支撑我们的自信，也有可能是工作在世界500强的这个企业支撑我们的自信，也有可能是自己的老师或朋友中有才或者有名支撑我们的自信。无论如何，自己身上的自信支撑点，比依赖他人的支撑点更加牢固。对自己有信心比对别人有信心更重要。因为他人因素是不由我们控制，我们所依赖的某亲戚、某公司、某朋友、某个政策，发生变化时，我们就会失去依赖或支撑。而自身因素上，钱、设备工具、荣誉名声、美貌，又是自身因素中的外在因素，它会随着时间的流逝而不断变化，虽然有些可控性，但不足以完全掌控。而自身内在因素，学识、身体、思维方式和习惯，则可以被我们完全掌控，并且随着日积月累，越来越多，越来越强。当然我们不能只关注内在因素，外在因素也是需要我们关注和维护的内容，只是没有内在因素那么重要，但也不可忽视。正好我半年前看过一本书《自信的力量》，他讲的很不错。他说，一个人的自信，首先是由自己与周围环境的和谐程度决定的，再由自己与周围朋友合作默契程度决定，其次和自己的高深的学识、强壮的身体息息相关，最后才和金钱、公司、职位挂钩。想来确实如此，自信心本就是他人给予的，它与周围的人和事息息相关，由自身素质从内而外散发出来，最后由其他外在因素景上添花。",
            "content_html": "<p>这篇聊聊自信的支撑点。</p><p>事情的缘由是，最近看到很多人都会因为xxx而感到自豪。</p><p>这个xxx指某件事，或某个能力，或某个项目，或某个企业。</p><p>于是想到了自己是否会因为某个东西而感到自豪，想了想，我可能会因为自己看了很多书而感到自豪，也可能会因为自己坚持健身很多年而感到自豪，会因为自己在腾讯感到自豪，会因为自己写了很多文章感到自豪。</p><p>每个人都有自信的支撑点，有些人会因为自己有钱而感到自信，有些人则会因为自己有学识而感到自信，有些人则是强壮的身体，有些人则是美貌，有些人则是说话表达技巧。</p><p>除了自身的因素外，他人也会成为支撑自己信心的点，比如有亲人中的某位有权有势的人会支撑我们的自信，也有可能是工作在世界500强的这个企业支撑我们的自信，也有可能是自己的老师或朋友中有才或者有名支撑我们的自信。</p><p>无论如何，自己身上的自信支撑点，比依赖他人的支撑点更加牢固。对自己有信心比对别人有信心更重要。因为他人因素是不由我们控制，我们所依赖的某亲戚、某公司、某朋友、某个政策，发生变化时，我们就会失去依赖或支撑。</p><p>而自身因素上，钱、设备工具、荣誉名声、美貌，又是自身因素中的外在因素，它会随着时间的流逝而不断变化，虽然有些可控性，但不足以完全掌控。</p><p>而自身内在因素，学识、身体、思维方式和习惯，则可以被我们完全掌控，并且随着日积月累，越来越多，越来越强。</p><hr /><p>当然我们不能只关注内在因素，外在因素也是需要我们关注和维护的内容，只是没有内在因素那么重要，但也不可忽视。</p><p>正好我半年前看过一本书《自信的力量》，他讲的很不错。</p><p>他说，一个人的自信，首先是由自己与周围环境的和谐程度决定的，再由自己与周围朋友合作默契程度决定，其次和自己的高深的学识、强壮的身体息息相关，最后才和金钱、公司、职位挂钩。</p><p>想来确实如此，自信心本就是他人给予的，它与周围的人和事息息相关，由自身素质从内而外散发出来，最后由其他外在因素景上添花。</p>",
            "url": "http://www.luzexi.com/2021/02/17/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A856",
            
            
            
            
            
            "date_published": "2021-02-17T00:00:00+08:00",
            "date_modified": "2021-02-17T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/02/10/%E6%94%B9%E9%80%A0jekyll%E4%B8%BAiframe%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9",
            "title": "改造jekyll 为iframe框架的博客内容",
            "summary": "jekyll liquid ruby related",
            "content_text": " ",
            "content_html": "<div class=\"static_post\"><iframe src=\"/static-page/post-2021-02-10/改造jekyll 为iframe框架的博客内容.html\" width=\"100%\" height=\"100%\"> </iframe></div>",
            "url": "http://www.luzexi.com/2021/02/10/%E6%94%B9%E9%80%A0jekyll%E4%B8%BAiframe%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%86%85%E5%AE%B9",
            
            
            
            "tags": ["前端技术","其他技术"],
            
            "date_published": "2021-02-10T00:00:00+08:00",
            "date_modified": "2021-02-10T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/02/09/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A855",
            "title": "思路探讨(五十五) 第一性原理",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "最近越来越经常写文章但很少发出来（基本都是每周一篇总结 + 每日一篇自我反省的文章），没能分享到博客的原因第一是写的文章有些是属于公司保密级的，不能发布在博客上，甚至有几篇文章完全不能脱敏。第二是自己写的向内看系列的内容，真的越来越向内看越来越私密，由于太私密触及内心的兴奋与失落，起伏过大所以也不好拿出来跟大家分享。​在公众号中，我秉持着开放的态度与自己对话，也常与朋友和同事们聊聊自己的想法。希望能从不同的角度来看待事物，也希望能从各个方向上来改善自己做人做事的态度。由于年底事情特别多，也特别繁杂，因此只能将有限的精力用在照顾自己的工作和学习进度。在此跟大家说声抱歉。2021年会继续跟大家分享我的所思所想，以及公开自己的所学所为。前面听过第一性原理的概念，但没有了解的很清楚，在放假回老家最后一天突然兴致勃勃的看了，张善友教授讲的第一性原理的视频。感觉讲的很不错，也契合我一直以来秉持的理念，在听了他所讲的内容后，对这块理念更加深刻。什么是第一性原理？第一性原理，事物背后的不变的理念(原理)，根据这个原理可以推出所有的其他东西出来。这个理念就叫第一性原理。第一性原理是事物的本质、本性，是事物背后支配性的理念，而不是现象层面流变的物质。一旦在逻辑上导通一个共同的抽象概念，与此相关的所有具象问题，立即全部化解。随着我们年龄增大，接触的事情越来越复杂，处理这件复杂的事物需要花费的精力也通常越来越复杂。第一性原理告诉我们，越高深的事物，底层理念越简约，其原理通常具有简一性，即简约和单纯。找到第一性原理，就像是找到了支配事物运动的发动机。计算机程序执行原理、操作系统内核原理，对于每个编程的人来说都是第一性原理。为技术人拓展更扎实的编程思路提供了底层支撑。抽象能力是软件架构设计的第一性原理。为技术人拓展更简洁实用的架构能力提供了底层支撑。尊严与诚信是人在社会生存是第一性原理。为社会人拓展生活和工作中的方方面面提供了支撑。能量守恒是宇宙的第一性原理。为物理、化学的研究工作提供了支撑。等等等人们常说，道理说的很好，但听过就忘了。显然大多数人都没有将人生的底层原理铭刻在心中，时刻忘记遵守事物的本质规律，也时常不得不在所谓的现实面前妥协。你找到生活中的真正的第一性原理了吗？当第一性原理（事物的本质）和现象冲突的时候，你选择了什么？每个你的选择都决定了你今后的道路，你是坚持本质还是妥协现象，N个选择积累后，最终成为了今天的你。当然我们也需要注意下，第一性原理不是绝对真理，虽然事物的本质和原理适用于每个人，但对于每个人来说都需要有不同方式去执行。​",
            "content_html": "<p>最近越来越经常写文章但很少发出来（基本都是每周一篇总结 + 每日一篇自我反省的文章），没能分享到博客的原因第一是写的文章有些是属于公司保密级的，不能发布在博客上，甚至有几篇文章完全不能脱敏。第二是自己写的向内看系列的内容，真的越来越向内看越来越私密，由于太私密触及内心的兴奋与失落，起伏过大所以也不好拿出来跟大家分享。</p><p>​在公众号中，我秉持着开放的态度与自己对话，也常与朋友和同事们聊聊自己的想法。希望能从不同的角度来看待事物，也希望能从各个方向上来改善自己做人做事的态度。</p><p>由于年底事情特别多，也特别繁杂，因此只能将有限的精力用在照顾自己的工作和学习进度。在此跟大家说声抱歉。2021年会继续跟大家分享我的所思所想，以及公开自己的所学所为。</p><hr /><p>前面听过第一性原理的概念，但没有了解的很清楚，在放假回老家最后一天突然兴致勃勃的看了，张善友教授讲的第一性原理的视频。</p><p>感觉讲的很不错，也契合我一直以来秉持的理念，在听了他所讲的内容后，对这块理念更加深刻。</p><p>什么是第一性原理？第一性原理，事物背后的不变的理念(原理)，根据这个原理可以推出所有的其他东西出来。这个理念就叫第一性原理。</p><p>第一性原理是事物的本质、本性，是事物背后支配性的理念，而不是现象层面流变的物质。一旦在逻辑上导通一个共同的抽象概念，与此相关的所有具象问题，立即全部化解。</p><p>随着我们年龄增大，接触的事情越来越复杂，处理这件复杂的事物需要花费的精力也通常越来越复杂。第一性原理告诉我们，越高深的事物，底层理念越简约，其原理通常具有简一性，即简约和单纯。找到第一性原理，就像是找到了支配事物运动的发动机。</p><p>计算机程序执行原理、操作系统内核原理，对于每个编程的人来说都是第一性原理。为技术人拓展更扎实的编程思路提供了底层支撑。抽象能力是软件架构设计的第一性原理。为技术人拓展更简洁实用的架构能力提供了底层支撑。尊严与诚信是人在社会生存是第一性原理。为社会人拓展生活和工作中的方方面面提供了支撑。能量守恒是宇宙的第一性原理。为物理、化学的研究工作提供了支撑。等等等</p><p>人们常说，道理说的很好，但听过就忘了。显然大多数人都没有将人生的底层原理铭刻在心中，时刻忘记遵守事物的本质规律，也时常不得不在所谓的现实面前妥协。</p><p>你找到生活中的真正的第一性原理了吗？当第一性原理（事物的本质）和现象冲突的时候，你选择了什么？</p><p>每个你的选择都决定了你今后的道路，你是坚持本质还是妥协现象，N个选择积累后，最终成为了今天的你。</p><p>当然我们也需要注意下，第一性原理不是绝对真理，虽然事物的本质和原理适用于每个人，但对于每个人来说都需要有不同方式去执行。​</p>",
            "url": "http://www.luzexi.com/2021/02/09/%E6%80%9D%E8%B7%AF%E6%8E%A2%E8%AE%A855",
            
            
            
            
            
            "date_published": "2021-02-09T00:00:00+08:00",
            "date_modified": "2021-02-09T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/01/24/%E5%90%91%E5%86%85%E7%9C%8B%E8%87%AA%E5%B7%B112",
            "title": "向内看自己(十二) 精力训练",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "健身一整年的体会与变化，精力训练的一整年。体会 + 对策 + 图 + 视频点击查看内容",
            "content_html": "<p>健身一整年的体会与变化，精力训练的一整年。</p><p>体会 + 对策 + 图 + 视频</p><h2 id=\"点击查看内容\"><a href=\"https://mp.weixin.qq.com/s/PkEWsEOxpRmdIm8AdV2OPA\">点击查看内容</a></h2>",
            "url": "http://www.luzexi.com/2021/01/24/%E5%90%91%E5%86%85%E7%9C%8B%E8%87%AA%E5%B7%B112",
            
            
            
            
            
            "date_published": "2021-01-24T00:00:00+08:00",
            "date_modified": "2021-01-24T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/01/23/%E5%90%91%E5%86%85%E7%9C%8B%E8%87%AA%E5%B7%B111",
            "title": "向内看自己(十一) 底层能力和核心",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "最近一直在学习技术，由于几篇文章是跟项目有关的所以得脱敏后才能发。由于技术聊的太多，感觉自己脑袋闭塞了，这篇我想聊聊别的，可能有点乱。最近有点苦闷。又到了，阶段性怀疑人生的时刻。工作上的、生活上的、学习上的都有一些。最近接触了些自己以前没有接触过的东西，包括，冥想，专注练习，分析和整理的方法，这些可以说是以前没有在意的东西。在我看了《十分钟冥想》、《心流》、《金字塔原理》这三本书后，发现书中的这些方法在我们生活中特别重要。于是我开始学习冥想、学习如何保持专注、学习整理和分析知识和经验的方法，但收效甚微。由于开始注重自己的心境、自己的专注力、自己的分析方法，发现自己在这方面能力值好低，瓶颈好大，思路狭窄。以前并没有这么觉得，因为我没有注重这些技巧的运用，都是猛打猛冲的在向前进发。看了大师们的解说，再自己去试行，才发现好难。所以挫败感很强烈。做这些目的是想把自己的底层能力巩固一下，没想到的是原来自己的底层能力这么差。为什么要去打造底层能力这个问题，也是我从健身中感悟到。在一开始健身的时候，会无脑的去跑步、去跳操，一段时间后接触了固定器械健身，以及固定肌肉部位的健身，觉得这样的效率会更高，于是开始了固定肌肉和器械的健身方式，过了一段时间，但这导致了我的核心没有被训练到，肌肉是上来了，但核心没有变强，腿部、腹部、身体的整个平衡能力，耐力，都没有变强。只是改善了外观，增加了肌肉，降低了体脂，但核心体魄上完全没有变化，甚至变的更弱了。没有抓住核心导致我虽然外观改善了，但内在却没有改善。这也是我为什么要执著于打造底层能力的原因。万事万物都要是一个道理，万事万物都要是一个道理，要抓住核心。写程序、做游戏的道理也是一样，做游戏要先做核心战斗，有了核心战斗，周边的功能开发才有意义。写程序也是一个道理，理解底层原理，熟悉底层机制，去实践底层逻辑，核心的组件做出来，围绕核心做业务才会更稳，否则就像豆腐渣工程很容易倒塌，底层不牢固。（其实每个模块有核心，先做核心，再做周边是比较好的顺序）延展到生活中也是如此，核心我认为除了工作外的生活中核心是家庭，我们应该把重心放在家庭上，而家庭中，成员之间的的默契程度是核心，因此我们要团结友爱，互帮互助，分工合作来努力让这个核心更加稳固。这个世界证明了未来总是不可预测的，历史总是固定并有理有据的。我们常去预测未来，认为根据历史经验就能知道未来，认为至少知道个大概。不要去预测未来，我们大部分人都不肯接受不确定性，有些人希望能控制未来，那更是不可能。我们能做只能是尝试去稳定未来的发展方向，至于未来到底会发生什么，我们完全控制不了。我们能控制的只有自己，做好自己该做的事情，不断完善自己，完善底层能力，再在自己能力范围内尽可能照顾好周围的人。至于那些我们不能控制的未来，永远都会让我们焦虑，并借此扰乱我们的心智。",
            "content_html": "<p>最近一直在学习技术，由于几篇文章是跟项目有关的所以得脱敏后才能发。由于技术聊的太多，感觉自己脑袋闭塞了，这篇我想聊聊别的，可能有点乱。</p><p>最近有点苦闷。</p><p>又到了，阶段性怀疑人生的时刻。</p><p>工作上的、生活上的、学习上的都有一些。</p><p>最近接触了些自己以前没有接触过的东西，包括，冥想，专注练习，分析和整理的方法，这些可以说是以前没有在意的东西。</p><p>在我看了《十分钟冥想》、《心流》、《金字塔原理》这三本书后，发现书中的这些方法在我们生活中特别重要。</p><p>于是我开始学习冥想、学习如何保持专注、学习整理和分析知识和经验的方法，但收效甚微。</p><p>由于开始注重自己的心境、自己的专注力、自己的分析方法，发现自己在这方面能力值好低，瓶颈好大，思路狭窄。</p><p>以前并没有这么觉得，因为我没有注重这些技巧的运用，都是猛打猛冲的在向前进发。</p><p>看了大师们的解说，再自己去试行，才发现好难。</p><p>所以挫败感很强烈。</p><hr /><p>做这些目的是想把自己的底层能力巩固一下，没想到的是原来自己的底层能力这么差。</p><p>为什么要去打造底层能力这个问题，也是我从健身中感悟到。</p><p>在一开始健身的时候，会无脑的去跑步、去跳操，一段时间后接触了固定器械健身，以及固定肌肉部位的健身，觉得这样的效率会更高，于是开始了固定肌肉和器械的健身方式，过了一段时间，但这导致了我的核心没有被训练到，肌肉是上来了，但核心没有变强，腿部、腹部、身体的整个平衡能力，耐力，都没有变强。</p><p>只是改善了外观，增加了肌肉，降低了体脂，但核心体魄上完全没有变化，甚至变的更弱了。</p><p>没有抓住核心导致我虽然外观改善了，但内在却没有改善。</p><p>这也是我为什么要执著于打造底层能力的原因。</p><p>万事万物都要是一个道理，万事万物都要是一个道理，要抓住核心。</p><p>写程序、做游戏的道理也是一样，做游戏要先做核心战斗，有了核心战斗，周边的功能开发才有意义。写程序也是一个道理，理解底层原理，熟悉底层机制，去实践底层逻辑，核心的组件做出来，围绕核心做业务才会更稳，否则就像豆腐渣工程很容易倒塌，底层不牢固。（其实每个模块有核心，先做核心，再做周边是比较好的顺序）</p><p>延展到生活中也是如此，核心我认为除了工作外的生活中核心是家庭，我们应该把重心放在家庭上，而家庭中，成员之间的的默契程度是核心，因此我们要团结友爱，互帮互助，分工合作来努力让这个核心更加稳固。</p><hr /><p>这个世界证明了未来总是不可预测的，历史总是固定并有理有据的。</p><p>我们常去预测未来，认为根据历史经验就能知道未来，认为至少知道个大概。</p><p>不要去预测未来，我们大部分人都不肯接受不确定性，有些人希望能控制未来，那更是不可能。</p><p>我们能做只能是尝试去稳定未来的发展方向，至于未来到底会发生什么，我们完全控制不了。</p><p>我们能控制的只有自己，做好自己该做的事情，不断完善自己，完善底层能力，再在自己能力范围内尽可能照顾好周围的人。</p><p>至于那些我们不能控制的未来，永远都会让我们焦虑，并借此扰乱我们的心智。</p>",
            "url": "http://www.luzexi.com/2021/01/23/%E5%90%91%E5%86%85%E7%9C%8B%E8%87%AA%E5%B7%B111",
            
            
            
            
            
            "date_published": "2021-01-23T00:00:00+08:00",
            "date_modified": "2021-01-23T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/01/20/Perfetto%E5%86%85%E5%AD%98%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90",
            "title": "Perfetto内存工具分析",
            "summary": "unity3d gameplay 性能优化 总结",
            "content_text": "用Markdown在贴图方面不是很方便，于是用印象笔记写了篇文章，尝试一下新的方式。我越来越觉得图对理解的重要性，所以想把更多文字转为以图文结合的方式表达，这样会更加清晰一些，也更易于理解。后面会更多的尝试用这样方式来写文章，即，用印象笔记写完后，导出html放在博客上。点击查看文章内容 ",
            "content_html": "<p>用Markdown在贴图方面不是很方便，于是用印象笔记写了篇文章，尝试一下新的方式。</p><p>我越来越觉得图对理解的重要性，所以想把更多文字转为以图文结合的方式表达，这样会更加清晰一些，也更易于理解。</p><p>后面会更多的尝试用这样方式来写文章，即，用印象笔记写完后，导出html放在博客上。</p><p><a href=\"/static-page/Perfetto/Index/Perfetto内存工具分析.html\">点击查看文章内容</a></p><div class=\"static_post\"><iframe src=\"/static-page/Perfetto/Index/Perfetto内存工具分析.html\" width=\"100%\" height=\"100%\"> </iframe></div>",
            "url": "http://www.luzexi.com/2021/01/20/Perfetto%E5%86%85%E5%AD%98%E5%B7%A5%E5%85%B7%E5%88%86%E6%9E%90",
            
            
            
            "tags": ["Unity3D","前端技术"],
            
            "date_published": "2021-01-20T00:00:00+08:00",
            "date_modified": "2021-01-20T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2021/01/14/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A18",
            "title": "给女儿的信(八) 关于生命与运动",
            "summary": "女儿 教育 亲情",
            "content_text": "Sharon、Anne，几天不见爸爸又想你们了。Anne身体好些了么，妈妈跟我说你能吃能玩了，爸爸好开心。生病好难受，所以我们每天都要坚持运动哦。提高身体的免疫力很重要哎，病毒到我们身体里时就会有免疫细胞出来杀死它们。爸爸和妈妈每天都抽空去健身房运动，或者在家里做运动。Sharon是不是也生病了，病毒传染起来很快，也看不见摸不着，我们要当心哦。生病会很难受，要听妈妈的话，按时吃药，有身体哪里不舒服及时跟妈妈说，妈妈能想到办法治好你的病的。我们一起加强运动哈，爸爸和妈妈都喜欢跑步、游泳、做操、练哑铃，我们全家人都一起每天运动好吗。身体棒棒的才有精力和活力，每天满满的活力多好，学习也会很专注。加油Sharon，加油Anne。",
            "content_html": "<p>Sharon、Anne，几天不见爸爸又想你们了。</p><p>Anne身体好些了么，妈妈跟我说你能吃能玩了，爸爸好开心。生病好难受，所以我们每天都要坚持运动哦。</p><p>提高身体的免疫力很重要哎，病毒到我们身体里时就会有免疫细胞出来杀死它们。</p><p>爸爸和妈妈每天都抽空去健身房运动，或者在家里做运动。</p><p>Sharon是不是也生病了，病毒传染起来很快，也看不见摸不着，我们要当心哦。</p><p>生病会很难受，要听妈妈的话，按时吃药，有身体哪里不舒服及时跟妈妈说，妈妈能想到办法治好你的病的。</p><p>我们一起加强运动哈，爸爸和妈妈都喜欢跑步、游泳、做操、练哑铃，我们全家人都一起每天运动好吗。</p><p>身体棒棒的才有精力和活力，每天满满的活力多好，学习也会很专注。加油Sharon，加油Anne。</p>",
            "url": "http://www.luzexi.com/2021/01/14/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A18",
            
            
            
            
            
            "date_published": "2021-01-14T00:00:00+08:00",
            "date_modified": "2021-01-14T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2020/12/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B018",
            "title": "读书笔记(十八) 《C++性能优化指南》三",
            "summary": "读书 书 看书 读后感",
            "content_text": "此篇主要介绍热点代码、I/O、以及并行部分的优化，我们会从原理出发来，再根据原理讲优化，这样即学习了原理，又知道了优化的来龙去脉。热点代码这里作者带我们聊一聊关于代码细节的优化，虽然语句的细节优化并不能带来非常明显的提升，但是也是非常有必要的优化步骤，尤其在那些追求极致高性能或精小的组件中，代码细节的优化决定了组件与组件之间的差异。语句细节的优化，其实质是对CPU指令的优化，可以认为是从执行指令流中移除指令的过程。下面先来阐述一下细节优化的原理。语句的细节优化，其实质是执行指令数量的优化，指令跳转次数的优化，向栈中保存临时寄存器次数的优化，以及内存分配次数的优化。执行指令数量减少了可以减少CPU在执行程序时的耗时我们很好理解，指令跳转则是因为指令也是被放在内存中的数据，因此它也会被高速缓存cache，长距离跳转会让高速缓存失效，静态函数调用和非成员函数调用通常都是长距离指令跳转的典型案例。函数调用开销不可忽视，即使一个空函数，在调用时也会有性能开销（编译器可能会帮我们优化掉空函数），有时为了极致的优化，我们应该最大限度的减少调用函数的频率，特别是频率最高的top3。因为在函数被调用时会保存当前函数的数据，包括参数、局部变量、当前指令地址、临时寄存器和标记寄存器等，每次调用一个函数会做如下处理：\t1.当调用函数时，先保存当前函数的临时变量、参数、临时寄存器、标记寄存器。\t\t2.将这些每个要保存的数据都复制到栈中。\t\t3.当前执行的地址复制到栈中。\t4.将指令指针寄存器IP指向要执行的函数体的第一句\t5.执行函数体中的指令\t6.将函数调用结果保存到寄存器\t7.从栈中推出要返回的地址，并复制给指令寄存器IP\t8.推出栈中的临时寄存器、参数、局部变量、标记寄存器都重新还原回去\t9.继续执行剩下的指令直到遇到下一个函数。如果遇到成员函数是虚函数的，还得先从虚表中偏移并取出函数地址再调用，这里又多了2次计算，即先取出虚表地址、再根据虚表地址偏移获得真正的函数地址、最后再才能跳转过去。如果是多重继承、或者是多重继承的继承类中的虚函数成员，则需要再加一次地址偏移计算。inline内联是减少函数调用的最佳方式，内联函数并不像一般函数那样会保存数据并且跳转指令，因为编译器会就地展开内联函数中的指令，因此没有推栈入栈保存数据到栈和跳转指令到函数再返回的步骤，取而代之的是就地直接执行指令。这样看来减少函数调用(或让函数内联)的同时也减少了入栈、出栈、复制数据的指令数量，也减少了指令跳转的丢失高速缓存的概率。不必要的内存分配也是在代码细节中常犯的错误，尤其指向堆内存分配，当函数中需要某个容器或者类实例时，常会临时向堆内存申请一次以用来计算。我们来看看以上这说的7个细节的具体例子：for(int i = 0 ; i&lt;strlen(str) ; i++)\t...//改为for(int i = 0, n = strlen(str) ; i&lt;n ; i++)\t...1.将重复计算提到前面，但这里不一定有优化，因为编译器可能会识别这类循环并将实时计算移出去，不过不能保证编译器一定会这么干，所以我们最好做人为的优化，保证不重复计算。void function(){\tlist = new list();\tfor(int i = 0 ; i&lt;n ; i++)\t{\t\tlist.Add(xx);\t}\treturn;}//改为public static list = new list(); //改为全局变量void function(){\tlist.Clear();\tfor(int i = 0 ; i&lt;n ; i++)\t{\t\tlist.Add(xx);\t}\treturn;}2.函数中临时的堆内存分配，改为全局的共用内存，只要分配一次，每次使用前先清理就能节省开销。int k = 0;for(int i = 0 ; i&lt;100 ; i++){\tint j = sin(100) + cos(50);\tk = j*i;}//改为int k = 0;int j = sin(100) + cos(5);for(int i = 0 ; i&lt;100 ; i++){\tk = j*i;}3.移除循环中不变的计算，减少不必要的指令，可能会被编译器优化掉。for(int i = 0 ; i&lt;10 ; i++){\tint b = Add(3,5);\t...}//改为int b = 0for(int i = 0 ; i&lt;10 ; i++){\tb = 3 + 5;\t...}//或者将Add函数内联inline int Add(a,b){\t...}4.用内联或者手动内联的方式，减少循环中的函数调用开销。string str = \"a\";str = \"&lt;p&gt;\" + str + \"&lt;/p&gt;\";//改为str = string.format(\"&lt;p&gt;{0}&lt;/p&gt;\",str);//或者str = StringCacheMgr.instance.Format(\"&lt;p&gt;{0}&lt;/p&gt;\",str);5.减少字符串内存分配次数，将原来要分配两次的字符串，改为只要分配1次。或者使用自制的字符串内存管理方式管理分配和操作字符串(前面的内存优化那一节我们讲过这种方式)for(int i = 0 ; i&lt;1000 ; i++){\ttest();}//改为test();void test(){\tfor(int i = 0 ; i&lt;1000 ;i++)\t{\t\t...\t}}6.将1000次调用函数的开销改为1次，节省函数调用的开销。if(x == a){\t...}else if(xx == a){\t...}else if(xxx == a){\t...}else ...//改为switch(a){\tcase x:\t\tbreak;\tcase xx:\t\tbreak;\tcase xxx:\t\tbreak;}7.通常switch都会被编译器优化为索引的方式去跳转，因此用switch比if效率高的多，也不用我们自己对数据排序。最后说下异常try catch的开销，在早期C++的try catch机制会在栈帧上包含一个异常上下文，这些上下文会随着异常抛出或者作用范围结束而销毁，增加性能开销。现在则不同了，上下文开销都没有了，只是会在开始try时多几个指令更改中断程序的指向，退出时再改回来，但是即使这样，我们也不能有太多try catch，因为try catch太多仍然会多出很多额外的指令消耗。我们做个小结，我们说语句的细节优化，实质是减少执行指令数量，减少指令跳转次数，减少函数调用，以及减少内存分配次数。我们用代码细节来解释有哪些细节是可以遵从我们的原理来优化的，这些细节的优化，在性能要求比较高的组件上会比较有用，好的代码细节是业务逻辑优化的前提。业务逻辑上，当我们更多运用的是调整实现方式，调整数据结构的方式，调整业务逻辑策略的方式时，这些细节的优化则成了底层的支柱。I/O 文件操作I/O操作的优化空间相对比较小，是因为它主要的工作大部分由操作系统完成。因此我们先介绍下操作系统中I/O的读写原理，再从原理出发优化I/O操作效率，包括降低读写次数减少读取时间和优化体验俩个方面。操作系统中为了分割操作内容让调用更安全，分为‘用户态’和‘内核态’，当用户态需要内核态工作时我们称为‘系统调用’，我们平常写的程序只要不涉及系统调用的都是用户态完成的，一旦涉及到需要操作系统工作的部分，就要先切到内核态完成工作，结束后再切回用户态继续执行后面的程序，这个切换的过程是比较费时费力的，I/O调用就是其中一种需要切换内核态的系统调用。操作系统可以支持多种底层不同的文件系统（比如NTFS, FAT, ext3, ext4），为了给内核和用户进程提供统一的文件系统视图，Linux在用户进程和底层文件系统之间加入了一个抽象层，即虚拟文件系统(Virtual File System, VFS)，进程所有的文件操作都通过VFS，由VFS来适配各种底层不同的文件系统，完成实际的文件操作。这里我们来了解下虚拟文件系统构成和主要模块：超级块（super_block）用于保存一个文件系统的所有元数据，相当于这个文件系统的信息库，为其他的模块提供信息。因此一个超级块可代表一个文件系统，文件系统的任意元数据修改都要通过超级块修改，超级块对象是常驻内存并被缓存起来的。目录项模块是管理路径的目录项，比如一个路径 /home/foo/hello.txt，那么目录项有home, foo, hello.txt三个。每个目录项的块，存储的是这个目录下的所有的文件的inode号和文件名等信息。其内部是树形结构，操作系统检索一个文件是从根目录开始，按层次解析路径中的所有目录，直到定位到具体文件。inode模块管理的是一个具体的文件，是文件的唯一标识，一个文件对应一个inode。通过inode可以方便的找到文件在磁盘扇区的位置，同时inode模块可链接到address_space模块，方便查找自身文件数据是否已经被缓存在内存中。打开文件列表模块包含所有内核已经打开的文件，已经打开的文件对象由open系统调用在内核中创建，也叫文件句柄。打开文件列表模块中包含一个列表，列表表项是一个结构体struct file，结构体中的信息存储了打开的一个文件的各种状态参数。file_operations模块模块中维护一个数据结构，是一系列函数指针的集合，其中包含所有可以使用的系统调用函数，例如open、read、write、mmap等。每个打开文件（打开文件列表模块的一个表项）都可以连接到file_operations模块，从而对任何已打开的文件，通过系统调用函数，实现各种操作。address_space模块记录了文件在页缓存中已经缓存了的物理页信息，是页缓存和外部设备中文件系统的桥梁。如果将文件系统可以理解成数据源，内存中的页缓存是已经读取的内容，那么address_space可以说是内存系统和文件系统的中间层。所有文件信息保存在超级块中，通过目录项模块找到文件所在位置，所有被打开的文件放在文件列表模块中，file_operations模块负责操作文件，每个文件都有唯一标识inode，磁盘数据与内存缓存通过address_space联接与映射。下面我们来看看读写入文件时的基本流程：读文件1、进程调用库函数向内核发起读文件请求；2、内核通过检查进程的文件描述符定位到虚拟文件系统的已打开文件列表表项；3、调用该文件可用的系统调用函数read()read()函数通过文件表项链接到目录项模块，根据传入的文件路径，在目录项模块中检索，找到该文件的inode；4、在inode中，通过文件内容偏移量计算出要读取的页；5、通过inode找到文件对应的address_space；6、在address_space中访问该文件的页缓存树，查找对应的页缓存结点：（1）如果页缓存命中，那么直接返回文件内容；（2）如果页缓存缺失，那么产生一个页缺失异常，创建一个页缓存页，同时通过inode找到文件该页的磁盘地址，读取相应的页填充该缓存页；重新进行第6步查找页缓存；7、文件内容读取成功。写文件前5步和读文件一致，在address_space中查询对应页的页缓存是否存在：6、如果页缓存命中，直接把文件内容修改更新在页缓存的页中。写文件就结束了。这时候文件修改位于页缓存，并没有写回到磁盘文件中去。7、如果页缓存缺失，那么产生一个页缺失异常，创建一个页缓存页，同时通过inode找到文件该页的磁盘地址，读取相应的页填充该缓存页。此时缓存页命中，进行第6步。8、一个页缓存中的页如果被修改，那么会被标记成脏页。脏页需要写回到磁盘中的文件块。有两种方式可以把脏页写回磁盘：（1）手动调用sync()或者fsync()系统调用把脏页写回（2）pdflush进程会定时把脏页写回到磁盘同时注意，脏页不能被置换出内存，如果脏页正在被写回，那么会被设置写回标记，这时候该页就被上锁，其他写请求被阻塞直到锁释放。页缓存实际上就是一个基数树结构，它将一个文件的内容组织起来存放在struct page结构中，文件越大树形结构越庞大，每一页都记录着文件内容的页信息和缓存信息。另外内核使用task_struct来表示单个进程的描述符，其中包含维护一个进程的所有信息。task_struct结构体中维护了一个 files的指针（和“已打开文件列表”上的表项是不同的指针）来指向结构体files_struct，files_struct中包含文件描述符表和打开的文件对象信息，这使得系统能够：1、多个进程可以同时指向一个打开文件对象（文件列表表项）。2、一个进程可以多次打开一个文件，生成不同的文件描述符，每个文件描述符指向不同的文件列表表项。但是由于是同一个文件，inode唯一，所以这些文件列表表项都指向同一个inode。我们知道了文件的读写原理再来看看我们在平时编写文件操作时的优化思路。1.减少读写次数，减少读写时间。由于每次读取文件内容都会从用户态转到内核态，完成后再切回来，这种切换的消耗是比较重的，因此我们应该尽量减少读写次数。在读取一个文件时，尽量将需要的内容一次性读取完毕，甚至可以预先读取未来的内容，以避免多次读取。在写文件时也是同样，尽量一次性写入硬盘，避免多次写入。例如下面代码：while(getline(file,line)){\tdoSomeThing(line);}//改为lines = getlines(file);for(int i = 0 ,n = len(lines) ; i&lt; n ; ++i){\tdoSomeThing(lines[i]);}一次性读取所有行，再对每行做处理。void write_lines(std::ostream&amp; file std::string const&amp; lines[]){\tfor(int i = 0,n = len(lines) ; i&lt;n ; ++i)\t{\t\tfile &lt;&lt; lines[i]\t\tfile-&gt;flush();\t}}//改为void write_lines(std::ostream&amp; file std::string const&amp; lines[]){\tfor(int i = 0,n = len(lines) ; i&lt;n ; ++i)\t{\t\tfile &lt;&lt; lines[i];\t}\tfile-&gt;flush();}//或用内存池的方式改为void write_lines(std::ostream&amp; file std::string const&amp; lines[]){\tint str_size = 0;\tfor(int i = 0,n = len(lines) ; i&lt;n ; ++i)\t{\t\tstr_size += len(lines[i] + 1)*sizeof(char);\t}\t\tbyte[] data = MemoryPool.instance.AllocMemory(str_size);\tCombineStringData(lines, data); //将lines中的数据都拷贝到data中\tfile-&gt;write(data);\tfile-&gt;flush();\tMemoryPool.instance.Free(data);}每次写入文件时系统并不会立即写入文件，而是存放在页缓存，如果我们每次刷新，则会每次都同步到硬盘，写入硬盘速度比较内存慢很多，会消耗比较长时间，所以要减少刷新调用次数。只是减少刷新次数，但依然减少不了内核态切换的次数。于是我们用内存池的方式减少内存分配的时间，将内存分配的耗时降低，将原本要调用很多次系统调用的次数降低为了一次，从而减少了内核态切换的次数。2.优化体验用阻塞读取的方式，由于线程要等待磁盘设备的工作，对于整个程序的效率来说是比较低的，因为硬盘设备读写的速度比较慢，主线程要等待硬盘设备工作完毕后才进行后面的工作。因此为了能让程序的整体效率提升，我们可以用异步读取的方式来优化整体的程序时间，即在读取或写入文件的同时，其他程序工作同步进行。最常见的是游戏的开机画面，加载画面，切换场景画面，甚至有些游戏中边加载边进行的部分，都是可以通过并行来优化体验的。文件读写并发通常都是开启线程后的读写操作，与阻塞内容一样，只是更多的利用可利用的CPU时间而不让线程空闲等待硬盘，原理是我们尽力能让计算机中的所有设备资源都满负荷运转并很好的协作，而不是相互牵制。下面我们就来讲讲并发的优化内容。并发并发的方案有很多特别是在业务层上有很多技巧，这里只是选取与语言相关部分。我们将从原理出发讲一讲，线程同步中的技巧、原子性、以及无锁容器的原理。由于设备资源并不总是运行，因为我们的程序并没有使用到这些资源，或者说有时没有同一时间同时让它们一起运转，这使得资源的闲置造成了浪费，如果能在当某个程序在执行指令时，另一个设备在满负荷运作，这样就相当于提高了运行效率。并发的挑战是找到足够多的独立任务来充分地使用所有可用的计算机资源，让资源都能满负荷的执行，提高整体运行效率。其中CPU资源是最稀缺，也是使用最频繁的资源，如果能让多核中所有CPU都满负荷工作(不考虑降频问题)程序的效率就能提高很多，即使不满负荷，也能提其他CPU分担不少工作，让降频的概率减少到最低。首先我们来梳理下操作系统中的进程、线程、时间片的概念。线程是实际工作的单元，进程只是一个容器用来管理线程。严格来说Linux内核其实不区分进程和线程，内核把执行单元叫做任务(Task)。操作系统实际上调度的是进程，进程通过fork()来创建同样的另一个进程。每个进程有一个PID，同一组进程中最先启动的那个还有一个TGID，严格来说前者应该叫线程ID，后者应该叫进程ID，其实它们都是Linux的Task。多线程能同时做好几件事情以提高效率，但实际问题是，CPU的数量（核心数）是有限的，而且并不多。如果你的CPU有8个核，并且整个操作系统中有8个线程的话，不考虑中断等因素，每个线程理论上能一直执行下去。然而多于8个线程以后，操作系统就必须进行调度，也就是分配时间片。具体的分配方案，或者说调度算法有很多种。如果一个进程创建了很多线程的话，最多也只有8个能够处于执行的状态(这里说的是物理线程，有别于逻辑线程)，其余的线程必须等待调度。线程被调度的时候需要进行上下文切换，这个操作是一种额外的开销。当线程数量过多的时候，上下文切换产生的额外开销会对系统的效率造成负面影响。线程的调度算法和进程一样通常有优先级之分，优先级高的线程可以比优先级低的线程多抢占些CPU时间片。甚至不同的线程可以通过系统调用将线程绑定在某个CPU核上。因此我们也可以通过将线程绑某个cpu核的方式来强制执行线程调度，从而优化并行开销。线程同步通常我们在多个线程交叉执行时最关心的是同步问题。解决这个问题我们可以用，减少锁的占用时间、减少锁的颗粒度、无锁容器三个方式。前两者更好理解些，也用的比较多，最后一个需要阐明下原理。通常我们使用锁和互斥量来解决线程间的同步问题，但这会带来潜在问题，就是由于锁的原因导致线程间的等待时间变长，实际执行的效率可能并没有因此而增加。因此锁的范围必须被压缩到最小，例如：void doFunction(item){\tlock(obj)\t{\t\tdoSomeThing1();\t\tlist.push(item); //must lock\t\tdoSomeThing2();\t}}//改为void doFunction(item){\tdoSomeThing1();\tlock(obj)\t{\t\tlist.push(item); //must lock\t}\tdoSomeThing2();}尽可能的缩小锁的范围，减少锁等待时间。void doFunction1(){\tlock(obj)\t{\t\t...\t}}void doFunction2(){\tlock(obj)\t{\t\t...\t}}//改为void doFunction1(){\tlock(obj1)\t{\t\t...\t}}void doFunction2(){\tlock(obj2)\t{\t\t...\t}}减少锁的颗粒度，让各自的锁只负责自己一小部分的内容。这里也涉及到细粒度锁(算法)，它通常基于轻量级原子性原语，由于并不是基于系统提供的同步原语所以性能开销很小，但在高并发的情况下，细粒度锁(算法)就会成为程序的瓶颈。由于指定锁某些局部的计算范围或者函数，锁的时间太长并不划算，所以我们通常在两个线程间的协作上使用消息队列(或者其他容器)让线程更大程度的并行，但这依然需要对容器加锁，以使得操作不冲突。为了能让容器冲突时间更小，当只有两个线程操作容器时，我们通常会采用些技巧。      例如双队列，设置两个队列，其中一个用于处理消息，另一个用于接收消息，当处理消息时，两个队列的头指针交换一下再处理，这样就能让接收的队列继续接收，处理的队列独自处理，这种方式的缩短了锁的占用时间，锁的时间缩短到了变量交换时间。        以及循环队列的方式，用头尾循环的方式做队列，一个线程只对尾部操作，另一个线程只对头部操作，发送数据的线程向尾部推入数据，接收数据的线程从头部取出数据，循环操作队列，只有当队列满时才需要停一停等待数据处理，其他时候，两者永远都不需要相互等待。  无锁容器无锁容器的复杂度有点高，它适用于高并发场景，这里不便深入，其原理是原子操作。虽然我们不深入无锁容器的具体写法，但我们用问答的方式来解释下原子操作。什么是原子性？如果一个更新操作不会计算到一半的时候被另外一个线程看到，就叫原子性。原子操作可认为是一个不可分的操作；要么发生，要么没发生，我们看不到任何执行的中间过程，不存在部分结果(partial effects)。可以想象的到，原子操作要保证要么全部发生，要么全部没发生，这样原子操作绝对不是一个廉价的消耗低的指令，相反，原子操作是一个较为昂贵的指令。非原子操作，为什么会更新到一半被另一个线程看到？即使一个简单的整型变量的赋值操作，也有可能更新到一半被另一个线程看到，这是为什么呢？原因就是高速缓存中的旧数据。由于每个cpu除了共享一个内存设备外还有各自的高速缓存，一个cpu更新了内存中的内容后，其实并没有通知其他cpu中的缓存去掉该内容，这导致其他cpu中的高速缓存存储的仍然是旧的数据。当这些CPU读取这个变量时会从缓存中取得旧数据，直到缓存中的这个数据被丢弃或更新。原子操作，做了什么使得更新不被其他线程看到？CPU的高速缓存间有一个MESI协议(cache一致性协议，4个关键词 Modifed Exclusive Shared Invalid 拼凑起来的缩写)，通过这个消息协议，CPU可以查看其他CPU高速缓存中的数据状态，就像不同设备间通信那样。当执行原子操作 store 即写入数据时，先查看当前cpu高速缓存中有没有数据，如果没有，则通知其他cpu中的高速缓存该数据切为无效状态，等待所有cpu都将该数据切为无效状态后，此cpu才开始发起写入内存和高速缓存的操作，并标记该值为修改状态。如果有，则更新高速缓存中的值，并通知其他cpu中的高速缓存该值已经不合法，最后此cpu并没有将该值写入内存，而是在高速缓存中标记该值被修改，以便下次再利用，或者等到丢弃时再写入内存。当执行原子操作 load 即读取数据时，先查看当前cpu高速缓存中有没有该数据，如果没有(或者是无效的)，则从先从查看其他cpu中查看该数据，如果有则获取，没有则从内存中获取。如果当前cpu高速缓存中有该数据，则直接使用该数据(必须不是无效的)。其他并行优化1.分割资源，减少线程间的争夺。分割或者复制一块内存出来，让某个线程专门使用，这样就不会与其他线程冲突，计算结束时再考虑合并的事。此方法在Unity引擎的 Job System中有使用到，即给Job System一块独立的内存来处理自己的事物，与其他线程不冲突。2.散列容器，减少锁的范围，和前面介绍的细粒度锁(算法）稍微有点不一样，这种容器是散列的，冲突更少但使用范围很小。3.SIMD指令虽然不是并行，但由于它可以同时处理4个数据的运算，也算是勉强算并行处理了。参考资料：《从内核文件系统看文件读写过程》《Linux系统中 进程 、线程 、时间片的关系》《说说无锁(Lock-Free)编程那些事》",
            "content_html": "<p>此篇主要介绍热点代码、I/O、以及并行部分的优化，我们会从原理出发来，再根据原理讲优化，这样即学习了原理，又知道了优化的来龙去脉。</p><h2 id=\"热点代码\">热点代码</h2><p>这里作者带我们聊一聊关于代码细节的优化，虽然语句的细节优化并不能带来非常明显的提升，但是也是非常有必要的优化步骤，尤其在那些追求极致高性能或精小的组件中，代码细节的优化决定了组件与组件之间的差异。</p><p>语句细节的优化，其实质是对CPU指令的优化，可以认为是从执行指令流中移除指令的过程。下面先来阐述一下细节优化的原理。</p><h3 id=\"语句的细节优化其实质是执行指令数量的优化指令跳转次数的优化向栈中保存临时寄存器次数的优化以及内存分配次数的优化\">语句的细节优化，其实质是执行指令数量的优化，指令跳转次数的优化，向栈中保存临时寄存器次数的优化，以及内存分配次数的优化。</h3><p>执行指令数量减少了可以减少CPU在执行程序时的耗时我们很好理解，指令跳转则是因为指令也是被放在内存中的数据，因此它也会被高速缓存cache，长距离跳转会让高速缓存失效，静态函数调用和非成员函数调用通常都是长距离指令跳转的典型案例。</p><p>函数调用开销不可忽视，即使一个空函数，在调用时也会有性能开销（编译器可能会帮我们优化掉空函数），有时为了极致的优化，我们应该最大限度的减少调用函数的频率，特别是频率最高的top3。</p><p>因为在函数被调用时会保存当前函数的数据，包括参数、局部变量、当前指令地址、临时寄存器和标记寄存器等，每次调用一个函数会做如下处理：</p><pre><code>\t1.当调用函数时，先保存当前函数的临时变量、参数、临时寄存器、标记寄存器。\t\t2.将这些每个要保存的数据都复制到栈中。\t\t3.当前执行的地址复制到栈中。\t4.将指令指针寄存器IP指向要执行的函数体的第一句\t5.执行函数体中的指令\t6.将函数调用结果保存到寄存器\t7.从栈中推出要返回的地址，并复制给指令寄存器IP\t8.推出栈中的临时寄存器、参数、局部变量、标记寄存器都重新还原回去\t9.继续执行剩下的指令直到遇到下一个函数。</code></pre><p>如果遇到成员函数是虚函数的，还得先从虚表中偏移并取出函数地址再调用，这里又多了2次计算，即先取出虚表地址、再根据虚表地址偏移获得真正的函数地址、最后再才能跳转过去。如果是多重继承、或者是多重继承的继承类中的虚函数成员，则需要再加一次地址偏移计算。</p><p>inline内联是减少函数调用的最佳方式，内联函数并不像一般函数那样会保存数据并且跳转指令，因为编译器会就地展开内联函数中的指令，因此没有推栈入栈保存数据到栈和跳转指令到函数再返回的步骤，取而代之的是就地直接执行指令。</p><p>这样看来减少函数调用(或让函数内联)的同时也减少了入栈、出栈、复制数据的指令数量，也减少了指令跳转的丢失高速缓存的概率。</p><p>不必要的内存分配也是在代码细节中常犯的错误，尤其指向堆内存分配，当函数中需要某个容器或者类实例时，常会临时向堆内存申请一次以用来计算。</p><p>我们来看看以上这说的7个细节的具体例子：</p><pre><code class=\"language-c++\">for(int i = 0 ; i&lt;strlen(str) ; i++)\t...//改为for(int i = 0, n = strlen(str) ; i&lt;n ; i++)\t...</code></pre><p>1.将重复计算提到前面，但这里不一定有优化，因为编译器可能会识别这类循环并将实时计算移出去，不过不能保证编译器一定会这么干，所以我们最好做人为的优化，保证不重复计算。</p><pre><code class=\"language-c++\">void function(){\tlist = new list();\tfor(int i = 0 ; i&lt;n ; i++)\t{\t\tlist.Add(xx);\t}\treturn;}//改为public static list = new list(); //改为全局变量void function(){\tlist.Clear();\tfor(int i = 0 ; i&lt;n ; i++)\t{\t\tlist.Add(xx);\t}\treturn;}</code></pre><p>2.函数中临时的堆内存分配，改为全局的共用内存，只要分配一次，每次使用前先清理就能节省开销。</p><pre><code class=\"language-c++\">int k = 0;for(int i = 0 ; i&lt;100 ; i++){\tint j = sin(100) + cos(50);\tk = j*i;}//改为int k = 0;int j = sin(100) + cos(5);for(int i = 0 ; i&lt;100 ; i++){\tk = j*i;}</code></pre><p>3.移除循环中不变的计算，减少不必要的指令，可能会被编译器优化掉。</p><pre><code class=\"language-c++\">for(int i = 0 ; i&lt;10 ; i++){\tint b = Add(3,5);\t...}//改为int b = 0for(int i = 0 ; i&lt;10 ; i++){\tb = 3 + 5;\t...}//或者将Add函数内联inline int Add(a,b){\t...}</code></pre><p>4.用内联或者手动内联的方式，减少循环中的函数调用开销。</p><pre><code class=\"language-c++\">string str = \"a\";str = \"&lt;p&gt;\" + str + \"&lt;/p&gt;\";//改为str = string.format(\"&lt;p&gt;{0}&lt;/p&gt;\",str);//或者str = StringCacheMgr.instance.Format(\"&lt;p&gt;{0}&lt;/p&gt;\",str);</code></pre><p>5.减少字符串内存分配次数，将原来要分配两次的字符串，改为只要分配1次。或者使用自制的字符串内存管理方式管理分配和操作字符串(前面的内存优化那一节我们讲过这种方式)</p><pre><code class=\"language-c++\">for(int i = 0 ; i&lt;1000 ; i++){\ttest();}//改为test();void test(){\tfor(int i = 0 ; i&lt;1000 ;i++)\t{\t\t...\t}}</code></pre><p>6.将1000次调用函数的开销改为1次，节省函数调用的开销。</p><pre><code class=\"language-c++\">if(x == a){\t...}else if(xx == a){\t...}else if(xxx == a){\t...}else ...//改为switch(a){\tcase x:\t\tbreak;\tcase xx:\t\tbreak;\tcase xxx:\t\tbreak;}</code></pre><p>7.通常switch都会被编译器优化为索引的方式去跳转，因此用switch比if效率高的多，也不用我们自己对数据排序。</p><p>最后说下异常try catch的开销，在早期C++的try catch机制会在栈帧上包含一个异常上下文，这些上下文会随着异常抛出或者作用范围结束而销毁，增加性能开销。现在则不同了，上下文开销都没有了，只是会在开始try时多几个指令更改中断程序的指向，退出时再改回来，但是即使这样，我们也不能有太多try catch，因为try catch太多仍然会多出很多额外的指令消耗。</p><h3 id=\"我们做个小结我们说语句的细节优化实质是减少执行指令数量减少指令跳转次数减少函数调用以及减少内存分配次数我们用代码细节来解释有哪些细节是可以遵从我们的原理来优化的这些细节的优化在性能要求比较高的组件上会比较有用好的代码细节是业务逻辑优化的前提业务逻辑上当我们更多运用的是调整实现方式调整数据结构的方式调整业务逻辑策略的方式时这些细节的优化则成了底层的支柱\">我们做个小结，我们说语句的细节优化，实质是减少执行指令数量，减少指令跳转次数，减少函数调用，以及减少内存分配次数。我们用代码细节来解释有哪些细节是可以遵从我们的原理来优化的，这些细节的优化，在性能要求比较高的组件上会比较有用，好的代码细节是业务逻辑优化的前提。业务逻辑上，当我们更多运用的是调整实现方式，调整数据结构的方式，调整业务逻辑策略的方式时，这些细节的优化则成了底层的支柱。</h3><h2 id=\"io-文件操作\">I/O 文件操作</h2><h3 id=\"io操作的优化空间相对比较小是因为它主要的工作大部分由操作系统完成因此我们先介绍下操作系统中io的读写原理再从原理出发优化io操作效率包括降低读写次数减少读取时间和优化体验俩个方面\">I/O操作的优化空间相对比较小，是因为它主要的工作大部分由操作系统完成。因此我们先介绍下操作系统中I/O的读写原理，再从原理出发优化I/O操作效率，包括降低读写次数减少读取时间和优化体验俩个方面。</h3><p>操作系统中为了分割操作内容让调用更安全，分为‘用户态’和‘内核态’，当用户态需要内核态工作时我们称为‘系统调用’，我们平常写的程序只要不涉及系统调用的都是用户态完成的，一旦涉及到需要操作系统工作的部分，就要先切到内核态完成工作，结束后再切回用户态继续执行后面的程序，这个切换的过程是比较费时费力的，I/O调用就是其中一种需要切换内核态的系统调用。</p><p>操作系统可以支持多种底层不同的文件系统（比如NTFS, FAT, ext3, ext4），为了给内核和用户进程提供统一的文件系统视图，Linux在用户进程和底层文件系统之间加入了一个抽象层，即虚拟文件系统(Virtual File System, VFS)，进程所有的文件操作都通过VFS，由VFS来适配各种底层不同的文件系统，完成实际的文件操作。</p><h3 id=\"这里我们来了解下虚拟文件系统构成和主要模块\">这里我们来了解下虚拟文件系统构成和主要模块：</h3><h3 id=\"超级块super_block\">超级块（super_block）</h3><p>用于保存一个文件系统的所有元数据，相当于这个文件系统的信息库，为其他的模块提供信息。</p><p>因此一个超级块可代表一个文件系统，文件系统的任意元数据修改都要通过超级块修改，超级块对象是常驻内存并被缓存起来的。</p><h3 id=\"目录项模块\">目录项模块</h3><p>是管理路径的目录项，比如一个路径 /home/foo/hello.txt，那么目录项有home, foo, hello.txt三个。</p><p>每个目录项的块，存储的是这个目录下的所有的文件的inode号和文件名等信息。其内部是树形结构，操作系统检索一个文件是从根目录开始，按层次解析路径中的所有目录，直到定位到具体文件。</p><h3 id=\"inode模块\">inode模块</h3><p>管理的是一个具体的文件，是文件的唯一标识，一个文件对应一个inode。</p><p>通过inode可以方便的找到文件在磁盘扇区的位置，同时inode模块可链接到address_space模块，方便查找自身文件数据是否已经被缓存在内存中。</p><h3 id=\"打开文件列表模块\">打开文件列表模块</h3><p>包含所有内核已经打开的文件，已经打开的文件对象由open系统调用在内核中创建，也叫文件句柄。</p><p>打开文件列表模块中包含一个列表，列表表项是一个结构体struct file，结构体中的信息存储了打开的一个文件的各种状态参数。</p><h3 id=\"file_operations模块\">file_operations模块</h3><p>模块中维护一个数据结构，是一系列函数指针的集合，其中包含所有可以使用的系统调用函数，例如open、read、write、mmap等。</p><p>每个打开文件（打开文件列表模块的一个表项）都可以连接到file_operations模块，从而对任何已打开的文件，通过系统调用函数，实现各种操作。</p><h3 id=\"address_space模块\">address_space模块</h3><p>记录了文件在页缓存中已经缓存了的物理页信息，是页缓存和外部设备中文件系统的桥梁。如果将文件系统可以理解成数据源，内存中的页缓存是已经读取的内容，那么address_space可以说是内存系统和文件系统的中间层。</p><h3 id=\"所有文件信息保存在超级块中通过目录项模块找到文件所在位置所有被打开的文件放在文件列表模块中file_operations模块负责操作文件每个文件都有唯一标识inode磁盘数据与内存缓存通过address_space联接与映射\">所有文件信息保存在超级块中，通过目录项模块找到文件所在位置，所有被打开的文件放在文件列表模块中，file_operations模块负责操作文件，每个文件都有唯一标识inode，磁盘数据与内存缓存通过address_space联接与映射。</h3><h3 id=\"下面我们来看看读写入文件时的基本流程\">下面我们来看看读写入文件时的基本流程：</h3><h3 id=\"读文件\">读文件</h3><p>1、进程调用库函数向内核发起读文件请求；</p><p>2、内核通过检查进程的文件描述符定位到虚拟文件系统的已打开文件列表表项；</p><p>3、调用该文件可用的系统调用函数read()</p><p>read()函数通过文件表项链接到目录项模块，根据传入的文件路径，在目录项模块中检索，找到该文件的inode；</p><p>4、在inode中，通过文件内容偏移量计算出要读取的页；</p><p>5、通过inode找到文件对应的address_space；</p><p>6、在address_space中访问该文件的页缓存树，查找对应的页缓存结点：</p><p>（1）如果页缓存命中，那么直接返回文件内容；</p><p>（2）如果页缓存缺失，那么产生一个页缺失异常，创建一个页缓存页，同时通过inode找到文件该页的磁盘地址，读取相应的页填充该缓存页；重新进行第6步查找页缓存；</p><p>7、文件内容读取成功。</p><h3 id=\"写文件\">写文件</h3><p>前5步和读文件一致，在address_space中查询对应页的页缓存是否存在：</p><p>6、如果页缓存命中，直接把文件内容修改更新在页缓存的页中。写文件就结束了。这时候文件修改位于页缓存，并没有写回到磁盘文件中去。</p><p>7、如果页缓存缺失，那么产生一个页缺失异常，创建一个页缓存页，同时通过inode找到文件该页的磁盘地址，读取相应的页填充该缓存页。此时缓存页命中，进行第6步。</p><p>8、一个页缓存中的页如果被修改，那么会被标记成脏页。脏页需要写回到磁盘中的文件块。有两种方式可以把脏页写回磁盘：</p><p>（1）手动调用sync()或者fsync()系统调用把脏页写回</p><p>（2）pdflush进程会定时把脏页写回到磁盘</p><p>同时注意，脏页不能被置换出内存，如果脏页正在被写回，那么会被设置写回标记，这时候该页就被上锁，其他写请求被阻塞直到锁释放。</p><h3 id=\"页缓存实际上就是一个基数树结构它将一个文件的内容组织起来存放在struct-page结构中文件越大树形结构越庞大每一页都记录着文件内容的页信息和缓存信息\">页缓存实际上就是一个基数树结构，它将一个文件的内容组织起来存放在struct page结构中，文件越大树形结构越庞大，每一页都记录着文件内容的页信息和缓存信息。</h3><p>另外内核使用task_struct来表示单个进程的描述符，其中包含维护一个进程的所有信息。task_struct结构体中维护了一个 files的指针（和“已打开文件列表”上的表项是不同的指针）来指向结构体files_struct，files_struct中包含文件描述符表和打开的文件对象信息，这使得系统能够：</p><p>1、多个进程可以同时指向一个打开文件对象（文件列表表项）。</p><p>2、一个进程可以多次打开一个文件，生成不同的文件描述符，每个文件描述符指向不同的文件列表表项。但是由于是同一个文件，inode唯一，所以这些文件列表表项都指向同一个inode。</p><h3 id=\"我们知道了文件的读写原理再来看看我们在平时编写文件操作时的优化思路\">我们知道了文件的读写原理再来看看我们在平时编写文件操作时的优化思路。</h3><p>1.减少读写次数，减少读写时间。</p><p>由于每次读取文件内容都会从用户态转到内核态，完成后再切回来，这种切换的消耗是比较重的，因此我们应该尽量减少读写次数。</p><p>在读取一个文件时，尽量将需要的内容一次性读取完毕，甚至可以预先读取未来的内容，以避免多次读取。在写文件时也是同样，尽量一次性写入硬盘，避免多次写入。例如下面代码：</p><pre><code class=\"language-c++\">while(getline(file,line)){\tdoSomeThing(line);}//改为lines = getlines(file);for(int i = 0 ,n = len(lines) ; i&lt; n ; ++i){\tdoSomeThing(lines[i]);}</code></pre><h3 id=\"一次性读取所有行再对每行做处理\">一次性读取所有行，再对每行做处理。</h3><pre><code class=\"language-c++\">void write_lines(std::ostream&amp; file std::string const&amp; lines[]){\tfor(int i = 0,n = len(lines) ; i&lt;n ; ++i)\t{\t\tfile &lt;&lt; lines[i]\t\tfile-&gt;flush();\t}}//改为void write_lines(std::ostream&amp; file std::string const&amp; lines[]){\tfor(int i = 0,n = len(lines) ; i&lt;n ; ++i)\t{\t\tfile &lt;&lt; lines[i];\t}\tfile-&gt;flush();}//或用内存池的方式改为void write_lines(std::ostream&amp; file std::string const&amp; lines[]){\tint str_size = 0;\tfor(int i = 0,n = len(lines) ; i&lt;n ; ++i)\t{\t\tstr_size += len(lines[i] + 1)*sizeof(char);\t}\t\tbyte[] data = MemoryPool.instance.AllocMemory(str_size);\tCombineStringData(lines, data); //将lines中的数据都拷贝到data中\tfile-&gt;write(data);\tfile-&gt;flush();\tMemoryPool.instance.Free(data);}</code></pre><h3 id=\"每次写入文件时系统并不会立即写入文件而是存放在页缓存如果我们每次刷新则会每次都同步到硬盘写入硬盘速度比较内存慢很多会消耗比较长时间所以要减少刷新调用次数\">每次写入文件时系统并不会立即写入文件，而是存放在页缓存，如果我们每次刷新，则会每次都同步到硬盘，写入硬盘速度比较内存慢很多，会消耗比较长时间，所以要减少刷新调用次数。</h3><h3 id=\"只是减少刷新次数但依然减少不了内核态切换的次数于是我们用内存池的方式减少内存分配的时间将内存分配的耗时降低将原本要调用很多次系统调用的次数降低为了一次从而减少了内核态切换的次数\">只是减少刷新次数，但依然减少不了内核态切换的次数。于是我们用内存池的方式减少内存分配的时间，将内存分配的耗时降低，将原本要调用很多次系统调用的次数降低为了一次，从而减少了内核态切换的次数。</h3><p>2.优化体验</p><p>用阻塞读取的方式，由于线程要等待磁盘设备的工作，对于整个程序的效率来说是比较低的，因为硬盘设备读写的速度比较慢，主线程要等待硬盘设备工作完毕后才进行后面的工作。因此为了能让程序的整体效率提升，我们可以用异步读取的方式来优化整体的程序时间，即在读取或写入文件的同时，其他程序工作同步进行。</p><p>最常见的是游戏的开机画面，加载画面，切换场景画面，甚至有些游戏中边加载边进行的部分，都是可以通过并行来优化体验的。</p><h3 id=\"文件读写并发通常都是开启线程后的读写操作与阻塞内容一样只是更多的利用可利用的cpu时间而不让线程空闲等待硬盘原理是我们尽力能让计算机中的所有设备资源都满负荷运转并很好的协作而不是相互牵制\">文件读写并发通常都是开启线程后的读写操作，与阻塞内容一样，只是更多的利用可利用的CPU时间而不让线程空闲等待硬盘，原理是我们尽力能让计算机中的所有设备资源都满负荷运转并很好的协作，而不是相互牵制。</h3><p>下面我们就来讲讲并发的优化内容。</p><h2 id=\"并发\">并发</h2><p>并发的方案有很多特别是在业务层上有很多技巧，这里只是选取与语言相关部分。我们将从原理出发讲一讲，线程同步中的技巧、原子性、以及无锁容器的原理。</p><p>由于设备资源并不总是运行，因为我们的程序并没有使用到这些资源，或者说有时没有同一时间同时让它们一起运转，这使得资源的闲置造成了浪费，如果能在当某个程序在执行指令时，另一个设备在满负荷运作，这样就相当于提高了运行效率。</p><h3 id=\"并发的挑战是找到足够多的独立任务来充分地使用所有可用的计算机资源让资源都能满负荷的执行提高整体运行效率其中cpu资源是最稀缺也是使用最频繁的资源如果能让多核中所有cpu都满负荷工作不考虑降频问题程序的效率就能提高很多即使不满负荷也能提其他cpu分担不少工作让降频的概率减少到最低\">并发的挑战是找到足够多的独立任务来充分地使用所有可用的计算机资源，让资源都能满负荷的执行，提高整体运行效率。其中CPU资源是最稀缺，也是使用最频繁的资源，如果能让多核中所有CPU都满负荷工作(不考虑降频问题)程序的效率就能提高很多，即使不满负荷，也能提其他CPU分担不少工作，让降频的概率减少到最低。</h3><p>首先我们来梳理下操作系统中的进程、线程、时间片的概念。</p><p>线程是实际工作的单元，进程只是一个容器用来管理线程。严格来说Linux内核其实不区分进程和线程，内核把执行单元叫做任务(Task)。操作系统实际上调度的是进程，进程通过fork()来创建同样的另一个进程。每个进程有一个PID，同一组进程中最先启动的那个还有一个TGID，严格来说前者应该叫线程ID，后者应该叫进程ID，其实它们都是Linux的Task。</p><p>多线程能同时做好几件事情以提高效率，但实际问题是，CPU的数量（核心数）是有限的，而且并不多。如果你的CPU有8个核，并且整个操作系统中有8个线程的话，不考虑中断等因素，每个线程理论上能一直执行下去。然而多于8个线程以后，操作系统就必须进行调度，也就是分配时间片。具体的分配方案，或者说调度算法有很多种。如果一个进程创建了很多线程的话，最多也只有8个能够处于执行的状态(这里说的是物理线程，有别于逻辑线程)，其余的线程必须等待调度。线程被调度的时候需要进行上下文切换，这个操作是一种额外的开销。当线程数量过多的时候，上下文切换产生的额外开销会对系统的效率造成负面影响。</p><p>线程的调度算法和进程一样通常有优先级之分，优先级高的线程可以比优先级低的线程多抢占些CPU时间片。甚至不同的线程可以通过系统调用将线程绑定在某个CPU核上。因此我们也可以通过将线程绑某个cpu核的方式来强制执行线程调度，从而优化并行开销。</p><h3 id=\"线程同步\">线程同步</h3><p>通常我们在多个线程交叉执行时最关心的是同步问题。解决这个问题我们可以用，减少锁的占用时间、减少锁的颗粒度、无锁容器三个方式。前两者更好理解些，也用的比较多，最后一个需要阐明下原理。</p><p>通常我们使用锁和互斥量来解决线程间的同步问题，但这会带来潜在问题，就是由于锁的原因导致线程间的等待时间变长，实际执行的效率可能并没有因此而增加。</p><p>因此锁的范围必须被压缩到最小，例如：</p><pre><code class=\"language-c++\">void doFunction(item){\tlock(obj)\t{\t\tdoSomeThing1();\t\tlist.push(item); //must lock\t\tdoSomeThing2();\t}}//改为void doFunction(item){\tdoSomeThing1();\tlock(obj)\t{\t\tlist.push(item); //must lock\t}\tdoSomeThing2();}</code></pre><h3 id=\"尽可能的缩小锁的范围减少锁等待时间\">尽可能的缩小锁的范围，减少锁等待时间。</h3><pre><code class=\"language-c++\">void doFunction1(){\tlock(obj)\t{\t\t...\t}}void doFunction2(){\tlock(obj)\t{\t\t...\t}}//改为void doFunction1(){\tlock(obj1)\t{\t\t...\t}}void doFunction2(){\tlock(obj2)\t{\t\t...\t}}</code></pre><h3 id=\"减少锁的颗粒度让各自的锁只负责自己一小部分的内容这里也涉及到细粒度锁算法它通常基于轻量级原子性原语由于并不是基于系统提供的同步原语所以性能开销很小但在高并发的情况下细粒度锁算法就会成为程序的瓶颈\">减少锁的颗粒度，让各自的锁只负责自己一小部分的内容。这里也涉及到细粒度锁(算法)，它通常基于轻量级原子性原语，由于并不是基于系统提供的同步原语所以性能开销很小，但在高并发的情况下，细粒度锁(算法)就会成为程序的瓶颈。</h3><p>由于指定锁某些局部的计算范围或者函数，锁的时间太长并不划算，所以我们通常在两个线程间的协作上使用消息队列(或者其他容器)让线程更大程度的并行，但这依然需要对容器加锁，以使得操作不冲突。</p><p>为了能让容器冲突时间更小，当只有两个线程操作容器时，我们通常会采用些技巧。</p><ul>  <li>    <p>例如双队列，设置两个队列，其中一个用于处理消息，另一个用于接收消息，当处理消息时，两个队列的头指针交换一下再处理，这样就能让接收的队列继续接收，处理的队列独自处理，这种方式的缩短了锁的占用时间，锁的时间缩短到了变量交换时间。</p>  </li>  <li>    <p>以及循环队列的方式，用头尾循环的方式做队列，一个线程只对尾部操作，另一个线程只对头部操作，发送数据的线程向尾部推入数据，接收数据的线程从头部取出数据，循环操作队列，只有当队列满时才需要停一停等待数据处理，其他时候，两者永远都不需要相互等待。</p>  </li></ul><h3 id=\"无锁容器\">无锁容器</h3><p>无锁容器的复杂度有点高，它适用于高并发场景，这里不便深入，其原理是原子操作。虽然我们不深入无锁容器的具体写法，但我们用问答的方式来解释下原子操作。</p><h3 id=\"什么是原子性\">什么是原子性？</h3><p>如果一个更新操作不会计算到一半的时候被另外一个线程看到，就叫原子性。</p><p>原子操作可认为是一个不可分的操作；要么发生，要么没发生，我们看不到任何执行的中间过程，不存在部分结果(partial effects)。可以想象的到，原子操作要保证要么全部发生，要么全部没发生，这样原子操作绝对不是一个廉价的消耗低的指令，相反，原子操作是一个较为昂贵的指令。</p><h3 id=\"非原子操作为什么会更新到一半被另一个线程看到\">非原子操作，为什么会更新到一半被另一个线程看到？</h3><p>即使一个简单的整型变量的赋值操作，也有可能更新到一半被另一个线程看到，这是为什么呢？原因就是高速缓存中的旧数据。</p><p>由于每个cpu除了共享一个内存设备外还有各自的高速缓存，一个cpu更新了内存中的内容后，其实并没有通知其他cpu中的缓存去掉该内容，这导致其他cpu中的高速缓存存储的仍然是旧的数据。当这些CPU读取这个变量时会从缓存中取得旧数据，直到缓存中的这个数据被丢弃或更新。</p><h3 id=\"原子操作做了什么使得更新不被其他线程看到\">原子操作，做了什么使得更新不被其他线程看到？</h3><p>CPU的高速缓存间有一个MESI协议(cache一致性协议，4个关键词 Modifed Exclusive Shared Invalid 拼凑起来的缩写)，通过这个消息协议，CPU可以查看其他CPU高速缓存中的数据状态，就像不同设备间通信那样。</p><p>当执行原子操作 store 即写入数据时，先查看当前cpu高速缓存中有没有数据，如果没有，则通知其他cpu中的高速缓存该数据切为无效状态，等待所有cpu都将该数据切为无效状态后，此cpu才开始发起写入内存和高速缓存的操作，并标记该值为修改状态。如果有，则更新高速缓存中的值，并通知其他cpu中的高速缓存该值已经不合法，最后此cpu并没有将该值写入内存，而是在高速缓存中标记该值被修改，以便下次再利用，或者等到丢弃时再写入内存。</p><p>当执行原子操作 load 即读取数据时，先查看当前cpu高速缓存中有没有该数据，如果没有(或者是无效的)，则从先从查看其他cpu中查看该数据，如果有则获取，没有则从内存中获取。如果当前cpu高速缓存中有该数据，则直接使用该数据(必须不是无效的)。</p><h3 id=\"其他并行优化\">其他并行优化</h3><p>1.分割资源，减少线程间的争夺。</p><p>分割或者复制一块内存出来，让某个线程专门使用，这样就不会与其他线程冲突，计算结束时再考虑合并的事。</p><p>此方法在Unity引擎的 Job System中有使用到，即给Job System一块独立的内存来处理自己的事物，与其他线程不冲突。</p><p>2.散列容器，减少锁的范围，和前面介绍的细粒度锁(算法）稍微有点不一样，这种容器是散列的，冲突更少但使用范围很小。</p><p>3.SIMD指令虽然不是并行，但由于它可以同时处理4个数据的运算，也算是勉强算并行处理了。</p><p>参考资料：</p><p><a href=\"https://www.cnblogs.com/huxiao-tee/p/4657851.html\">《从内核文件系统看文件读写过程》</a></p><p><a href=\"https://www.zhihu.com/question/64723752\">《Linux系统中 进程 、线程 、时间片的关系》</a></p><p><a href=\"https://www.jiqizhixin.com/articles/2019-01-22-12\">《说说无锁(Lock-Free)编程那些事》</a></p>",
            "url": "http://www.luzexi.com/2020/12/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B018",
            
            
            
            "tags": ["读书笔记","Unity3D","前端技术"],
            
            "date_published": "2020-12-27T00:00:00+08:00",
            "date_modified": "2020-12-27T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2020/12/25/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A17",
            "title": "给女儿的信(七)  圣诞节",
            "summary": "女儿 教育 亲情",
            "content_text": "Hi 陆秀恩圣诞快乐，今年的圣诞爸爸在很远的深圳，爸爸好想跟你一起过圣诞，爸爸一直很想念你，也一直很关注你。我知道你与同学相处的越来越融洽了，在学校里的表现很积极很开朗，大家都喜欢跟你交朋友，因为你懂得关心朋友。你的画画和跳舞越来越棒了，对自己喜欢的事很专注。我跟秀恩一样也很专注呢。我还听妈妈说你越来越自律了，这是个不错的开始喔。爸爸一直在学习如何学习，想把学习的技巧再多研究一下，让自己更懂得如何高效学习，以前爸爸学习总是很低效，注意力很难集中，浪费了很多时间，现在我想改变一下自己。这是一条漫长的路，爸爸每天都在坚持，坚持每天看点书，每天运动一下，每天学习一下，这样一天天积累下来，1年就会有大的不同，3、5年就有翻天覆地的变化。我想成为一个知识渊博的人，可能成不了科学家，但可以成为一个有价值的人，一个自律、智慧、有爱的人。爸爸很想念你，祝你圣诞快乐，加油陆秀恩 ：）Hi 陆安妮圣诞快乐，爸爸很想念你。我常听妈妈说你也很想念爸爸，爸爸心里暖暖的很高兴。在幼儿园里的日子还好么，和朋友们相处的还融洽么，爸爸很想过来每天都陪着你，但爸爸有点忙，需要在深圳工作几年。爸爸知道最近你跟姐姐一起开始学习写字和数学，爸爸知道你很努力，跟爸爸一起加油喔。你会慢慢的找到自己学习的节奏的，安妮。你很棒哎，要坚持住喔。爸爸也在深圳努力呢，每天都有学习和健身，爸爸跟你一起做身体壮壮的、学习棒棒的好孩子，比心。爸爸拿着你送给我的画，每天都放在床头看一下，一看到这幅画爸爸就想到你，下次记得再送爸爸一副画哦。最近去台上表演时心里紧张吗，爸爸看了你跳舞的视频，很不错哎，我们再接再厉，一起加油。爸爸、妈妈、小姨妈、安妮、秀恩都一起加油，加~油~！圣诞快乐安妮，想念你的爸爸 ：）",
            "content_html": "<p>Hi 陆秀恩</p><p>圣诞快乐，今年的圣诞爸爸在很远的深圳，爸爸好想跟你一起过圣诞，爸爸一直很想念你，也一直很关注你。</p><p>我知道你与同学相处的越来越融洽了，在学校里的表现很积极很开朗，大家都喜欢跟你交朋友，因为你懂得关心朋友。</p><p>你的画画和跳舞越来越棒了，对自己喜欢的事很专注。我跟秀恩一样也很专注呢。我还听妈妈说你越来越自律了，这是个不错的开始喔。</p><p>爸爸一直在学习如何学习，想把学习的技巧再多研究一下，让自己更懂得如何高效学习，以前爸爸学习总是很低效，注意力很难集中，浪费了很多时间，现在我想改变一下自己。</p><p>这是一条漫长的路，爸爸每天都在坚持，坚持每天看点书，每天运动一下，每天学习一下，这样一天天积累下来，1年就会有大的不同，3、5年就有翻天覆地的变化。我想成为一个知识渊博的人，可能成不了科学家，但可以成为一个有价值的人，一个自律、智慧、有爱的人。</p><p>爸爸很想念你，祝你圣诞快乐，加油陆秀恩 ：）</p><hr /><p>Hi 陆安妮</p><p>圣诞快乐，爸爸很想念你。</p><p>我常听妈妈说你也很想念爸爸，爸爸心里暖暖的很高兴。</p><p>在幼儿园里的日子还好么，和朋友们相处的还融洽么，爸爸很想过来每天都陪着你，但爸爸有点忙，需要在深圳工作几年。</p><p>爸爸知道最近你跟姐姐一起开始学习写字和数学，爸爸知道你很努力，跟爸爸一起加油喔。你会慢慢的找到自己学习的节奏的，安妮。你很棒哎，要坚持住喔。爸爸也在深圳努力呢，每天都有学习和健身，爸爸跟你一起做身体壮壮的、学习棒棒的好孩子，比心。</p><p>爸爸拿着你送给我的画，每天都放在床头看一下，一看到这幅画爸爸就想到你，下次记得再送爸爸一副画哦。最近去台上表演时心里紧张吗，爸爸看了你跳舞的视频，很不错哎，我们再接再厉，一起加油。</p><p>爸爸、妈妈、小姨妈、安妮、秀恩都一起加油，加~油~！</p><p>圣诞快乐安妮，想念你的爸爸 ：）</p>",
            "url": "http://www.luzexi.com/2020/12/25/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A17",
            
            
            
            
            
            "date_published": "2020-12-25T00:00:00+08:00",
            "date_modified": "2020-12-25T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2020/12/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B017",
            "title": "读书笔记(十七) 《C++性能优化指南》二",
            "summary": "读书 书 看书 读后感",
            "content_text": "字符串问题这里作者讲的有点啰嗦，没有围绕着重点去讲，所以这里我吸收下他的知识点并总结下自己的知识点和经验。把字符串问题单独拎出来说是因为字符串问题比较大，也比较隐性，常常容易引起性能问题。字符串在概念上很简单，它就是一个字符数组，但是想要实现高效的字符串却非常不容易。首先字符串内存是动态分配的，其次是字符串常常被用来当成一个值来使用，这导致字符串操作常常带来大量不必要的内存分配和内存复制。字符串问题的重点在内存分配问题和字符串查找。字符串操作带来的内存频繁的分配和浪费导致程序性能效率大大降低，操作包括，字符串拼接、字符串拆分、字符串大小写切换等，每次操作字符串都会新分配一个字符串内存或者字符串内存集，而查找字符串，即使使用算法通常也会逐字比较，效率比价差，特别是在一个集合中查找某个字符串对应的值时，需要完整的比较两者字符串是否完全一致。改善内存分配效率，我们可以使用预分配和内存池机制。字符串内存预分配可以有2种，一种预先分配很多个长度不同的字符串缓存起来，使用时给出去，例如分别预分配1-50长度的字符串各100个，当逻辑需要时再给出去，用完了再收回来。另一种是先分配多个长一点的字符串，例如分配100个100长度的字符串，让字符串能够在拼接时不用再分配内存，由于本身字符串长度足够长，所以可以直接在当前字符数组中改写内容。除了预分配，我们也可以将已经分配的字符串加入到字符串缓冲池中去，来管理这些预先分配好的字符串，需要时给予，不用时回收，不够时再分配一批，这样就能重复利用已经分配的字符串内存，将分配内存的工作集中起来消耗在某个点上。我们常会去比较和查找字符串，查找字符串中的字符串有很多算法，但比较两个字符串是否相同如果仍然使用查找算法去做就是一种浪费，那么我们应该怎样去做两个字符串的比较呢，最好用哈希的方式，把字符串计算出一个哈希值，用这个哈希值来比较是否相等就快很多了。例如我们常常在业务逻辑中判断两个字符串是否相等，每次比较都会浪费掉很多计算量，用哈希的方式就会快很多，因为比较的是两个整数，在每次更新字符串时只需要重新计算一次哈希值就可以，由于通常字符串更新的并不频繁，所以计算哈希的消耗远比每次遍历两个字符串所带来的消耗要小的多。但哈希计算不一定能够获得一个唯一值，所以它只能被用来判断是否不同，即当哈希值不同时，两个字符串一定不同，而两个哈希值相同时有可能不同，此时再比较两者是否真的相同。虽然无法直接比较相同的字符串，但仍然大大减少了不同的两个字符串的比较的计算。算法算法是性能优化中的精髓，多数平庸的优化方法对性能改善都是线性的，但算法不同，如果说一个高效的算法替换了一个低效的算法性能可能呈现指数级的增长。算法时间开销一般有O(1)，O(log2(N))，O(N)，O(Nlog2(N))，O(N^2)，O(N^3)，O(2^N)，从高效到低效的排列，大多数算法如果能到log2(N)已经是非常优秀了，再进一步到O(1)则通常要付出巨大的内存代价。作者对二分查找、哈希、散列查找算法特别中意，于是讲了散列算法是怎样的和关键点是什么。我们在用在用查找算法时log2(N)的算法已经是非常不错的查找效率了，所以二分查找是效率比较高的，但它仍然是建立在有序队列的基础上，需要先排序再查找，排序比查找更能耗时，而且后续的元素加入需要插入到有序队列中。而散列算法则不同，排序和查找会更快，前提是数据特性能够散列，或者说散列的冲突不会那么高，于是他告诉我们哈希算法对于散列的重要性。这里作者讲的查找和排序内容比较浅，我融入了一些自己的经验。算法通常是根据数据特效来定制的，所以对数据独有的特性分析是重点。就我的理解，算法并一定要局限于当前的结构，可以重新创建一个全新的结构方式，这样在用算法去优化程序的时候思路会更开阔。例如我们在全地图寻找某个人的时候并不一定要在查找函数上优化算法，而可以重新制造一个方格结构体把世界分割成不同的方块，找人时只要收集四周方块内的人就可以更快的找到。算法也可以是局部的，因为数据多少和数据的特性可以由不同算法处理，所以我们在处理一大堆数据时可以拆分成不同的数据集进行处理，这些数据集的大小和特性也有所不同，针对性的处理会得到更有效的算法效率，例如快速排序算法，可以由不同的算法组成，由于它的中间值决定了快排速度，所以中间值我们可以用三个值取中间数的算法来找到更加稳定的中间值，当数段被分割成多个区间并且单个区间小于等于8个数时，插入排序其实比快排会更加快一些，因此我们在快排中间当数据量小于8时选择用插入排序算法。作者列举了一些常用的算法优化思路和套路。套路有：预计算、延迟计算、批量处理、缓存、特化、提高处理量、提示、优化执行路径、散列法、双重检查。预计算提前计算好一些可以离线完成计算量存储在文件中，这样可以省去了实时计算的开销。延迟计算先让所有中间过程改变完成后再对最后的结果计算，这样就省去了每次都需要计算全路径的消耗，例如引擎中通常有节点相互的挂载，每次赋值节点position时都会去计算重新计算子节点的位置，这时就要思考如何让计算延后，每次子节点的真实位置只要在帧结束时计算一遍就可以了，不用每次改变position时都去全路径计算一遍所有子节点。批量处理某些具有相同性质的数据不要一个个处理，因为一起同一类型的数据处理起来会有更优的方法，例如堆排序如果一个个插入的元素的话性能开销是O(Nlog2(N))，而一次性构建一个堆的话只需要O(N)。缓存不要每次都计算，然后拿着结果去比较，计算完后缓存起来，一直用缓存的值，直到需要更改时再计算一遍。特化一堆数据处理时它们都会消耗一些计算量，如果某个数据是特别的，不需要计算或者计算量可以很小，则另外开辟一个通道给它，让它少消耗一些。提高处理量一次处理多个数据而不是一个个处理，例如写日志不要每次都写，每隔一段时间写一次，类似这样的操作，先把准备的数据集中起来，集中起来的数据可能会有更多相似的特性可以用来优化。提示当处理数据的时候，给予一个提示，这样我们就能知道该如何更好更快的处理，例如在插入一个数据到队列里去时，告诉插入函数，这个数是个比较大的值或者是一个比较小的值，这样我们在做插入时就有了更多优化提示。优化执行路径程序语句里有很多个if…else，如果95%的语句都进某个if，那么最好把它提前到语句前，这样就不用执行其他的if里的计算了。散列法哈希值比较法，数据结构和字符串在比较时比较费时，用哈希值比较则比较方便，为它们计算一个哈希值，当两个哈希值不同时，它们一定不同，如果哈希值相同则再比较是否真的相同。双重检查数据其实有很多个特征可供我们使用来优化我们的算法，比如长度，如果两个数组长度不一样，那么它们两个的内容肯定是不一样的。类似这样的特征还有数据结构的某个字段或者某几个字段可以决定算法的计算路径，我们只要判断这几个字段就能排除很多计算量。套路只是方法论很多时候技巧谁都知道，实际运用时却能难灵活自如，如果你不常用它们，它们就不回成为你思考的一部分。容器作者对容器类数据结构性能做了一些介绍，从本质和测试标准两个方面做了讲解。不管C++标准库和Boost中的容纳器，还是其他语言的标准容器，它们都是非常通用且性价比不错的容器。但是如果你想让容器的性能发挥到最佳状态，就得自己去改造它。为什么要改造呢？因为首先标准容器内存的分配方式对具体的业务逻辑并不友好，我们可以把跟业务强相关的内存分配方式和内存池的技巧用在容器上以提高内存分配效率，其次容器中数据结构的插入、删除、查找的算法跟业务匹配上并不是最佳的，所以我们要根据我们的实际情况来改造这些算法以提高性能效率。容器包括，序列容器和关联容器，序列容器有string，vector，deque，list，forward_list，大都是以数组或链表形式存在的容器，而关联容器则以map和set为代表，用来建立key和value之间联系的容器，包括map、multimap、set、multiset等。我们在构造完自己的容器后，需要跟标准容器进行比较，只有这样才能知道我们改造的与业务强相关的容器是否比标准容器更加高效。容器性能测试标准就是为了判断容器的在各方面的性能是否更优秀，测试内容需要包含向一个没有内容的容器中以及向一个有数万条记录的容器中插入，删除，查找十万个不同的元素所需要消耗的纳秒数，比较拥有相同功能的容器在执行同一功能的操作时所消耗的时间。我们在测试时用到的数据也会遇到问题，十万个元素也并不能代表数据的典型性，所以很多时候我们需要离线Random随机1000组不同的数据以覆盖所有测试范围。由于我们自己不可能对所有容器进行重构，所以第三方容器库也是我们需要关注的地方，包括Boost、EASTL等都是我们需要参考的对象。内存分配提升内存分配效率是提升程序性能非常有效的手段，其实质就是减少内存分配次数，减少内存分配次数就意味着减少内存分配带来的消耗，因此关键的关键还是如何减少内存分配次数，注意，是次数，不是大小，也不是释放。讲内存分配之前，我们先来了解下内存分配接口以及内存分配的底层原理。C++中内存管理函数有new，delete，malloc，free，其中new，delete运算符可以被类重载为 new()，new，delete()，delete，他们与class强相关，而malloc()和free()则是经典的C函数库中的内存管理函数，它们分配和释放的是无类型内存块，当无类型内存块被创建出来后，可以被强制指定为是某个变量、数据结构或者类实例。从概念上来说，分配内存的函数会从内存中寻找一块可以使用的内存来满足请求，但事实上并没有这么简单。作者没有详细介绍内存分配和释放的底层原理，但我觉得这部分的底层原理是值得挖掘和说明的，作为一个频繁与内存打交道的程序员来说，知道内存是如何分配和释放的是非常有必要的。我们的程序被加载到内存后分为几个内存段，包括指令段，数据段，bss段，栈段，堆段，指令段放具体指令，数据段放常量数据，bss段放静态和全局变量，栈段放调用栈、临时寄存器和临时变量，以上几个段都是固定的，不会有扩容一说，只有堆段是可扩容的。new和malloc分配的内存就在这个堆段中。堆段会事先分配一段内存，当malloc请求分配的内存时，如果剩余空的内存足够，则分配返回一段足够大小的内存，如果不足则再申请内存。堆段在向系统申请内存时类似于提高内存块大小，分配新内存这个操作需要系统将用户态切换到内核态再切回来，因此性能损耗是比较大的。其实malloc分配了内存，也并不代表实际物理内存中申请了某块内存，因为进程所面对的虚拟内存地址空间，只有按页映射到物理内存地址，才能真正使用。而且分配了新的内存，物理内存上实际没有此内存空间，只有当我们memset实际使用它时系统发现了物理内存缺页情况时才真正分配实际物理内存空间。从这个角度看，内存分配在操作系统底层上会稍显复杂。那么申请内存在系统底层到底是如何操作的呢？我们来深究一下。在Linux中进程由进程控制块(PCB)描述，用一个task_struct 数据结构表示，这个数据结构记录了所有进程信息，包括进程状态、进程调度信息、标示符、进程通信相关信息、进程连接信息、时间和定时器、文件系统信息、虚拟内存信息等. 和malloc密切相关的就是虚拟内存信息，定义为struct mm_struct描述了进程的地址空间。mm_struct结构对整个用户空间（进程空间）的描述如下:///include/linux/sched.h struct mm_struct {  struct vm_area_struct * mmap;  /* 指向虚拟区间（VMA）链表 */  rb_root_t mm_rb;         /*指向red_black树*/  struct vm_area_struct * mmap_cache;     /* 指向最近找到的虚拟区间*/  pgd_t * pgd;             /*指向进程的页目录*/  atomic_t mm_users;                   /* 用户空间中的有多少用户*/                                       atomic_t mm_count;               /* 对\"struct mm_struct\"有多少引用*/                                       int map_count;                        /* 虚拟区间的个数*/  struct rw_semaphore mmap_sem;  spinlock_t page_table_lock;        /* 保护任务页表和 mm-&gt;rss */         struct list_head mmlist;            /*所有活动（active）mm的链表 */  unsigned long start_code, end_code, start_data, end_data; /* 代码段、数据段 起始地址和结束地址 */  unsigned long start_brk, brk, start_stack; /* 栈区 的起始地址，堆区 起始地址和结束地址 */  unsigned long arg_start, arg_end, env_start, env_end; /*命令行参数 和 环境变量的 起始地址和结束地址*/  unsigned long rss, total_vm, locked_vm;  unsigned long def_flags;  unsigned long cpu_vm_mask;  unsigned long swap_address;  unsigned dumpable:1;  /* Architecture-specific MM context */  mm_context_t context;};其中start_brk和brk分别是堆的起始和终止地址，我们使用malloc动态分配的内存就在这之间。系统分配堆空间时，进程通过malloc()库函数在堆上进行空间动态分配，堆空间如果不够用，malloc就进行系统调用增大brk的值。malloc只知道start_brk 和brk之间连续可用的内存空间它可用任意分配，如果不够用了就向系统申请增大brk。我们看到实际堆内存在虚拟空间中是可以不断向上扩张的，虽然实际物理内存中不是这样，但至少在虚拟空间中我们可以认为堆内存是一段连续的内存空间地址。由于我们分配的内存空间都在虚拟空间当中，我们看到的都是虚拟的地址，实际物理内存分配并不是我们想象的那样连续，也有可能在分配时由于物理内存不足我们拿到的空间是从硬盘空间上的一段数据交换到内存上来的。所以很多时候即使我们分配了连续的空间，在物理内存上也并不是连续的，只能说连续的概率比较大而已。其实还有很多分配内存在操作系统层面的原理，这里暂时不深究下去。作者指出提高内存分配效率的方法有两种，一种是减少不必要的内存复制的情况，另一种是用固定大小内存分配器解决减少内存分配次数。其中内存复制现象常会存在于对象初始化、赋值运算、函数参数、函数返回、插入一个元素到标准容器中，这几种情况是我们需要特别注意的，常常会由于失误编码而导致内存复制的情况，特别是针对一些常用的结构体和非指针类型的实例传递。固定大小内存管理器，意思是分配的内存块大小是固定的，这块内存可以是某个类或数据结构相匹配的一个固定大小，也可以是按某固定大小的内存块，这块内存能容纳某个范围内的一个类或数据结构的实例，这个内存管理器专门管理这个类或数据结构的所有内存的，或者专门管理某个固定大小内存块的管理类，这样在分配某一类大小实例时可以专门使用这样的内存管理器(有冗余不可避免)。在固定大小内存管理器中，会预加载一段内存以便给足够数量的类和数据结构使用，并且在回收时存储在管理器中以便重复利用，这样既减少了内存分配次数，也减少了内存碎片。这样一来，内存块的管理，可以分为，专门为某个类设计的内存管理类，和专门为某个大小范围内设计的内存管理类，我们可以称它们为通用的内存块管理类。在实际编程中，我们在写一个固定大小的内存分配管理器时，如果某个类使用数量比较固定和分配释放率比较频繁的话，可以专门为这个类做一个分配器是性价比比较高的。我们通常也会写一个比较通用的内存管理器，用大小不同的内存块来进行区分，例如我们可以为64byte，128byte，256byte，512byte，1k，2k，这几档大小分别预分配几十个内存块存储在通用内存分配管理器中，当程序请求内存时，将请求大小四舍五入后变为2的下一个幂，这样就能获得一个最快适配的内存管理器，当然在使用完毕释放时也同样只是回到这个内存管理器中存储起来以便重复利用，就像内存池和对象池那样。热点代码这周依然没有写完，下周继续最后一部分的总结。参考资料：《malloc和free的实现原理解析》https://jacktang816.github.io/post/mallocandfree/",
            "content_html": "<h3 id=\"字符串问题\">字符串问题</h3><p>这里作者讲的有点啰嗦，没有围绕着重点去讲，所以这里我吸收下他的知识点并总结下自己的知识点和经验。</p><p>把字符串问题单独拎出来说是因为字符串问题比较大，也比较隐性，常常容易引起性能问题。字符串在概念上很简单，它就是一个字符数组，但是想要实现高效的字符串却非常不容易。</p><p>首先字符串内存是动态分配的，其次是字符串常常被用来当成一个值来使用，这导致字符串操作常常带来大量不必要的内存分配和内存复制。</p><p>字符串问题的重点在内存分配问题和字符串查找。字符串操作带来的内存频繁的分配和浪费导致程序性能效率大大降低，操作包括，字符串拼接、字符串拆分、字符串大小写切换等，每次操作字符串都会新分配一个字符串内存或者字符串内存集，而查找字符串，即使使用算法通常也会逐字比较，效率比价差，特别是在一个集合中查找某个字符串对应的值时，需要完整的比较两者字符串是否完全一致。</p><p>改善内存分配效率，我们可以使用预分配和内存池机制。字符串内存预分配可以有2种，一种预先分配很多个长度不同的字符串缓存起来，使用时给出去，例如分别预分配1-50长度的字符串各100个，当逻辑需要时再给出去，用完了再收回来。另一种是先分配多个长一点的字符串，例如分配100个100长度的字符串，让字符串能够在拼接时不用再分配内存，由于本身字符串长度足够长，所以可以直接在当前字符数组中改写内容。</p><p>除了预分配，我们也可以将已经分配的字符串加入到字符串缓冲池中去，来管理这些预先分配好的字符串，需要时给予，不用时回收，不够时再分配一批，这样就能重复利用已经分配的字符串内存，将分配内存的工作集中起来消耗在某个点上。</p><p>我们常会去比较和查找字符串，查找字符串中的字符串有很多算法，但比较两个字符串是否相同如果仍然使用查找算法去做就是一种浪费，那么我们应该怎样去做两个字符串的比较呢，最好用哈希的方式，把字符串计算出一个哈希值，用这个哈希值来比较是否相等就快很多了。例如我们常常在业务逻辑中判断两个字符串是否相等，每次比较都会浪费掉很多计算量，用哈希的方式就会快很多，因为比较的是两个整数，在每次更新字符串时只需要重新计算一次哈希值就可以，由于通常字符串更新的并不频繁，所以计算哈希的消耗远比每次遍历两个字符串所带来的消耗要小的多。但哈希计算不一定能够获得一个唯一值，所以它只能被用来判断是否不同，即当哈希值不同时，两个字符串一定不同，而两个哈希值相同时有可能不同，此时再比较两者是否真的相同。虽然无法直接比较相同的字符串，但仍然大大减少了不同的两个字符串的比较的计算。</p><h3 id=\"算法\">算法</h3><p>算法是性能优化中的精髓，多数平庸的优化方法对性能改善都是线性的，但算法不同，如果说一个高效的算法替换了一个低效的算法性能可能呈现指数级的增长。</p><p>算法时间开销一般有O(1)，O(log2(N))，O(N)，O(Nlog2(N))，O(N^2)，O(N^3)，O(2^N)，从高效到低效的排列，大多数算法如果能到log2(N)已经是非常优秀了，再进一步到O(1)则通常要付出巨大的内存代价。</p><p>作者对二分查找、哈希、散列查找算法特别中意，于是讲了散列算法是怎样的和关键点是什么。我们在用在用查找算法时log2(N)的算法已经是非常不错的查找效率了，所以二分查找是效率比较高的，但它仍然是建立在有序队列的基础上，需要先排序再查找，排序比查找更能耗时，而且后续的元素加入需要插入到有序队列中。而散列算法则不同，排序和查找会更快，前提是数据特性能够散列，或者说散列的冲突不会那么高，于是他告诉我们哈希算法对于散列的重要性。</p><p>这里作者讲的查找和排序内容比较浅，我融入了一些自己的经验。</p><p>算法通常是根据数据特效来定制的，所以对数据独有的特性分析是重点。就我的理解，算法并一定要局限于当前的结构，可以重新创建一个全新的结构方式，这样在用算法去优化程序的时候思路会更开阔。例如我们在全地图寻找某个人的时候并不一定要在查找函数上优化算法，而可以重新制造一个方格结构体把世界分割成不同的方块，找人时只要收集四周方块内的人就可以更快的找到。</p><p>算法也可以是局部的，因为数据多少和数据的特性可以由不同算法处理，所以我们在处理一大堆数据时可以拆分成不同的数据集进行处理，这些数据集的大小和特性也有所不同，针对性的处理会得到更有效的算法效率，例如快速排序算法，可以由不同的算法组成，由于它的中间值决定了快排速度，所以中间值我们可以用三个值取中间数的算法来找到更加稳定的中间值，当数段被分割成多个区间并且单个区间小于等于8个数时，插入排序其实比快排会更加快一些，因此我们在快排中间当数据量小于8时选择用插入排序算法。</p><p>作者列举了一些常用的算法优化思路和套路。</p><p>套路有：预计算、延迟计算、批量处理、缓存、特化、提高处理量、提示、优化执行路径、散列法、双重检查。</p><h3 id=\"预计算\">预计算</h3><p>提前计算好一些可以离线完成计算量存储在文件中，这样可以省去了实时计算的开销。</p><h3 id=\"延迟计算\">延迟计算</h3><p>先让所有中间过程改变完成后再对最后的结果计算，这样就省去了每次都需要计算全路径的消耗，例如引擎中通常有节点相互的挂载，每次赋值节点position时都会去计算重新计算子节点的位置，这时就要思考如何让计算延后，每次子节点的真实位置只要在帧结束时计算一遍就可以了，不用每次改变position时都去全路径计算一遍所有子节点。</p><h3 id=\"批量处理\">批量处理</h3><p>某些具有相同性质的数据不要一个个处理，因为一起同一类型的数据处理起来会有更优的方法，例如堆排序如果一个个插入的元素的话性能开销是O(Nlog2(N))，而一次性构建一个堆的话只需要O(N)。</p><h3 id=\"缓存\">缓存</h3><p>不要每次都计算，然后拿着结果去比较，计算完后缓存起来，一直用缓存的值，直到需要更改时再计算一遍。</p><h3 id=\"特化\">特化</h3><p>一堆数据处理时它们都会消耗一些计算量，如果某个数据是特别的，不需要计算或者计算量可以很小，则另外开辟一个通道给它，让它少消耗一些。</p><h3 id=\"提高处理量\">提高处理量</h3><p>一次处理多个数据而不是一个个处理，例如写日志不要每次都写，每隔一段时间写一次，类似这样的操作，先把准备的数据集中起来，集中起来的数据可能会有更多相似的特性可以用来优化。</p><h3 id=\"提示\">提示</h3><p>当处理数据的时候，给予一个提示，这样我们就能知道该如何更好更快的处理，例如在插入一个数据到队列里去时，告诉插入函数，这个数是个比较大的值或者是一个比较小的值，这样我们在做插入时就有了更多优化提示。</p><h3 id=\"优化执行路径\">优化执行路径</h3><p>程序语句里有很多个if…else，如果95%的语句都进某个if，那么最好把它提前到语句前，这样就不用执行其他的if里的计算了。</p><h3 id=\"散列法\">散列法</h3><p>哈希值比较法，数据结构和字符串在比较时比较费时，用哈希值比较则比较方便，为它们计算一个哈希值，当两个哈希值不同时，它们一定不同，如果哈希值相同则再比较是否真的相同。</p><h3 id=\"双重检查\">双重检查</h3><p>数据其实有很多个特征可供我们使用来优化我们的算法，比如长度，如果两个数组长度不一样，那么它们两个的内容肯定是不一样的。类似这样的特征还有数据结构的某个字段或者某几个字段可以决定算法的计算路径，我们只要判断这几个字段就能排除很多计算量。</p><h3 id=\"套路只是方法论\">套路只是方法论</h3><p>很多时候技巧谁都知道，实际运用时却能难灵活自如，如果你不常用它们，它们就不回成为你思考的一部分。</p><h3 id=\"容器\">容器</h3><p>作者对容器类数据结构性能做了一些介绍，从本质和测试标准两个方面做了讲解。</p><p>不管C++标准库和Boost中的容纳器，还是其他语言的标准容器，它们都是非常通用且性价比不错的容器。但是如果你想让容器的性能发挥到最佳状态，就得自己去改造它。为什么要改造呢？因为首先标准容器内存的分配方式对具体的业务逻辑并不友好，我们可以把跟业务强相关的内存分配方式和内存池的技巧用在容器上以提高内存分配效率，其次容器中数据结构的插入、删除、查找的算法跟业务匹配上并不是最佳的，所以我们要根据我们的实际情况来改造这些算法以提高性能效率。</p><p>容器包括，序列容器和关联容器，序列容器有string，vector，deque，list，forward_list，大都是以数组或链表形式存在的容器，而关联容器则以map和set为代表，用来建立key和value之间联系的容器，包括map、multimap、set、multiset等。</p><p>我们在构造完自己的容器后，需要跟标准容器进行比较，只有这样才能知道我们改造的与业务强相关的容器是否比标准容器更加高效。</p><p>容器性能测试标准就是为了判断容器的在各方面的性能是否更优秀，测试内容需要包含向一个没有内容的容器中以及向一个有数万条记录的容器中插入，删除，查找十万个不同的元素所需要消耗的纳秒数，比较拥有相同功能的容器在执行同一功能的操作时所消耗的时间。我们在测试时用到的数据也会遇到问题，十万个元素也并不能代表数据的典型性，所以很多时候我们需要离线Random随机1000组不同的数据以覆盖所有测试范围。</p><p>由于我们自己不可能对所有容器进行重构，所以第三方容器库也是我们需要关注的地方，包括Boost、EASTL等都是我们需要参考的对象。</p><h2 id=\"内存分配\">内存分配</h2><p>提升内存分配效率是提升程序性能非常有效的手段，其实质就是减少内存分配次数，减少内存分配次数就意味着减少内存分配带来的消耗，因此关键的关键还是如何减少内存分配次数，注意，是次数，不是大小，也不是释放。</p><p>讲内存分配之前，我们先来了解下内存分配接口以及内存分配的底层原理。</p><p>C++中内存管理函数有new，delete，malloc，free，其中new，delete运算符可以被类重载为 new()，new<a href=\"\"></a>，delete()，delete<a href=\"\"></a>，他们与class强相关，而malloc()和free()则是经典的C函数库中的内存管理函数，它们分配和释放的是无类型内存块，当无类型内存块被创建出来后，可以被强制指定为是某个变量、数据结构或者类实例。</p><p>从概念上来说，分配内存的函数会从内存中寻找一块可以使用的内存来满足请求，但事实上并没有这么简单。作者没有详细介绍内存分配和释放的底层原理，但我觉得这部分的底层原理是值得挖掘和说明的，作为一个频繁与内存打交道的程序员来说，知道内存是如何分配和释放的是非常有必要的。</p><p>我们的程序被加载到内存后分为几个内存段，包括指令段，数据段，bss段，栈段，堆段，指令段放具体指令，数据段放常量数据，bss段放静态和全局变量，栈段放调用栈、临时寄存器和临时变量，以上几个段都是固定的，不会有扩容一说，只有堆段是可扩容的。new和malloc分配的内存就在这个堆段中。</p><p>堆段会事先分配一段内存，当malloc请求分配的内存时，如果剩余空的内存足够，则分配返回一段足够大小的内存，如果不足则再申请内存。</p><p>堆段在向系统申请内存时类似于提高内存块大小，分配新内存这个操作需要系统将用户态切换到内核态再切回来，因此性能损耗是比较大的。其实malloc分配了内存，也并不代表实际物理内存中申请了某块内存，因为进程所面对的虚拟内存地址空间，只有按页映射到物理内存地址，才能真正使用。而且分配了新的内存，物理内存上实际没有此内存空间，只有当我们memset实际使用它时系统发现了物理内存缺页情况时才真正分配实际物理内存空间。</p><p>从这个角度看，内存分配在操作系统底层上会稍显复杂。那么申请内存在系统底层到底是如何操作的呢？我们来深究一下。</p><p>在Linux中进程由进程控制块(PCB)描述，用一个task_struct 数据结构表示，这个数据结构记录了所有进程信息，包括进程状态、进程调度信息、标示符、进程通信相关信息、进程连接信息、时间和定时器、文件系统信息、虚拟内存信息等. 和malloc密切相关的就是虚拟内存信息，定义为struct mm_struct描述了进程的地址空间。</p><p>mm_struct结构对整个用户空间（进程空间）的描述如下:</p><pre><code class=\"language-c\">///include/linux/sched.h struct mm_struct {  struct vm_area_struct * mmap;  /* 指向虚拟区间（VMA）链表 */  rb_root_t mm_rb;         /*指向red_black树*/  struct vm_area_struct * mmap_cache;     /* 指向最近找到的虚拟区间*/  pgd_t * pgd;             /*指向进程的页目录*/  atomic_t mm_users;                   /* 用户空间中的有多少用户*/                                       atomic_t mm_count;               /* 对\"struct mm_struct\"有多少引用*/                                       int map_count;                        /* 虚拟区间的个数*/  struct rw_semaphore mmap_sem;  spinlock_t page_table_lock;        /* 保护任务页表和 mm-&gt;rss */         struct list_head mmlist;            /*所有活动（active）mm的链表 */  unsigned long start_code, end_code, start_data, end_data; /* 代码段、数据段 起始地址和结束地址 */  unsigned long start_brk, brk, start_stack; /* 栈区 的起始地址，堆区 起始地址和结束地址 */  unsigned long arg_start, arg_end, env_start, env_end; /*命令行参数 和 环境变量的 起始地址和结束地址*/  unsigned long rss, total_vm, locked_vm;  unsigned long def_flags;  unsigned long cpu_vm_mask;  unsigned long swap_address;  unsigned dumpable:1;  /* Architecture-specific MM context */  mm_context_t context;};</code></pre><p>其中start_brk和brk分别是堆的起始和终止地址，我们使用malloc动态分配的内存就在这之间。系统分配堆空间时，进程通过malloc()库函数在堆上进行空间动态分配，堆空间如果不够用，malloc就进行系统调用增大brk的值。malloc只知道start_brk 和brk之间连续可用的内存空间它可用任意分配，如果不够用了就向系统申请增大brk。</p><p>我们看到实际堆内存在虚拟空间中是可以不断向上扩张的，虽然实际物理内存中不是这样，但至少在虚拟空间中我们可以认为堆内存是一段连续的内存空间地址。</p><p>由于我们分配的内存空间都在虚拟空间当中，我们看到的都是虚拟的地址，实际物理内存分配并不是我们想象的那样连续，也有可能在分配时由于物理内存不足我们拿到的空间是从硬盘空间上的一段数据交换到内存上来的。所以很多时候即使我们分配了连续的空间，在物理内存上也并不是连续的，只能说连续的概率比较大而已。</p><p>其实还有很多分配内存在操作系统层面的原理，这里暂时不深究下去。</p><p>作者指出提高内存分配效率的方法有两种，一种是减少不必要的内存复制的情况，另一种是用固定大小内存分配器解决减少内存分配次数。</p><p>其中内存复制现象常会存在于对象初始化、赋值运算、函数参数、函数返回、插入一个元素到标准容器中，这几种情况是我们需要特别注意的，常常会由于失误编码而导致内存复制的情况，特别是针对一些常用的结构体和非指针类型的实例传递。</p><p>固定大小内存管理器，意思是分配的内存块大小是固定的，这块内存可以是某个类或数据结构相匹配的一个固定大小，也可以是按某固定大小的内存块，这块内存能容纳某个范围内的一个类或数据结构的实例，这个内存管理器专门管理这个类或数据结构的所有内存的，或者专门管理某个固定大小内存块的管理类，这样在分配某一类大小实例时可以专门使用这样的内存管理器(有冗余不可避免)。</p><p>在固定大小内存管理器中，会预加载一段内存以便给足够数量的类和数据结构使用，并且在回收时存储在管理器中以便重复利用，这样既减少了内存分配次数，也减少了内存碎片。</p><p>这样一来，内存块的管理，可以分为，专门为某个类设计的内存管理类，和专门为某个大小范围内设计的内存管理类，我们可以称它们为通用的内存块管理类。</p><p>在实际编程中，我们在写一个固定大小的内存分配管理器时，如果某个类使用数量比较固定和分配释放率比较频繁的话，可以专门为这个类做一个分配器是性价比比较高的。我们通常也会写一个比较通用的内存管理器，用大小不同的内存块来进行区分，例如我们可以为64byte，128byte，256byte，512byte，1k，2k，这几档大小分别预分配几十个内存块存储在通用内存分配管理器中，当程序请求内存时，将请求大小四舍五入后变为2的下一个幂，这样就能获得一个最快适配的内存管理器，当然在使用完毕释放时也同样只是回到这个内存管理器中存储起来以便重复利用，就像内存池和对象池那样。</p><h2 id=\"热点代码\">热点代码</h2><p>这周依然没有写完，下周继续最后一部分的总结。</p><p>参考资料：</p><p>《malloc和free的实现原理解析》https://jacktang816.github.io/post/mallocandfree/</p>",
            "url": "http://www.luzexi.com/2020/12/13/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B017",
            
            
            
            "tags": ["读书笔记","Unity3D","前端技术"],
            
            "date_published": "2020-12-13T00:00:00+08:00",
            "date_modified": "2020-12-13T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2020/12/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B016",
            "title": "读书笔记(十六) 《C++性能优化指南》一",
            "summary": "读书 书 看书 读后感",
            "content_text": "这本书给我的感受是，有技巧有细节也有许多不足，作者介绍了大部分程序上性能优化的方案和思路，也从原理上讲了性能问题的根本原理，但没能做得通俗易懂、深入浅出，书本有几处地方在故弄玄虚以及凑字数，也许是我的功力不足没能理解，这部分无法理解的杂乱无章的内容，可以留到以后再慢慢回顾。整本书其实并不是针对C++写的，而是面向程序执行而效率写的，其他语言也一样通用。我结合我的经历和经验写下我的理解，以及我从书中学到的知识，或许过几年回头看会是另一番情景，但现在我需要把它们拎出来总结一下。作者是一个有30多年编程经历的人，对编程依然保持的狂热兴趣，注意，他从未去过微软、谷歌等知名公司，这本书就是在这样的一个前提下写下的。作者认为我们在优化程序的时候，很多时候都是靠‘猜测’而不是实际的去测试，这是一个比较大的问题。实际上我们并不知道某段程序是否有性能问题，因为有可能编译器已经将它优化了，或者某段程序在我们优化后是否真的有性能提升，因为很多时候我们只是肉眼去代码或是用脑袋去猜，不知道性能问题出在哪里就花费很多时间去优化这是不行的。而且我们也不能因为优化程序性能而破坏了程序的稳定性，如果从中制造出Bug导致产品崩溃那是非常得不偿失的。另外他提出了一个比较重要的理念，即大部分性能问题在代码层面上的分布都是‘90/10规则’，也就是说，90%的性能问题出在10%的代码上。因此为了我们在做性能优化时提高效率，应该重点去找出这影响90%性能问题的那10%的代码，它们就是性能问题的重点。不过这10%的代码并不是集中在某处，而是分散在各个模块中，需要我们去找出来，因此按照我的经验和他的理念来理解性能优化的90/10规则，是说我们需要改动的代码远比整体代码要少的多，而我们必须精准的找出这部分少数代码并优化它。原书内容比较繁杂，我又重新归类，我把它归类为，计算机执行原理、性能测试、字符串问题、算法、内存分配、热点代码、IO、并发，这八个方面。下面就让我们来讲讲我从书本中学到的对性能优化的理解。计算机执行原理代码从被编译到成为可执行文件也就是机器码，这个过程就是一个从本文字符串翻译成机器码的过程，当我们执行它们的时候，它可机器码被放入了内存，内存中也有分块，包括数据段、栈段、指令段。CPU在执行指令时是从内存中将指令送入CPU的，而执行指令的速度通常比读取内存的快很多，因此读取指令也成为了瓶颈的一种。CPU在读取指令时也并不会一行一行的读取，因为这样效率太差，取而代之的是它会把一大块内容读取到高速缓存从而加快执行速度，指令会顺序执行直到结束或有跳转。而内存芯片也有自己的工作原理，它相当于另一个CPU，它只有在顺序访问时才能在一个周期内完成，而访问一个非连续的位置则会花费更多周期。这里就涉及到了内存在访问时的形式，每次访问内存都是以某个大小为单位，例如x86机器，每次访问内存时都是以4个字节为单位访问，一个int整数为4个字节需要一次访问，但如果这个int整数内存没有对齐，那么可能就需要访问两次才能获得这个值，因为构成这个内存的物理结构可能是垮了两个物理内存字。不过请注意，现代编译器都会默认对对象和数据结构做内存对齐操作，除非我们告诉编译器某个数据结构不做内存对齐。对齐时编译器也会优化内存结构让高速缓存命中率提高，关于class的内存布局我们在《深度探索C++对象模型》总结中有详细的讲解。作者没有细说关于不对齐时内存访问的来龙去脉，不过我们来举个例子：[-][-][x][x][x][x][-][-]例如上面这个非对齐的内存空间，‘x’表示某个int变量占用的4个字节，‘-’表示其他，当CPU读取这个int整数时，其实是先读取[-][-][x][x]再读取[x][x][-][-]拼接完成后为[x][x][x][x]最后交给寄存器。实际上访问非内存对齐并没有我们想象的那么简单，一个内存实际上有很多个内存芯片共同组成。为了提高访问的带宽，通常会将存储地址分开放在不同的芯片上，例如上面位置0，1，2，3，这4个byte分别存放在芯片1，芯片2，芯片3，芯片4中，当需要它们时，可以一次性全部读取，即如下：偏移量/芯片存储空间   x1 x2 x3 x40 [-][x][x][x]1 [x][-][-][-]2 [-][-][-][-]3 [-][-][-][-]4 [-][-][-][-]图中x为要读取的数据，每一列为一个芯片负责的空间，每一行为一个偏移量。这就是说，内存实际上并不是完全以连续byte形式组织的，而是以偏移(offset)量给出具体地址。当我们读取[0][1][2][3]这4个byte数据时可以一次性读取，但如果从1开始读取1，2，3，4时就要多一次偏移(offset)的操作，即先让4个芯片读取偏移量为0时的数据，再让它们读取偏移量为1的数据。为了改善内存速度，高速缓存被大量运用，即我们说的L1、L2、L3、L4四级高速缓存，它们每一层的速度大约是下一层的10倍左右。当执行单位需要的内容不在高速缓存中时，需要从内存中加载数据到高速缓存中，并同时将一部分内容舍弃以换取足够的空间，通常会选择放弃的数据都是最近被使用频率比较低的数据。在读取一个不在高速缓存中的数据时通常会将临近的数据也被缓存起来，从访问概率上来说做了加速了数据访问，即概率上来说临近的数据访问概率比较高的特点。这意味着频繁被访问的数据和频繁被访问的周围附近的数据都会因为高速缓存而加速。不仅仅是变量数据，机器指令也是数据的一种，超远的if和goto跳转以及远地址function函数调用同样会让高速缓存失效，其原理是执行指令地址从一处跳到另一处导致执行指令不连续。内存的访问也会有不够的时候，这时虚拟内存带来了很大的便利，但也给性能带来了很大影响。在虚拟内存机制中，当内存不够时需要借用磁盘空间来扩充，这让内存制造出拥有充足物理空间的假象，将使用频率小的内存数据作为文件存放在磁盘上，当使用时再读区进内存同时更换部分内存到硬盘上，我们常称它们为内存swap操作。由于swap操作很费时，因此检测swap次数也常被纳入性能监控中。通常我们一个操作系统中有多个程序需要同时内存访问，而内存总线就只有一个，内存芯片必须一个个去完成CPU分配给它的任务，有时甚至是经常不连续的内存访问，由此看来，内存的读写负担是相当重的。如果未来有更多的处理器内核增加，而内存接口和读取速度没有增加的话，那么其实这些内核对性能的改善效果也是趋于递减的，因为虽然有多个CPU来处理指令，但内存并没有被加速。接着我们来看看线程和进程如何影响执行效率，由于操作系统会执行一个线程很短时间然后将上下文切换到其他线程或进程。导致在切换时会浪费掉很多时间，操作系统需要暂停当前的线程并且保存处理器中的寄存器到内存，然后为即将被执行的线程加载之前保存过的寄存器。如果新的线程的数据不在高速缓存中，那么还需要从内存中加载数据到高速缓存，因此上下文切换的代价比我们想象的高。这里做个小结，以上讲的都是些计算机执行原理，我们需要明白的原理才能真正明白优化背后的逻辑。首先内存效率没有我们想象那么快，非对齐内存会多一次开销(编译器通常都有做内存对齐)，指令远距离跳转和内存远距离访问都会让高速缓存命中丢失，频繁访问的数据和附近的数据会比较快，虚拟内存扩充了内存但swap时性能开销很大，多个进程和线程争夺内存使用权是性能瓶颈之一，太多线程和进程上下文切换代价较大，会导致执行效率降低。性能测试性能测试对于性能优化来说是关键的关键，就像作者提到的那样，我们不能靠猜来判断哪些代码需要优化，或者代码执行效率提升了多少不能由某个人说了算。那些具有最让人折服的优化技巧的开发人员都会系统地完成如下步骤：1.测试出哪些地方是可优化的，做出预测并记录预测。2.保留优化的代码记录3.用测试工具进行测量优化前后的数据对比4.保留实验结果并做详细的笔记。以上列的四项步骤是性能优化过程中必须不断实践的技能，现实中多数开发人员都想当然的去优化代码，而不是按照上面的方式有条不紊的进行优化，这是优化过程中最糟糕的一点，即不知道自己该从哪里开始优化，优化结束时不知道是否真的优化了优化了多少，有可能更加糟糕，过了段时间甚至记不起来优化了什么。除了实际的去测量和记录，我们在性能测试时要注意哪些关键点呢？作者给出了自己的经验。1.测量程序的启动时间，执行时间，退出时间。通常人们总是忘了启动和退出时间，这导致部分测量范围不够或者测量不准确。2.测量的数据和环境必须是可重复的。只有两个数据和环境是可重复的，才有可能让两次测量在同一个标准中进行。3.测量必须有一个标准和一致的范围。如果前后两次测量的环境、测量内容、测试的持续时间不一致，则测量出来的数据是无效的，这种情况下的任何优化数据都是可笑的。4.测量数据通常都是波动的，没有不波动的测量数据。因此我们需要通过反复测量多次给出平均值的方式来确定最后的数据。5.其他进程会影响测量结果。关闭其他会导致影响的进程，或者提高测量进程为最高级别。6.测量工具很重要测量工具包括类似Stopwatch方式的打点，抓取堆栈调用时间，内存分配，内存快照等方式。7.分析代码和测量运行时间是帮助找出可优化代码的两种有效途径。只分析代码是行不通的，只测量运行时间也不可行。要分析代码与测量相互迭代，分析后测量，测量后分析，以此方式不断找出可优化的代码。开发人员需要向同事和领导展示他们在性能优化中取得的进展，我们需要精准的测量和详细的记录，如果凭直觉进行优化，也不发表结果，或者发表了结果也会遭到质疑，这是因为他们分不清你到底是在用高度专业的直觉进行优化还是只是在碰运气。字符串问题这把字符串问题单独拎出来说是因为字符串问题比较大，也比较隐性，常常容易引起性能问题。字符串在概念上很简单，它就是一个字符数组，但是想要实现高效的字符串却非常不容易。这周太忙，暂时写到这里，下周继续…",
            "content_html": "<p>这本书给我的感受是，有技巧有细节也有许多不足，作者介绍了大部分程序上性能优化的方案和思路，也从原理上讲了性能问题的根本原理，但没能做得通俗易懂、深入浅出，书本有几处地方在故弄玄虚以及凑字数，也许是我的功力不足没能理解，这部分无法理解的杂乱无章的内容，可以留到以后再慢慢回顾。</p><p>整本书其实并不是针对C++写的，而是面向程序执行而效率写的，其他语言也一样通用。我结合我的经历和经验写下我的理解，以及我从书中学到的知识，或许过几年回头看会是另一番情景，但现在我需要把它们拎出来总结一下。</p><p>作者是一个有30多年编程经历的人，对编程依然保持的狂热兴趣，注意，他从未去过微软、谷歌等知名公司，这本书就是在这样的一个前提下写下的。</p><p>作者认为我们在优化程序的时候，很多时候都是靠‘猜测’而不是实际的去测试，这是一个比较大的问题。实际上我们并不知道某段程序是否有性能问题，因为有可能编译器已经将它优化了，或者某段程序在我们优化后是否真的有性能提升，因为很多时候我们只是肉眼去代码或是用脑袋去猜，不知道性能问题出在哪里就花费很多时间去优化这是不行的。而且我们也不能因为优化程序性能而破坏了程序的稳定性，如果从中制造出Bug导致产品崩溃那是非常得不偿失的。</p><p>另外他提出了一个比较重要的理念，即大部分性能问题在代码层面上的分布都是‘90/10规则’，也就是说，90%的性能问题出在10%的代码上。因此为了我们在做性能优化时提高效率，应该重点去找出这影响90%性能问题的那10%的代码，它们就是性能问题的重点。不过这10%的代码并不是集中在某处，而是分散在各个模块中，需要我们去找出来，因此按照我的经验和他的理念来理解性能优化的90/10规则，是说我们需要改动的代码远比整体代码要少的多，而我们必须精准的找出这部分少数代码并优化它。</p><p>原书内容比较繁杂，我又重新归类，我把它归类为，计算机执行原理、性能测试、字符串问题、算法、内存分配、热点代码、IO、并发，这八个方面。下面就让我们来讲讲我从书本中学到的对性能优化的理解。</p><h2 id=\"计算机执行原理\">计算机执行原理</h2><p>代码从被编译到成为可执行文件也就是机器码，这个过程就是一个从本文字符串翻译成机器码的过程，当我们执行它们的时候，它可机器码被放入了内存，内存中也有分块，包括数据段、栈段、指令段。</p><p>CPU在执行指令时是从内存中将指令送入CPU的，而执行指令的速度通常比读取内存的快很多，因此读取指令也成为了瓶颈的一种。CPU在读取指令时也并不会一行一行的读取，因为这样效率太差，取而代之的是它会把一大块内容读取到高速缓存从而加快执行速度，指令会顺序执行直到结束或有跳转。</p><p>而内存芯片也有自己的工作原理，它相当于另一个CPU，它只有在顺序访问时才能在一个周期内完成，而访问一个非连续的位置则会花费更多周期。</p><p>这里就涉及到了内存在访问时的形式，每次访问内存都是以某个大小为单位，例如x86机器，每次访问内存时都是以4个字节为单位访问，一个int整数为4个字节需要一次访问，但如果这个int整数内存没有对齐，那么可能就需要访问两次才能获得这个值，因为构成这个内存的物理结构可能是垮了两个物理内存字。</p><p>不过请注意，现代编译器都会默认对对象和数据结构做内存对齐操作，除非我们告诉编译器某个数据结构不做内存对齐。对齐时编译器也会优化内存结构让高速缓存命中率提高，关于class的内存布局我们在《深度探索C++对象模型》总结中有详细的讲解。</p><p>作者没有细说关于不对齐时内存访问的来龙去脉，不过我们来举个例子：</p><pre><code class=\"language-c\">[-][-][x][x][x][x][-][-]</code></pre><p>例如上面这个非对齐的内存空间，‘x’表示某个int变量占用的4个字节，‘-’表示其他，当CPU读取这个int整数时，其实是先读取</p><pre><code class=\"language-c\">[-][-][x][x]</code></pre><p>再读取</p><pre><code>[x][x][-][-]</code></pre><p>拼接完成后为</p><pre><code>[x][x][x][x]</code></pre><p>最后交给寄存器。实际上访问非内存对齐并没有我们想象的那么简单，一个内存实际上有很多个内存芯片共同组成。为了提高访问的带宽，通常会将存储地址分开放在不同的芯片上，例如上面位置0，1，2，3，这4个byte分别存放在芯片1，芯片2，芯片3，芯片4中，当需要它们时，可以一次性全部读取，即如下：</p><pre><code class=\"language-c\">偏移量/芯片存储空间   x1 x2 x3 x40 [-][x][x][x]1 [x][-][-][-]2 [-][-][-][-]3 [-][-][-][-]4 [-][-][-][-]</code></pre><p>图中x为要读取的数据，每一列为一个芯片负责的空间，每一行为一个偏移量。这就是说，内存实际上并不是完全以连续byte形式组织的，而是以偏移(offset)量给出具体地址。当我们读取[0][1][2][3]这4个byte数据时可以一次性读取，但如果从1开始读取1，2，3，4时就要多一次偏移(offset)的操作，即先让4个芯片读取偏移量为0时的数据，再让它们读取偏移量为1的数据。</p><p>为了改善内存速度，高速缓存被大量运用，即我们说的L1、L2、L3、L4四级高速缓存，它们每一层的速度大约是下一层的10倍左右。当执行单位需要的内容不在高速缓存中时，需要从内存中加载数据到高速缓存中，并同时将一部分内容舍弃以换取足够的空间，通常会选择放弃的数据都是最近被使用频率比较低的数据。在读取一个不在高速缓存中的数据时通常会将临近的数据也被缓存起来，从访问概率上来说做了加速了数据访问，即概率上来说临近的数据访问概率比较高的特点。</p><p>这意味着频繁被访问的数据和频繁被访问的周围附近的数据都会因为高速缓存而加速。不仅仅是变量数据，机器指令也是数据的一种，超远的if和goto跳转以及远地址function函数调用同样会让高速缓存失效，其原理是执行指令地址从一处跳到另一处导致执行指令不连续。</p><p>内存的访问也会有不够的时候，这时虚拟内存带来了很大的便利，但也给性能带来了很大影响。在虚拟内存机制中，当内存不够时需要借用磁盘空间来扩充，这让内存制造出拥有充足物理空间的假象，将使用频率小的内存数据作为文件存放在磁盘上，当使用时再读区进内存同时更换部分内存到硬盘上，我们常称它们为内存swap操作。由于swap操作很费时，因此检测swap次数也常被纳入性能监控中。</p><p>通常我们一个操作系统中有多个程序需要同时内存访问，而内存总线就只有一个，内存芯片必须一个个去完成CPU分配给它的任务，有时甚至是经常不连续的内存访问，由此看来，内存的读写负担是相当重的。如果未来有更多的处理器内核增加，而内存接口和读取速度没有增加的话，那么其实这些内核对性能的改善效果也是趋于递减的，因为虽然有多个CPU来处理指令，但内存并没有被加速。</p><p>接着我们来看看线程和进程如何影响执行效率，由于操作系统会执行一个线程很短时间然后将上下文切换到其他线程或进程。导致在切换时会浪费掉很多时间，操作系统需要暂停当前的线程并且保存处理器中的寄存器到内存，然后为即将被执行的线程加载之前保存过的寄存器。如果新的线程的数据不在高速缓存中，那么还需要从内存中加载数据到高速缓存，因此上下文切换的代价比我们想象的高。</p><h3 id=\"这里做个小结以上讲的都是些计算机执行原理我们需要明白的原理才能真正明白优化背后的逻辑首先内存效率没有我们想象那么快非对齐内存会多一次开销编译器通常都有做内存对齐指令远距离跳转和内存远距离访问都会让高速缓存命中丢失频繁访问的数据和附近的数据会比较快虚拟内存扩充了内存但swap时性能开销很大多个进程和线程争夺内存使用权是性能瓶颈之一太多线程和进程上下文切换代价较大会导致执行效率降低\">这里做个小结，以上讲的都是些计算机执行原理，我们需要明白的原理才能真正明白优化背后的逻辑。首先内存效率没有我们想象那么快，非对齐内存会多一次开销(编译器通常都有做内存对齐)，指令远距离跳转和内存远距离访问都会让高速缓存命中丢失，频繁访问的数据和附近的数据会比较快，虚拟内存扩充了内存但swap时性能开销很大，多个进程和线程争夺内存使用权是性能瓶颈之一，太多线程和进程上下文切换代价较大，会导致执行效率降低。</h3><h2 id=\"性能测试\">性能测试</h2><p>性能测试对于性能优化来说是关键的关键，就像作者提到的那样，我们不能靠猜来判断哪些代码需要优化，或者代码执行效率提升了多少不能由某个人说了算。</p><p>那些具有最让人折服的优化技巧的开发人员都会系统地完成如下步骤：</p><pre><code>1.测试出哪些地方是可优化的，做出预测并记录预测。2.保留优化的代码记录3.用测试工具进行测量优化前后的数据对比4.保留实验结果并做详细的笔记。</code></pre><p>以上列的四项步骤是性能优化过程中必须不断实践的技能，现实中多数开发人员都想当然的去优化代码，而不是按照上面的方式有条不紊的进行优化，这是优化过程中最糟糕的一点，即不知道自己该从哪里开始优化，优化结束时不知道是否真的优化了优化了多少，有可能更加糟糕，过了段时间甚至记不起来优化了什么。</p><p>除了实际的去测量和记录，我们在性能测试时要注意哪些关键点呢？作者给出了自己的经验。</p><pre><code>1.测量程序的启动时间，执行时间，退出时间。通常人们总是忘了启动和退出时间，这导致部分测量范围不够或者测量不准确。2.测量的数据和环境必须是可重复的。只有两个数据和环境是可重复的，才有可能让两次测量在同一个标准中进行。3.测量必须有一个标准和一致的范围。如果前后两次测量的环境、测量内容、测试的持续时间不一致，则测量出来的数据是无效的，这种情况下的任何优化数据都是可笑的。4.测量数据通常都是波动的，没有不波动的测量数据。因此我们需要通过反复测量多次给出平均值的方式来确定最后的数据。5.其他进程会影响测量结果。关闭其他会导致影响的进程，或者提高测量进程为最高级别。6.测量工具很重要测量工具包括类似Stopwatch方式的打点，抓取堆栈调用时间，内存分配，内存快照等方式。7.分析代码和测量运行时间是帮助找出可优化代码的两种有效途径。只分析代码是行不通的，只测量运行时间也不可行。要分析代码与测量相互迭代，分析后测量，测量后分析，以此方式不断找出可优化的代码。</code></pre><p>开发人员需要向同事和领导展示他们在性能优化中取得的进展，我们需要精准的测量和详细的记录，如果凭直觉进行优化，也不发表结果，或者发表了结果也会遭到质疑，这是因为他们分不清你到底是在用高度专业的直觉进行优化还是只是在碰运气。</p><h2 id=\"字符串问题\">字符串问题</h2><p>这把字符串问题单独拎出来说是因为字符串问题比较大，也比较隐性，常常容易引起性能问题。字符串在概念上很简单，它就是一个字符数组，但是想要实现高效的字符串却非常不容易。</p><h3 id=\"这周太忙暂时写到这里下周继续\">这周太忙，暂时写到这里，下周继续…</h3>",
            "url": "http://www.luzexi.com/2020/12/06/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B016",
            
            
            
            "tags": ["读书笔记","Unity3D","前端技术"],
            
            "date_published": "2020-12-06T00:00:00+08:00",
            "date_modified": "2020-12-06T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2020/12/02/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A16",
            "title": "给女儿的信(六)  平衡工作和自己的事",
            "summary": "女儿 教育 亲情",
            "content_text": "Hi Sharon and Anne，爸爸好想你们，爸爸喜欢你们。爸爸还在深圳呢，要再过大概1个月才能回来呢。爸爸最近在给自己安排任务，以前爸爸常常等公司给我安排任务，这样会有个问题，爸爸总是会忙于公司的事，没有空去做自己想做的事情了。爸爸觉得这样不行，爸爸必须做些自己想做的事情，但又不能将公司的事情落下，于是爸爸就想到自己给自己安排任务，每天晚上都写下爸爸明天要做的事情，把公司的事和自己的事都兼顾起来，每天都做完他们，当然爸爸在指定任务的时候都是指定一天里能做完的，做不完的后面分成一天天的小任务去做。就像老师给你们安排作业一样，这些都是别人要你们做的，有些被动，做被动的事情的时候其实没有灵魂，不如反过来，每天晚上写下明天自己要做的事情，第二天的时候去做自己写下的列表上的事情，这样会更快乐哦。加油Sharon，加油Anne！",
            "content_html": "<p>Hi Sharon and Anne，爸爸好想你们，爸爸喜欢你们。爸爸还在深圳呢，要再过大概1个月才能回来呢。</p><p>爸爸最近在给自己安排任务，以前爸爸常常等公司给我安排任务，这样会有个问题，爸爸总是会忙于公司的事，没有空去做自己想做的事情了。爸爸觉得这样不行，爸爸必须做些自己想做的事情，但又不能将公司的事情落下，于是爸爸就想到自己给自己安排任务，每天晚上都写下爸爸明天要做的事情，把公司的事和自己的事都兼顾起来，每天都做完他们，当然爸爸在指定任务的时候都是指定一天里能做完的，做不完的后面分成一天天的小任务去做。就像老师给你们安排作业一样，这些都是别人要你们做的，有些被动，做被动的事情的时候其实没有灵魂，不如反过来，每天晚上写下明天自己要做的事情，第二天的时候去做自己写下的列表上的事情，这样会更快乐哦。</p><p>加油Sharon，加油Anne！</p>",
            "url": "http://www.luzexi.com/2020/12/02/%E7%BB%99%E5%A5%B3%E5%84%BF%E7%9A%84%E4%BF%A16",
            
            
            
            
            
            "date_published": "2020-12-02T00:00:00+08:00",
            "date_modified": "2020-12-02T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        },
    
        {
            "id": "http://www.luzexi.com/2020/11/21/%E5%90%91%E5%86%85%E7%9C%8B%E8%87%AA%E5%B7%B110",
            "title": "向内看自己(十) 反思自己的行为带给人的感觉",
            "summary": "思路 随想 理念 逻辑 人生哲学",
            "content_text": "最近发现自己的行为和话语给别人的感觉很不好，这源于我自身的性格问题。我有很多性格问题，导致生活中、工作中在与人交往过程中就会遇到障碍或瓶颈。我很想弄清楚我到底出了什么问题，但一直没弄明白，于是我想好好剖析一下自己。也因为最近在学习冥想，这个看起来有点玄乎的词语，是我最近研究的内容，我会专门写一篇文章来详细说明我对它的理解与感受。我发现冥想最大的益处就是让我忽略杂念专注于当前所做的事，在专注过程中不断发现当前事物中以前没有被我发现的细节，这些细节很多时候都是关键中的关键。当然最重要的也是最大的问题是我自己本身，于是我边练习冥想技巧边来发现自己的问题。自身问题一，我常常会去要求别人却没有用心体会对方的感受，慢慢会引起别人的反感。自身问题二，我常常会以炫耀的口吻讲述自己的经历和想法，让对方感觉不愉快。自身问题三，我常常会想妥协而装做一副顺从的样子，让别人有了更多负担，也让事情进展有些尴尬。自身问题四，我常常心急如焚想立刻搞定某事而选择比较激进的做法，让人会觉得我不靠谱，或者不尊重他们。自身问题五，与人交流成为我了的负担，我宁愿自己辛苦点去搞定也不愿意或者说恐惧与人打交道。即使我知道这些问题的存在，我仍然不知道该如何去改进，因为我没有找到解决问题的方向。就像上学时一直喜欢玩耍没有好好学习一样，我知道好好学习的重要性，但就是坐不下来安静学习。我觉得是因为我没有get到某个点。这和我现在所面临的问题有点相似，明知道有问题，明知道该如何如何去做，但就是做不到。很多时候我们都是撞的很痛了才下定决心去改，但这时通常已经很迟了，我不想每次都等到我痛到骨子里了才去改。于是我问自己，我需要get什么点？我回忆了下，长大成人后喜欢上了自律和学习的过程，我为什么会有转变，我是怎么转变过来的。我依稀记得，长大成人后，逐渐喜欢上学习的起点，是因为我第一次获得学习上的成就感开始的，可能这个成就感是非常微不足道的一点点，但足以敲开了我对此感兴趣的大门。随着我不断深入研究，慢慢的我被一次次的成就感所激励着不断前进，许多正向的反馈在我的生活中不断冒出，中间也有些许负向的反馈，但由于相对正向反馈来说量少我还能克服它们。这个过程中最重要的是第一次正向反馈，当我感觉到自己的努力有了回报，我就更感兴趣去深入研究它们。如果在开始的时候，一次次又一次的正向反馈不断袭来，我就能感觉到我自己找对了方法，就像找到了金钥匙那样，不断向这个方向前进，直到遇到更大的瓶颈。当遇到更大的瓶颈时，我则需要更换思路和方法，如果没有找对思路和方法，则会继续原地踏步，常常会因为原地踏步时间太久而感到沮丧和气馁，因此而懈怠并且开始退步。想到这里，我想着能不能根据这个途径，先去找些改善的行动项做起来，从而获得正向反馈，再根据这个正向反馈来一步步改善我的行为。这当然是很难的，起步的时候更是艰难，特别是第一次的正向反馈可能需要一段比较长时间的积累，我需要保持耐心维持改善行为好一阵。路漫漫其修远兮，吾将上下而求索。希望大家一起加油同我一样来改善自己​",
            "content_html": "<p>最近发现自己的行为和话语给别人的感觉很不好，这源于我自身的性格问题。</p><p>我有很多性格问题，导致生活中、工作中在与人交往过程中就会遇到障碍或瓶颈。</p><p>我很想弄清楚我到底出了什么问题，但一直没弄明白，于是我想好好剖析一下自己。</p><p>也因为最近在学习冥想，这个看起来有点玄乎的词语，是我最近研究的内容，我会专门写一篇文章来详细说明我对它的理解与感受。</p><p>我发现冥想最大的益处就是让我忽略杂念专注于当前所做的事，在专注过程中不断发现当前事物中以前没有被我发现的细节，这些细节很多时候都是关键中的关键。</p><p>当然最重要的也是最大的问题是我自己本身，于是我边练习冥想技巧边来发现自己的问题。</p><p>自身问题一，我常常会去要求别人却没有用心体会对方的感受，慢慢会引起别人的反感。</p><p>自身问题二，我常常会以炫耀的口吻讲述自己的经历和想法，让对方感觉不愉快。</p><p>自身问题三，我常常会想妥协而装做一副顺从的样子，让别人有了更多负担，也让事情进展有些尴尬。</p><p>自身问题四，我常常心急如焚想立刻搞定某事而选择比较激进的做法，让人会觉得我不靠谱，或者不尊重他们。</p><p>自身问题五，与人交流成为我了的负担，我宁愿自己辛苦点去搞定也不愿意或者说恐惧与人打交道。</p><p>即使我知道这些问题的存在，我仍然不知道该如何去改进，因为我没有找到解决问题的方向。</p><p>就像上学时一直喜欢玩耍没有好好学习一样，我知道好好学习的重要性，但就是坐不下来安静学习。</p><p>我觉得是因为我没有get到某个点。这和我现在所面临的问题有点相似，明知道有问题，明知道该如何如何去做，但就是做不到。</p><p>很多时候我们都是撞的很痛了才下定决心去改，但这时通常已经很迟了，我不想每次都等到我痛到骨子里了才去改。</p><p>于是我问自己，我需要get什么点？</p><h4 id=\"我回忆了下长大成人后喜欢上了自律和学习的过程我为什么会有转变我是怎么转变过来的\">我回忆了下，长大成人后喜欢上了自律和学习的过程，我为什么会有转变，我是怎么转变过来的。</h4><h4 id=\"我依稀记得长大成人后逐渐喜欢上学习的起点是因为我第一次获得学习上的成就感开始的可能这个成就感是非常微不足道的一点点但足以敲开了我对此感兴趣的大门随着我不断深入研究慢慢的我被一次次的成就感所激励着不断前进许多正向的反馈在我的生活中不断冒出中间也有些许负向的反馈但由于相对正向反馈来说量少我还能克服它们\">我依稀记得，长大成人后，逐渐喜欢上学习的起点，是因为我第一次获得学习上的成就感开始的，可能这个成就感是非常微不足道的一点点，但足以敲开了我对此感兴趣的大门。随着我不断深入研究，慢慢的我被一次次的成就感所激励着不断前进，许多正向的反馈在我的生活中不断冒出，中间也有些许负向的反馈，但由于相对正向反馈来说量少我还能克服它们。</h4><h4 id=\"这个过程中最重要的是第一次正向反馈当我感觉到自己的努力有了回报我就更感兴趣去深入研究它们如果在开始的时候一次次又一次的正向反馈不断袭来我就能感觉到我自己找对了方法就像找到了金钥匙那样不断向这个方向前进直到遇到更大的瓶颈当遇到更大的瓶颈时我则需要更换思路和方法如果没有找对思路和方法则会继续原地踏步常常会因为原地踏步时间太久而感到沮丧和气馁因此而懈怠并且开始退步\">这个过程中最重要的是第一次正向反馈，当我感觉到自己的努力有了回报，我就更感兴趣去深入研究它们。如果在开始的时候，一次次又一次的正向反馈不断袭来，我就能感觉到我自己找对了方法，就像找到了金钥匙那样，不断向这个方向前进，直到遇到更大的瓶颈。当遇到更大的瓶颈时，我则需要更换思路和方法，如果没有找对思路和方法，则会继续原地踏步，常常会因为原地踏步时间太久而感到沮丧和气馁，因此而懈怠并且开始退步。</h4><h4 id=\"想到这里我想着能不能根据这个途径先去找些改善的行动项做起来从而获得正向反馈再根据这个正向反馈来一步步改善我的行为\">想到这里，我想着能不能根据这个途径，先去找些改善的行动项做起来，从而获得正向反馈，再根据这个正向反馈来一步步改善我的行为。</h4><h4 id=\"这当然是很难的起步的时候更是艰难特别是第一次的正向反馈可能需要一段比较长时间的积累我需要保持耐心维持改善行为好一阵\">这当然是很难的，起步的时候更是艰难，特别是第一次的正向反馈可能需要一段比较长时间的积累，我需要保持耐心维持改善行为好一阵。</h4><h4 id=\"路漫漫其修远兮吾将上下而求索\">路漫漫其修远兮，吾将上下而求索。</h4><h3 id=\"希望大家一起加油同我一样来改善自己\">希望大家一起加油同我一样来改善自己​</h3>",
            "url": "http://www.luzexi.com/2020/11/21/%E5%90%91%E5%86%85%E7%9C%8B%E8%87%AA%E5%B7%B110",
            
            
            
            
            
            "date_published": "2020-11-21T00:00:00+08:00",
            "date_modified": "2020-11-21T00:00:00+08:00",
            
                "author":  {
                "name": "Jesse Lu",
                "url": "http://www.luzexi.com",
                "avatar": null
                }
                
            
        }
    
    ]
}